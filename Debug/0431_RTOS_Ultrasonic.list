
0431_RTOS_Ultrasonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08008768  08008768  00018768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089c8  080089c8  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080089c8  080089c8  000189c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089d0  080089d0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089d0  080089d0  000189d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089d4  080089d4  000189d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080089d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004554  20000060  08008a38  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200045b4  08008a38  000245b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001af43  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044bc  00000000  00000000  0003b016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001848  00000000  00000000  0003f4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012b2  00000000  00000000  00040d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a3a0  00000000  00000000  00041fd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f41b  00000000  00000000  0005c372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a7eb  00000000  00000000  0007b78d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000694c  00000000  00000000  00115f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0011c8c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008750 	.word	0x08008750

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08008750 	.word	0x08008750

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2iz>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d215      	bcs.n	8000882 <__aeabi_d2iz+0x36>
 8000856:	d511      	bpl.n	800087c <__aeabi_d2iz+0x30>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d912      	bls.n	8000888 <__aeabi_d2iz+0x3c>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000872:	fa23 f002 	lsr.w	r0, r3, r2
 8000876:	bf18      	it	ne
 8000878:	4240      	negne	r0, r0
 800087a:	4770      	bx	lr
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	4770      	bx	lr
 8000882:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000886:	d105      	bne.n	8000894 <__aeabi_d2iz+0x48>
 8000888:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800088c:	bf08      	it	eq
 800088e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b970 	b.w	8000b94 <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9e08      	ldr	r6, [sp, #32]
 80008d2:	460d      	mov	r5, r1
 80008d4:	4604      	mov	r4, r0
 80008d6:	460f      	mov	r7, r1
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d14a      	bne.n	8000972 <__udivmoddi4+0xa6>
 80008dc:	428a      	cmp	r2, r1
 80008de:	4694      	mov	ip, r2
 80008e0:	d965      	bls.n	80009ae <__udivmoddi4+0xe2>
 80008e2:	fab2 f382 	clz	r3, r2
 80008e6:	b143      	cbz	r3, 80008fa <__udivmoddi4+0x2e>
 80008e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008ec:	f1c3 0220 	rsb	r2, r3, #32
 80008f0:	409f      	lsls	r7, r3
 80008f2:	fa20 f202 	lsr.w	r2, r0, r2
 80008f6:	4317      	orrs	r7, r2
 80008f8:	409c      	lsls	r4, r3
 80008fa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008fe:	fa1f f58c 	uxth.w	r5, ip
 8000902:	fbb7 f1fe 	udiv	r1, r7, lr
 8000906:	0c22      	lsrs	r2, r4, #16
 8000908:	fb0e 7711 	mls	r7, lr, r1, r7
 800090c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000910:	fb01 f005 	mul.w	r0, r1, r5
 8000914:	4290      	cmp	r0, r2
 8000916:	d90a      	bls.n	800092e <__udivmoddi4+0x62>
 8000918:	eb1c 0202 	adds.w	r2, ip, r2
 800091c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000920:	f080 811c 	bcs.w	8000b5c <__udivmoddi4+0x290>
 8000924:	4290      	cmp	r0, r2
 8000926:	f240 8119 	bls.w	8000b5c <__udivmoddi4+0x290>
 800092a:	3902      	subs	r1, #2
 800092c:	4462      	add	r2, ip
 800092e:	1a12      	subs	r2, r2, r0
 8000930:	b2a4      	uxth	r4, r4
 8000932:	fbb2 f0fe 	udiv	r0, r2, lr
 8000936:	fb0e 2210 	mls	r2, lr, r0, r2
 800093a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800093e:	fb00 f505 	mul.w	r5, r0, r5
 8000942:	42a5      	cmp	r5, r4
 8000944:	d90a      	bls.n	800095c <__udivmoddi4+0x90>
 8000946:	eb1c 0404 	adds.w	r4, ip, r4
 800094a:	f100 32ff 	add.w	r2, r0, #4294967295
 800094e:	f080 8107 	bcs.w	8000b60 <__udivmoddi4+0x294>
 8000952:	42a5      	cmp	r5, r4
 8000954:	f240 8104 	bls.w	8000b60 <__udivmoddi4+0x294>
 8000958:	4464      	add	r4, ip
 800095a:	3802      	subs	r0, #2
 800095c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000960:	1b64      	subs	r4, r4, r5
 8000962:	2100      	movs	r1, #0
 8000964:	b11e      	cbz	r6, 800096e <__udivmoddi4+0xa2>
 8000966:	40dc      	lsrs	r4, r3
 8000968:	2300      	movs	r3, #0
 800096a:	e9c6 4300 	strd	r4, r3, [r6]
 800096e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000972:	428b      	cmp	r3, r1
 8000974:	d908      	bls.n	8000988 <__udivmoddi4+0xbc>
 8000976:	2e00      	cmp	r6, #0
 8000978:	f000 80ed 	beq.w	8000b56 <__udivmoddi4+0x28a>
 800097c:	2100      	movs	r1, #0
 800097e:	e9c6 0500 	strd	r0, r5, [r6]
 8000982:	4608      	mov	r0, r1
 8000984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000988:	fab3 f183 	clz	r1, r3
 800098c:	2900      	cmp	r1, #0
 800098e:	d149      	bne.n	8000a24 <__udivmoddi4+0x158>
 8000990:	42ab      	cmp	r3, r5
 8000992:	d302      	bcc.n	800099a <__udivmoddi4+0xce>
 8000994:	4282      	cmp	r2, r0
 8000996:	f200 80f8 	bhi.w	8000b8a <__udivmoddi4+0x2be>
 800099a:	1a84      	subs	r4, r0, r2
 800099c:	eb65 0203 	sbc.w	r2, r5, r3
 80009a0:	2001      	movs	r0, #1
 80009a2:	4617      	mov	r7, r2
 80009a4:	2e00      	cmp	r6, #0
 80009a6:	d0e2      	beq.n	800096e <__udivmoddi4+0xa2>
 80009a8:	e9c6 4700 	strd	r4, r7, [r6]
 80009ac:	e7df      	b.n	800096e <__udivmoddi4+0xa2>
 80009ae:	b902      	cbnz	r2, 80009b2 <__udivmoddi4+0xe6>
 80009b0:	deff      	udf	#255	; 0xff
 80009b2:	fab2 f382 	clz	r3, r2
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	f040 8090 	bne.w	8000adc <__udivmoddi4+0x210>
 80009bc:	1a8a      	subs	r2, r1, r2
 80009be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009c2:	fa1f fe8c 	uxth.w	lr, ip
 80009c6:	2101      	movs	r1, #1
 80009c8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009cc:	fb07 2015 	mls	r0, r7, r5, r2
 80009d0:	0c22      	lsrs	r2, r4, #16
 80009d2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009d6:	fb0e f005 	mul.w	r0, lr, r5
 80009da:	4290      	cmp	r0, r2
 80009dc:	d908      	bls.n	80009f0 <__udivmoddi4+0x124>
 80009de:	eb1c 0202 	adds.w	r2, ip, r2
 80009e2:	f105 38ff 	add.w	r8, r5, #4294967295
 80009e6:	d202      	bcs.n	80009ee <__udivmoddi4+0x122>
 80009e8:	4290      	cmp	r0, r2
 80009ea:	f200 80cb 	bhi.w	8000b84 <__udivmoddi4+0x2b8>
 80009ee:	4645      	mov	r5, r8
 80009f0:	1a12      	subs	r2, r2, r0
 80009f2:	b2a4      	uxth	r4, r4
 80009f4:	fbb2 f0f7 	udiv	r0, r2, r7
 80009f8:	fb07 2210 	mls	r2, r7, r0, r2
 80009fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a00:	fb0e fe00 	mul.w	lr, lr, r0
 8000a04:	45a6      	cmp	lr, r4
 8000a06:	d908      	bls.n	8000a1a <__udivmoddi4+0x14e>
 8000a08:	eb1c 0404 	adds.w	r4, ip, r4
 8000a0c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a10:	d202      	bcs.n	8000a18 <__udivmoddi4+0x14c>
 8000a12:	45a6      	cmp	lr, r4
 8000a14:	f200 80bb 	bhi.w	8000b8e <__udivmoddi4+0x2c2>
 8000a18:	4610      	mov	r0, r2
 8000a1a:	eba4 040e 	sub.w	r4, r4, lr
 8000a1e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a22:	e79f      	b.n	8000964 <__udivmoddi4+0x98>
 8000a24:	f1c1 0720 	rsb	r7, r1, #32
 8000a28:	408b      	lsls	r3, r1
 8000a2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a32:	fa05 f401 	lsl.w	r4, r5, r1
 8000a36:	fa20 f307 	lsr.w	r3, r0, r7
 8000a3a:	40fd      	lsrs	r5, r7
 8000a3c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a40:	4323      	orrs	r3, r4
 8000a42:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a46:	fa1f fe8c 	uxth.w	lr, ip
 8000a4a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a4e:	0c1c      	lsrs	r4, r3, #16
 8000a50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a54:	fb08 f50e 	mul.w	r5, r8, lr
 8000a58:	42a5      	cmp	r5, r4
 8000a5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a5e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a62:	d90b      	bls.n	8000a7c <__udivmoddi4+0x1b0>
 8000a64:	eb1c 0404 	adds.w	r4, ip, r4
 8000a68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a6c:	f080 8088 	bcs.w	8000b80 <__udivmoddi4+0x2b4>
 8000a70:	42a5      	cmp	r5, r4
 8000a72:	f240 8085 	bls.w	8000b80 <__udivmoddi4+0x2b4>
 8000a76:	f1a8 0802 	sub.w	r8, r8, #2
 8000a7a:	4464      	add	r4, ip
 8000a7c:	1b64      	subs	r4, r4, r5
 8000a7e:	b29d      	uxth	r5, r3
 8000a80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a84:	fb09 4413 	mls	r4, r9, r3, r4
 8000a88:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a8c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a90:	45a6      	cmp	lr, r4
 8000a92:	d908      	bls.n	8000aa6 <__udivmoddi4+0x1da>
 8000a94:	eb1c 0404 	adds.w	r4, ip, r4
 8000a98:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a9c:	d26c      	bcs.n	8000b78 <__udivmoddi4+0x2ac>
 8000a9e:	45a6      	cmp	lr, r4
 8000aa0:	d96a      	bls.n	8000b78 <__udivmoddi4+0x2ac>
 8000aa2:	3b02      	subs	r3, #2
 8000aa4:	4464      	add	r4, ip
 8000aa6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aaa:	fba3 9502 	umull	r9, r5, r3, r2
 8000aae:	eba4 040e 	sub.w	r4, r4, lr
 8000ab2:	42ac      	cmp	r4, r5
 8000ab4:	46c8      	mov	r8, r9
 8000ab6:	46ae      	mov	lr, r5
 8000ab8:	d356      	bcc.n	8000b68 <__udivmoddi4+0x29c>
 8000aba:	d053      	beq.n	8000b64 <__udivmoddi4+0x298>
 8000abc:	b156      	cbz	r6, 8000ad4 <__udivmoddi4+0x208>
 8000abe:	ebb0 0208 	subs.w	r2, r0, r8
 8000ac2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ac6:	fa04 f707 	lsl.w	r7, r4, r7
 8000aca:	40ca      	lsrs	r2, r1
 8000acc:	40cc      	lsrs	r4, r1
 8000ace:	4317      	orrs	r7, r2
 8000ad0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000adc:	f1c3 0120 	rsb	r1, r3, #32
 8000ae0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ae4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ae8:	fa25 f101 	lsr.w	r1, r5, r1
 8000aec:	409d      	lsls	r5, r3
 8000aee:	432a      	orrs	r2, r5
 8000af0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af4:	fa1f fe8c 	uxth.w	lr, ip
 8000af8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afc:	fb07 1510 	mls	r5, r7, r0, r1
 8000b00:	0c11      	lsrs	r1, r2, #16
 8000b02:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b06:	fb00 f50e 	mul.w	r5, r0, lr
 8000b0a:	428d      	cmp	r5, r1
 8000b0c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b10:	d908      	bls.n	8000b24 <__udivmoddi4+0x258>
 8000b12:	eb1c 0101 	adds.w	r1, ip, r1
 8000b16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b1a:	d22f      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b1c:	428d      	cmp	r5, r1
 8000b1e:	d92d      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b20:	3802      	subs	r0, #2
 8000b22:	4461      	add	r1, ip
 8000b24:	1b49      	subs	r1, r1, r5
 8000b26:	b292      	uxth	r2, r2
 8000b28:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b2c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b34:	fb05 f10e 	mul.w	r1, r5, lr
 8000b38:	4291      	cmp	r1, r2
 8000b3a:	d908      	bls.n	8000b4e <__udivmoddi4+0x282>
 8000b3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b40:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b44:	d216      	bcs.n	8000b74 <__udivmoddi4+0x2a8>
 8000b46:	4291      	cmp	r1, r2
 8000b48:	d914      	bls.n	8000b74 <__udivmoddi4+0x2a8>
 8000b4a:	3d02      	subs	r5, #2
 8000b4c:	4462      	add	r2, ip
 8000b4e:	1a52      	subs	r2, r2, r1
 8000b50:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b54:	e738      	b.n	80009c8 <__udivmoddi4+0xfc>
 8000b56:	4631      	mov	r1, r6
 8000b58:	4630      	mov	r0, r6
 8000b5a:	e708      	b.n	800096e <__udivmoddi4+0xa2>
 8000b5c:	4639      	mov	r1, r7
 8000b5e:	e6e6      	b.n	800092e <__udivmoddi4+0x62>
 8000b60:	4610      	mov	r0, r2
 8000b62:	e6fb      	b.n	800095c <__udivmoddi4+0x90>
 8000b64:	4548      	cmp	r0, r9
 8000b66:	d2a9      	bcs.n	8000abc <__udivmoddi4+0x1f0>
 8000b68:	ebb9 0802 	subs.w	r8, r9, r2
 8000b6c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b70:	3b01      	subs	r3, #1
 8000b72:	e7a3      	b.n	8000abc <__udivmoddi4+0x1f0>
 8000b74:	4645      	mov	r5, r8
 8000b76:	e7ea      	b.n	8000b4e <__udivmoddi4+0x282>
 8000b78:	462b      	mov	r3, r5
 8000b7a:	e794      	b.n	8000aa6 <__udivmoddi4+0x1da>
 8000b7c:	4640      	mov	r0, r8
 8000b7e:	e7d1      	b.n	8000b24 <__udivmoddi4+0x258>
 8000b80:	46d0      	mov	r8, sl
 8000b82:	e77b      	b.n	8000a7c <__udivmoddi4+0x1b0>
 8000b84:	3d02      	subs	r5, #2
 8000b86:	4462      	add	r2, ip
 8000b88:	e732      	b.n	80009f0 <__udivmoddi4+0x124>
 8000b8a:	4608      	mov	r0, r1
 8000b8c:	e70a      	b.n	80009a4 <__udivmoddi4+0xd8>
 8000b8e:	4464      	add	r4, ip
 8000b90:	3802      	subs	r0, #2
 8000b92:	e742      	b.n	8000a1a <__udivmoddi4+0x14e>

08000b94 <__aeabi_idiv0>:
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <DelayInit>:
 *      Author: kccistc
 */

#include "delayus.h"

void DelayInit(void) {
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <DelayInit+0x4c>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	4a10      	ldr	r2, [pc, #64]	; (8000be4 <DelayInit+0x4c>)
 8000ba2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ba6:	60d3      	str	r3, [r2, #12]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <DelayInit+0x4c>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	4a0d      	ldr	r2, [pc, #52]	; (8000be4 <DelayInit+0x4c>)
 8000bae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bb2:	60d3      	str	r3, [r2, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <DelayInit+0x50>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <DelayInit+0x50>)
 8000bba:	f023 0301 	bic.w	r3, r3, #1
 8000bbe:	6013      	str	r3, [r2, #0]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <DelayInit+0x50>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a08      	ldr	r2, [pc, #32]	; (8000be8 <DelayInit+0x50>)
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	6013      	str	r3, [r2, #0]

	DWT->CYCCNT = 0;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <DelayInit+0x50>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	605a      	str	r2, [r3, #4]

	/* 3 NO OPERATION instructions */
	__ASM volatile ("NOP");
 8000bd2:	bf00      	nop
	__ASM volatile ("NOP");
 8000bd4:	bf00      	nop
	__ASM volatile ("NOP");
 8000bd6:	bf00      	nop
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000edf0 	.word	0xe000edf0
 8000be8:	e0001000 	.word	0xe0001000

08000bec <DelayUS>:

void DelayUS(uint32_t us) {
 8000bec:	b480      	push	{r7}
 8000bee:	b087      	sub	sp, #28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 8000bf4:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <DelayUS+0x44>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <DelayUS+0x48>)
 8000bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfe:	0c9a      	lsrs	r2, r3, #18
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	fb02 f303 	mul.w	r3, r2, r3
 8000c06:	617b      	str	r3, [r7, #20]
	uint32_t start = DWT->CYCCNT;
 8000c08:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <DelayUS+0x4c>)
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	613b      	str	r3, [r7, #16]
	volatile uint32_t cnt;

	do {
		cnt = DWT->CYCCNT - start;
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <DelayUS+0x4c>)
 8000c10:	685a      	ldr	r2, [r3, #4]
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	60fb      	str	r3, [r7, #12]
	} while (cnt < cycles);
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	697a      	ldr	r2, [r7, #20]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d8f6      	bhi.n	8000c0e <DelayUS+0x22>
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	371c      	adds	r7, #28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000000 	.word	0x20000000
 8000c34:	431bde83 	.word	0x431bde83
 8000c38:	e0001000 	.word	0xe0001000

08000c3c <Que_init>:
 *      Author: kccistc
 */
#include "Queue.h"

void Que_init(Que_t *Que)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	Que->head = 0;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2200      	movs	r2, #0
 8000c48:	669a      	str	r2, [r3, #104]	; 0x68
	Que->tail = 0;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	665a      	str	r2, [r3, #100]	; 0x64
	Que->QueCounter = 0;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	66da      	str	r2, [r3, #108]	; 0x6c
	Que->cmpltFlag = 0;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <setQueFlag>:

void setQueFlag(Que_t *Que, int flagState){
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
	Que->cmpltFlag = flagState;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	671a      	str	r2, [r3, #112]	; 0x70
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <getQueFlag>:

int getQueFlag(Que_t *Que){
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	return Que->cmpltFlag;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <QueFull>:


int QueFull(Que_t *Que)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	//if(head == ((tail+1) % BUF_SIZE))
	if(Que->QueCounter == BUF_SIZE)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000ca8:	2b64      	cmp	r3, #100	; 0x64
 8000caa:	d101      	bne.n	8000cb0 <QueFull+0x14>
		return 1;
 8000cac:	2301      	movs	r3, #1
 8000cae:	e000      	b.n	8000cb2 <QueFull+0x16>
	else
		return 0;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <QueEmpty>:
int QueEmpty(Que_t *Que)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
	//if(head == tail)
	if(Que->QueCounter == 0)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d101      	bne.n	8000cd2 <QueEmpty+0x14>
		return 1;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e000      	b.n	8000cd4 <QueEmpty+0x16>
	else
		return 0;
 8000cd2:	2300      	movs	r3, #0
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <enQue>:

void enQue(Que_t *Que, uint8_t data)			// push(write)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	70fb      	strb	r3, [r7, #3]
	if(QueFull(Que)) return;
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff ffd5 	bl	8000c9c <QueFull>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d119      	bne.n	8000d2c <enQue+0x4c>

	Que->QueBuff[Que->tail] = data;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	78f9      	ldrb	r1, [r7, #3]
 8000d00:	54d1      	strb	r1, [r2, r3]
	Que->tail = (Que->tail+1) % BUF_SIZE;			// tail : 0~3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000d06:	1c5a      	adds	r2, r3, #1
 8000d08:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <enQue+0x54>)
 8000d0a:	fb83 1302 	smull	r1, r3, r3, r2
 8000d0e:	1159      	asrs	r1, r3, #5
 8000d10:	17d3      	asrs	r3, r2, #31
 8000d12:	1acb      	subs	r3, r1, r3
 8000d14:	2164      	movs	r1, #100	; 0x64
 8000d16:	fb01 f303 	mul.w	r3, r1, r3
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	6653      	str	r3, [r2, #100]	; 0x64
	Que->QueCounter++;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000d24:	1c5a      	adds	r2, r3, #1
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	66da      	str	r2, [r3, #108]	; 0x6c
 8000d2a:	e000      	b.n	8000d2e <enQue+0x4e>
	if(QueFull(Que)) return;
 8000d2c:	bf00      	nop
}
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	51eb851f 	.word	0x51eb851f

08000d38 <deQue>:

uint8_t deQue(Que_t *Que)			// pop(read)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	if(QueEmpty(Que)) return -1;
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f7ff ffbc 	bl	8000cbe <QueEmpty>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <deQue+0x18>
 8000d4c:	23ff      	movs	r3, #255	; 0xff
 8000d4e:	e019      	b.n	8000d84 <deQue+0x4c>

	uint8_t temp = Que->QueBuff[Que->head];
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	5cd3      	ldrb	r3, [r2, r3]
 8000d58:	73fb      	strb	r3, [r7, #15]
	Que->head = (Que->head+1) % BUF_SIZE;			// head : 0~3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d5e:	1c5a      	adds	r2, r3, #1
 8000d60:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <deQue+0x54>)
 8000d62:	fb83 1302 	smull	r1, r3, r3, r2
 8000d66:	1159      	asrs	r1, r3, #5
 8000d68:	17d3      	asrs	r3, r2, #31
 8000d6a:	1acb      	subs	r3, r1, r3
 8000d6c:	2164      	movs	r1, #100	; 0x64
 8000d6e:	fb01 f303 	mul.w	r3, r1, r3
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	6693      	str	r3, [r2, #104]	; 0x68
	Que->QueCounter--;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000d7c:	1e5a      	subs	r2, r3, #1
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	66da      	str	r2, [r3, #108]	; 0x6c

	return temp;
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	51eb851f 	.word	0x51eb851f

08000d90 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <vApplicationGetIdleTaskMemory+0x2c>)
 8000da0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	4a06      	ldr	r2, [pc, #24]	; (8000dc0 <vApplicationGetIdleTaskMemory+0x30>)
 8000da6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2280      	movs	r2, #128	; 0x80
 8000dac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000dae:	bf00      	nop
 8000db0:	3714      	adds	r7, #20
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	2000007c 	.word	0x2000007c
 8000dc0:	2000011c 	.word	0x2000011c

08000dc4 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t uart1RxData, uart2RxData;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a15      	ldr	r2, [pc, #84]	; (8000e28 <HAL_UART_RxCpltCallback+0x64>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d10f      	bne.n	8000df6 <HAL_UART_RxCpltCallback+0x32>
		Listener_UART_ISR_Process(uart1RxData);
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_UART_RxCpltCallback+0x68>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f001 f846 	bl	8001e6c <Listener_UART_ISR_Process>
		HAL_UART_Transmit(&huart1, &uart1RxData, 1, 100);
 8000de0:	2364      	movs	r3, #100	; 0x64
 8000de2:	2201      	movs	r2, #1
 8000de4:	4911      	ldr	r1, [pc, #68]	; (8000e2c <HAL_UART_RxCpltCallback+0x68>)
 8000de6:	4812      	ldr	r0, [pc, #72]	; (8000e30 <HAL_UART_RxCpltCallback+0x6c>)
 8000de8:	f004 fcaa 	bl	8005740 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart1, &uart1RxData, 1);
 8000dec:	2201      	movs	r2, #1
 8000dee:	490f      	ldr	r1, [pc, #60]	; (8000e2c <HAL_UART_RxCpltCallback+0x68>)
 8000df0:	480f      	ldr	r0, [pc, #60]	; (8000e30 <HAL_UART_RxCpltCallback+0x6c>)
 8000df2:	f004 fd30 	bl	8005856 <HAL_UART_Receive_IT>
	}
	if (huart->Instance == USART2) {
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <HAL_UART_RxCpltCallback+0x70>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d10f      	bne.n	8000e20 <HAL_UART_RxCpltCallback+0x5c>
		Listener_UART_ISR_Process(uart2RxData);
 8000e00:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <HAL_UART_RxCpltCallback+0x74>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f001 f831 	bl	8001e6c <Listener_UART_ISR_Process>
		HAL_UART_Transmit(&huart2, &uart2RxData, 1, 100);
 8000e0a:	2364      	movs	r3, #100	; 0x64
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	490a      	ldr	r1, [pc, #40]	; (8000e38 <HAL_UART_RxCpltCallback+0x74>)
 8000e10:	480a      	ldr	r0, [pc, #40]	; (8000e3c <HAL_UART_RxCpltCallback+0x78>)
 8000e12:	f004 fc95 	bl	8005740 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &uart2RxData, 1);
 8000e16:	2201      	movs	r2, #1
 8000e18:	4907      	ldr	r1, [pc, #28]	; (8000e38 <HAL_UART_RxCpltCallback+0x74>)
 8000e1a:	4808      	ldr	r0, [pc, #32]	; (8000e3c <HAL_UART_RxCpltCallback+0x78>)
 8000e1c:	f004 fd1b 	bl	8005856 <HAL_UART_Receive_IT>
	}
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40011000 	.word	0x40011000
 8000e2c:	20000530 	.word	0x20000530
 8000e30:	20000490 	.word	0x20000490
 8000e34:	40004400 	.word	0x40004400
 8000e38:	20000531 	.word	0x20000531
 8000e3c:	200004d8 	.word	0x200004d8

08000e40 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	80fb      	strh	r3, [r7, #6]
	Listener_US_ISR_Process(GPIO_Pin);
 8000e4a:	88fb      	ldrh	r3, [r7, #6]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f001 f827 	bl	8001ea0 <Listener_US_ISR_Process>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e5c:	b5b0      	push	{r4, r5, r7, lr}
 8000e5e:	b09c      	sub	sp, #112	; 0x70
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e62:	f001 fe55 	bl	8002b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e66:	f000 f885 	bl	8000f74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e6a:	f000 fad9 	bl	8001420 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e6e:	f000 faad 	bl	80013cc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000e72:	f000 f8e7 	bl	8001044 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000e76:	f000 fa7f 	bl	8001378 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000e7a:	f000 f9ad 	bl	80011d8 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000e7e:	f000 f90f 	bl	80010a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e82:	f000 f95d 	bl	8001140 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000e86:	f000 fa29 	bl	80012dc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	LCD_init(&hi2c1);
 8000e8a:	482d      	ldr	r0, [pc, #180]	; (8000f40 <main+0xe4>)
 8000e8c:	f001 fafe 	bl	800248c <LCD_init>
	HAL_UART_Receive_IT(&huart2, &uart2RxData, 1);
 8000e90:	2201      	movs	r2, #1
 8000e92:	492c      	ldr	r1, [pc, #176]	; (8000f44 <main+0xe8>)
 8000e94:	482c      	ldr	r0, [pc, #176]	; (8000f48 <main+0xec>)
 8000e96:	f004 fcde 	bl	8005856 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart1, &uart1RxData, 1);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	492b      	ldr	r1, [pc, #172]	; (8000f4c <main+0xf0>)
 8000e9e:	482c      	ldr	r0, [pc, #176]	; (8000f50 <main+0xf4>)
 8000ea0:	f004 fcd9 	bl	8005856 <HAL_UART_Receive_IT>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000ea4:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <main+0xf8>)
 8000ea6:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000eaa:	461d      	mov	r5, r3
 8000eac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000eb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000eb8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f005 fc63 	bl	800678a <osThreadCreate>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	4a24      	ldr	r2, [pc, #144]	; (8000f58 <main+0xfc>)
 8000ec8:	6013      	str	r3, [r2, #0]

  /* definition and creation of listenerTask */
  osThreadDef(listenerTask, ListenerTask, osPriorityNormal, 0, 128);
 8000eca:	4b24      	ldr	r3, [pc, #144]	; (8000f5c <main+0x100>)
 8000ecc:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000ed0:	461d      	mov	r5, r3
 8000ed2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ed6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000eda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  listenerTaskHandle = osThreadCreate(osThread(listenerTask), NULL);
 8000ede:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f005 fc50 	bl	800678a <osThreadCreate>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4a1c      	ldr	r2, [pc, #112]	; (8000f60 <main+0x104>)
 8000eee:	6013      	str	r3, [r2, #0]

  /* definition and creation of controllerTask */
  osThreadDef(controllerTask, ControllerTask, osPriorityNormal, 0, 128);
 8000ef0:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <main+0x108>)
 8000ef2:	f107 041c 	add.w	r4, r7, #28
 8000ef6:	461d      	mov	r5, r3
 8000ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000efc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controllerTaskHandle = osThreadCreate(osThread(controllerTask), NULL);
 8000f04:	f107 031c 	add.w	r3, r7, #28
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f005 fc3d 	bl	800678a <osThreadCreate>
 8000f10:	4603      	mov	r3, r0
 8000f12:	4a15      	ldr	r2, [pc, #84]	; (8000f68 <main+0x10c>)
 8000f14:	6013      	str	r3, [r2, #0]

  /* definition and creation of presenterTask */
  osThreadDef(presenterTask, PresenterTask, osPriorityNormal, 0, 128);
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <main+0x110>)
 8000f18:	463c      	mov	r4, r7
 8000f1a:	461d      	mov	r5, r3
 8000f1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  presenterTaskHandle = osThreadCreate(osThread(presenterTask), NULL);
 8000f28:	463b      	mov	r3, r7
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f005 fc2c 	bl	800678a <osThreadCreate>
 8000f32:	4603      	mov	r3, r0
 8000f34:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <main+0x114>)
 8000f36:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f38:	f005 fc20 	bl	800677c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000f3c:	e7fe      	b.n	8000f3c <main+0xe0>
 8000f3e:	bf00      	nop
 8000f40:	2000031c 	.word	0x2000031c
 8000f44:	20000531 	.word	0x20000531
 8000f48:	200004d8 	.word	0x200004d8
 8000f4c:	20000530 	.word	0x20000530
 8000f50:	20000490 	.word	0x20000490
 8000f54:	08008774 	.word	0x08008774
 8000f58:	20000520 	.word	0x20000520
 8000f5c:	080087a0 	.word	0x080087a0
 8000f60:	20000524 	.word	0x20000524
 8000f64:	080087cc 	.word	0x080087cc
 8000f68:	20000528 	.word	0x20000528
 8000f6c:	080087f8 	.word	0x080087f8
 8000f70:	2000052c 	.word	0x2000052c

08000f74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b094      	sub	sp, #80	; 0x50
 8000f78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7a:	f107 0320 	add.w	r3, r7, #32
 8000f7e:	2230      	movs	r2, #48	; 0x30
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f006 ff0a 	bl	8007d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f88:	f107 030c 	add.w	r3, r7, #12
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	4b27      	ldr	r3, [pc, #156]	; (800103c <SystemClock_Config+0xc8>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	4a26      	ldr	r2, [pc, #152]	; (800103c <SystemClock_Config+0xc8>)
 8000fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa8:	4b24      	ldr	r3, [pc, #144]	; (800103c <SystemClock_Config+0xc8>)
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	4b21      	ldr	r3, [pc, #132]	; (8001040 <SystemClock_Config+0xcc>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a20      	ldr	r2, [pc, #128]	; (8001040 <SystemClock_Config+0xcc>)
 8000fbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <SystemClock_Config+0xcc>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000fe8:	2364      	movs	r3, #100	; 0x64
 8000fea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fec:	2302      	movs	r3, #2
 8000fee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff4:	f107 0320 	add.w	r3, r7, #32
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f002 fde9 	bl	8003bd0 <HAL_RCC_OscConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001004:	f000 fb1c 	bl	8001640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001008:	230f      	movs	r3, #15
 800100a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100c:	2302      	movs	r3, #2
 800100e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001018:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800101e:	f107 030c 	add.w	r3, r7, #12
 8001022:	2103      	movs	r1, #3
 8001024:	4618      	mov	r0, r3
 8001026:	f003 f84b 	bl	80040c0 <HAL_RCC_ClockConfig>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001030:	f000 fb06 	bl	8001640 <Error_Handler>
  }
}
 8001034:	bf00      	nop
 8001036:	3750      	adds	r7, #80	; 0x50
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40023800 	.word	0x40023800
 8001040:	40007000 	.word	0x40007000

08001044 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_I2C1_Init+0x50>)
 800104a:	4a13      	ldr	r2, [pc, #76]	; (8001098 <MX_I2C1_Init+0x54>)
 800104c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_I2C1_Init+0x50>)
 8001050:	4a12      	ldr	r2, [pc, #72]	; (800109c <MX_I2C1_Init+0x58>)
 8001052:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_I2C1_Init+0x50>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <MX_I2C1_Init+0x50>)
 800105c:	2200      	movs	r2, #0
 800105e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <MX_I2C1_Init+0x50>)
 8001062:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001066:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001068:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <MX_I2C1_Init+0x50>)
 800106a:	2200      	movs	r2, #0
 800106c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MX_I2C1_Init+0x50>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <MX_I2C1_Init+0x50>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <MX_I2C1_Init+0x50>)
 800107c:	2200      	movs	r2, #0
 800107e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001080:	4804      	ldr	r0, [pc, #16]	; (8001094 <MX_I2C1_Init+0x50>)
 8001082:	f002 f907 	bl	8003294 <HAL_I2C_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800108c:	f000 fad8 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	2000031c 	.word	0x2000031c
 8001098:	40005400 	.word	0x40005400
 800109c:	000186a0 	.word	0x000186a0

080010a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b4:	463b      	mov	r3, r7
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010bc:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <MX_TIM1_Init+0x98>)
 80010be:	4a1f      	ldr	r2, [pc, #124]	; (800113c <MX_TIM1_Init+0x9c>)
 80010c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 80010c2:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <MX_TIM1_Init+0x98>)
 80010c4:	2263      	movs	r2, #99	; 0x63
 80010c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c8:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <MX_TIM1_Init+0x98>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010ce:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <MX_TIM1_Init+0x98>)
 80010d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d6:	4b18      	ldr	r3, [pc, #96]	; (8001138 <MX_TIM1_Init+0x98>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010dc:	4b16      	ldr	r3, [pc, #88]	; (8001138 <MX_TIM1_Init+0x98>)
 80010de:	2200      	movs	r2, #0
 80010e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <MX_TIM1_Init+0x98>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010e8:	4813      	ldr	r0, [pc, #76]	; (8001138 <MX_TIM1_Init+0x98>)
 80010ea:	f003 fa3b 	bl	8004564 <HAL_TIM_Base_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80010f4:	f000 faa4 	bl	8001640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010fe:	f107 0308 	add.w	r3, r7, #8
 8001102:	4619      	mov	r1, r3
 8001104:	480c      	ldr	r0, [pc, #48]	; (8001138 <MX_TIM1_Init+0x98>)
 8001106:	f003 fe81 	bl	8004e0c <HAL_TIM_ConfigClockSource>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001110:	f000 fa96 	bl	8001640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001114:	2300      	movs	r3, #0
 8001116:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800111c:	463b      	mov	r3, r7
 800111e:	4619      	mov	r1, r3
 8001120:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_TIM1_Init+0x98>)
 8001122:	f004 fa3b 	bl	800559c <HAL_TIMEx_MasterConfigSynchronization>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800112c:	f000 fa88 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000370 	.word	0x20000370
 800113c:	40010000 	.word	0x40010000

08001140 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001146:	f107 0308 	add.w	r3, r7, #8
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001154:	463b      	mov	r3, r7
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800115c:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <MX_TIM2_Init+0x94>)
 800115e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001162:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8001164:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <MX_TIM2_Init+0x94>)
 8001166:	2263      	movs	r2, #99	; 0x63
 8001168:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <MX_TIM2_Init+0x94>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001170:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <MX_TIM2_Init+0x94>)
 8001172:	f04f 32ff 	mov.w	r2, #4294967295
 8001176:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001178:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <MX_TIM2_Init+0x94>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <MX_TIM2_Init+0x94>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001184:	4813      	ldr	r0, [pc, #76]	; (80011d4 <MX_TIM2_Init+0x94>)
 8001186:	f003 f9ed 	bl	8004564 <HAL_TIM_Base_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001190:	f000 fa56 	bl	8001640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001198:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800119a:	f107 0308 	add.w	r3, r7, #8
 800119e:	4619      	mov	r1, r3
 80011a0:	480c      	ldr	r0, [pc, #48]	; (80011d4 <MX_TIM2_Init+0x94>)
 80011a2:	f003 fe33 	bl	8004e0c <HAL_TIM_ConfigClockSource>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011ac:	f000 fa48 	bl	8001640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b0:	2300      	movs	r3, #0
 80011b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011b8:	463b      	mov	r3, r7
 80011ba:	4619      	mov	r1, r3
 80011bc:	4805      	ldr	r0, [pc, #20]	; (80011d4 <MX_TIM2_Init+0x94>)
 80011be:	f004 f9ed 	bl	800559c <HAL_TIMEx_MasterConfigSynchronization>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011c8:	f000 fa3a 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011cc:	bf00      	nop
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	200003b8 	.word	0x200003b8

080011d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08e      	sub	sp, #56	; 0x38
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ec:	f107 0320 	add.w	r3, r7, #32
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
 8001204:	615a      	str	r2, [r3, #20]
 8001206:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001208:	4b32      	ldr	r3, [pc, #200]	; (80012d4 <MX_TIM3_Init+0xfc>)
 800120a:	4a33      	ldr	r2, [pc, #204]	; (80012d8 <MX_TIM3_Init+0x100>)
 800120c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 800120e:	4b31      	ldr	r3, [pc, #196]	; (80012d4 <MX_TIM3_Init+0xfc>)
 8001210:	2263      	movs	r2, #99	; 0x63
 8001212:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001214:	4b2f      	ldr	r3, [pc, #188]	; (80012d4 <MX_TIM3_Init+0xfc>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800121a:	4b2e      	ldr	r3, [pc, #184]	; (80012d4 <MX_TIM3_Init+0xfc>)
 800121c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001220:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001222:	4b2c      	ldr	r3, [pc, #176]	; (80012d4 <MX_TIM3_Init+0xfc>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001228:	4b2a      	ldr	r3, [pc, #168]	; (80012d4 <MX_TIM3_Init+0xfc>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800122e:	4829      	ldr	r0, [pc, #164]	; (80012d4 <MX_TIM3_Init+0xfc>)
 8001230:	f003 f998 	bl	8004564 <HAL_TIM_Base_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800123a:	f000 fa01 	bl	8001640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800123e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001244:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001248:	4619      	mov	r1, r3
 800124a:	4822      	ldr	r0, [pc, #136]	; (80012d4 <MX_TIM3_Init+0xfc>)
 800124c:	f003 fdde 	bl	8004e0c <HAL_TIM_ConfigClockSource>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001256:	f000 f9f3 	bl	8001640 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800125a:	481e      	ldr	r0, [pc, #120]	; (80012d4 <MX_TIM3_Init+0xfc>)
 800125c:	f003 fab6 	bl	80047cc <HAL_TIM_PWM_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001266:	f000 f9eb 	bl	8001640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126e:	2300      	movs	r3, #0
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001272:	f107 0320 	add.w	r3, r7, #32
 8001276:	4619      	mov	r1, r3
 8001278:	4816      	ldr	r0, [pc, #88]	; (80012d4 <MX_TIM3_Init+0xfc>)
 800127a:	f004 f98f 	bl	800559c <HAL_TIMEx_MasterConfigSynchronization>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001284:	f000 f9dc 	bl	8001640 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001288:	2360      	movs	r3, #96	; 0x60
 800128a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	2200      	movs	r2, #0
 800129c:	4619      	mov	r1, r3
 800129e:	480d      	ldr	r0, [pc, #52]	; (80012d4 <MX_TIM3_Init+0xfc>)
 80012a0:	f003 fcf2 	bl	8004c88 <HAL_TIM_PWM_ConfigChannel>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80012aa:	f000 f9c9 	bl	8001640 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2204      	movs	r2, #4
 80012b2:	4619      	mov	r1, r3
 80012b4:	4807      	ldr	r0, [pc, #28]	; (80012d4 <MX_TIM3_Init+0xfc>)
 80012b6:	f003 fce7 	bl	8004c88 <HAL_TIM_PWM_ConfigChannel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80012c0:	f000 f9be 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012c4:	4803      	ldr	r0, [pc, #12]	; (80012d4 <MX_TIM3_Init+0xfc>)
 80012c6:	f000 fa9d 	bl	8001804 <HAL_TIM_MspPostInit>

}
 80012ca:	bf00      	nop
 80012cc:	3738      	adds	r7, #56	; 0x38
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000400 	.word	0x20000400
 80012d8:	40000400 	.word	0x40000400

080012dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e2:	f107 0308 	add.w	r3, r7, #8
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f0:	463b      	mov	r3, r7
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012f8:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <MX_TIM4_Init+0x94>)
 80012fa:	4a1e      	ldr	r2, [pc, #120]	; (8001374 <MX_TIM4_Init+0x98>)
 80012fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 80012fe:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <MX_TIM4_Init+0x94>)
 8001300:	2263      	movs	r2, #99	; 0x63
 8001302:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001304:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <MX_TIM4_Init+0x94>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800130a:	4b19      	ldr	r3, [pc, #100]	; (8001370 <MX_TIM4_Init+0x94>)
 800130c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001310:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001312:	4b17      	ldr	r3, [pc, #92]	; (8001370 <MX_TIM4_Init+0x94>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001318:	4b15      	ldr	r3, [pc, #84]	; (8001370 <MX_TIM4_Init+0x94>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800131e:	4814      	ldr	r0, [pc, #80]	; (8001370 <MX_TIM4_Init+0x94>)
 8001320:	f003 f920 	bl	8004564 <HAL_TIM_Base_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800132a:	f000 f989 	bl	8001640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001332:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001334:	f107 0308 	add.w	r3, r7, #8
 8001338:	4619      	mov	r1, r3
 800133a:	480d      	ldr	r0, [pc, #52]	; (8001370 <MX_TIM4_Init+0x94>)
 800133c:	f003 fd66 	bl	8004e0c <HAL_TIM_ConfigClockSource>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001346:	f000 f97b 	bl	8001640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001352:	463b      	mov	r3, r7
 8001354:	4619      	mov	r1, r3
 8001356:	4806      	ldr	r0, [pc, #24]	; (8001370 <MX_TIM4_Init+0x94>)
 8001358:	f004 f920 	bl	800559c <HAL_TIMEx_MasterConfigSynchronization>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001362:	f000 f96d 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000448 	.word	0x20000448
 8001374:	40000800 	.word	0x40000800

08001378 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_USART1_UART_Init+0x4c>)
 800137e:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <MX_USART1_UART_Init+0x50>)
 8001380:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <MX_USART1_UART_Init+0x4c>)
 8001384:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001388:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <MX_USART1_UART_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <MX_USART1_UART_Init+0x4c>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <MX_USART1_UART_Init+0x4c>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_USART1_UART_Init+0x4c>)
 800139e:	220c      	movs	r2, #12
 80013a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <MX_USART1_UART_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_USART1_UART_Init+0x4c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_USART1_UART_Init+0x4c>)
 80013b0:	f004 f976 	bl	80056a0 <HAL_UART_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013ba:	f000 f941 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000490 	.word	0x20000490
 80013c8:	40011000 	.word	0x40011000

080013cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <MX_USART2_UART_Init+0x4c>)
 80013d2:	4a12      	ldr	r2, [pc, #72]	; (800141c <MX_USART2_UART_Init+0x50>)
 80013d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <MX_USART2_UART_Init+0x4c>)
 80013d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <MX_USART2_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <MX_USART2_UART_Init+0x4c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <MX_USART2_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <MX_USART2_UART_Init+0x4c>)
 80013f2:	220c      	movs	r2, #12
 80013f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <MX_USART2_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MX_USART2_UART_Init+0x4c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001402:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_USART2_UART_Init+0x4c>)
 8001404:	f004 f94c 	bl	80056a0 <HAL_UART_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800140e:	f000 f917 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200004d8 	.word	0x200004d8
 800141c:	40004400 	.word	0x40004400

08001420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	4b54      	ldr	r3, [pc, #336]	; (800158c <MX_GPIO_Init+0x16c>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a53      	ldr	r2, [pc, #332]	; (800158c <MX_GPIO_Init+0x16c>)
 8001440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b51      	ldr	r3, [pc, #324]	; (800158c <MX_GPIO_Init+0x16c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b4d      	ldr	r3, [pc, #308]	; (800158c <MX_GPIO_Init+0x16c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a4c      	ldr	r2, [pc, #304]	; (800158c <MX_GPIO_Init+0x16c>)
 800145c:	f043 0304 	orr.w	r3, r3, #4
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b4a      	ldr	r3, [pc, #296]	; (800158c <MX_GPIO_Init+0x16c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0304 	and.w	r3, r3, #4
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	4b46      	ldr	r3, [pc, #280]	; (800158c <MX_GPIO_Init+0x16c>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a45      	ldr	r2, [pc, #276]	; (800158c <MX_GPIO_Init+0x16c>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b43      	ldr	r3, [pc, #268]	; (800158c <MX_GPIO_Init+0x16c>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	4b3f      	ldr	r3, [pc, #252]	; (800158c <MX_GPIO_Init+0x16c>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a3e      	ldr	r2, [pc, #248]	; (800158c <MX_GPIO_Init+0x16c>)
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b3c      	ldr	r3, [pc, #240]	; (800158c <MX_GPIO_Init+0x16c>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_7, GPIO_PIN_RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2185      	movs	r1, #133	; 0x85
 80014aa:	4839      	ldr	r0, [pc, #228]	; (8001590 <MX_GPIO_Init+0x170>)
 80014ac:	f001 fea6 	bl	80031fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80014b0:	2200      	movs	r2, #0
 80014b2:	f44f 7148 	mov.w	r1, #800	; 0x320
 80014b6:	4837      	ldr	r0, [pc, #220]	; (8001594 <MX_GPIO_Init+0x174>)
 80014b8:	f001 fea0 	bl	80031fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_13, GPIO_PIN_RESET);
 80014bc:	2200      	movs	r2, #0
 80014be:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 80014c2:	4835      	ldr	r0, [pc, #212]	; (8001598 <MX_GPIO_Init+0x178>)
 80014c4:	f001 fe9a 	bl	80031fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC2 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_7;
 80014c8:	2385      	movs	r3, #133	; 0x85
 80014ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	482c      	ldr	r0, [pc, #176]	; (8001590 <MX_GPIO_Init+0x170>)
 80014e0:	f001 fcf0 	bl	8002ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC3 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 80014e4:	231a      	movs	r3, #26
 80014e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80014e8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80014ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	4825      	ldr	r0, [pc, #148]	; (8001590 <MX_GPIO_Init+0x170>)
 80014fa:	f001 fce3 	bl	8002ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 80014fe:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001504:	2301      	movs	r3, #1
 8001506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4619      	mov	r1, r3
 8001516:	481f      	ldr	r0, [pc, #124]	; (8001594 <MX_GPIO_Init+0x174>)
 8001518:	f001 fcd4 	bl	8002ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13;
 800151c:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8001520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001522:	2301      	movs	r3, #1
 8001524:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2300      	movs	r3, #0
 800152c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	4619      	mov	r1, r3
 8001534:	4818      	ldr	r0, [pc, #96]	; (8001598 <MX_GPIO_Init+0x178>)
 8001536:	f001 fcc5 	bl	8002ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800153a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800153e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001540:	2300      	movs	r3, #0
 8001542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	4619      	mov	r1, r3
 800154e:	4810      	ldr	r0, [pc, #64]	; (8001590 <MX_GPIO_Init+0x170>)
 8001550:	f001 fcb8 	bl	8002ec4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001554:	2200      	movs	r2, #0
 8001556:	2105      	movs	r1, #5
 8001558:	2007      	movs	r0, #7
 800155a:	f001 fbf7 	bl	8002d4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800155e:	2007      	movs	r0, #7
 8001560:	f001 fc10 	bl	8002d84 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001564:	2200      	movs	r2, #0
 8001566:	2105      	movs	r1, #5
 8001568:	2009      	movs	r0, #9
 800156a:	f001 fbef 	bl	8002d4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800156e:	2009      	movs	r0, #9
 8001570:	f001 fc08 	bl	8002d84 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001574:	2200      	movs	r2, #0
 8001576:	2105      	movs	r1, #5
 8001578:	200a      	movs	r0, #10
 800157a:	f001 fbe7 	bl	8002d4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800157e:	200a      	movs	r0, #10
 8001580:	f001 fc00 	bl	8002d84 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001584:	bf00      	nop
 8001586:	3728      	adds	r7, #40	; 0x28
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40023800 	.word	0x40023800
 8001590:	40020800 	.word	0x40020800
 8001594:	40020000 	.word	0x40020000
 8001598:	40020400 	.word	0x40020400

0800159c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80015a4:	2120      	movs	r1, #32
 80015a6:	4804      	ldr	r0, [pc, #16]	; (80015b8 <StartDefaultTask+0x1c>)
 80015a8:	f001 fe41 	bl	800322e <HAL_GPIO_TogglePin>
		osDelay(500);
 80015ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015b0:	f005 f937 	bl	8006822 <osDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80015b4:	e7f6      	b.n	80015a4 <StartDefaultTask+0x8>
 80015b6:	bf00      	nop
 80015b8:	40020000 	.word	0x40020000

080015bc <ListenerTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ListenerTask */
void ListenerTask(void const * argument)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ListenerTask */
	Listner_init(&htim1, &htim2 ,&htim4);
 80015c4:	4a06      	ldr	r2, [pc, #24]	; (80015e0 <ListenerTask+0x24>)
 80015c6:	4907      	ldr	r1, [pc, #28]	; (80015e4 <ListenerTask+0x28>)
 80015c8:	4807      	ldr	r0, [pc, #28]	; (80015e8 <ListenerTask+0x2c>)
 80015ca:	f000 fc05 	bl	8001dd8 <Listner_init>
	/* Infinite loop */
	for (;;) {
		Listener_Button();
 80015ce:	f000 fc85 	bl	8001edc <Listener_Button>
		Listener_UltraSonic_Distance();
 80015d2:	f000 fca3 	bl	8001f1c <Listener_UltraSonic_Distance>
		osDelay(100);
 80015d6:	2064      	movs	r0, #100	; 0x64
 80015d8:	f005 f923 	bl	8006822 <osDelay>
		Listener_Button();
 80015dc:	e7f7      	b.n	80015ce <ListenerTask+0x12>
 80015de:	bf00      	nop
 80015e0:	20000448 	.word	0x20000448
 80015e4:	200003b8 	.word	0x200003b8
 80015e8:	20000370 	.word	0x20000370

080015ec <ControllerTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ControllerTask */
void ControllerTask(void const * argument)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ControllerTask */
	Controller_init();
 80015f4:	f000 fb1d 	bl	8001c32 <Controller_init>
	/* Infinite loop */
	for (;;) {
		Controller_excuteTask();
 80015f8:	f000 fb23 	bl	8001c42 <Controller_excuteTask>
		osDelay(1);
 80015fc:	2001      	movs	r0, #1
 80015fe:	f005 f910 	bl	8006822 <osDelay>
		Controller_excuteTask();
 8001602:	e7f9      	b.n	80015f8 <ControllerTask+0xc>

08001604 <PresenterTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_PresenterTask */
void PresenterTask(void const * argument)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PresenterTask */
	Presenter_Init();
 800160c:	f000 fdbe 	bl	800218c <Presenter_Init>
	/* Infinite loop */
	for (;;) {
		Presenter_excuteTask();
 8001610:	f000 fdf4 	bl	80021fc <Presenter_excuteTask>
		osDelay(1);
 8001614:	2001      	movs	r0, #1
 8001616:	f005 f904 	bl	8006822 <osDelay>
		Presenter_excuteTask();
 800161a:	e7f9      	b.n	8001610 <PresenterTask+0xc>

0800161c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a04      	ldr	r2, [pc, #16]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d101      	bne.n	8001632 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800162e:	f001 fa91 	bl	8002b54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40014800 	.word	0x40014800

08001640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001644:	b672      	cpsid	i
}
 8001646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001648:	e7fe      	b.n	8001648 <Error_Handler+0x8>
	...

0800164c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_MspInit+0x54>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	4a11      	ldr	r2, [pc, #68]	; (80016a0 <HAL_MspInit+0x54>)
 800165c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001660:	6453      	str	r3, [r2, #68]	; 0x44
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <HAL_MspInit+0x54>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	603b      	str	r3, [r7, #0]
 8001672:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <HAL_MspInit+0x54>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <HAL_MspInit+0x54>)
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167c:	6413      	str	r3, [r2, #64]	; 0x40
 800167e:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <HAL_MspInit+0x54>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	210f      	movs	r1, #15
 800168e:	f06f 0001 	mvn.w	r0, #1
 8001692:	f001 fb5b 	bl	8002d4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800

080016a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	; 0x28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a19      	ldr	r2, [pc, #100]	; (8001728 <HAL_I2C_MspInit+0x84>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d12c      	bne.n	8001720 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	4b18      	ldr	r3, [pc, #96]	; (800172c <HAL_I2C_MspInit+0x88>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a17      	ldr	r2, [pc, #92]	; (800172c <HAL_I2C_MspInit+0x88>)
 80016d0:	f043 0302 	orr.w	r3, r3, #2
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b15      	ldr	r3, [pc, #84]	; (800172c <HAL_I2C_MspInit+0x88>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e8:	2312      	movs	r3, #18
 80016ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f0:	2303      	movs	r3, #3
 80016f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016f4:	2304      	movs	r3, #4
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	480c      	ldr	r0, [pc, #48]	; (8001730 <HAL_I2C_MspInit+0x8c>)
 8001700:	f001 fbe0 	bl	8002ec4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <HAL_I2C_MspInit+0x88>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	4a07      	ldr	r2, [pc, #28]	; (800172c <HAL_I2C_MspInit+0x88>)
 800170e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001712:	6413      	str	r3, [r2, #64]	; 0x40
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <HAL_I2C_MspInit+0x88>)
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001720:	bf00      	nop
 8001722:	3728      	adds	r7, #40	; 0x28
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40005400 	.word	0x40005400
 800172c:	40023800 	.word	0x40023800
 8001730:	40020400 	.word	0x40020400

08001734 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a2c      	ldr	r2, [pc, #176]	; (80017f4 <HAL_TIM_Base_MspInit+0xc0>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d116      	bne.n	8001774 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	4b2b      	ldr	r3, [pc, #172]	; (80017f8 <HAL_TIM_Base_MspInit+0xc4>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	4a2a      	ldr	r2, [pc, #168]	; (80017f8 <HAL_TIM_Base_MspInit+0xc4>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6453      	str	r3, [r2, #68]	; 0x44
 8001756:	4b28      	ldr	r3, [pc, #160]	; (80017f8 <HAL_TIM_Base_MspInit+0xc4>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	210f      	movs	r1, #15
 8001766:	201a      	movs	r0, #26
 8001768:	f001 faf0 	bl	8002d4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800176c:	201a      	movs	r0, #26
 800176e:	f001 fb09 	bl	8002d84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001772:	e03a      	b.n	80017ea <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800177c:	d10e      	bne.n	800179c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <HAL_TIM_Base_MspInit+0xc4>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	4a1c      	ldr	r2, [pc, #112]	; (80017f8 <HAL_TIM_Base_MspInit+0xc4>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6413      	str	r3, [r2, #64]	; 0x40
 800178e:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <HAL_TIM_Base_MspInit+0xc4>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]
}
 800179a:	e026      	b.n	80017ea <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a16      	ldr	r2, [pc, #88]	; (80017fc <HAL_TIM_Base_MspInit+0xc8>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d10e      	bne.n	80017c4 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <HAL_TIM_Base_MspInit+0xc4>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	4a12      	ldr	r2, [pc, #72]	; (80017f8 <HAL_TIM_Base_MspInit+0xc4>)
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	6413      	str	r3, [r2, #64]	; 0x40
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <HAL_TIM_Base_MspInit+0xc4>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
}
 80017c2:	e012      	b.n	80017ea <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a0d      	ldr	r2, [pc, #52]	; (8001800 <HAL_TIM_Base_MspInit+0xcc>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d10d      	bne.n	80017ea <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_TIM_Base_MspInit+0xc4>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	4a08      	ldr	r2, [pc, #32]	; (80017f8 <HAL_TIM_Base_MspInit+0xc4>)
 80017d8:	f043 0304 	orr.w	r3, r3, #4
 80017dc:	6413      	str	r3, [r2, #64]	; 0x40
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_TIM_Base_MspInit+0xc4>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
}
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40010000 	.word	0x40010000
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40000400 	.word	0x40000400
 8001800:	40000800 	.word	0x40000800

08001804 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a12      	ldr	r2, [pc, #72]	; (800186c <HAL_TIM_MspPostInit+0x68>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d11d      	bne.n	8001862 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <HAL_TIM_MspPostInit+0x6c>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a10      	ldr	r2, [pc, #64]	; (8001870 <HAL_TIM_MspPostInit+0x6c>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <HAL_TIM_MspPostInit+0x6c>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001842:	23c0      	movs	r3, #192	; 0xc0
 8001844:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2300      	movs	r3, #0
 8001850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001852:	2302      	movs	r3, #2
 8001854:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001856:	f107 030c 	add.w	r3, r7, #12
 800185a:	4619      	mov	r1, r3
 800185c:	4805      	ldr	r0, [pc, #20]	; (8001874 <HAL_TIM_MspPostInit+0x70>)
 800185e:	f001 fb31 	bl	8002ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001862:	bf00      	nop
 8001864:	3720      	adds	r7, #32
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40000400 	.word	0x40000400
 8001870:	40023800 	.word	0x40023800
 8001874:	40020000 	.word	0x40020000

08001878 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08c      	sub	sp, #48	; 0x30
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 031c 	add.w	r3, r7, #28
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a49      	ldr	r2, [pc, #292]	; (80019bc <HAL_UART_MspInit+0x144>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d153      	bne.n	8001942 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	61bb      	str	r3, [r7, #24]
 800189e:	4b48      	ldr	r3, [pc, #288]	; (80019c0 <HAL_UART_MspInit+0x148>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	4a47      	ldr	r2, [pc, #284]	; (80019c0 <HAL_UART_MspInit+0x148>)
 80018a4:	f043 0310 	orr.w	r3, r3, #16
 80018a8:	6453      	str	r3, [r2, #68]	; 0x44
 80018aa:	4b45      	ldr	r3, [pc, #276]	; (80019c0 <HAL_UART_MspInit+0x148>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	f003 0310 	and.w	r3, r3, #16
 80018b2:	61bb      	str	r3, [r7, #24]
 80018b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	4b41      	ldr	r3, [pc, #260]	; (80019c0 <HAL_UART_MspInit+0x148>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a40      	ldr	r2, [pc, #256]	; (80019c0 <HAL_UART_MspInit+0x148>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b3e      	ldr	r3, [pc, #248]	; (80019c0 <HAL_UART_MspInit+0x148>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	4b3a      	ldr	r3, [pc, #232]	; (80019c0 <HAL_UART_MspInit+0x148>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a39      	ldr	r2, [pc, #228]	; (80019c0 <HAL_UART_MspInit+0x148>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b37      	ldr	r3, [pc, #220]	; (80019c0 <HAL_UART_MspInit+0x148>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fc:	2303      	movs	r3, #3
 80018fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001900:	2307      	movs	r3, #7
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001904:	f107 031c 	add.w	r3, r7, #28
 8001908:	4619      	mov	r1, r3
 800190a:	482e      	ldr	r0, [pc, #184]	; (80019c4 <HAL_UART_MspInit+0x14c>)
 800190c:	f001 fada 	bl	8002ec4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001910:	2340      	movs	r3, #64	; 0x40
 8001912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001914:	2302      	movs	r3, #2
 8001916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191c:	2303      	movs	r3, #3
 800191e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001920:	2307      	movs	r3, #7
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001924:	f107 031c 	add.w	r3, r7, #28
 8001928:	4619      	mov	r1, r3
 800192a:	4827      	ldr	r0, [pc, #156]	; (80019c8 <HAL_UART_MspInit+0x150>)
 800192c:	f001 faca 	bl	8002ec4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001930:	2200      	movs	r2, #0
 8001932:	2105      	movs	r1, #5
 8001934:	2025      	movs	r0, #37	; 0x25
 8001936:	f001 fa09 	bl	8002d4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800193a:	2025      	movs	r0, #37	; 0x25
 800193c:	f001 fa22 	bl	8002d84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001940:	e038      	b.n	80019b4 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a21      	ldr	r2, [pc, #132]	; (80019cc <HAL_UART_MspInit+0x154>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d133      	bne.n	80019b4 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <HAL_UART_MspInit+0x148>)
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	4a1a      	ldr	r2, [pc, #104]	; (80019c0 <HAL_UART_MspInit+0x148>)
 8001956:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800195a:	6413      	str	r3, [r2, #64]	; 0x40
 800195c:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <HAL_UART_MspInit+0x148>)
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001968:	2300      	movs	r3, #0
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <HAL_UART_MspInit+0x148>)
 800196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001970:	4a13      	ldr	r2, [pc, #76]	; (80019c0 <HAL_UART_MspInit+0x148>)
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	6313      	str	r3, [r2, #48]	; 0x30
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <HAL_UART_MspInit+0x148>)
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001984:	230c      	movs	r3, #12
 8001986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001990:	2303      	movs	r3, #3
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001994:	2307      	movs	r3, #7
 8001996:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001998:	f107 031c 	add.w	r3, r7, #28
 800199c:	4619      	mov	r1, r3
 800199e:	4809      	ldr	r0, [pc, #36]	; (80019c4 <HAL_UART_MspInit+0x14c>)
 80019a0:	f001 fa90 	bl	8002ec4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80019a4:	2200      	movs	r2, #0
 80019a6:	2105      	movs	r1, #5
 80019a8:	2026      	movs	r0, #38	; 0x26
 80019aa:	f001 f9cf 	bl	8002d4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019ae:	2026      	movs	r0, #38	; 0x26
 80019b0:	f001 f9e8 	bl	8002d84 <HAL_NVIC_EnableIRQ>
}
 80019b4:	bf00      	nop
 80019b6:	3730      	adds	r7, #48	; 0x30
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40011000 	.word	0x40011000
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40020000 	.word	0x40020000
 80019c8:	40020400 	.word	0x40020400
 80019cc:	40004400 	.word	0x40004400

080019d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08c      	sub	sp, #48	; 0x30
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80019d8:	2300      	movs	r3, #0
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 80019e0:	2300      	movs	r3, #0
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	4b2e      	ldr	r3, [pc, #184]	; (8001aa0 <HAL_InitTick+0xd0>)
 80019e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e8:	4a2d      	ldr	r2, [pc, #180]	; (8001aa0 <HAL_InitTick+0xd0>)
 80019ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ee:	6453      	str	r3, [r2, #68]	; 0x44
 80019f0:	4b2b      	ldr	r3, [pc, #172]	; (8001aa0 <HAL_InitTick+0xd0>)
 80019f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019fc:	f107 020c 	add.w	r2, r7, #12
 8001a00:	f107 0310 	add.w	r3, r7, #16
 8001a04:	4611      	mov	r1, r2
 8001a06:	4618      	mov	r0, r3
 8001a08:	f002 fd7a 	bl	8004500 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001a0c:	f002 fd64 	bl	80044d8 <HAL_RCC_GetPCLK2Freq>
 8001a10:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a14:	4a23      	ldr	r2, [pc, #140]	; (8001aa4 <HAL_InitTick+0xd4>)
 8001a16:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1a:	0c9b      	lsrs	r3, r3, #18
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001a20:	4b21      	ldr	r3, [pc, #132]	; (8001aa8 <HAL_InitTick+0xd8>)
 8001a22:	4a22      	ldr	r2, [pc, #136]	; (8001aac <HAL_InitTick+0xdc>)
 8001a24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8001a26:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <HAL_InitTick+0xd8>)
 8001a28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a2c:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8001a2e:	4a1e      	ldr	r2, [pc, #120]	; (8001aa8 <HAL_InitTick+0xd8>)
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001a34:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <HAL_InitTick+0xd8>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3a:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <HAL_InitTick+0xd8>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a40:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <HAL_InitTick+0xd8>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8001a46:	4818      	ldr	r0, [pc, #96]	; (8001aa8 <HAL_InitTick+0xd8>)
 8001a48:	f002 fd8c 	bl	8004564 <HAL_TIM_Base_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001a52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d11b      	bne.n	8001a92 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8001a5a:	4813      	ldr	r0, [pc, #76]	; (8001aa8 <HAL_InitTick+0xd8>)
 8001a5c:	f002 fe54 	bl	8004708 <HAL_TIM_Base_Start_IT>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001a66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d111      	bne.n	8001a92 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001a6e:	201a      	movs	r0, #26
 8001a70:	f001 f988 	bl	8002d84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b0f      	cmp	r3, #15
 8001a78:	d808      	bhi.n	8001a8c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	201a      	movs	r0, #26
 8001a80:	f001 f964 	bl	8002d4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a84:	4a0a      	ldr	r2, [pc, #40]	; (8001ab0 <HAL_InitTick+0xe0>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	e002      	b.n	8001a92 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001a92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3730      	adds	r7, #48	; 0x30
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	431bde83 	.word	0x431bde83
 8001aa8:	20000534 	.word	0x20000534
 8001aac:	40014800 	.word	0x40014800
 8001ab0:	20000004 	.word	0x20000004

08001ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <NMI_Handler+0x4>

08001aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001abe:	e7fe      	b.n	8001abe <HardFault_Handler+0x4>

08001ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <MemManage_Handler+0x4>

08001ac6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aca:	e7fe      	b.n	8001aca <BusFault_Handler+0x4>

08001acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <UsageFault_Handler+0x4>

08001ad2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001ae4:	2002      	movs	r0, #2
 8001ae6:	f001 fbbd 	bl	8003264 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}

08001aee <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001af2:	2008      	movs	r0, #8
 8001af4:	f001 fbb6 	bl	8003264 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}

08001afc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001b00:	2010      	movs	r0, #16
 8001b02:	f001 fbaf 	bl	8003264 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b10:	4803      	ldr	r0, [pc, #12]	; (8001b20 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8001b12:	f002 ffc9 	bl	8004aa8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8001b16:	4803      	ldr	r0, [pc, #12]	; (8001b24 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001b18:	f002 ffc6 	bl	8004aa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20000370 	.word	0x20000370
 8001b24:	20000534 	.word	0x20000534

08001b28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b2c:	4802      	ldr	r0, [pc, #8]	; (8001b38 <USART1_IRQHandler+0x10>)
 8001b2e:	f003 feb7 	bl	80058a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000490 	.word	0x20000490

08001b3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b40:	4802      	ldr	r0, [pc, #8]	; (8001b4c <USART2_IRQHandler+0x10>)
 8001b42:	f003 fead 	bl	80058a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200004d8 	.word	0x200004d8

08001b50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b58:	4a14      	ldr	r2, [pc, #80]	; (8001bac <_sbrk+0x5c>)
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <_sbrk+0x60>)
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b64:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <_sbrk+0x64>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d102      	bne.n	8001b72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <_sbrk+0x64>)
 8001b6e:	4a12      	ldr	r2, [pc, #72]	; (8001bb8 <_sbrk+0x68>)
 8001b70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <_sbrk+0x64>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d207      	bcs.n	8001b90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b80:	f006 f96a 	bl	8007e58 <__errno>
 8001b84:	4603      	mov	r3, r0
 8001b86:	220c      	movs	r2, #12
 8001b88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8e:	e009      	b.n	8001ba4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <_sbrk+0x64>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b96:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <_sbrk+0x64>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <_sbrk+0x64>)
 8001ba0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20020000 	.word	0x20020000
 8001bb0:	00000400 	.word	0x00000400
 8001bb4:	2000057c 	.word	0x2000057c
 8001bb8:	200045b8 	.word	0x200045b8

08001bbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <SystemInit+0x20>)
 8001bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bc6:	4a05      	ldr	r2, [pc, #20]	; (8001bdc <SystemInit+0x20>)
 8001bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001be4:	f7ff ffea 	bl	8001bbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001be8:	480c      	ldr	r0, [pc, #48]	; (8001c1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bea:	490d      	ldr	r1, [pc, #52]	; (8001c20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bec:	4a0d      	ldr	r2, [pc, #52]	; (8001c24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bf0:	e002      	b.n	8001bf8 <LoopCopyDataInit>

08001bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bf6:	3304      	adds	r3, #4

08001bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bfc:	d3f9      	bcc.n	8001bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c00:	4c0a      	ldr	r4, [pc, #40]	; (8001c2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c04:	e001      	b.n	8001c0a <LoopFillZerobss>

08001c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c08:	3204      	adds	r2, #4

08001c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c0c:	d3fb      	bcc.n	8001c06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c0e:	f006 f929 	bl	8007e64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c12:	f7ff f923 	bl	8000e5c <main>
  bx  lr    
 8001c16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c20:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001c24:	080089d8 	.word	0x080089d8
  ldr r2, =_sbss
 8001c28:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001c2c:	200045b4 	.word	0x200045b4

08001c30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c30:	e7fe      	b.n	8001c30 <ADC_IRQHandler>

08001c32 <Controller_init>:

#include "Controller.h"
#include <stdlib.h>
#include <stdio.h>

void Controller_init() {
 8001c32:	b580      	push	{r7, lr}
 8001c34:	af00      	add	r7, sp, #0
	BT_init();
 8001c36:	f000 f98f 	bl	8001f58 <BT_init>
	MotorState_init();
 8001c3a:	f000 fa11 	bl	8002060 <MotorState_init>
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <Controller_excuteTask>:

void Controller_excuteTask() {
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b084      	sub	sp, #16
 8001c46:	af00      	add	r7, sp, #0
	int BTflag = BT_getFlag();
 8001c48:	f000 f9b8 	bl	8001fbc <BT_getFlag>
 8001c4c:	60f8      	str	r0, [r7, #12]
	if (!BTflag) return;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d012      	beq.n	8001c7a <Controller_excuteTask+0x38>

	uint8_t rxBuff[10];

	Controller_getData(rxBuff); //Uart data rxBuff에 저장
 8001c54:	463b      	mov	r3, r7
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 f813 	bl	8001c82 <Controller_getData>
	Controller_Mode_parsingData(rxBuff);	//Buff에 저장된 값 판단
 8001c5c:	463b      	mov	r3, r7
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 f847 	bl	8001cf2 <Controller_Mode_parsingData>
	Controller_Mode_decision(rxBuff);	//모드 결정하여 나머지 파싱 실행
 8001c64:	463b      	mov	r3, r7
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 f828 	bl	8001cbc <Controller_Mode_decision>

	MotorState_setFlag(SET);
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	f000 fa39 	bl	80020e4 <MotorState_setFlag>
	BT_setFlag(BTRESET);
 8001c72:	2000      	movs	r0, #0
 8001c74:	f000 f994 	bl	8001fa0 <BT_setFlag>
 8001c78:	e000      	b.n	8001c7c <Controller_excuteTask+0x3a>
	if (!BTflag) return;
 8001c7a:	bf00      	nop
}
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <Controller_getData>:

void Controller_getData(uint8_t *Buff) {
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b084      	sub	sp, #16
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
	uint8_t rxData = 1;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	73fb      	strb	r3, [r7, #15]

	for (int i = 0; rxData; i++) {
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	e00b      	b.n	8001cac <Controller_getData+0x2a>
		rxData = BT_deQue();
 8001c94:	f000 f97a 	bl	8001f8c <BT_deQue>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	73fb      	strb	r3, [r7, #15]
		Buff[i] = rxData;
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	7bfa      	ldrb	r2, [r7, #15]
 8001ca4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; rxData; i++) {
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f0      	bne.n	8001c94 <Controller_getData+0x12>
	}
}
 8001cb2:	bf00      	nop
 8001cb4:	bf00      	nop
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <Controller_Mode_decision>:

void Controller_Mode_decision(uint8_t *Buff) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	MODE_t Mode;
	Mode.Modestate = ModeState_get();
 8001cc4:	f000 f9a4 	bl	8002010 <ModeState_get>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	733b      	strb	r3, [r7, #12]
	if (Mode.Modestate == MANUAL) {
 8001cce:	7b3b      	ldrb	r3, [r7, #12]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d102      	bne.n	8001cda <Controller_Mode_decision+0x1e>
		Controller_Manual_parsingData(Buff); //Buff에 저장된 값 판단
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f822 	bl	8001d1e <Controller_Manual_parsingData>
	}
	if (Mode.Modestate == AUTO) {
 8001cda:	7b3b      	ldrb	r3, [r7, #12]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d104      	bne.n	8001cea <Controller_Mode_decision+0x2e>
		//UltraSonic 계산 추가
		Controller_Auto_parsingData(Buff); //Buff에 저장된 값 판단
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f85f 	bl	8001da4 <Controller_Auto_parsingData>
		Controller_Auto_decision();
 8001ce6:	f000 f86c 	bl	8001dc2 <Controller_Auto_decision>
	}
}
 8001cea:	bf00      	nop
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <Controller_Mode_parsingData>:

void Controller_Mode_parsingData(uint8_t *Buff) {
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
	if (Buff[0] == 'm') {
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b6d      	cmp	r3, #109	; 0x6d
 8001d00:	d102      	bne.n	8001d08 <Controller_Mode_parsingData+0x16>
		ModeState_set(MANUAL);
 8001d02:	2000      	movs	r0, #0
 8001d04:	f000 f974 	bl	8001ff0 <ModeState_set>
	}
	if (Buff[0] == 'a') {
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b61      	cmp	r3, #97	; 0x61
 8001d0e:	d102      	bne.n	8001d16 <Controller_Mode_parsingData+0x24>
		ModeState_set(AUTO);
 8001d10:	2001      	movs	r0, #1
 8001d12:	f000 f96d 	bl	8001ff0 <ModeState_set>
	}
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <Controller_Manual_parsingData>:

void Controller_Manual_parsingData(uint8_t *Buff) {
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b084      	sub	sp, #16
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
	if (Buff[0] == 'g') {	//go
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b67      	cmp	r3, #103	; 0x67
 8001d2c:	d103      	bne.n	8001d36 <Controller_Manual_parsingData+0x18>
		MotorState_enQue(GO);
 8001d2e:	2001      	movs	r0, #1
 8001d30:	f000 f9be 	bl	80020b0 <MotorState_enQue>
 8001d34:	e02f      	b.n	8001d96 <Controller_Manual_parsingData+0x78>
	}
	else if (Buff[0] == 'b') {	//back
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b62      	cmp	r3, #98	; 0x62
 8001d3c:	d103      	bne.n	8001d46 <Controller_Manual_parsingData+0x28>
		MotorState_enQue(BACK);
 8001d3e:	2004      	movs	r0, #4
 8001d40:	f000 f9b6 	bl	80020b0 <MotorState_enQue>
 8001d44:	e027      	b.n	8001d96 <Controller_Manual_parsingData+0x78>
	}
	else if (Buff[0] == 'l') {	//left
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b6c      	cmp	r3, #108	; 0x6c
 8001d4c:	d103      	bne.n	8001d56 <Controller_Manual_parsingData+0x38>
		MotorState_enQue(LEFT);
 8001d4e:	2002      	movs	r0, #2
 8001d50:	f000 f9ae 	bl	80020b0 <MotorState_enQue>
 8001d54:	e01f      	b.n	8001d96 <Controller_Manual_parsingData+0x78>
	}
	else if (Buff[0] == 'r') {	//right
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b72      	cmp	r3, #114	; 0x72
 8001d5c:	d103      	bne.n	8001d66 <Controller_Manual_parsingData+0x48>
		MotorState_enQue(RIGHT);
 8001d5e:	2003      	movs	r0, #3
 8001d60:	f000 f9a6 	bl	80020b0 <MotorState_enQue>
 8001d64:	e017      	b.n	8001d96 <Controller_Manual_parsingData+0x78>
	}
	else if (Buff[0] == 's') {	//stop
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b73      	cmp	r3, #115	; 0x73
 8001d6c:	d103      	bne.n	8001d76 <Controller_Manual_parsingData+0x58>
		MotorState_enQue(STOP);
 8001d6e:	2000      	movs	r0, #0
 8001d70:	f000 f99e 	bl	80020b0 <MotorState_enQue>
 8001d74:	e00f      	b.n	8001d96 <Controller_Manual_parsingData+0x78>
	}
	else if (Buff[0] == 'p') {	//speed p98'0'
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b70      	cmp	r3, #112	; 0x70
 8001d7c:	d10b      	bne.n	8001d96 <Controller_Manual_parsingData+0x78>
		MotorState_enQue(SPEED);
 8001d7e:	2005      	movs	r0, #5
 8001d80:	f000 f996 	bl	80020b0 <MotorState_enQue>
		int speed = atoi(&Buff[1]);	//해당 주소부터 숫자가 아닌 것까지 계산
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3301      	adds	r3, #1
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f005 ff57 	bl	8007c3c <atoi>
 8001d8e:	60f8      	str	r0, [r7, #12]
		MotorState_setSpeed(speed);
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 f971 	bl	8002078 <MotorState_setSpeed>
	}
	MotorState_setFlag(SET);
 8001d96:	2001      	movs	r0, #1
 8001d98:	f000 f9a4 	bl	80020e4 <MotorState_setFlag>
}
 8001d9c:	bf00      	nop
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <Controller_Auto_parsingData>:

void Controller_Auto_parsingData(uint8_t *Buff) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
	if (Buff[0] == 's') {	//응급 상황시 사람이 stop
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b73      	cmp	r3, #115	; 0x73
 8001db2:	d102      	bne.n	8001dba <Controller_Auto_parsingData+0x16>
		MotorState_enQue(STOP);
 8001db4:	2000      	movs	r0, #0
 8001db6:	f000 f97b 	bl	80020b0 <MotorState_enQue>
	}
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <Controller_Auto_decision>:

void Controller_Auto_decision(){
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b084      	sub	sp, #16
 8001dc6:	af00      	add	r7, sp, #0
	USDistance_t USDistance;
	USDistance = USDistance_get();
 8001dc8:	1d3b      	adds	r3, r7, #4
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 f9cc 	bl	8002168 <USDistance_get>
}
 8001dd0:	bf00      	nop
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <Listner_init>:
#include <stdio.h>

button_t ManualButton, AutoButton;
ultraSonic_t ultraSonic_Front,ultraSonic_Left,ultraSonic_Right;

void Listner_init(TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2 ,TIM_HandleTypeDef *htim4) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af02      	add	r7, sp, #8
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
	ModeState_init();
 8001de4:	f000 f8f4 	bl	8001fd0 <ModeState_init>
	DelayInit();
 8001de8:	f7fe fed6 	bl	8000b98 <DelayInit>
	USDistanc_init();
 8001dec:	f000 f992 	bl	8002114 <USDistanc_init>
	UltraSonic_init(&ultraSonic_Front, htim1, FRONT_GPIO_TRIG,
 8001df0:	2302      	movs	r3, #2
 8001df2:	9301      	str	r3, [sp, #4]
 8001df4:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <Listner_init+0x78>)
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	2301      	movs	r3, #1
 8001dfa:	4a15      	ldr	r2, [pc, #84]	; (8001e50 <Listner_init+0x78>)
 8001dfc:	68f9      	ldr	r1, [r7, #12]
 8001dfe:	4815      	ldr	r0, [pc, #84]	; (8001e54 <Listner_init+0x7c>)
 8001e00:	f000 fd75 	bl	80028ee <UltraSonic_init>
			FRONT_GPIO_TRIG_PIN,FRONT_GPIO_ECHO, FRONT_GPIO_ECHO_PIN);
	UltraSonic_init(&ultraSonic_Left, htim2, LEFT_GPIO_TRIG,
 8001e04:	2308      	movs	r3, #8
 8001e06:	9301      	str	r3, [sp, #4]
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <Listner_init+0x78>)
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	2304      	movs	r3, #4
 8001e0e:	4a10      	ldr	r2, [pc, #64]	; (8001e50 <Listner_init+0x78>)
 8001e10:	68b9      	ldr	r1, [r7, #8]
 8001e12:	4811      	ldr	r0, [pc, #68]	; (8001e58 <Listner_init+0x80>)
 8001e14:	f000 fd6b 	bl	80028ee <UltraSonic_init>
			LEFT_GPIO_TRIG_PIN,LEFT_GPIO_ECHO,LEFT_GPIO_ECHO_PIN);
	UltraSonic_init(&ultraSonic_Right, htim4, RIGHT_GPIO_TRIG,
 8001e18:	2310      	movs	r3, #16
 8001e1a:	9301      	str	r3, [sp, #4]
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <Listner_init+0x78>)
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e24:	4a0d      	ldr	r2, [pc, #52]	; (8001e5c <Listner_init+0x84>)
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	480d      	ldr	r0, [pc, #52]	; (8001e60 <Listner_init+0x88>)
 8001e2a:	f000 fd60 	bl	80028ee <UltraSonic_init>
			RIGHT_GPIO_TRIG_PIN,RIGHT_GPIO_ECHO, RIGHT_GPIO_ECHO_PIN);
	button_init(&ManualButton, GPIOC, GPIO_PIN_10);
 8001e2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e32:	4907      	ldr	r1, [pc, #28]	; (8001e50 <Listner_init+0x78>)
 8001e34:	480b      	ldr	r0, [pc, #44]	; (8001e64 <Listner_init+0x8c>)
 8001e36:	f000 fadd 	bl	80023f4 <button_init>
	button_init(&AutoButton, GPIOC, GPIO_PIN_11);
 8001e3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e3e:	4904      	ldr	r1, [pc, #16]	; (8001e50 <Listner_init+0x78>)
 8001e40:	4809      	ldr	r0, [pc, #36]	; (8001e68 <Listner_init+0x90>)
 8001e42:	f000 fad7 	bl	80023f4 <button_init>
}
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40020800 	.word	0x40020800
 8001e54:	20000598 	.word	0x20000598
 8001e58:	200005b0 	.word	0x200005b0
 8001e5c:	40020400 	.word	0x40020400
 8001e60:	200005c8 	.word	0x200005c8
 8001e64:	20000580 	.word	0x20000580
 8001e68:	2000058c 	.word	0x2000058c

08001e6c <Listener_UART_ISR_Process>:

void Listener_UART_ISR_Process(uint8_t rxData) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
	if (rxData == ';') {
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	2b3b      	cmp	r3, #59	; 0x3b
 8001e7a:	d106      	bne.n	8001e8a <Listener_UART_ISR_Process+0x1e>
		BT_enQue('\0');
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f000 f875 	bl	8001f6c <BT_enQue>
		BT_setFlag(BTSET);
 8001e82:	2001      	movs	r0, #1
 8001e84:	f000 f88c 	bl	8001fa0 <BT_setFlag>
	}
	else {
		BT_enQue(rxData);
		BT_setFlag(BTRESET);
	}
}
 8001e88:	e006      	b.n	8001e98 <Listener_UART_ISR_Process+0x2c>
		BT_enQue(rxData);
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 f86d 	bl	8001f6c <BT_enQue>
		BT_setFlag(BTRESET);
 8001e92:	2000      	movs	r0, #0
 8001e94:	f000 f884 	bl	8001fa0 <BT_setFlag>
}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <Listener_US_ISR_Process>:

void Listener_US_ISR_Process(uint16_t GPIO_Pin) {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	80fb      	strh	r3, [r7, #6]
	UltraSonic_ISR_Process(&ultraSonic_Front, GPIO_Pin);
 8001eaa:	88fb      	ldrh	r3, [r7, #6]
 8001eac:	4619      	mov	r1, r3
 8001eae:	4808      	ldr	r0, [pc, #32]	; (8001ed0 <Listener_US_ISR_Process+0x30>)
 8001eb0:	f000 fdc9 	bl	8002a46 <UltraSonic_ISR_Process>
	UltraSonic_ISR_Process(&ultraSonic_Left, GPIO_Pin);
 8001eb4:	88fb      	ldrh	r3, [r7, #6]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4806      	ldr	r0, [pc, #24]	; (8001ed4 <Listener_US_ISR_Process+0x34>)
 8001eba:	f000 fdc4 	bl	8002a46 <UltraSonic_ISR_Process>
	UltraSonic_ISR_Process(&ultraSonic_Right, GPIO_Pin);
 8001ebe:	88fb      	ldrh	r3, [r7, #6]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <Listener_US_ISR_Process+0x38>)
 8001ec4:	f000 fdbf 	bl	8002a46 <UltraSonic_ISR_Process>
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20000598 	.word	0x20000598
 8001ed4:	200005b0 	.word	0x200005b0
 8001ed8:	200005c8 	.word	0x200005c8

08001edc <Listener_Button>:

void Listener_Button() {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
	if (button_getState(&ManualButton) == ACT_RELEASED) {
 8001ee0:	480c      	ldr	r0, [pc, #48]	; (8001f14 <Listener_Button+0x38>)
 8001ee2:	f000 fa9d 	bl	8002420 <button_getState>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d105      	bne.n	8001ef8 <Listener_Button+0x1c>
		ModeState_set(MANUAL);
 8001eec:	2000      	movs	r0, #0
 8001eee:	f000 f87f 	bl	8001ff0 <ModeState_set>
		ModeState_setFlag(MODESET);
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	f000 f898 	bl	8002028 <ModeState_setFlag>
	}
	if (button_getState(&AutoButton) == ACT_RELEASED) {
 8001ef8:	4807      	ldr	r0, [pc, #28]	; (8001f18 <Listener_Button+0x3c>)
 8001efa:	f000 fa91 	bl	8002420 <button_getState>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b04      	cmp	r3, #4
 8001f02:	d105      	bne.n	8001f10 <Listener_Button+0x34>
		ModeState_set(AUTO);
 8001f04:	2001      	movs	r0, #1
 8001f06:	f000 f873 	bl	8001ff0 <ModeState_set>
		ModeState_setFlag(MODESET);
 8001f0a:	2001      	movs	r0, #1
 8001f0c:	f000 f88c 	bl	8002028 <ModeState_setFlag>
	}
}
 8001f10:	bf00      	nop
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20000580 	.word	0x20000580
 8001f18:	2000058c 	.word	0x2000058c

08001f1c <Listener_UltraSonic_Distance>:

void Listener_UltraSonic_Distance(){
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0

	int distance_Front = UltraSonic_getDistance(&ultraSonic_Front);
 8001f22:	480a      	ldr	r0, [pc, #40]	; (8001f4c <Listener_UltraSonic_Distance+0x30>)
 8001f24:	f000 fdbc 	bl	8002aa0 <UltraSonic_getDistance>
 8001f28:	60f8      	str	r0, [r7, #12]
	int distance_Left = UltraSonic_getDistance(&ultraSonic_Left);
 8001f2a:	4809      	ldr	r0, [pc, #36]	; (8001f50 <Listener_UltraSonic_Distance+0x34>)
 8001f2c:	f000 fdb8 	bl	8002aa0 <UltraSonic_getDistance>
 8001f30:	60b8      	str	r0, [r7, #8]
	int distance_Right = UltraSonic_getDistance(&ultraSonic_Right);
 8001f32:	4808      	ldr	r0, [pc, #32]	; (8001f54 <Listener_UltraSonic_Distance+0x38>)
 8001f34:	f000 fdb4 	bl	8002aa0 <UltraSonic_getDistance>
 8001f38:	6078      	str	r0, [r7, #4]

	USDistance_set(distance_Front, distance_Left, distance_Right);
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	68b9      	ldr	r1, [r7, #8]
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f000 f8fa 	bl	8002138 <USDistance_set>

}
 8001f44:	bf00      	nop
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20000598 	.word	0x20000598
 8001f50:	200005b0 	.word	0x200005b0
 8001f54:	200005c8 	.word	0x200005c8

08001f58 <BT_init>:
 */

#include "BT_dataQue.h"
Que_t BTQue;

void BT_init(){
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
	Que_init(&BTQue);
 8001f5c:	4802      	ldr	r0, [pc, #8]	; (8001f68 <BT_init+0x10>)
 8001f5e:	f7fe fe6d 	bl	8000c3c <Que_init>
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200005e0 	.word	0x200005e0

08001f6c <BT_enQue>:

void BT_enQue(uint8_t rxData){
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	71fb      	strb	r3, [r7, #7]
	enQue(&BTQue,rxData);
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4803      	ldr	r0, [pc, #12]	; (8001f88 <BT_enQue+0x1c>)
 8001f7c:	f7fe feb0 	bl	8000ce0 <enQue>
}
 8001f80:	bf00      	nop
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	200005e0 	.word	0x200005e0

08001f8c <BT_deQue>:

uint8_t BT_deQue(){
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
	return deQue(&BTQue);
 8001f90:	4802      	ldr	r0, [pc, #8]	; (8001f9c <BT_deQue+0x10>)
 8001f92:	f7fe fed1 	bl	8000d38 <deQue>
 8001f96:	4603      	mov	r3, r0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	200005e0 	.word	0x200005e0

08001fa0 <BT_setFlag>:
void BT_setFlag(int flagState){
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
	setQueFlag(&BTQue, flagState);
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	4803      	ldr	r0, [pc, #12]	; (8001fb8 <BT_setFlag+0x18>)
 8001fac:	f7fe fe5c 	bl	8000c68 <setQueFlag>
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	200005e0 	.word	0x200005e0

08001fbc <BT_getFlag>:

int BT_getFlag(){
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
	return getQueFlag(&BTQue);
 8001fc0:	4802      	ldr	r0, [pc, #8]	; (8001fcc <BT_getFlag+0x10>)
 8001fc2:	f7fe fe5f 	bl	8000c84 <getQueFlag>
 8001fc6:	4603      	mov	r3, r0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	200005e0 	.word	0x200005e0

08001fd0 <ModeState_init>:

#include "ModeStateModel.h"

MODE_t Mode;

void ModeState_init(){
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
	Mode.Modestate = MANUAL;
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <ModeState_init+0x1c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
	Mode.ModeFlag = MODERESET;
 8001fda:	4b04      	ldr	r3, [pc, #16]	; (8001fec <ModeState_init+0x1c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	705a      	strb	r2, [r3, #1]
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000654 	.word	0x20000654

08001ff0 <ModeState_set>:

void ModeState_set(int ModeState){
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
	Mode.Modestate = ModeState;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	4b03      	ldr	r3, [pc, #12]	; (800200c <ModeState_set+0x1c>)
 8001ffe:	701a      	strb	r2, [r3, #0]
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	20000654 	.word	0x20000654

08002010 <ModeState_get>:

int ModeState_get(){
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
	return Mode.Modestate;
 8002014:	4b03      	ldr	r3, [pc, #12]	; (8002024 <ModeState_get+0x14>)
 8002016:	781b      	ldrb	r3, [r3, #0]
}
 8002018:	4618      	mov	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	20000654 	.word	0x20000654

08002028 <ModeState_setFlag>:

void ModeState_setFlag(int flagState){
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
	Mode.ModeFlag = flagState;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	b2da      	uxtb	r2, r3
 8002034:	4b03      	ldr	r3, [pc, #12]	; (8002044 <ModeState_setFlag+0x1c>)
 8002036:	705a      	strb	r2, [r3, #1]
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	20000654 	.word	0x20000654

08002048 <ModeState_getFlag>:

int ModeState_getFlag(){
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
	return Mode.ModeFlag;
 800204c:	4b03      	ldr	r3, [pc, #12]	; (800205c <ModeState_getFlag+0x14>)
 800204e:	785b      	ldrb	r3, [r3, #1]
}
 8002050:	4618      	mov	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	20000654 	.word	0x20000654

08002060 <MotorState_init>:

#include "MotorStateQue.h"

MotorState_t MotorStateQue;

void MotorState_init(){
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
	Que_init(&MotorStateQue.state);
 8002064:	4803      	ldr	r0, [pc, #12]	; (8002074 <MotorState_init+0x14>)
 8002066:	f7fe fde9 	bl	8000c3c <Que_init>
	MotorStateQue.speed = 0;
 800206a:	4b02      	ldr	r3, [pc, #8]	; (8002074 <MotorState_init+0x14>)
 800206c:	2200      	movs	r2, #0
 800206e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000658 	.word	0x20000658

08002078 <MotorState_setSpeed>:

void MotorState_setSpeed(int speed){
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
	MotorStateQue.speed = speed;
 8002080:	4a04      	ldr	r2, [pc, #16]	; (8002094 <MotorState_setSpeed+0x1c>)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6753      	str	r3, [r2, #116]	; 0x74
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	20000658 	.word	0x20000658

08002098 <MotorState_getSpeed>:
int MotorState_getSpeed(){
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
	return MotorStateQue.speed;
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <MotorState_getSpeed+0x14>)
 800209e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	20000658 	.word	0x20000658

080020b0 <MotorState_enQue>:


void MotorState_enQue(uint8_t rxData){
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
	enQue(&MotorStateQue.state,rxData);
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	4619      	mov	r1, r3
 80020be:	4803      	ldr	r0, [pc, #12]	; (80020cc <MotorState_enQue+0x1c>)
 80020c0:	f7fe fe0e 	bl	8000ce0 <enQue>
}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20000658 	.word	0x20000658

080020d0 <MotorState_deQue>:
uint8_t MotorState_deQue(){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
	return deQue(&MotorStateQue.state);
 80020d4:	4802      	ldr	r0, [pc, #8]	; (80020e0 <MotorState_deQue+0x10>)
 80020d6:	f7fe fe2f 	bl	8000d38 <deQue>
 80020da:	4603      	mov	r3, r0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20000658 	.word	0x20000658

080020e4 <MotorState_setFlag>:

void MotorState_setFlag(int flagState){
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
	setQueFlag(&MotorStateQue.state, flagState);
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	4803      	ldr	r0, [pc, #12]	; (80020fc <MotorState_setFlag+0x18>)
 80020f0:	f7fe fdba 	bl	8000c68 <setQueFlag>
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000658 	.word	0x20000658

08002100 <MotorState_getFlag>:
int MotorState_getFlag(){
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
	return getQueFlag(&MotorStateQue.state);
 8002104:	4802      	ldr	r0, [pc, #8]	; (8002110 <MotorState_getFlag+0x10>)
 8002106:	f7fe fdbd 	bl	8000c84 <getQueFlag>
 800210a:	4603      	mov	r3, r0
}
 800210c:	4618      	mov	r0, r3
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000658 	.word	0x20000658

08002114 <USDistanc_init>:

#include "USDistanceModel.h"

USDistance_t USDistance;

void USDistanc_init(){
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
	USDistance.Distance_Front = 0;
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <USDistanc_init+0x20>)
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
	USDistance.Distance_Left = 0;
 800211e:	4b05      	ldr	r3, [pc, #20]	; (8002134 <USDistanc_init+0x20>)
 8002120:	2200      	movs	r2, #0
 8002122:	605a      	str	r2, [r3, #4]
	USDistance.Distance_Right = 0;
 8002124:	4b03      	ldr	r3, [pc, #12]	; (8002134 <USDistanc_init+0x20>)
 8002126:	2200      	movs	r2, #0
 8002128:	609a      	str	r2, [r3, #8]
}
 800212a:	bf00      	nop
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	200006d0 	.word	0x200006d0

08002138 <USDistance_set>:

void USDistance_set(int Front_Distance,int Left_Distance,int Right_Distance){
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
	USDistance.Distance_Front = Front_Distance;
 8002144:	4a07      	ldr	r2, [pc, #28]	; (8002164 <USDistance_set+0x2c>)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6013      	str	r3, [r2, #0]
	USDistance.Distance_Left = Left_Distance;
 800214a:	4a06      	ldr	r2, [pc, #24]	; (8002164 <USDistance_set+0x2c>)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	6053      	str	r3, [r2, #4]
	USDistance.Distance_Right = Right_Distance;
 8002150:	4a04      	ldr	r2, [pc, #16]	; (8002164 <USDistance_set+0x2c>)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6093      	str	r3, [r2, #8]
}
 8002156:	bf00      	nop
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	200006d0 	.word	0x200006d0

08002168 <USDistance_get>:

USDistance_t USDistance_get(){
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
	return USDistance;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a05      	ldr	r2, [pc, #20]	; (8002188 <USDistance_get+0x20>)
 8002174:	ca07      	ldmia	r2, {r0, r1, r2}
 8002176:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	200006d0 	.word	0x200006d0

0800218c <Presenter_Init>:

#include "Presenter.h"
#include <stdio.h>
Motor_t leftMotor, rightMotor;

void Presenter_Init() {
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af04      	add	r7, sp, #16
	Motor_init(&leftMotor, &htim3, TIM_CHANNEL_1,
 8002192:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002196:	9302      	str	r3, [sp, #8]
 8002198:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <Presenter_Init+0x58>)
 800219a:	9301      	str	r3, [sp, #4]
 800219c:	2380      	movs	r3, #128	; 0x80
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <Presenter_Init+0x5c>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	4911      	ldr	r1, [pc, #68]	; (80021ec <Presenter_Init+0x60>)
 80021a6:	4812      	ldr	r0, [pc, #72]	; (80021f0 <Presenter_Init+0x64>)
 80021a8:	f000 fb04 	bl	80027b4 <Motor_init>
	LEFT_DIR1_GPIO, LEFT_DIR1_GPIO_PIN, LEFT_DIR2_GPIO, LEFT_DIR2_GPIO_PIN);
	Motor_init(&rightMotor, &htim3, TIM_CHANNEL_2,
 80021ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021b0:	9302      	str	r3, [sp, #8]
 80021b2:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <Presenter_Init+0x58>)
 80021b4:	9301      	str	r3, [sp, #4]
 80021b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	4b0d      	ldr	r3, [pc, #52]	; (80021f4 <Presenter_Init+0x68>)
 80021be:	2204      	movs	r2, #4
 80021c0:	490a      	ldr	r1, [pc, #40]	; (80021ec <Presenter_Init+0x60>)
 80021c2:	480d      	ldr	r0, [pc, #52]	; (80021f8 <Presenter_Init+0x6c>)
 80021c4:	f000 faf6 	bl	80027b4 <Motor_init>
	RIGHT_DIR1_GPIO, RIGHT_DIR1_GPIO_PIN, RIGHT_DIR2_GPIO, RIGHT_DIR2_GPIO_PIN);
	//초기 MotorSpeed
	Motor_setSpeed(&leftMotor, 900);
 80021c8:	f44f 7161 	mov.w	r1, #900	; 0x384
 80021cc:	4808      	ldr	r0, [pc, #32]	; (80021f0 <Presenter_Init+0x64>)
 80021ce:	f000 fb60 	bl	8002892 <Motor_setSpeed>
	Motor_setSpeed(&rightMotor, 900);
 80021d2:	f44f 7161 	mov.w	r1, #900	; 0x384
 80021d6:	4808      	ldr	r0, [pc, #32]	; (80021f8 <Presenter_Init+0x6c>)
 80021d8:	f000 fb5b 	bl	8002892 <Motor_setSpeed>
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40020000 	.word	0x40020000
 80021e8:	40020800 	.word	0x40020800
 80021ec:	20000400 	.word	0x20000400
 80021f0:	200006dc 	.word	0x200006dc
 80021f4:	40020400 	.word	0x40020400
 80021f8:	200006f4 	.word	0x200006f4

080021fc <Presenter_excuteTask>:

void Presenter_excuteTask() {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
	int MotorQueFlag = MotorState_getFlag();
 8002202:	f7ff ff7d 	bl	8002100 <MotorState_getFlag>
 8002206:	6078      	str	r0, [r7, #4]
	int ModeFlag = ModeState_getFlag();
 8002208:	f7ff ff1e 	bl	8002048 <ModeState_getFlag>
 800220c:	6038      	str	r0, [r7, #0]

	if (!MotorQueFlag && !ModeFlag) return;	//둘 중 하나가 set되면 실행
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d102      	bne.n	800221a <Presenter_excuteTask+0x1e>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d008      	beq.n	800222c <Presenter_excuteTask+0x30>

	Presenter_Mode_setState();
 800221a:	f000 f80b 	bl	8002234 <Presenter_Mode_setState>

	MotorState_setFlag(RESET);
 800221e:	2000      	movs	r0, #0
 8002220:	f7ff ff60 	bl	80020e4 <MotorState_setFlag>
	ModeState_setFlag(MODERESET);
 8002224:	2000      	movs	r0, #0
 8002226:	f7ff feff 	bl	8002028 <ModeState_setFlag>
 800222a:	e000      	b.n	800222e <Presenter_excuteTask+0x32>
	if (!MotorQueFlag && !ModeFlag) return;	//둘 중 하나가 set되면 실행
 800222c:	bf00      	nop
}
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <Presenter_Mode_setState>:

void Presenter_Mode_setState() {
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
	ModeState_t ModeState;
	ModeState = ModeState_get();
 800223a:	f7ff fee9 	bl	8002010 <ModeState_get>
 800223e:	4603      	mov	r3, r0
 8002240:	71fb      	strb	r3, [r7, #7]
	switch (ModeState) {
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d002      	beq.n	800224e <Presenter_Mode_setState+0x1a>
 8002248:	2b01      	cmp	r3, #1
 800224a:	d003      	beq.n	8002254 <Presenter_Mode_setState+0x20>
			break;
		case AUTO:
			Presenter_Auto_setState();
			break;
	}
}
 800224c:	e005      	b.n	800225a <Presenter_Mode_setState+0x26>
			Presenter_Manual_setState();
 800224e:	f000 f809 	bl	8002264 <Presenter_Manual_setState>
			break;
 8002252:	e002      	b.n	800225a <Presenter_Mode_setState+0x26>
			Presenter_Auto_setState();
 8002254:	f000 f8c2 	bl	80023dc <Presenter_Auto_setState>
			break;
 8002258:	bf00      	nop
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <Presenter_Manual_setState>:

void Presenter_Manual_setState() {
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
	LCD_writeStringXY(0, 0, "Car Manual!");
 800226a:	4a18      	ldr	r2, [pc, #96]	; (80022cc <Presenter_Manual_setState+0x68>)
 800226c:	2100      	movs	r1, #0
 800226e:	2000      	movs	r0, #0
 8002270:	f000 fa8b 	bl	800278a <LCD_writeStringXY>
	uint8_t MotorState = MotorState_deQue();
 8002274:	f7ff ff2c 	bl	80020d0 <MotorState_deQue>
 8002278:	4603      	mov	r3, r0
 800227a:	71fb      	strb	r3, [r7, #7]
	switch (MotorState) {
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	2b05      	cmp	r3, #5
 8002280:	d820      	bhi.n	80022c4 <Presenter_Manual_setState+0x60>
 8002282:	a201      	add	r2, pc, #4	; (adr r2, 8002288 <Presenter_Manual_setState+0x24>)
 8002284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002288:	080022b9 	.word	0x080022b9
 800228c:	080022a1 	.word	0x080022a1
 8002290:	080022ad 	.word	0x080022ad
 8002294:	080022b3 	.word	0x080022b3
 8002298:	080022a7 	.word	0x080022a7
 800229c:	080022bf 	.word	0x080022bf
		case GO:
			Presenter_CarGo();
 80022a0:	f000 f816 	bl	80022d0 <Presenter_CarGo>
			break;
 80022a4:	e00e      	b.n	80022c4 <Presenter_Manual_setState+0x60>
		case BACK:
			Presenter_CarBack();
 80022a6:	f000 f86b 	bl	8002380 <Presenter_CarBack>
			break;
 80022aa:	e00b      	b.n	80022c4 <Presenter_Manual_setState+0x60>
		case LEFT:
			Presenter_CarLeft();
 80022ac:	f000 f83c 	bl	8002328 <Presenter_CarLeft>
			break;
 80022b0:	e008      	b.n	80022c4 <Presenter_Manual_setState+0x60>
		case RIGHT:
			Presenter_CarRight();
 80022b2:	f000 f84f 	bl	8002354 <Presenter_CarRight>
			break;
 80022b6:	e005      	b.n	80022c4 <Presenter_Manual_setState+0x60>
		case STOP:
			Presenter_CarStop();
 80022b8:	f000 f820 	bl	80022fc <Presenter_CarStop>
			break;
 80022bc:	e002      	b.n	80022c4 <Presenter_Manual_setState+0x60>
		case SPEED:
			Presenter_CarSpeed();
 80022be:	f000 f875 	bl	80023ac <Presenter_CarSpeed>
			break;
 80022c2:	bf00      	nop
//		default: //Stop
//			Presenter_CarStop();
//			break;
	}
}
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	08008814 	.word	0x08008814

080022d0 <Presenter_CarGo>:
void Presenter_CarGo() {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
	LCD_writeStringXY(1, 0, "Car Go!");
 80022d4:	4a06      	ldr	r2, [pc, #24]	; (80022f0 <Presenter_CarGo+0x20>)
 80022d6:	2100      	movs	r1, #0
 80022d8:	2001      	movs	r0, #1
 80022da:	f000 fa56 	bl	800278a <LCD_writeStringXY>
	Motor_forward(&leftMotor);
 80022de:	4805      	ldr	r0, [pc, #20]	; (80022f4 <Presenter_CarGo+0x24>)
 80022e0:	f000 fa97 	bl	8002812 <Motor_forward>
	Motor_forward(&rightMotor);
 80022e4:	4804      	ldr	r0, [pc, #16]	; (80022f8 <Presenter_CarGo+0x28>)
 80022e6:	f000 fa94 	bl	8002812 <Motor_forward>
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	08008820 	.word	0x08008820
 80022f4:	200006dc 	.word	0x200006dc
 80022f8:	200006f4 	.word	0x200006f4

080022fc <Presenter_CarStop>:
void Presenter_CarStop() {
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
	LCD_writeStringXY(1, 0, "Car Stop!");
 8002300:	4a06      	ldr	r2, [pc, #24]	; (800231c <Presenter_CarStop+0x20>)
 8002302:	2100      	movs	r1, #0
 8002304:	2001      	movs	r0, #1
 8002306:	f000 fa40 	bl	800278a <LCD_writeStringXY>
	Motor_stop(&leftMotor);
 800230a:	4805      	ldr	r0, [pc, #20]	; (8002320 <Presenter_CarStop+0x24>)
 800230c:	f000 fa71 	bl	80027f2 <Motor_stop>
	Motor_stop(&rightMotor);
 8002310:	4804      	ldr	r0, [pc, #16]	; (8002324 <Presenter_CarStop+0x28>)
 8002312:	f000 fa6e 	bl	80027f2 <Motor_stop>
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	08008828 	.word	0x08008828
 8002320:	200006dc 	.word	0x200006dc
 8002324:	200006f4 	.word	0x200006f4

08002328 <Presenter_CarLeft>:
void Presenter_CarLeft() {
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
	LCD_writeStringXY(1, 0, "Car Left!");
 800232c:	4a06      	ldr	r2, [pc, #24]	; (8002348 <Presenter_CarLeft+0x20>)
 800232e:	2100      	movs	r1, #0
 8002330:	2001      	movs	r0, #1
 8002332:	f000 fa2a 	bl	800278a <LCD_writeStringXY>
	Motor_backward(&leftMotor);
 8002336:	4805      	ldr	r0, [pc, #20]	; (800234c <Presenter_CarLeft+0x24>)
 8002338:	f000 fa8b 	bl	8002852 <Motor_backward>
	Motor_forward(&rightMotor);
 800233c:	4804      	ldr	r0, [pc, #16]	; (8002350 <Presenter_CarLeft+0x28>)
 800233e:	f000 fa68 	bl	8002812 <Motor_forward>

}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	08008834 	.word	0x08008834
 800234c:	200006dc 	.word	0x200006dc
 8002350:	200006f4 	.word	0x200006f4

08002354 <Presenter_CarRight>:
void Presenter_CarRight() {
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
	LCD_writeStringXY(1, 0, "Car Right!");
 8002358:	4a06      	ldr	r2, [pc, #24]	; (8002374 <Presenter_CarRight+0x20>)
 800235a:	2100      	movs	r1, #0
 800235c:	2001      	movs	r0, #1
 800235e:	f000 fa14 	bl	800278a <LCD_writeStringXY>
	Motor_backward(&rightMotor);
 8002362:	4805      	ldr	r0, [pc, #20]	; (8002378 <Presenter_CarRight+0x24>)
 8002364:	f000 fa75 	bl	8002852 <Motor_backward>
	Motor_forward(&leftMotor);
 8002368:	4804      	ldr	r0, [pc, #16]	; (800237c <Presenter_CarRight+0x28>)
 800236a:	f000 fa52 	bl	8002812 <Motor_forward>

}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	08008840 	.word	0x08008840
 8002378:	200006f4 	.word	0x200006f4
 800237c:	200006dc 	.word	0x200006dc

08002380 <Presenter_CarBack>:
void Presenter_CarBack() {
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
	LCD_writeStringXY(1, 0, "Car Back!");
 8002384:	4a06      	ldr	r2, [pc, #24]	; (80023a0 <Presenter_CarBack+0x20>)
 8002386:	2100      	movs	r1, #0
 8002388:	2001      	movs	r0, #1
 800238a:	f000 f9fe 	bl	800278a <LCD_writeStringXY>
	Motor_backward(&leftMotor);
 800238e:	4805      	ldr	r0, [pc, #20]	; (80023a4 <Presenter_CarBack+0x24>)
 8002390:	f000 fa5f 	bl	8002852 <Motor_backward>
	Motor_backward(&rightMotor);
 8002394:	4804      	ldr	r0, [pc, #16]	; (80023a8 <Presenter_CarBack+0x28>)
 8002396:	f000 fa5c 	bl	8002852 <Motor_backward>

}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	0800884c 	.word	0x0800884c
 80023a4:	200006dc 	.word	0x200006dc
 80023a8:	200006f4 	.word	0x200006f4

080023ac <Presenter_CarSpeed>:
void Presenter_CarSpeed() {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b088      	sub	sp, #32
 80023b0:	af00      	add	r7, sp, #0
	char buff[30];
	sprintf(buff, "Car Speed!:%d", MotorState_getSpeed());
 80023b2:	f7ff fe71 	bl	8002098 <MotorState_getSpeed>
 80023b6:	4602      	mov	r2, r0
 80023b8:	463b      	mov	r3, r7
 80023ba:	4907      	ldr	r1, [pc, #28]	; (80023d8 <Presenter_CarSpeed+0x2c>)
 80023bc:	4618      	mov	r0, r3
 80023be:	f005 fccd 	bl	8007d5c <siprintf>
	LCD_writeStringXY(1, 0, buff);
 80023c2:	463b      	mov	r3, r7
 80023c4:	461a      	mov	r2, r3
 80023c6:	2100      	movs	r1, #0
 80023c8:	2001      	movs	r0, #1
 80023ca:	f000 f9de 	bl	800278a <LCD_writeStringXY>

}
 80023ce:	bf00      	nop
 80023d0:	3720      	adds	r7, #32
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	08008858 	.word	0x08008858

080023dc <Presenter_Auto_setState>:

void Presenter_Auto_setState() {
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
	LCD_writeStringXY(0, 0, "Car AUTO!");
 80023e0:	4a03      	ldr	r2, [pc, #12]	; (80023f0 <Presenter_Auto_setState+0x14>)
 80023e2:	2100      	movs	r1, #0
 80023e4:	2000      	movs	r0, #0
 80023e6:	f000 f9d0 	bl	800278a <LCD_writeStringXY>
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	08008868 	.word	0x08008868

080023f4 <button_init>:
 */

#include "Button.h"


void button_init(button_t *button,GPIO_TypeDef* GPIOx,uint16_t GPIO_Pin){
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	4613      	mov	r3, r2
 8002400:	80fb      	strh	r3, [r7, #6]
	button->GPIOx = GPIOx;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	601a      	str	r2, [r3, #0]
	button->GPIO_Pin = GPIO_Pin;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	88fa      	ldrh	r2, [r7, #6]
 800240c:	809a      	strh	r2, [r3, #4]
	button->prevState =RELEASED;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2201      	movs	r2, #1
 8002412:	609a      	str	r2, [r3, #8]
}
 8002414:	bf00      	nop
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <button_getState>:

button_state_t button_getState(button_t *button){
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
	int curState = HAL_GPIO_ReadPin(button->GPIOx, button->GPIO_Pin);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	889b      	ldrh	r3, [r3, #4]
 8002430:	4619      	mov	r1, r3
 8002432:	4610      	mov	r0, r2
 8002434:	f000 feca 	bl	80031cc <HAL_GPIO_ReadPin>
 8002438:	4603      	mov	r3, r0
 800243a:	60fb      	str	r3, [r7, #12]

	if((button->prevState == RELEASED) && (curState == PUSHED)){
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d107      	bne.n	8002454 <button_getState+0x34>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d104      	bne.n	8002454 <button_getState+0x34>
		//HAL_Delay(50);
		button->prevState = PUSHED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	609a      	str	r2, [r3, #8]
		return ACT_PUSHED;
 8002450:	2303      	movs	r3, #3
 8002452:	e00c      	b.n	800246e <button_getState+0x4e>
	}
	else 	if((button->prevState == PUSHED) && (curState == RELEASED)){
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d107      	bne.n	800246c <button_getState+0x4c>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d104      	bne.n	800246c <button_getState+0x4c>
		//HAL_Delay(50);
		button->prevState = RELEASED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	609a      	str	r2, [r3, #8]
		return ACT_RELEASED;
 8002468:	2304      	movs	r3, #4
 800246a:	e000      	b.n	800246e <button_getState+0x4e>
	}
	return NO_ACT;
 800246c:	2302      	movs	r3, #2
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <LCD_delay>:
#include "LCD.h"

I2C_HandleTypeDef *hLCDI2C;
uint8_t lcdData = 0;

void LCD_delay(uint32_t Delay){
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
	HAL_Delay(Delay);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 fb88 	bl	8002b94 <HAL_Delay>
}
 8002484:	bf00      	nop
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <LCD_init>:

void LCD_init(I2C_HandleTypeDef *hi2c1){
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
	hLCDI2C = hi2c1;
 8002494:	4a18      	ldr	r2, [pc, #96]	; (80024f8 <LCD_init+0x6c>)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6013      	str	r3, [r2, #0]
	LCD_delay(15);
 800249a:	200f      	movs	r0, #15
 800249c:	f7ff ffeb 	bl	8002476 <LCD_delay>
	LCD_cmdMode();
 80024a0:	f000 f83e 	bl	8002520 <LCD_cmdMode>
	LCD_writeMode();
 80024a4:	f000 f85c 	bl	8002560 <LCD_writeMode>
	LCD_sendHighNibble(0x30);
 80024a8:	2030      	movs	r0, #48	; 0x30
 80024aa:	f000 f8b1 	bl	8002610 <LCD_sendHighNibble>
	LCD_delay(5);
 80024ae:	2005      	movs	r0, #5
 80024b0:	f7ff ffe1 	bl	8002476 <LCD_delay>
	LCD_sendHighNibble(0x30);
 80024b4:	2030      	movs	r0, #48	; 0x30
 80024b6:	f000 f8ab 	bl	8002610 <LCD_sendHighNibble>
	LCD_delay(1);
 80024ba:	2001      	movs	r0, #1
 80024bc:	f7ff ffdb 	bl	8002476 <LCD_delay>
	LCD_sendHighNibble(0x30);
 80024c0:	2030      	movs	r0, #48	; 0x30
 80024c2:	f000 f8a5 	bl	8002610 <LCD_sendHighNibble>
	LCD_sendHighNibble(0x20);
 80024c6:	2020      	movs	r0, #32
 80024c8:	f000 f8a2 	bl	8002610 <LCD_sendHighNibble>
	LCD_sendByte(LCD_4BIT_FUNCTION_SET);	//Function Set: 4Bit Interface, 2Line, 5x8 Font
 80024cc:	2028      	movs	r0, #40	; 0x28
 80024ce:	f000 f88d 	bl	80025ec <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_OFF); 				//Display Off
 80024d2:	2008      	movs	r0, #8
 80024d4:	f000 f88a 	bl	80025ec <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_CLEAR);			//Display Clear
 80024d8:	2001      	movs	r0, #1
 80024da:	f000 f887 	bl	80025ec <LCD_sendByte>
	LCD_sendByte(LCD_ENTRY_MODE_SET);			//Entry Mode Set
 80024de:	2006      	movs	r0, #6
 80024e0:	f000 f884 	bl	80025ec <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_ON);					//Display On
 80024e4:	200c      	movs	r0, #12
 80024e6:	f000 f881 	bl	80025ec <LCD_sendByte>
	LCD_backLightOn();										//backLightOn
 80024ea:	f000 f807 	bl	80024fc <LCD_backLightOn>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	2000070c 	.word	0x2000070c

080024fc <LCD_backLightOn>:

void LCD_backLightOn(){
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
	lcdData |=(1<<LCD_BACKLIGHT);
 8002500:	4b06      	ldr	r3, [pc, #24]	; (800251c <LCD_backLightOn+0x20>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	f043 0308 	orr.w	r3, r3, #8
 8002508:	b2da      	uxtb	r2, r3
 800250a:	4b04      	ldr	r3, [pc, #16]	; (800251c <LCD_backLightOn+0x20>)
 800250c:	701a      	strb	r2, [r3, #0]
	LCD_sendData(lcdData);
 800250e:	4b03      	ldr	r3, [pc, #12]	; (800251c <LCD_backLightOn+0x20>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f000 f854 	bl	80025c0 <LCD_sendData>
}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000710 	.word	0x20000710

08002520 <LCD_cmdMode>:

void LCD_cmdMode() {
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RS);
 8002524:	4b05      	ldr	r3, [pc, #20]	; (800253c <LCD_cmdMode+0x1c>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	f023 0301 	bic.w	r3, r3, #1
 800252c:	b2da      	uxtb	r2, r3
 800252e:	4b03      	ldr	r3, [pc, #12]	; (800253c <LCD_cmdMode+0x1c>)
 8002530:	701a      	strb	r2, [r3, #0]
}
 8002532:	bf00      	nop
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	20000710 	.word	0x20000710

08002540 <LCD_charMode>:
void LCD_charMode() {
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_RS);
 8002544:	4b05      	ldr	r3, [pc, #20]	; (800255c <LCD_charMode+0x1c>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4b03      	ldr	r3, [pc, #12]	; (800255c <LCD_charMode+0x1c>)
 8002550:	701a      	strb	r2, [r3, #0]
}
 8002552:	bf00      	nop
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	20000710 	.word	0x20000710

08002560 <LCD_writeMode>:
void LCD_writeMode() {
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RW);
 8002564:	4b05      	ldr	r3, [pc, #20]	; (800257c <LCD_writeMode+0x1c>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	f023 0302 	bic.w	r3, r3, #2
 800256c:	b2da      	uxtb	r2, r3
 800256e:	4b03      	ldr	r3, [pc, #12]	; (800257c <LCD_writeMode+0x1c>)
 8002570:	701a      	strb	r2, [r3, #0]
}
 8002572:	bf00      	nop
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	20000710 	.word	0x20000710

08002580 <LCD_E_High>:

void LCD_E_High() {
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_E);
 8002584:	4b05      	ldr	r3, [pc, #20]	; (800259c <LCD_E_High+0x1c>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	f043 0304 	orr.w	r3, r3, #4
 800258c:	b2da      	uxtb	r2, r3
 800258e:	4b03      	ldr	r3, [pc, #12]	; (800259c <LCD_E_High+0x1c>)
 8002590:	701a      	strb	r2, [r3, #0]
}
 8002592:	bf00      	nop
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	20000710 	.word	0x20000710

080025a0 <LCD_E_Low>:
void LCD_E_Low() {
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_E);
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <LCD_E_Low+0x1c>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	f023 0304 	bic.w	r3, r3, #4
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	4b03      	ldr	r3, [pc, #12]	; (80025bc <LCD_E_Low+0x1c>)
 80025b0:	701a      	strb	r2, [r3, #0]
}
 80025b2:	bf00      	nop
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	20000710 	.word	0x20000710

080025c0 <LCD_sendData>:

void LCD_sendData(uint8_t data) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af02      	add	r7, sp, #8
 80025c6:	4603      	mov	r3, r0
 80025c8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hLCDI2C, lcdDevAddr_w, &data, 1, 1000);
 80025ca:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <LCD_sendData+0x28>)
 80025cc:	6818      	ldr	r0, [r3, #0]
 80025ce:	1dfa      	adds	r2, r7, #7
 80025d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	2301      	movs	r3, #1
 80025d8:	214e      	movs	r1, #78	; 0x4e
 80025da:	f000 ff9f 	bl	800351c <HAL_I2C_Master_Transmit>
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	2000070c 	.word	0x2000070c

080025ec <LCD_sendByte>:

void LCD_sendByte(uint8_t data) {
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	71fb      	strb	r3, [r7, #7]
	LCD_sendHighNibble(data); //상위 4bit 전송
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f000 f809 	bl	8002610 <LCD_sendHighNibble>
	LCD_sendLowNibble(data); //하위 4bit 전송
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	4618      	mov	r0, r3
 8002602:	f000 f835 	bl	8002670 <LCD_sendLowNibble>
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <LCD_sendHighNibble>:

void LCD_sendHighNibble(uint8_t data) {
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
	LCD_E_High();
 800261a:	f7ff ffb1 	bl	8002580 <LCD_E_High>
	lcdData = (lcdData & 0x0f) | (data & 0xf0);	//상위 4bit data
 800261e:	4b13      	ldr	r3, [pc, #76]	; (800266c <LCD_sendHighNibble+0x5c>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	b25b      	sxtb	r3, r3
 8002624:	f003 030f 	and.w	r3, r3, #15
 8002628:	b25a      	sxtb	r2, r3
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	f023 030f 	bic.w	r3, r3, #15
 8002632:	b25b      	sxtb	r3, r3
 8002634:	4313      	orrs	r3, r2
 8002636:	b25b      	sxtb	r3, r3
 8002638:	b2da      	uxtb	r2, r3
 800263a:	4b0c      	ldr	r3, [pc, #48]	; (800266c <LCD_sendHighNibble+0x5c>)
 800263c:	701a      	strb	r2, [r3, #0]
	LCD_sendData(lcdData); //MCU send to LCD
 800263e:	4b0b      	ldr	r3, [pc, #44]	; (800266c <LCD_sendHighNibble+0x5c>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff ffbc 	bl	80025c0 <LCD_sendData>
	HAL_Delay(1);
 8002648:	2001      	movs	r0, #1
 800264a:	f000 faa3 	bl	8002b94 <HAL_Delay>
	LCD_E_Low();
 800264e:	f7ff ffa7 	bl	80025a0 <LCD_E_Low>
	LCD_sendData(lcdData); //MCU send to LCD
 8002652:	4b06      	ldr	r3, [pc, #24]	; (800266c <LCD_sendHighNibble+0x5c>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff ffb2 	bl	80025c0 <LCD_sendData>
	HAL_Delay(1);
 800265c:	2001      	movs	r0, #1
 800265e:	f000 fa99 	bl	8002b94 <HAL_Delay>
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20000710 	.word	0x20000710

08002670 <LCD_sendLowNibble>:

void LCD_sendLowNibble(uint8_t data) {
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	71fb      	strb	r3, [r7, #7]
	LCD_E_High();
 800267a:	f7ff ff81 	bl	8002580 <LCD_E_High>
	lcdData = (lcdData & 0x0f) | ((data & 0x0f)<<4);	//하위 4bit data
 800267e:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <LCD_sendLowNibble+0x58>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	b25b      	sxtb	r3, r3
 8002684:	f003 030f 	and.w	r3, r3, #15
 8002688:	b25a      	sxtb	r2, r3
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	b25b      	sxtb	r3, r3
 8002690:	4313      	orrs	r3, r2
 8002692:	b25b      	sxtb	r3, r3
 8002694:	b2da      	uxtb	r2, r3
 8002696:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <LCD_sendLowNibble+0x58>)
 8002698:	701a      	strb	r2, [r3, #0]
	LCD_sendData(lcdData); //MCU send to LCD
 800269a:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <LCD_sendLowNibble+0x58>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff ff8e 	bl	80025c0 <LCD_sendData>
	HAL_Delay(1);
 80026a4:	2001      	movs	r0, #1
 80026a6:	f000 fa75 	bl	8002b94 <HAL_Delay>
	LCD_E_Low();
 80026aa:	f7ff ff79 	bl	80025a0 <LCD_E_Low>
	LCD_sendData(lcdData); //MCU send to LCD
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <LCD_sendLowNibble+0x58>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff ff84 	bl	80025c0 <LCD_sendData>
	HAL_Delay(1);
 80026b8:	2001      	movs	r0, #1
 80026ba:	f000 fa6b 	bl	8002b94 <HAL_Delay>
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20000710 	.word	0x20000710

080026cc <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data) {
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	71fb      	strb	r3, [r7, #7]
	LCD_cmdMode();
 80026d6:	f7ff ff23 	bl	8002520 <LCD_cmdMode>
	LCD_writeMode();
 80026da:	f7ff ff41 	bl	8002560 <LCD_writeMode>
	LCD_sendByte(data);
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff ff83 	bl	80025ec <LCD_sendByte>
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data) {
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	4603      	mov	r3, r0
 80026f6:	71fb      	strb	r3, [r7, #7]
	LCD_charMode();
 80026f8:	f7ff ff22 	bl	8002540 <LCD_charMode>
	LCD_writeMode();
 80026fc:	f7ff ff30 	bl	8002560 <LCD_writeMode>
	LCD_sendByte(data);
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff ff72 	bl	80025ec <LCD_sendByte>
}
 8002708:	bf00      	nop
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col){
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	460a      	mov	r2, r1
 800271a:	71fb      	strb	r3, [r7, #7]
 800271c:	4613      	mov	r3, r2
 800271e:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 8002720:	79bb      	ldrb	r3, [r7, #6]
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	71bb      	strb	r3, [r7, #6]
	row %=2;
 8002728:	79fb      	ldrb	r3, [r7, #7]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = (0x40 * row) +col;
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	019b      	lsls	r3, r3, #6
 8002734:	b2da      	uxtb	r2, r3
 8002736:	79bb      	ldrb	r3, [r7, #6]
 8002738:	4413      	add	r3, r2
 800273a:	73fb      	strb	r3, [r7, #15]
	uint8_t command = 0x80 + lcdRegAddr;
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	3b80      	subs	r3, #128	; 0x80
 8002740:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 8002742:	7bbb      	ldrb	r3, [r7, #14]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff ffc1 	bl	80026cc <LCD_writeCmdData>
}
 800274a:	bf00      	nop
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <LCD_writeString>:

void LCD_writeString(char *str){
 8002752:	b580      	push	{r7, lr}
 8002754:	b084      	sub	sp, #16
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
	for(int i=0; str[i]; i++){ //str[i] == 0 for문 탈출
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	e009      	b.n	8002774 <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	4413      	add	r3, r2
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff ffc0 	bl	80026ee <LCD_writeCharData>
	for(int i=0; str[i]; i++){ //str[i] == 0 for문 탈출
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	3301      	adds	r3, #1
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	4413      	add	r3, r2
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1ef      	bne.n	8002760 <LCD_writeString+0xe>
	}
}
 8002780:	bf00      	nop
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col,char *str){
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	4603      	mov	r3, r0
 8002792:	603a      	str	r2, [r7, #0]
 8002794:	71fb      	strb	r3, [r7, #7]
 8002796:	460b      	mov	r3, r1
 8002798:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 800279a:	79ba      	ldrb	r2, [r7, #6]
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	4611      	mov	r1, r2
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff ffb5 	bl	8002710 <LCD_gotoXY>
	LCD_writeString(str);
 80027a6:	6838      	ldr	r0, [r7, #0]
 80027a8:	f7ff ffd3 	bl	8002752 <LCD_writeString>
}
 80027ac:	bf00      	nop
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <Motor_init>:
#include "Motor.h"


void Motor_init(Motor_t *Motor, TIM_HandleTypeDef *htim, uint32_t Channel,
		GPIO_TypeDef *dir1_GPIO, uint16_t dir1_GPIO_Pin, GPIO_TypeDef *dir2_GPIO,
		uint16_t dir2_GPIO_Pin) {
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
 80027c0:	603b      	str	r3, [r7, #0]
	Motor-> htim = htim;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	601a      	str	r2, [r3, #0]
	Motor-> Channel = Channel;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	605a      	str	r2, [r3, #4]
	Motor-> dir1_GPIO = dir1_GPIO;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	609a      	str	r2, [r3, #8]
	Motor-> dir1_GPIO_Pin = dir1_GPIO_Pin;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8b3a      	ldrh	r2, [r7, #24]
 80027d8:	819a      	strh	r2, [r3, #12]
	Motor-> dir2_GPIO = dir2_GPIO;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	69fa      	ldr	r2, [r7, #28]
 80027de:	611a      	str	r2, [r3, #16]
	Motor-> dir2_GPIO_Pin = dir2_GPIO_Pin;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8c3a      	ldrh	r2, [r7, #32]
 80027e4:	829a      	strh	r2, [r3, #20]
}
 80027e6:	bf00      	nop
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <Motor_stop>:

void Motor_stop(Motor_t *Motor) {
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(Motor->htim, Motor->Channel);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	4619      	mov	r1, r3
 8002804:	4610      	mov	r0, r2
 8002806:	f002 f8eb 	bl	80049e0 <HAL_TIM_PWM_Stop>
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <Motor_forward>:

void Motor_forward(Motor_t *Motor) {
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Motor->dir1_GPIO, Motor->dir1_GPIO_Pin, SET);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6898      	ldr	r0, [r3, #8]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	899b      	ldrh	r3, [r3, #12]
 8002822:	2201      	movs	r2, #1
 8002824:	4619      	mov	r1, r3
 8002826:	f000 fce9 	bl	80031fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor->dir2_GPIO, Motor->dir2_GPIO_Pin, RESET);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6918      	ldr	r0, [r3, #16]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	8a9b      	ldrh	r3, [r3, #20]
 8002832:	2200      	movs	r2, #0
 8002834:	4619      	mov	r1, r3
 8002836:	f000 fce1 	bl	80031fc <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(Motor->htim, Motor->Channel);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	4619      	mov	r1, r3
 8002844:	4610      	mov	r0, r2
 8002846:	f002 f81b 	bl	8004880 <HAL_TIM_PWM_Start>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <Motor_backward>:
void Motor_backward(Motor_t *Motor) {
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Motor->dir1_GPIO, Motor->dir1_GPIO_Pin, RESET);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6898      	ldr	r0, [r3, #8]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	899b      	ldrh	r3, [r3, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	4619      	mov	r1, r3
 8002866:	f000 fcc9 	bl	80031fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor->dir2_GPIO, Motor->dir2_GPIO_Pin, SET);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6918      	ldr	r0, [r3, #16]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	8a9b      	ldrh	r3, [r3, #20]
 8002872:	2201      	movs	r2, #1
 8002874:	4619      	mov	r1, r3
 8002876:	f000 fcc1 	bl	80031fc <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(Motor->htim, Motor->Channel);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	4619      	mov	r1, r3
 8002884:	4610      	mov	r0, r2
 8002886:	f001 fffb 	bl	8004880 <HAL_TIM_PWM_Start>

}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <Motor_setSpeed>:
void Motor_setSpeed(Motor_t *Motor,int speedVal) {
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
 800289a:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, speedVal);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d105      	bne.n	80028b0 <Motor_setSpeed+0x1e>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	635a      	str	r2, [r3, #52]	; 0x34
}
 80028ae:	e018      	b.n	80028e2 <Motor_setSpeed+0x50>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, speedVal);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d105      	bne.n	80028c4 <Motor_setSpeed+0x32>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80028c2:	e00e      	b.n	80028e2 <Motor_setSpeed+0x50>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, speedVal);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d105      	bne.n	80028d8 <Motor_setSpeed+0x46>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80028d6:	e004      	b.n	80028e2 <Motor_setSpeed+0x50>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, speedVal);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <UltraSonic_init>:
#include "../Common/Delayus/delayus.h"

//Trig Port, Trig Pin, Echo Port, Echo Pin, Timer, Flag
void UltraSonic_init(ultraSonic_t *ultraSonic, TIM_HandleTypeDef *hTim,
		GPIO_TypeDef *GPIO_Trig, uint16_t GPIO_TrigPin, GPIO_TypeDef *GPIO_Echo,
		uint16_t GPIO_EchoPin) {
 80028ee:	b480      	push	{r7}
 80028f0:	b085      	sub	sp, #20
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	60f8      	str	r0, [r7, #12]
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	607a      	str	r2, [r7, #4]
 80028fa:	807b      	strh	r3, [r7, #2]
	ultraSonic->hTim = hTim;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	601a      	str	r2, [r3, #0]
	ultraSonic->GPIO_Trig = GPIO_Trig;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	605a      	str	r2, [r3, #4]
	ultraSonic->GPIO_TrigPin = GPIO_TrigPin;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	887a      	ldrh	r2, [r7, #2]
 800290c:	811a      	strh	r2, [r3, #8]
	ultraSonic->GPIO_Echo = GPIO_Echo;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	60da      	str	r2, [r3, #12]
	ultraSonic->GPIO_EchoPin = GPIO_EchoPin;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8bba      	ldrh	r2, [r7, #28]
 8002918:	821a      	strh	r2, [r3, #16]
	ultraSonic->timCounter = 0;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	825a      	strh	r2, [r3, #18]
	ultraSonic->echoFlag = 0;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	615a      	str	r2, [r3, #20]
}
 8002926:	bf00      	nop
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <UltraSonic_isCmpltRecvEcho>:

int UltraSonic_isCmpltRecvEcho(ultraSonic_t *ultraSonic) {
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
	return ultraSonic->echoFlag;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	695b      	ldr	r3, [r3, #20]
}
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <UltraSonic_clearEchoFlag>:
void UltraSonic_clearEchoFlag(ultraSonic_t *ultraSonic) {
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
	ultraSonic->echoFlag = 0;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	615a      	str	r2, [r3, #20]
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <UltraSonic_setEchoFlag>:
void UltraSonic_setEchoFlag(ultraSonic_t *ultraSonic) {
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
	ultraSonic->echoFlag = 1;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	615a      	str	r2, [r3, #20]
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <UltraSonic_getEchopinState>:
int UltraSonic_getEchopinState(ultraSonic_t *ultraSonic) {
 800297e:	b580      	push	{r7, lr}
 8002980:	b082      	sub	sp, #8
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(ultraSonic->GPIO_Echo, ultraSonic->GPIO_EchoPin);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	8a1b      	ldrh	r3, [r3, #16]
 800298e:	4619      	mov	r1, r3
 8002990:	4610      	mov	r0, r2
 8002992:	f000 fc1b 	bl	80031cc <HAL_GPIO_ReadPin>
 8002996:	4603      	mov	r3, r0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <UltraSonic_clearTimer>:
void UltraSonic_clearTimer(ultraSonic_t *ultraSonic) {
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(ultraSonic->hTim, 0);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2200      	movs	r2, #0
 80029b0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <UltraSonic_startTimer>:
void UltraSonic_startTimer(ultraSonic_t *ultraSonic) {
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(ultraSonic->hTim);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f001 fe1a 	bl	8004604 <HAL_TIM_Base_Start>
}
 80029d0:	bf00      	nop
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <UltraSonic_stopTimer>:
void UltraSonic_stopTimer(ultraSonic_t *ultraSonic) {
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop(ultraSonic->hTim);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f001 fe67 	bl	80046b8 <HAL_TIM_Base_Stop>
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <UltraSonic_getTimerCounter>:
uint16_t UltraSonic_getTimerCounter(ultraSonic_t *ultraSonic) {
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
	return __HAL_TIM_GET_COUNTER(ultraSonic->hTim);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	b29b      	uxth	r3, r3
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <UltraSonic_startTrig>:

void UltraSonic_startTrig(ultraSonic_t *ultraSonic) {
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ultraSonic->GPIO_Trig, ultraSonic->GPIO_TrigPin, SET);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6858      	ldr	r0, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	891b      	ldrh	r3, [r3, #8]
 8002a20:	2201      	movs	r2, #1
 8002a22:	4619      	mov	r1, r3
 8002a24:	f000 fbea 	bl	80031fc <HAL_GPIO_WritePin>
	DelayUS(15);
 8002a28:	200f      	movs	r0, #15
 8002a2a:	f7fe f8df 	bl	8000bec <DelayUS>
	HAL_GPIO_WritePin(ultraSonic->GPIO_Trig, ultraSonic->GPIO_TrigPin, RESET);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6858      	ldr	r0, [r3, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	891b      	ldrh	r3, [r3, #8]
 8002a36:	2200      	movs	r2, #0
 8002a38:	4619      	mov	r1, r3
 8002a3a:	f000 fbdf 	bl	80031fc <HAL_GPIO_WritePin>
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <UltraSonic_ISR_Process>:

void UltraSonic_ISR_Process(ultraSonic_t *ultraSonic, uint16_t GPIO_Pin) {
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	460b      	mov	r3, r1
 8002a50:	807b      	strh	r3, [r7, #2]
	if (GPIO_Pin == ultraSonic->GPIO_EchoPin) {
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	8a1b      	ldrh	r3, [r3, #16]
 8002a56:	887a      	ldrh	r2, [r7, #2]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d11c      	bne.n	8002a96 <UltraSonic_ISR_Process+0x50>
		// Echo Pin High 유지 시간 측정
		if (UltraSonic_getEchopinState(ultraSonic)) { 	//Rising Edge
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7ff ff8e 	bl	800297e <UltraSonic_getEchopinState>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d009      	beq.n	8002a7c <UltraSonic_ISR_Process+0x36>
			UltraSonic_clearTimer(ultraSonic);					//CNT 0 Setting
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff ff99 	bl	80029a0 <UltraSonic_clearTimer>
			UltraSonic_startTimer(ultraSonic);					//Timer Start
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff ffa5 	bl	80029be <UltraSonic_startTimer>
			UltraSonic_clearEchoFlag(ultraSonic);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7ff ff68 	bl	800294a <UltraSonic_clearEchoFlag>
			UltraSonic_stopTimer(ultraSonic);
			ultraSonic->timCounter = UltraSonic_getTimerCounter(ultraSonic);
			UltraSonic_setEchoFlag(ultraSonic);
		}
	}
}
 8002a7a:	e00c      	b.n	8002a96 <UltraSonic_ISR_Process+0x50>
			UltraSonic_stopTimer(ultraSonic);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff ffab 	bl	80029d8 <UltraSonic_stopTimer>
			ultraSonic->timCounter = UltraSonic_getTimerCounter(ultraSonic);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff ffb5 	bl	80029f2 <UltraSonic_getTimerCounter>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	825a      	strh	r2, [r3, #18]
			UltraSonic_setEchoFlag(ultraSonic);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f7ff ff67 	bl	8002964 <UltraSonic_setEchoFlag>
}
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <UltraSonic_getDistance>:

int UltraSonic_getDistance(ultraSonic_t *ultraSonic) {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
	int timeout = 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60fb      	str	r3, [r7, #12]
	UltraSonic_startTrig(ultraSonic);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff ffaf 	bl	8002a10 <UltraSonic_startTrig>
	while (!UltraSonic_isCmpltRecvEcho(ultraSonic)) {
 8002ab2:	e00a      	b.n	8002aca <UltraSonic_getDistance+0x2a>
		timeout++;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	60fb      	str	r3, [r7, #12]
		if (timeout > 20) return 0;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b14      	cmp	r3, #20
 8002abe:	dd01      	ble.n	8002ac4 <UltraSonic_getDistance+0x24>
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	e01c      	b.n	8002afe <UltraSonic_getDistance+0x5e>
		HAL_Delay(1);
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	f000 f865 	bl	8002b94 <HAL_Delay>
	while (!UltraSonic_isCmpltRecvEcho(ultraSonic)) {
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff ff31 	bl	8002932 <UltraSonic_isCmpltRecvEcho>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0ee      	beq.n	8002ab4 <UltraSonic_getDistance+0x14>
	}
	UltraSonic_clearEchoFlag(ultraSonic);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff ff37 	bl	800294a <UltraSonic_clearEchoFlag>
	return ultraSonic->timCounter * 0.017;	//cm Distance
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	8a5b      	ldrh	r3, [r3, #18]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fd fe49 	bl	8000778 <__aeabi_i2d>
 8002ae6:	a308      	add	r3, pc, #32	; (adr r3, 8002b08 <UltraSonic_getDistance+0x68>)
 8002ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aec:	f7fd fbc8 	bl	8000280 <__aeabi_dmul>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4610      	mov	r0, r2
 8002af6:	4619      	mov	r1, r3
 8002af8:	f7fd fea8 	bl	800084c <__aeabi_d2iz>
 8002afc:	4603      	mov	r3, r0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	b020c49c 	.word	0xb020c49c
 8002b0c:	3f916872 	.word	0x3f916872

08002b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b14:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <HAL_Init+0x40>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a0d      	ldr	r2, [pc, #52]	; (8002b50 <HAL_Init+0x40>)
 8002b1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b20:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <HAL_Init+0x40>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <HAL_Init+0x40>)
 8002b26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b2c:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <HAL_Init+0x40>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a07      	ldr	r2, [pc, #28]	; (8002b50 <HAL_Init+0x40>)
 8002b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b38:	2003      	movs	r0, #3
 8002b3a:	f000 f8fc 	bl	8002d36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b3e:	200f      	movs	r0, #15
 8002b40:	f7fe ff46 	bl	80019d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b44:	f7fe fd82 	bl	800164c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40023c00 	.word	0x40023c00

08002b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b58:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <HAL_IncTick+0x20>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <HAL_IncTick+0x24>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4413      	add	r3, r2
 8002b64:	4a04      	ldr	r2, [pc, #16]	; (8002b78 <HAL_IncTick+0x24>)
 8002b66:	6013      	str	r3, [r2, #0]
}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	20000008 	.word	0x20000008
 8002b78:	20000714 	.word	0x20000714

08002b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b80:	4b03      	ldr	r3, [pc, #12]	; (8002b90 <HAL_GetTick+0x14>)
 8002b82:	681b      	ldr	r3, [r3, #0]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	20000714 	.word	0x20000714

08002b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b9c:	f7ff ffee 	bl	8002b7c <HAL_GetTick>
 8002ba0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bac:	d005      	beq.n	8002bba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bae:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <HAL_Delay+0x44>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bba:	bf00      	nop
 8002bbc:	f7ff ffde 	bl	8002b7c <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d8f7      	bhi.n	8002bbc <HAL_Delay+0x28>
  {
  }
}
 8002bcc:	bf00      	nop
 8002bce:	bf00      	nop
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20000008 	.word	0x20000008

08002bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bec:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <__NVIC_SetPriorityGrouping+0x44>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c0e:	4a04      	ldr	r2, [pc, #16]	; (8002c20 <__NVIC_SetPriorityGrouping+0x44>)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	60d3      	str	r3, [r2, #12]
}
 8002c14:	bf00      	nop
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c28:	4b04      	ldr	r3, [pc, #16]	; (8002c3c <__NVIC_GetPriorityGrouping+0x18>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	0a1b      	lsrs	r3, r3, #8
 8002c2e:	f003 0307 	and.w	r3, r3, #7
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	e000ed00 	.word	0xe000ed00

08002c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	db0b      	blt.n	8002c6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	f003 021f 	and.w	r2, r3, #31
 8002c58:	4907      	ldr	r1, [pc, #28]	; (8002c78 <__NVIC_EnableIRQ+0x38>)
 8002c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5e:	095b      	lsrs	r3, r3, #5
 8002c60:	2001      	movs	r0, #1
 8002c62:	fa00 f202 	lsl.w	r2, r0, r2
 8002c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	e000e100 	.word	0xe000e100

08002c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	6039      	str	r1, [r7, #0]
 8002c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	db0a      	blt.n	8002ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	490c      	ldr	r1, [pc, #48]	; (8002cc8 <__NVIC_SetPriority+0x4c>)
 8002c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9a:	0112      	lsls	r2, r2, #4
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ca4:	e00a      	b.n	8002cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	4908      	ldr	r1, [pc, #32]	; (8002ccc <__NVIC_SetPriority+0x50>)
 8002cac:	79fb      	ldrb	r3, [r7, #7]
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	3b04      	subs	r3, #4
 8002cb4:	0112      	lsls	r2, r2, #4
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	440b      	add	r3, r1
 8002cba:	761a      	strb	r2, [r3, #24]
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	e000e100 	.word	0xe000e100
 8002ccc:	e000ed00 	.word	0xe000ed00

08002cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b089      	sub	sp, #36	; 0x24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f1c3 0307 	rsb	r3, r3, #7
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	bf28      	it	cs
 8002cee:	2304      	movcs	r3, #4
 8002cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	2b06      	cmp	r3, #6
 8002cf8:	d902      	bls.n	8002d00 <NVIC_EncodePriority+0x30>
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	3b03      	subs	r3, #3
 8002cfe:	e000      	b.n	8002d02 <NVIC_EncodePriority+0x32>
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d04:	f04f 32ff 	mov.w	r2, #4294967295
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43da      	mvns	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	401a      	ands	r2, r3
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d18:	f04f 31ff 	mov.w	r1, #4294967295
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d22:	43d9      	mvns	r1, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d28:	4313      	orrs	r3, r2
         );
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3724      	adds	r7, #36	; 0x24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff ff4c 	bl	8002bdc <__NVIC_SetPriorityGrouping>
}
 8002d44:	bf00      	nop
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d5e:	f7ff ff61 	bl	8002c24 <__NVIC_GetPriorityGrouping>
 8002d62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	68b9      	ldr	r1, [r7, #8]
 8002d68:	6978      	ldr	r0, [r7, #20]
 8002d6a:	f7ff ffb1 	bl	8002cd0 <NVIC_EncodePriority>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d74:	4611      	mov	r1, r2
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff ff80 	bl	8002c7c <__NVIC_SetPriority>
}
 8002d7c:	bf00      	nop
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff ff54 	bl	8002c40 <__NVIC_EnableIRQ>
}
 8002d98:	bf00      	nop
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002dae:	f7ff fee5 	bl	8002b7c <HAL_GetTick>
 8002db2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d008      	beq.n	8002dd2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2280      	movs	r2, #128	; 0x80
 8002dc4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e052      	b.n	8002e78 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0216 	bic.w	r2, r2, #22
 8002de0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695a      	ldr	r2, [r3, #20]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002df0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d103      	bne.n	8002e02 <HAL_DMA_Abort+0x62>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d007      	beq.n	8002e12 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0208 	bic.w	r2, r2, #8
 8002e10:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0201 	bic.w	r2, r2, #1
 8002e20:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e22:	e013      	b.n	8002e4c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e24:	f7ff feaa 	bl	8002b7c <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b05      	cmp	r3, #5
 8002e30:	d90c      	bls.n	8002e4c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2220      	movs	r2, #32
 8002e36:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2203      	movs	r2, #3
 8002e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e015      	b.n	8002e78 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1e4      	bne.n	8002e24 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5e:	223f      	movs	r2, #63	; 0x3f
 8002e60:	409a      	lsls	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d004      	beq.n	8002e9e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2280      	movs	r2, #128	; 0x80
 8002e98:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e00c      	b.n	8002eb8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2205      	movs	r2, #5
 8002ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0201 	bic.w	r2, r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b089      	sub	sp, #36	; 0x24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
 8002ede:	e159      	b.n	8003194 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	f040 8148 	bne.w	800318e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d005      	beq.n	8002f16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d130      	bne.n	8002f78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	2203      	movs	r2, #3
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43db      	mvns	r3, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	091b      	lsrs	r3, r3, #4
 8002f62:	f003 0201 	and.w	r2, r3, #1
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 0303 	and.w	r3, r3, #3
 8002f80:	2b03      	cmp	r3, #3
 8002f82:	d017      	beq.n	8002fb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	2203      	movs	r2, #3
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d123      	bne.n	8003008 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	08da      	lsrs	r2, r3, #3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3208      	adds	r2, #8
 8002fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	220f      	movs	r2, #15
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	08da      	lsrs	r2, r3, #3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3208      	adds	r2, #8
 8003002:	69b9      	ldr	r1, [r7, #24]
 8003004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	2203      	movs	r2, #3
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 0203 	and.w	r2, r3, #3
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 80a2 	beq.w	800318e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	4b57      	ldr	r3, [pc, #348]	; (80031ac <HAL_GPIO_Init+0x2e8>)
 8003050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003052:	4a56      	ldr	r2, [pc, #344]	; (80031ac <HAL_GPIO_Init+0x2e8>)
 8003054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003058:	6453      	str	r3, [r2, #68]	; 0x44
 800305a:	4b54      	ldr	r3, [pc, #336]	; (80031ac <HAL_GPIO_Init+0x2e8>)
 800305c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003066:	4a52      	ldr	r2, [pc, #328]	; (80031b0 <HAL_GPIO_Init+0x2ec>)
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	089b      	lsrs	r3, r3, #2
 800306c:	3302      	adds	r3, #2
 800306e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003072:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	220f      	movs	r2, #15
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43db      	mvns	r3, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4013      	ands	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a49      	ldr	r2, [pc, #292]	; (80031b4 <HAL_GPIO_Init+0x2f0>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d019      	beq.n	80030c6 <HAL_GPIO_Init+0x202>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a48      	ldr	r2, [pc, #288]	; (80031b8 <HAL_GPIO_Init+0x2f4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d013      	beq.n	80030c2 <HAL_GPIO_Init+0x1fe>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a47      	ldr	r2, [pc, #284]	; (80031bc <HAL_GPIO_Init+0x2f8>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00d      	beq.n	80030be <HAL_GPIO_Init+0x1fa>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a46      	ldr	r2, [pc, #280]	; (80031c0 <HAL_GPIO_Init+0x2fc>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d007      	beq.n	80030ba <HAL_GPIO_Init+0x1f6>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a45      	ldr	r2, [pc, #276]	; (80031c4 <HAL_GPIO_Init+0x300>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d101      	bne.n	80030b6 <HAL_GPIO_Init+0x1f2>
 80030b2:	2304      	movs	r3, #4
 80030b4:	e008      	b.n	80030c8 <HAL_GPIO_Init+0x204>
 80030b6:	2307      	movs	r3, #7
 80030b8:	e006      	b.n	80030c8 <HAL_GPIO_Init+0x204>
 80030ba:	2303      	movs	r3, #3
 80030bc:	e004      	b.n	80030c8 <HAL_GPIO_Init+0x204>
 80030be:	2302      	movs	r3, #2
 80030c0:	e002      	b.n	80030c8 <HAL_GPIO_Init+0x204>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <HAL_GPIO_Init+0x204>
 80030c6:	2300      	movs	r3, #0
 80030c8:	69fa      	ldr	r2, [r7, #28]
 80030ca:	f002 0203 	and.w	r2, r2, #3
 80030ce:	0092      	lsls	r2, r2, #2
 80030d0:	4093      	lsls	r3, r2
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030d8:	4935      	ldr	r1, [pc, #212]	; (80031b0 <HAL_GPIO_Init+0x2ec>)
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	089b      	lsrs	r3, r3, #2
 80030de:	3302      	adds	r3, #2
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030e6:	4b38      	ldr	r3, [pc, #224]	; (80031c8 <HAL_GPIO_Init+0x304>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	43db      	mvns	r3, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4013      	ands	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	4313      	orrs	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800310a:	4a2f      	ldr	r2, [pc, #188]	; (80031c8 <HAL_GPIO_Init+0x304>)
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003110:	4b2d      	ldr	r3, [pc, #180]	; (80031c8 <HAL_GPIO_Init+0x304>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	43db      	mvns	r3, r3
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4013      	ands	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003134:	4a24      	ldr	r2, [pc, #144]	; (80031c8 <HAL_GPIO_Init+0x304>)
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800313a:	4b23      	ldr	r3, [pc, #140]	; (80031c8 <HAL_GPIO_Init+0x304>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	43db      	mvns	r3, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4013      	ands	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800315e:	4a1a      	ldr	r2, [pc, #104]	; (80031c8 <HAL_GPIO_Init+0x304>)
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003164:	4b18      	ldr	r3, [pc, #96]	; (80031c8 <HAL_GPIO_Init+0x304>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	43db      	mvns	r3, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4013      	ands	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	4313      	orrs	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003188:	4a0f      	ldr	r2, [pc, #60]	; (80031c8 <HAL_GPIO_Init+0x304>)
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	3301      	adds	r3, #1
 8003192:	61fb      	str	r3, [r7, #28]
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	2b0f      	cmp	r3, #15
 8003198:	f67f aea2 	bls.w	8002ee0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800319c:	bf00      	nop
 800319e:	bf00      	nop
 80031a0:	3724      	adds	r7, #36	; 0x24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	40023800 	.word	0x40023800
 80031b0:	40013800 	.word	0x40013800
 80031b4:	40020000 	.word	0x40020000
 80031b8:	40020400 	.word	0x40020400
 80031bc:	40020800 	.word	0x40020800
 80031c0:	40020c00 	.word	0x40020c00
 80031c4:	40021000 	.word	0x40021000
 80031c8:	40013c00 	.word	0x40013c00

080031cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	460b      	mov	r3, r1
 80031d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	887b      	ldrh	r3, [r7, #2]
 80031de:	4013      	ands	r3, r2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031e4:	2301      	movs	r3, #1
 80031e6:	73fb      	strb	r3, [r7, #15]
 80031e8:	e001      	b.n	80031ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031ea:	2300      	movs	r3, #0
 80031ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	807b      	strh	r3, [r7, #2]
 8003208:	4613      	mov	r3, r2
 800320a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800320c:	787b      	ldrb	r3, [r7, #1]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003212:	887a      	ldrh	r2, [r7, #2]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003218:	e003      	b.n	8003222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800321a:	887b      	ldrh	r3, [r7, #2]
 800321c:	041a      	lsls	r2, r3, #16
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	619a      	str	r2, [r3, #24]
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800322e:	b480      	push	{r7}
 8003230:	b085      	sub	sp, #20
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
 8003236:	460b      	mov	r3, r1
 8003238:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003240:	887a      	ldrh	r2, [r7, #2]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4013      	ands	r3, r2
 8003246:	041a      	lsls	r2, r3, #16
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	43d9      	mvns	r1, r3
 800324c:	887b      	ldrh	r3, [r7, #2]
 800324e:	400b      	ands	r3, r1
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	619a      	str	r2, [r3, #24]
}
 8003256:	bf00      	nop
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
	...

08003264 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800326e:	4b08      	ldr	r3, [pc, #32]	; (8003290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003270:	695a      	ldr	r2, [r3, #20]
 8003272:	88fb      	ldrh	r3, [r7, #6]
 8003274:	4013      	ands	r3, r2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d006      	beq.n	8003288 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800327a:	4a05      	ldr	r2, [pc, #20]	; (8003290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800327c:	88fb      	ldrh	r3, [r7, #6]
 800327e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003280:	88fb      	ldrh	r3, [r7, #6]
 8003282:	4618      	mov	r0, r3
 8003284:	f7fd fddc 	bl	8000e40 <HAL_GPIO_EXTI_Callback>
  }
}
 8003288:	bf00      	nop
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40013c00 	.word	0x40013c00

08003294 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e12b      	b.n	80034fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d106      	bne.n	80032c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7fe f9f2 	bl	80016a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2224      	movs	r2, #36	; 0x24
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0201 	bic.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032f8:	f001 f8da 	bl	80044b0 <HAL_RCC_GetPCLK1Freq>
 80032fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	4a81      	ldr	r2, [pc, #516]	; (8003508 <HAL_I2C_Init+0x274>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d807      	bhi.n	8003318 <HAL_I2C_Init+0x84>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4a80      	ldr	r2, [pc, #512]	; (800350c <HAL_I2C_Init+0x278>)
 800330c:	4293      	cmp	r3, r2
 800330e:	bf94      	ite	ls
 8003310:	2301      	movls	r3, #1
 8003312:	2300      	movhi	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	e006      	b.n	8003326 <HAL_I2C_Init+0x92>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4a7d      	ldr	r2, [pc, #500]	; (8003510 <HAL_I2C_Init+0x27c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	bf94      	ite	ls
 8003320:	2301      	movls	r3, #1
 8003322:	2300      	movhi	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e0e7      	b.n	80034fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4a78      	ldr	r2, [pc, #480]	; (8003514 <HAL_I2C_Init+0x280>)
 8003332:	fba2 2303 	umull	r2, r3, r2, r3
 8003336:	0c9b      	lsrs	r3, r3, #18
 8003338:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	430a      	orrs	r2, r1
 800334c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	4a6a      	ldr	r2, [pc, #424]	; (8003508 <HAL_I2C_Init+0x274>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d802      	bhi.n	8003368 <HAL_I2C_Init+0xd4>
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	3301      	adds	r3, #1
 8003366:	e009      	b.n	800337c <HAL_I2C_Init+0xe8>
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800336e:	fb02 f303 	mul.w	r3, r2, r3
 8003372:	4a69      	ldr	r2, [pc, #420]	; (8003518 <HAL_I2C_Init+0x284>)
 8003374:	fba2 2303 	umull	r2, r3, r2, r3
 8003378:	099b      	lsrs	r3, r3, #6
 800337a:	3301      	adds	r3, #1
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6812      	ldr	r2, [r2, #0]
 8003380:	430b      	orrs	r3, r1
 8003382:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800338e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	495c      	ldr	r1, [pc, #368]	; (8003508 <HAL_I2C_Init+0x274>)
 8003398:	428b      	cmp	r3, r1
 800339a:	d819      	bhi.n	80033d0 <HAL_I2C_Init+0x13c>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	1e59      	subs	r1, r3, #1
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80033aa:	1c59      	adds	r1, r3, #1
 80033ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033b0:	400b      	ands	r3, r1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00a      	beq.n	80033cc <HAL_I2C_Init+0x138>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	1e59      	subs	r1, r3, #1
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80033c4:	3301      	adds	r3, #1
 80033c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ca:	e051      	b.n	8003470 <HAL_I2C_Init+0x1dc>
 80033cc:	2304      	movs	r3, #4
 80033ce:	e04f      	b.n	8003470 <HAL_I2C_Init+0x1dc>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d111      	bne.n	80033fc <HAL_I2C_Init+0x168>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	1e58      	subs	r0, r3, #1
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6859      	ldr	r1, [r3, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	440b      	add	r3, r1
 80033e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ea:	3301      	adds	r3, #1
 80033ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	bf0c      	ite	eq
 80033f4:	2301      	moveq	r3, #1
 80033f6:	2300      	movne	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	e012      	b.n	8003422 <HAL_I2C_Init+0x18e>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	1e58      	subs	r0, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6859      	ldr	r1, [r3, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	0099      	lsls	r1, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003412:	3301      	adds	r3, #1
 8003414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003418:	2b00      	cmp	r3, #0
 800341a:	bf0c      	ite	eq
 800341c:	2301      	moveq	r3, #1
 800341e:	2300      	movne	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_I2C_Init+0x196>
 8003426:	2301      	movs	r3, #1
 8003428:	e022      	b.n	8003470 <HAL_I2C_Init+0x1dc>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10e      	bne.n	8003450 <HAL_I2C_Init+0x1bc>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	1e58      	subs	r0, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6859      	ldr	r1, [r3, #4]
 800343a:	460b      	mov	r3, r1
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	440b      	add	r3, r1
 8003440:	fbb0 f3f3 	udiv	r3, r0, r3
 8003444:	3301      	adds	r3, #1
 8003446:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800344a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800344e:	e00f      	b.n	8003470 <HAL_I2C_Init+0x1dc>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1e58      	subs	r0, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6859      	ldr	r1, [r3, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	0099      	lsls	r1, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	fbb0 f3f3 	udiv	r3, r0, r3
 8003466:	3301      	adds	r3, #1
 8003468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800346c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	6809      	ldr	r1, [r1, #0]
 8003474:	4313      	orrs	r3, r2
 8003476:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69da      	ldr	r2, [r3, #28]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800349e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6911      	ldr	r1, [r2, #16]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	68d2      	ldr	r2, [r2, #12]
 80034aa:	4311      	orrs	r1, r2
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	430b      	orrs	r3, r1
 80034b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	695a      	ldr	r2, [r3, #20]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0201 	orr.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2220      	movs	r2, #32
 80034ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	000186a0 	.word	0x000186a0
 800350c:	001e847f 	.word	0x001e847f
 8003510:	003d08ff 	.word	0x003d08ff
 8003514:	431bde83 	.word	0x431bde83
 8003518:	10624dd3 	.word	0x10624dd3

0800351c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af02      	add	r7, sp, #8
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	607a      	str	r2, [r7, #4]
 8003526:	461a      	mov	r2, r3
 8003528:	460b      	mov	r3, r1
 800352a:	817b      	strh	r3, [r7, #10]
 800352c:	4613      	mov	r3, r2
 800352e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003530:	f7ff fb24 	bl	8002b7c <HAL_GetTick>
 8003534:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b20      	cmp	r3, #32
 8003540:	f040 80e0 	bne.w	8003704 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	2319      	movs	r3, #25
 800354a:	2201      	movs	r2, #1
 800354c:	4970      	ldr	r1, [pc, #448]	; (8003710 <HAL_I2C_Master_Transmit+0x1f4>)
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 f964 	bl	800381c <I2C_WaitOnFlagUntilTimeout>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800355a:	2302      	movs	r3, #2
 800355c:	e0d3      	b.n	8003706 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <HAL_I2C_Master_Transmit+0x50>
 8003568:	2302      	movs	r3, #2
 800356a:	e0cc      	b.n	8003706 <HAL_I2C_Master_Transmit+0x1ea>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b01      	cmp	r3, #1
 8003580:	d007      	beq.n	8003592 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 0201 	orr.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2221      	movs	r2, #33	; 0x21
 80035a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2210      	movs	r2, #16
 80035ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	893a      	ldrh	r2, [r7, #8]
 80035c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4a50      	ldr	r2, [pc, #320]	; (8003714 <HAL_I2C_Master_Transmit+0x1f8>)
 80035d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035d4:	8979      	ldrh	r1, [r7, #10]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	6a3a      	ldr	r2, [r7, #32]
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 f89c 	bl	8003718 <I2C_MasterRequestWrite>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e08d      	b.n	8003706 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ea:	2300      	movs	r3, #0
 80035ec:	613b      	str	r3, [r7, #16]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	613b      	str	r3, [r7, #16]
 80035fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003600:	e066      	b.n	80036d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	6a39      	ldr	r1, [r7, #32]
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 fa22 	bl	8003a50 <I2C_WaitOnTXEFlagUntilTimeout>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00d      	beq.n	800362e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	2b04      	cmp	r3, #4
 8003618:	d107      	bne.n	800362a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003628:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e06b      	b.n	8003706 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	781a      	ldrb	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003648:	b29b      	uxth	r3, r3
 800364a:	3b01      	subs	r3, #1
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b04      	cmp	r3, #4
 800366a:	d11b      	bne.n	80036a4 <HAL_I2C_Master_Transmit+0x188>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003670:	2b00      	cmp	r3, #0
 8003672:	d017      	beq.n	80036a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	781a      	ldrb	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	6a39      	ldr	r1, [r7, #32]
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 fa19 	bl	8003ae0 <I2C_WaitOnBTFFlagUntilTimeout>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00d      	beq.n	80036d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d107      	bne.n	80036cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e01a      	b.n	8003706 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d194      	bne.n	8003602 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	e000      	b.n	8003706 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003704:	2302      	movs	r3, #2
  }
}
 8003706:	4618      	mov	r0, r3
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	00100002 	.word	0x00100002
 8003714:	ffff0000 	.word	0xffff0000

08003718 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af02      	add	r7, sp, #8
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	607a      	str	r2, [r7, #4]
 8003722:	603b      	str	r3, [r7, #0]
 8003724:	460b      	mov	r3, r1
 8003726:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2b08      	cmp	r3, #8
 8003732:	d006      	beq.n	8003742 <I2C_MasterRequestWrite+0x2a>
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d003      	beq.n	8003742 <I2C_MasterRequestWrite+0x2a>
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003740:	d108      	bne.n	8003754 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	e00b      	b.n	800376c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003758:	2b12      	cmp	r3, #18
 800375a:	d107      	bne.n	800376c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800376a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 f84f 	bl	800381c <I2C_WaitOnFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00d      	beq.n	80037a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003792:	d103      	bne.n	800379c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800379a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e035      	b.n	800380c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037a8:	d108      	bne.n	80037bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037aa:	897b      	ldrh	r3, [r7, #10]
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	461a      	mov	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037b8:	611a      	str	r2, [r3, #16]
 80037ba:	e01b      	b.n	80037f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037bc:	897b      	ldrh	r3, [r7, #10]
 80037be:	11db      	asrs	r3, r3, #7
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	f003 0306 	and.w	r3, r3, #6
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	f063 030f 	orn	r3, r3, #15
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	490e      	ldr	r1, [pc, #56]	; (8003814 <I2C_MasterRequestWrite+0xfc>)
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 f898 	bl	8003910 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e010      	b.n	800380c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037ea:	897b      	ldrh	r3, [r7, #10]
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	4907      	ldr	r1, [pc, #28]	; (8003818 <I2C_MasterRequestWrite+0x100>)
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 f888 	bl	8003910 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	00010008 	.word	0x00010008
 8003818:	00010002 	.word	0x00010002

0800381c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	603b      	str	r3, [r7, #0]
 8003828:	4613      	mov	r3, r2
 800382a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800382c:	e048      	b.n	80038c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003834:	d044      	beq.n	80038c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003836:	f7ff f9a1 	bl	8002b7c <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d302      	bcc.n	800384c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d139      	bne.n	80038c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	0c1b      	lsrs	r3, r3, #16
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b01      	cmp	r3, #1
 8003854:	d10d      	bne.n	8003872 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	43da      	mvns	r2, r3
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	4013      	ands	r3, r2
 8003862:	b29b      	uxth	r3, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	bf0c      	ite	eq
 8003868:	2301      	moveq	r3, #1
 800386a:	2300      	movne	r3, #0
 800386c:	b2db      	uxtb	r3, r3
 800386e:	461a      	mov	r2, r3
 8003870:	e00c      	b.n	800388c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	43da      	mvns	r2, r3
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	4013      	ands	r3, r2
 800387e:	b29b      	uxth	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	bf0c      	ite	eq
 8003884:	2301      	moveq	r3, #1
 8003886:	2300      	movne	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	461a      	mov	r2, r3
 800388c:	79fb      	ldrb	r3, [r7, #7]
 800388e:	429a      	cmp	r2, r3
 8003890:	d116      	bne.n	80038c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2220      	movs	r2, #32
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	f043 0220 	orr.w	r2, r3, #32
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e023      	b.n	8003908 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	0c1b      	lsrs	r3, r3, #16
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d10d      	bne.n	80038e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	43da      	mvns	r2, r3
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	4013      	ands	r3, r2
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	bf0c      	ite	eq
 80038dc:	2301      	moveq	r3, #1
 80038de:	2300      	movne	r3, #0
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	461a      	mov	r2, r3
 80038e4:	e00c      	b.n	8003900 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	43da      	mvns	r2, r3
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	4013      	ands	r3, r2
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	bf0c      	ite	eq
 80038f8:	2301      	moveq	r3, #1
 80038fa:	2300      	movne	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	461a      	mov	r2, r3
 8003900:	79fb      	ldrb	r3, [r7, #7]
 8003902:	429a      	cmp	r2, r3
 8003904:	d093      	beq.n	800382e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
 800391c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800391e:	e071      	b.n	8003a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800392a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800392e:	d123      	bne.n	8003978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800393e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003948:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2220      	movs	r2, #32
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	f043 0204 	orr.w	r2, r3, #4
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e067      	b.n	8003a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397e:	d041      	beq.n	8003a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003980:	f7ff f8fc 	bl	8002b7c <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	429a      	cmp	r2, r3
 800398e:	d302      	bcc.n	8003996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d136      	bne.n	8003a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	0c1b      	lsrs	r3, r3, #16
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b01      	cmp	r3, #1
 800399e:	d10c      	bne.n	80039ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	43da      	mvns	r2, r3
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	4013      	ands	r3, r2
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	bf14      	ite	ne
 80039b2:	2301      	movne	r3, #1
 80039b4:	2300      	moveq	r3, #0
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	e00b      	b.n	80039d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	43da      	mvns	r2, r3
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	4013      	ands	r3, r2
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	bf14      	ite	ne
 80039cc:	2301      	movne	r3, #1
 80039ce:	2300      	moveq	r3, #0
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d016      	beq.n	8003a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2220      	movs	r2, #32
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	f043 0220 	orr.w	r2, r3, #32
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e021      	b.n	8003a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	0c1b      	lsrs	r3, r3, #16
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d10c      	bne.n	8003a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	43da      	mvns	r2, r3
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	bf14      	ite	ne
 8003a20:	2301      	movne	r3, #1
 8003a22:	2300      	moveq	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	e00b      	b.n	8003a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	43da      	mvns	r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	4013      	ands	r3, r2
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	bf14      	ite	ne
 8003a3a:	2301      	movne	r3, #1
 8003a3c:	2300      	moveq	r3, #0
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f47f af6d 	bne.w	8003920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a5c:	e034      	b.n	8003ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f000 f886 	bl	8003b70 <I2C_IsAcknowledgeFailed>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e034      	b.n	8003ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a74:	d028      	beq.n	8003ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a76:	f7ff f881 	bl	8002b7c <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d302      	bcc.n	8003a8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d11d      	bne.n	8003ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a96:	2b80      	cmp	r3, #128	; 0x80
 8003a98:	d016      	beq.n	8003ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	f043 0220 	orr.w	r2, r3, #32
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e007      	b.n	8003ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad2:	2b80      	cmp	r3, #128	; 0x80
 8003ad4:	d1c3      	bne.n	8003a5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003aec:	e034      	b.n	8003b58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 f83e 	bl	8003b70 <I2C_IsAcknowledgeFailed>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e034      	b.n	8003b68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b04:	d028      	beq.n	8003b58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b06:	f7ff f839 	bl	8002b7c <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d302      	bcc.n	8003b1c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d11d      	bne.n	8003b58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d016      	beq.n	8003b58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2220      	movs	r2, #32
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b44:	f043 0220 	orr.w	r2, r3, #32
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e007      	b.n	8003b68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	f003 0304 	and.w	r3, r3, #4
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d1c3      	bne.n	8003aee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b86:	d11b      	bne.n	8003bc0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	f043 0204 	orr.w	r2, r3, #4
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e000      	b.n	8003bc2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
	...

08003bd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e267      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d075      	beq.n	8003cda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bee:	4b88      	ldr	r3, [pc, #544]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 030c 	and.w	r3, r3, #12
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d00c      	beq.n	8003c14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bfa:	4b85      	ldr	r3, [pc, #532]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d112      	bne.n	8003c2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c06:	4b82      	ldr	r3, [pc, #520]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c12:	d10b      	bne.n	8003c2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c14:	4b7e      	ldr	r3, [pc, #504]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d05b      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x108>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d157      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e242      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c34:	d106      	bne.n	8003c44 <HAL_RCC_OscConfig+0x74>
 8003c36:	4b76      	ldr	r3, [pc, #472]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a75      	ldr	r2, [pc, #468]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	e01d      	b.n	8003c80 <HAL_RCC_OscConfig+0xb0>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c4c:	d10c      	bne.n	8003c68 <HAL_RCC_OscConfig+0x98>
 8003c4e:	4b70      	ldr	r3, [pc, #448]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a6f      	ldr	r2, [pc, #444]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	4b6d      	ldr	r3, [pc, #436]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a6c      	ldr	r2, [pc, #432]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	e00b      	b.n	8003c80 <HAL_RCC_OscConfig+0xb0>
 8003c68:	4b69      	ldr	r3, [pc, #420]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a68      	ldr	r2, [pc, #416]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c72:	6013      	str	r3, [r2, #0]
 8003c74:	4b66      	ldr	r3, [pc, #408]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a65      	ldr	r2, [pc, #404]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d013      	beq.n	8003cb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c88:	f7fe ff78 	bl	8002b7c <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c90:	f7fe ff74 	bl	8002b7c <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b64      	cmp	r3, #100	; 0x64
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e207      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca2:	4b5b      	ldr	r3, [pc, #364]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0f0      	beq.n	8003c90 <HAL_RCC_OscConfig+0xc0>
 8003cae:	e014      	b.n	8003cda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb0:	f7fe ff64 	bl	8002b7c <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cb8:	f7fe ff60 	bl	8002b7c <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b64      	cmp	r3, #100	; 0x64
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e1f3      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cca:	4b51      	ldr	r3, [pc, #324]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0xe8>
 8003cd6:	e000      	b.n	8003cda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d063      	beq.n	8003dae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ce6:	4b4a      	ldr	r3, [pc, #296]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 030c 	and.w	r3, r3, #12
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00b      	beq.n	8003d0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cf2:	4b47      	ldr	r3, [pc, #284]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d11c      	bne.n	8003d38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cfe:	4b44      	ldr	r3, [pc, #272]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d116      	bne.n	8003d38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d0a:	4b41      	ldr	r3, [pc, #260]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d005      	beq.n	8003d22 <HAL_RCC_OscConfig+0x152>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d001      	beq.n	8003d22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e1c7      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d22:	4b3b      	ldr	r3, [pc, #236]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	4937      	ldr	r1, [pc, #220]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d36:	e03a      	b.n	8003dae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d020      	beq.n	8003d82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d40:	4b34      	ldr	r3, [pc, #208]	; (8003e14 <HAL_RCC_OscConfig+0x244>)
 8003d42:	2201      	movs	r2, #1
 8003d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d46:	f7fe ff19 	bl	8002b7c <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d4e:	f7fe ff15 	bl	8002b7c <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e1a8      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d60:	4b2b      	ldr	r3, [pc, #172]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0f0      	beq.n	8003d4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d6c:	4b28      	ldr	r3, [pc, #160]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	4925      	ldr	r1, [pc, #148]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	600b      	str	r3, [r1, #0]
 8003d80:	e015      	b.n	8003dae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d82:	4b24      	ldr	r3, [pc, #144]	; (8003e14 <HAL_RCC_OscConfig+0x244>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d88:	f7fe fef8 	bl	8002b7c <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d90:	f7fe fef4 	bl	8002b7c <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e187      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003da2:	4b1b      	ldr	r3, [pc, #108]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f0      	bne.n	8003d90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d036      	beq.n	8003e28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d016      	beq.n	8003df0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dc2:	4b15      	ldr	r3, [pc, #84]	; (8003e18 <HAL_RCC_OscConfig+0x248>)
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc8:	f7fe fed8 	bl	8002b7c <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dd0:	f7fe fed4 	bl	8002b7c <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e167      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003de2:	4b0b      	ldr	r3, [pc, #44]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0f0      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x200>
 8003dee:	e01b      	b.n	8003e28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003df0:	4b09      	ldr	r3, [pc, #36]	; (8003e18 <HAL_RCC_OscConfig+0x248>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df6:	f7fe fec1 	bl	8002b7c <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dfc:	e00e      	b.n	8003e1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dfe:	f7fe febd 	bl	8002b7c <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d907      	bls.n	8003e1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e150      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
 8003e10:	40023800 	.word	0x40023800
 8003e14:	42470000 	.word	0x42470000
 8003e18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e1c:	4b88      	ldr	r3, [pc, #544]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1ea      	bne.n	8003dfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 8097 	beq.w	8003f64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e36:	2300      	movs	r3, #0
 8003e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e3a:	4b81      	ldr	r3, [pc, #516]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10f      	bne.n	8003e66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e46:	2300      	movs	r3, #0
 8003e48:	60bb      	str	r3, [r7, #8]
 8003e4a:	4b7d      	ldr	r3, [pc, #500]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	4a7c      	ldr	r2, [pc, #496]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e54:	6413      	str	r3, [r2, #64]	; 0x40
 8003e56:	4b7a      	ldr	r3, [pc, #488]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5e:	60bb      	str	r3, [r7, #8]
 8003e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e62:	2301      	movs	r3, #1
 8003e64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e66:	4b77      	ldr	r3, [pc, #476]	; (8004044 <HAL_RCC_OscConfig+0x474>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d118      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e72:	4b74      	ldr	r3, [pc, #464]	; (8004044 <HAL_RCC_OscConfig+0x474>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a73      	ldr	r2, [pc, #460]	; (8004044 <HAL_RCC_OscConfig+0x474>)
 8003e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e7e:	f7fe fe7d 	bl	8002b7c <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e86:	f7fe fe79 	bl	8002b7c <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e10c      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e98:	4b6a      	ldr	r3, [pc, #424]	; (8004044 <HAL_RCC_OscConfig+0x474>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f0      	beq.n	8003e86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d106      	bne.n	8003eba <HAL_RCC_OscConfig+0x2ea>
 8003eac:	4b64      	ldr	r3, [pc, #400]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb0:	4a63      	ldr	r2, [pc, #396]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003eb2:	f043 0301 	orr.w	r3, r3, #1
 8003eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb8:	e01c      	b.n	8003ef4 <HAL_RCC_OscConfig+0x324>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	2b05      	cmp	r3, #5
 8003ec0:	d10c      	bne.n	8003edc <HAL_RCC_OscConfig+0x30c>
 8003ec2:	4b5f      	ldr	r3, [pc, #380]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec6:	4a5e      	ldr	r2, [pc, #376]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ec8:	f043 0304 	orr.w	r3, r3, #4
 8003ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ece:	4b5c      	ldr	r3, [pc, #368]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed2:	4a5b      	ldr	r2, [pc, #364]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ed4:	f043 0301 	orr.w	r3, r3, #1
 8003ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eda:	e00b      	b.n	8003ef4 <HAL_RCC_OscConfig+0x324>
 8003edc:	4b58      	ldr	r3, [pc, #352]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee0:	4a57      	ldr	r2, [pc, #348]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ee2:	f023 0301 	bic.w	r3, r3, #1
 8003ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee8:	4b55      	ldr	r3, [pc, #340]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eec:	4a54      	ldr	r2, [pc, #336]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003eee:	f023 0304 	bic.w	r3, r3, #4
 8003ef2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d015      	beq.n	8003f28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efc:	f7fe fe3e 	bl	8002b7c <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f02:	e00a      	b.n	8003f1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f04:	f7fe fe3a 	bl	8002b7c <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e0cb      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1a:	4b49      	ldr	r3, [pc, #292]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0ee      	beq.n	8003f04 <HAL_RCC_OscConfig+0x334>
 8003f26:	e014      	b.n	8003f52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f28:	f7fe fe28 	bl	8002b7c <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f2e:	e00a      	b.n	8003f46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f30:	f7fe fe24 	bl	8002b7c <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e0b5      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f46:	4b3e      	ldr	r3, [pc, #248]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1ee      	bne.n	8003f30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f52:	7dfb      	ldrb	r3, [r7, #23]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d105      	bne.n	8003f64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f58:	4b39      	ldr	r3, [pc, #228]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5c:	4a38      	ldr	r2, [pc, #224]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003f5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 80a1 	beq.w	80040b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f6e:	4b34      	ldr	r3, [pc, #208]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 030c 	and.w	r3, r3, #12
 8003f76:	2b08      	cmp	r3, #8
 8003f78:	d05c      	beq.n	8004034 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d141      	bne.n	8004006 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f82:	4b31      	ldr	r3, [pc, #196]	; (8004048 <HAL_RCC_OscConfig+0x478>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f88:	f7fe fdf8 	bl	8002b7c <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f90:	f7fe fdf4 	bl	8002b7c <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e087      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa2:	4b27      	ldr	r3, [pc, #156]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69da      	ldr	r2, [r3, #28]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	019b      	lsls	r3, r3, #6
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc4:	085b      	lsrs	r3, r3, #1
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	041b      	lsls	r3, r3, #16
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	061b      	lsls	r3, r3, #24
 8003fd2:	491b      	ldr	r1, [pc, #108]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fd8:	4b1b      	ldr	r3, [pc, #108]	; (8004048 <HAL_RCC_OscConfig+0x478>)
 8003fda:	2201      	movs	r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fde:	f7fe fdcd 	bl	8002b7c <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe6:	f7fe fdc9 	bl	8002b7c <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e05c      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff8:	4b11      	ldr	r3, [pc, #68]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0f0      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x416>
 8004004:	e054      	b.n	80040b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004006:	4b10      	ldr	r3, [pc, #64]	; (8004048 <HAL_RCC_OscConfig+0x478>)
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400c:	f7fe fdb6 	bl	8002b7c <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004014:	f7fe fdb2 	bl	8002b7c <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e045      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004026:	4b06      	ldr	r3, [pc, #24]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f0      	bne.n	8004014 <HAL_RCC_OscConfig+0x444>
 8004032:	e03d      	b.n	80040b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d107      	bne.n	800404c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e038      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
 8004040:	40023800 	.word	0x40023800
 8004044:	40007000 	.word	0x40007000
 8004048:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800404c:	4b1b      	ldr	r3, [pc, #108]	; (80040bc <HAL_RCC_OscConfig+0x4ec>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d028      	beq.n	80040ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004064:	429a      	cmp	r2, r3
 8004066:	d121      	bne.n	80040ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004072:	429a      	cmp	r2, r3
 8004074:	d11a      	bne.n	80040ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800407c:	4013      	ands	r3, r2
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004082:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004084:	4293      	cmp	r3, r2
 8004086:	d111      	bne.n	80040ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004092:	085b      	lsrs	r3, r3, #1
 8004094:	3b01      	subs	r3, #1
 8004096:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004098:	429a      	cmp	r2, r3
 800409a:	d107      	bne.n	80040ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d001      	beq.n	80040b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e000      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40023800 	.word	0x40023800

080040c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e0cc      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040d4:	4b68      	ldr	r3, [pc, #416]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d90c      	bls.n	80040fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e2:	4b65      	ldr	r3, [pc, #404]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ea:	4b63      	ldr	r3, [pc, #396]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d001      	beq.n	80040fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0b8      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d020      	beq.n	800414a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	d005      	beq.n	8004120 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004114:	4b59      	ldr	r3, [pc, #356]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	4a58      	ldr	r2, [pc, #352]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800411e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0308 	and.w	r3, r3, #8
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800412c:	4b53      	ldr	r3, [pc, #332]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	4a52      	ldr	r2, [pc, #328]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004136:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004138:	4b50      	ldr	r3, [pc, #320]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	494d      	ldr	r1, [pc, #308]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	4313      	orrs	r3, r2
 8004148:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d044      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d107      	bne.n	800416e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415e:	4b47      	ldr	r3, [pc, #284]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d119      	bne.n	800419e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e07f      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b02      	cmp	r3, #2
 8004174:	d003      	beq.n	800417e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800417a:	2b03      	cmp	r3, #3
 800417c:	d107      	bne.n	800418e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800417e:	4b3f      	ldr	r3, [pc, #252]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d109      	bne.n	800419e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e06f      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418e:	4b3b      	ldr	r3, [pc, #236]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e067      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800419e:	4b37      	ldr	r3, [pc, #220]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f023 0203 	bic.w	r2, r3, #3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	4934      	ldr	r1, [pc, #208]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041b0:	f7fe fce4 	bl	8002b7c <HAL_GetTick>
 80041b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b6:	e00a      	b.n	80041ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b8:	f7fe fce0 	bl	8002b7c <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e04f      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ce:	4b2b      	ldr	r3, [pc, #172]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 020c 	and.w	r2, r3, #12
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	429a      	cmp	r2, r3
 80041de:	d1eb      	bne.n	80041b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041e0:	4b25      	ldr	r3, [pc, #148]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d20c      	bcs.n	8004208 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ee:	4b22      	ldr	r3, [pc, #136]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f6:	4b20      	ldr	r3, [pc, #128]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d001      	beq.n	8004208 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e032      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	d008      	beq.n	8004226 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004214:	4b19      	ldr	r3, [pc, #100]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	4916      	ldr	r1, [pc, #88]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	4313      	orrs	r3, r2
 8004224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b00      	cmp	r3, #0
 8004230:	d009      	beq.n	8004246 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004232:	4b12      	ldr	r3, [pc, #72]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	490e      	ldr	r1, [pc, #56]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004242:	4313      	orrs	r3, r2
 8004244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004246:	f000 f821 	bl	800428c <HAL_RCC_GetSysClockFreq>
 800424a:	4602      	mov	r2, r0
 800424c:	4b0b      	ldr	r3, [pc, #44]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	091b      	lsrs	r3, r3, #4
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	490a      	ldr	r1, [pc, #40]	; (8004280 <HAL_RCC_ClockConfig+0x1c0>)
 8004258:	5ccb      	ldrb	r3, [r1, r3]
 800425a:	fa22 f303 	lsr.w	r3, r2, r3
 800425e:	4a09      	ldr	r2, [pc, #36]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 8004260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004262:	4b09      	ldr	r3, [pc, #36]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4618      	mov	r0, r3
 8004268:	f7fd fbb2 	bl	80019d0 <HAL_InitTick>

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	40023c00 	.word	0x40023c00
 800427c:	40023800 	.word	0x40023800
 8004280:	0800887c 	.word	0x0800887c
 8004284:	20000000 	.word	0x20000000
 8004288:	20000004 	.word	0x20000004

0800428c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800428c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004290:	b094      	sub	sp, #80	; 0x50
 8004292:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	647b      	str	r3, [r7, #68]	; 0x44
 8004298:	2300      	movs	r3, #0
 800429a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800429c:	2300      	movs	r3, #0
 800429e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042a4:	4b79      	ldr	r3, [pc, #484]	; (800448c <HAL_RCC_GetSysClockFreq+0x200>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f003 030c 	and.w	r3, r3, #12
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d00d      	beq.n	80042cc <HAL_RCC_GetSysClockFreq+0x40>
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	f200 80e1 	bhi.w	8004478 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <HAL_RCC_GetSysClockFreq+0x34>
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d003      	beq.n	80042c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80042be:	e0db      	b.n	8004478 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042c0:	4b73      	ldr	r3, [pc, #460]	; (8004490 <HAL_RCC_GetSysClockFreq+0x204>)
 80042c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80042c4:	e0db      	b.n	800447e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042c6:	4b73      	ldr	r3, [pc, #460]	; (8004494 <HAL_RCC_GetSysClockFreq+0x208>)
 80042c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042ca:	e0d8      	b.n	800447e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042cc:	4b6f      	ldr	r3, [pc, #444]	; (800448c <HAL_RCC_GetSysClockFreq+0x200>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042d6:	4b6d      	ldr	r3, [pc, #436]	; (800448c <HAL_RCC_GetSysClockFreq+0x200>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d063      	beq.n	80043aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042e2:	4b6a      	ldr	r3, [pc, #424]	; (800448c <HAL_RCC_GetSysClockFreq+0x200>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	099b      	lsrs	r3, r3, #6
 80042e8:	2200      	movs	r2, #0
 80042ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80042ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042f4:	633b      	str	r3, [r7, #48]	; 0x30
 80042f6:	2300      	movs	r3, #0
 80042f8:	637b      	str	r3, [r7, #52]	; 0x34
 80042fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80042fe:	4622      	mov	r2, r4
 8004300:	462b      	mov	r3, r5
 8004302:	f04f 0000 	mov.w	r0, #0
 8004306:	f04f 0100 	mov.w	r1, #0
 800430a:	0159      	lsls	r1, r3, #5
 800430c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004310:	0150      	lsls	r0, r2, #5
 8004312:	4602      	mov	r2, r0
 8004314:	460b      	mov	r3, r1
 8004316:	4621      	mov	r1, r4
 8004318:	1a51      	subs	r1, r2, r1
 800431a:	6139      	str	r1, [r7, #16]
 800431c:	4629      	mov	r1, r5
 800431e:	eb63 0301 	sbc.w	r3, r3, r1
 8004322:	617b      	str	r3, [r7, #20]
 8004324:	f04f 0200 	mov.w	r2, #0
 8004328:	f04f 0300 	mov.w	r3, #0
 800432c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004330:	4659      	mov	r1, fp
 8004332:	018b      	lsls	r3, r1, #6
 8004334:	4651      	mov	r1, sl
 8004336:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800433a:	4651      	mov	r1, sl
 800433c:	018a      	lsls	r2, r1, #6
 800433e:	4651      	mov	r1, sl
 8004340:	ebb2 0801 	subs.w	r8, r2, r1
 8004344:	4659      	mov	r1, fp
 8004346:	eb63 0901 	sbc.w	r9, r3, r1
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	f04f 0300 	mov.w	r3, #0
 8004352:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004356:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800435a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800435e:	4690      	mov	r8, r2
 8004360:	4699      	mov	r9, r3
 8004362:	4623      	mov	r3, r4
 8004364:	eb18 0303 	adds.w	r3, r8, r3
 8004368:	60bb      	str	r3, [r7, #8]
 800436a:	462b      	mov	r3, r5
 800436c:	eb49 0303 	adc.w	r3, r9, r3
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	f04f 0300 	mov.w	r3, #0
 800437a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800437e:	4629      	mov	r1, r5
 8004380:	024b      	lsls	r3, r1, #9
 8004382:	4621      	mov	r1, r4
 8004384:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004388:	4621      	mov	r1, r4
 800438a:	024a      	lsls	r2, r1, #9
 800438c:	4610      	mov	r0, r2
 800438e:	4619      	mov	r1, r3
 8004390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004392:	2200      	movs	r2, #0
 8004394:	62bb      	str	r3, [r7, #40]	; 0x28
 8004396:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004398:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800439c:	f7fc fa7e 	bl	800089c <__aeabi_uldivmod>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4613      	mov	r3, r2
 80043a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043a8:	e058      	b.n	800445c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043aa:	4b38      	ldr	r3, [pc, #224]	; (800448c <HAL_RCC_GetSysClockFreq+0x200>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	099b      	lsrs	r3, r3, #6
 80043b0:	2200      	movs	r2, #0
 80043b2:	4618      	mov	r0, r3
 80043b4:	4611      	mov	r1, r2
 80043b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043ba:	623b      	str	r3, [r7, #32]
 80043bc:	2300      	movs	r3, #0
 80043be:	627b      	str	r3, [r7, #36]	; 0x24
 80043c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043c4:	4642      	mov	r2, r8
 80043c6:	464b      	mov	r3, r9
 80043c8:	f04f 0000 	mov.w	r0, #0
 80043cc:	f04f 0100 	mov.w	r1, #0
 80043d0:	0159      	lsls	r1, r3, #5
 80043d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043d6:	0150      	lsls	r0, r2, #5
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	4641      	mov	r1, r8
 80043de:	ebb2 0a01 	subs.w	sl, r2, r1
 80043e2:	4649      	mov	r1, r9
 80043e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043fc:	ebb2 040a 	subs.w	r4, r2, sl
 8004400:	eb63 050b 	sbc.w	r5, r3, fp
 8004404:	f04f 0200 	mov.w	r2, #0
 8004408:	f04f 0300 	mov.w	r3, #0
 800440c:	00eb      	lsls	r3, r5, #3
 800440e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004412:	00e2      	lsls	r2, r4, #3
 8004414:	4614      	mov	r4, r2
 8004416:	461d      	mov	r5, r3
 8004418:	4643      	mov	r3, r8
 800441a:	18e3      	adds	r3, r4, r3
 800441c:	603b      	str	r3, [r7, #0]
 800441e:	464b      	mov	r3, r9
 8004420:	eb45 0303 	adc.w	r3, r5, r3
 8004424:	607b      	str	r3, [r7, #4]
 8004426:	f04f 0200 	mov.w	r2, #0
 800442a:	f04f 0300 	mov.w	r3, #0
 800442e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004432:	4629      	mov	r1, r5
 8004434:	028b      	lsls	r3, r1, #10
 8004436:	4621      	mov	r1, r4
 8004438:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800443c:	4621      	mov	r1, r4
 800443e:	028a      	lsls	r2, r1, #10
 8004440:	4610      	mov	r0, r2
 8004442:	4619      	mov	r1, r3
 8004444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004446:	2200      	movs	r2, #0
 8004448:	61bb      	str	r3, [r7, #24]
 800444a:	61fa      	str	r2, [r7, #28]
 800444c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004450:	f7fc fa24 	bl	800089c <__aeabi_uldivmod>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4613      	mov	r3, r2
 800445a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800445c:	4b0b      	ldr	r3, [pc, #44]	; (800448c <HAL_RCC_GetSysClockFreq+0x200>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	0c1b      	lsrs	r3, r3, #16
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	3301      	adds	r3, #1
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800446c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800446e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004470:	fbb2 f3f3 	udiv	r3, r2, r3
 8004474:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004476:	e002      	b.n	800447e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004478:	4b05      	ldr	r3, [pc, #20]	; (8004490 <HAL_RCC_GetSysClockFreq+0x204>)
 800447a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800447c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800447e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004480:	4618      	mov	r0, r3
 8004482:	3750      	adds	r7, #80	; 0x50
 8004484:	46bd      	mov	sp, r7
 8004486:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800448a:	bf00      	nop
 800448c:	40023800 	.word	0x40023800
 8004490:	00f42400 	.word	0x00f42400
 8004494:	007a1200 	.word	0x007a1200

08004498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800449c:	4b03      	ldr	r3, [pc, #12]	; (80044ac <HAL_RCC_GetHCLKFreq+0x14>)
 800449e:	681b      	ldr	r3, [r3, #0]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	20000000 	.word	0x20000000

080044b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044b4:	f7ff fff0 	bl	8004498 <HAL_RCC_GetHCLKFreq>
 80044b8:	4602      	mov	r2, r0
 80044ba:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	0a9b      	lsrs	r3, r3, #10
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	4903      	ldr	r1, [pc, #12]	; (80044d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044c6:	5ccb      	ldrb	r3, [r1, r3]
 80044c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40023800 	.word	0x40023800
 80044d4:	0800888c 	.word	0x0800888c

080044d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044dc:	f7ff ffdc 	bl	8004498 <HAL_RCC_GetHCLKFreq>
 80044e0:	4602      	mov	r2, r0
 80044e2:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	0b5b      	lsrs	r3, r3, #13
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	4903      	ldr	r1, [pc, #12]	; (80044fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80044ee:	5ccb      	ldrb	r3, [r1, r3]
 80044f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40023800 	.word	0x40023800
 80044fc:	0800888c 	.word	0x0800888c

08004500 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	220f      	movs	r2, #15
 800450e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004510:	4b12      	ldr	r3, [pc, #72]	; (800455c <HAL_RCC_GetClockConfig+0x5c>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f003 0203 	and.w	r2, r3, #3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800451c:	4b0f      	ldr	r3, [pc, #60]	; (800455c <HAL_RCC_GetClockConfig+0x5c>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004528:	4b0c      	ldr	r3, [pc, #48]	; (800455c <HAL_RCC_GetClockConfig+0x5c>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004534:	4b09      	ldr	r3, [pc, #36]	; (800455c <HAL_RCC_GetClockConfig+0x5c>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	08db      	lsrs	r3, r3, #3
 800453a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004542:	4b07      	ldr	r3, [pc, #28]	; (8004560 <HAL_RCC_GetClockConfig+0x60>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0207 	and.w	r2, r3, #7
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	601a      	str	r2, [r3, #0]
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	40023800 	.word	0x40023800
 8004560:	40023c00 	.word	0x40023c00

08004564 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e041      	b.n	80045fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d106      	bne.n	8004590 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fd f8d2 	bl	8001734 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	3304      	adds	r3, #4
 80045a0:	4619      	mov	r1, r3
 80045a2:	4610      	mov	r0, r2
 80045a4:	f000 fd22 	bl	8004fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
	...

08004604 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b01      	cmp	r3, #1
 8004616:	d001      	beq.n	800461c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e03c      	b.n	8004696 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a1e      	ldr	r2, [pc, #120]	; (80046a4 <HAL_TIM_Base_Start+0xa0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d018      	beq.n	8004660 <HAL_TIM_Base_Start+0x5c>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004636:	d013      	beq.n	8004660 <HAL_TIM_Base_Start+0x5c>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a1a      	ldr	r2, [pc, #104]	; (80046a8 <HAL_TIM_Base_Start+0xa4>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d00e      	beq.n	8004660 <HAL_TIM_Base_Start+0x5c>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a19      	ldr	r2, [pc, #100]	; (80046ac <HAL_TIM_Base_Start+0xa8>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d009      	beq.n	8004660 <HAL_TIM_Base_Start+0x5c>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a17      	ldr	r2, [pc, #92]	; (80046b0 <HAL_TIM_Base_Start+0xac>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d004      	beq.n	8004660 <HAL_TIM_Base_Start+0x5c>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a16      	ldr	r2, [pc, #88]	; (80046b4 <HAL_TIM_Base_Start+0xb0>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d111      	bne.n	8004684 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2b06      	cmp	r3, #6
 8004670:	d010      	beq.n	8004694 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f042 0201 	orr.w	r2, r2, #1
 8004680:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004682:	e007      	b.n	8004694 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0201 	orr.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	40010000 	.word	0x40010000
 80046a8:	40000400 	.word	0x40000400
 80046ac:	40000800 	.word	0x40000800
 80046b0:	40000c00 	.word	0x40000c00
 80046b4:	40014000 	.word	0x40014000

080046b8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6a1a      	ldr	r2, [r3, #32]
 80046c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80046ca:	4013      	ands	r3, r2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10f      	bne.n	80046f0 <HAL_TIM_Base_Stop+0x38>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6a1a      	ldr	r2, [r3, #32]
 80046d6:	f240 4344 	movw	r3, #1092	; 0x444
 80046da:	4013      	ands	r3, r2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d107      	bne.n	80046f0 <HAL_TIM_Base_Stop+0x38>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0201 	bic.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
	...

08004708 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b01      	cmp	r3, #1
 800471a:	d001      	beq.n	8004720 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e044      	b.n	80047aa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68da      	ldr	r2, [r3, #12]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0201 	orr.w	r2, r2, #1
 8004736:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a1e      	ldr	r2, [pc, #120]	; (80047b8 <HAL_TIM_Base_Start_IT+0xb0>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d018      	beq.n	8004774 <HAL_TIM_Base_Start_IT+0x6c>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800474a:	d013      	beq.n	8004774 <HAL_TIM_Base_Start_IT+0x6c>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a1a      	ldr	r2, [pc, #104]	; (80047bc <HAL_TIM_Base_Start_IT+0xb4>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00e      	beq.n	8004774 <HAL_TIM_Base_Start_IT+0x6c>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a19      	ldr	r2, [pc, #100]	; (80047c0 <HAL_TIM_Base_Start_IT+0xb8>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d009      	beq.n	8004774 <HAL_TIM_Base_Start_IT+0x6c>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a17      	ldr	r2, [pc, #92]	; (80047c4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d004      	beq.n	8004774 <HAL_TIM_Base_Start_IT+0x6c>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a16      	ldr	r2, [pc, #88]	; (80047c8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d111      	bne.n	8004798 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f003 0307 	and.w	r3, r3, #7
 800477e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2b06      	cmp	r3, #6
 8004784:	d010      	beq.n	80047a8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f042 0201 	orr.w	r2, r2, #1
 8004794:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004796:	e007      	b.n	80047a8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0201 	orr.w	r2, r2, #1
 80047a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	40010000 	.word	0x40010000
 80047bc:	40000400 	.word	0x40000400
 80047c0:	40000800 	.word	0x40000800
 80047c4:	40000c00 	.word	0x40000c00
 80047c8:	40014000 	.word	0x40014000

080047cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e041      	b.n	8004862 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d106      	bne.n	80047f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f839 	bl	800486a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3304      	adds	r3, #4
 8004808:	4619      	mov	r1, r3
 800480a:	4610      	mov	r0, r2
 800480c:	f000 fbee 	bl	8004fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
	...

08004880 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d109      	bne.n	80048a4 <HAL_TIM_PWM_Start+0x24>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b01      	cmp	r3, #1
 800489a:	bf14      	ite	ne
 800489c:	2301      	movne	r3, #1
 800489e:	2300      	moveq	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	e022      	b.n	80048ea <HAL_TIM_PWM_Start+0x6a>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d109      	bne.n	80048be <HAL_TIM_PWM_Start+0x3e>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	bf14      	ite	ne
 80048b6:	2301      	movne	r3, #1
 80048b8:	2300      	moveq	r3, #0
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	e015      	b.n	80048ea <HAL_TIM_PWM_Start+0x6a>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d109      	bne.n	80048d8 <HAL_TIM_PWM_Start+0x58>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	bf14      	ite	ne
 80048d0:	2301      	movne	r3, #1
 80048d2:	2300      	moveq	r3, #0
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	e008      	b.n	80048ea <HAL_TIM_PWM_Start+0x6a>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	bf14      	ite	ne
 80048e4:	2301      	movne	r3, #1
 80048e6:	2300      	moveq	r3, #0
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e068      	b.n	80049c4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d104      	bne.n	8004902 <HAL_TIM_PWM_Start+0x82>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004900:	e013      	b.n	800492a <HAL_TIM_PWM_Start+0xaa>
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b04      	cmp	r3, #4
 8004906:	d104      	bne.n	8004912 <HAL_TIM_PWM_Start+0x92>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004910:	e00b      	b.n	800492a <HAL_TIM_PWM_Start+0xaa>
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b08      	cmp	r3, #8
 8004916:	d104      	bne.n	8004922 <HAL_TIM_PWM_Start+0xa2>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004920:	e003      	b.n	800492a <HAL_TIM_PWM_Start+0xaa>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2202      	movs	r2, #2
 8004926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2201      	movs	r2, #1
 8004930:	6839      	ldr	r1, [r7, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f000 fe0c 	bl	8005550 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a23      	ldr	r2, [pc, #140]	; (80049cc <HAL_TIM_PWM_Start+0x14c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d107      	bne.n	8004952 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004950:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a1d      	ldr	r2, [pc, #116]	; (80049cc <HAL_TIM_PWM_Start+0x14c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d018      	beq.n	800498e <HAL_TIM_PWM_Start+0x10e>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004964:	d013      	beq.n	800498e <HAL_TIM_PWM_Start+0x10e>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a19      	ldr	r2, [pc, #100]	; (80049d0 <HAL_TIM_PWM_Start+0x150>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d00e      	beq.n	800498e <HAL_TIM_PWM_Start+0x10e>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a17      	ldr	r2, [pc, #92]	; (80049d4 <HAL_TIM_PWM_Start+0x154>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d009      	beq.n	800498e <HAL_TIM_PWM_Start+0x10e>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a16      	ldr	r2, [pc, #88]	; (80049d8 <HAL_TIM_PWM_Start+0x158>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d004      	beq.n	800498e <HAL_TIM_PWM_Start+0x10e>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a14      	ldr	r2, [pc, #80]	; (80049dc <HAL_TIM_PWM_Start+0x15c>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d111      	bne.n	80049b2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2b06      	cmp	r3, #6
 800499e:	d010      	beq.n	80049c2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0201 	orr.w	r2, r2, #1
 80049ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b0:	e007      	b.n	80049c2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0201 	orr.w	r2, r2, #1
 80049c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40010000 	.word	0x40010000
 80049d0:	40000400 	.word	0x40000400
 80049d4:	40000800 	.word	0x40000800
 80049d8:	40000c00 	.word	0x40000c00
 80049dc:	40014000 	.word	0x40014000

080049e0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2200      	movs	r2, #0
 80049f0:	6839      	ldr	r1, [r7, #0]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fdac 	bl	8005550 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a29      	ldr	r2, [pc, #164]	; (8004aa4 <HAL_TIM_PWM_Stop+0xc4>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d117      	bne.n	8004a32 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6a1a      	ldr	r2, [r3, #32]
 8004a08:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10f      	bne.n	8004a32 <HAL_TIM_PWM_Stop+0x52>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	6a1a      	ldr	r2, [r3, #32]
 8004a18:	f240 4344 	movw	r3, #1092	; 0x444
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d107      	bne.n	8004a32 <HAL_TIM_PWM_Stop+0x52>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6a1a      	ldr	r2, [r3, #32]
 8004a38:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10f      	bne.n	8004a62 <HAL_TIM_PWM_Stop+0x82>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6a1a      	ldr	r2, [r3, #32]
 8004a48:	f240 4344 	movw	r3, #1092	; 0x444
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d107      	bne.n	8004a62 <HAL_TIM_PWM_Stop+0x82>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0201 	bic.w	r2, r2, #1
 8004a60:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d104      	bne.n	8004a72 <HAL_TIM_PWM_Stop+0x92>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a70:	e013      	b.n	8004a9a <HAL_TIM_PWM_Stop+0xba>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	d104      	bne.n	8004a82 <HAL_TIM_PWM_Stop+0xa2>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a80:	e00b      	b.n	8004a9a <HAL_TIM_PWM_Stop+0xba>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d104      	bne.n	8004a92 <HAL_TIM_PWM_Stop+0xb2>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a90:	e003      	b.n	8004a9a <HAL_TIM_PWM_Stop+0xba>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3708      	adds	r7, #8
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	40010000 	.word	0x40010000

08004aa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d020      	beq.n	8004b0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d01b      	beq.n	8004b0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f06f 0202 	mvn.w	r2, #2
 8004adc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 fa5b 	bl	8004fae <HAL_TIM_IC_CaptureCallback>
 8004af8:	e005      	b.n	8004b06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 fa4d 	bl	8004f9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 fa5e 	bl	8004fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f003 0304 	and.w	r3, r3, #4
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d020      	beq.n	8004b58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f003 0304 	and.w	r3, r3, #4
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d01b      	beq.n	8004b58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f06f 0204 	mvn.w	r2, #4
 8004b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2202      	movs	r2, #2
 8004b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fa35 	bl	8004fae <HAL_TIM_IC_CaptureCallback>
 8004b44:	e005      	b.n	8004b52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 fa27 	bl	8004f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 fa38 	bl	8004fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f003 0308 	and.w	r3, r3, #8
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d020      	beq.n	8004ba4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f003 0308 	and.w	r3, r3, #8
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d01b      	beq.n	8004ba4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f06f 0208 	mvn.w	r2, #8
 8004b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2204      	movs	r2, #4
 8004b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 fa0f 	bl	8004fae <HAL_TIM_IC_CaptureCallback>
 8004b90:	e005      	b.n	8004b9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 fa01 	bl	8004f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 fa12 	bl	8004fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f003 0310 	and.w	r3, r3, #16
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d020      	beq.n	8004bf0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f003 0310 	and.w	r3, r3, #16
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d01b      	beq.n	8004bf0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f06f 0210 	mvn.w	r2, #16
 8004bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2208      	movs	r2, #8
 8004bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f9e9 	bl	8004fae <HAL_TIM_IC_CaptureCallback>
 8004bdc:	e005      	b.n	8004bea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f9db 	bl	8004f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f9ec 	bl	8004fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00c      	beq.n	8004c14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d007      	beq.n	8004c14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f06f 0201 	mvn.w	r2, #1
 8004c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7fc fd04 	bl	800161c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00c      	beq.n	8004c38 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d007      	beq.n	8004c38 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 fd2a 	bl	800568c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00c      	beq.n	8004c5c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d007      	beq.n	8004c5c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f9bd 	bl	8004fd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f003 0320 	and.w	r3, r3, #32
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00c      	beq.n	8004c80 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f003 0320 	and.w	r3, r3, #32
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d007      	beq.n	8004c80 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f06f 0220 	mvn.w	r2, #32
 8004c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 fcfc 	bl	8005678 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c80:	bf00      	nop
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c94:	2300      	movs	r3, #0
 8004c96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d101      	bne.n	8004ca6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	e0ae      	b.n	8004e04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b0c      	cmp	r3, #12
 8004cb2:	f200 809f 	bhi.w	8004df4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004cb6:	a201      	add	r2, pc, #4	; (adr r2, 8004cbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbc:	08004cf1 	.word	0x08004cf1
 8004cc0:	08004df5 	.word	0x08004df5
 8004cc4:	08004df5 	.word	0x08004df5
 8004cc8:	08004df5 	.word	0x08004df5
 8004ccc:	08004d31 	.word	0x08004d31
 8004cd0:	08004df5 	.word	0x08004df5
 8004cd4:	08004df5 	.word	0x08004df5
 8004cd8:	08004df5 	.word	0x08004df5
 8004cdc:	08004d73 	.word	0x08004d73
 8004ce0:	08004df5 	.word	0x08004df5
 8004ce4:	08004df5 	.word	0x08004df5
 8004ce8:	08004df5 	.word	0x08004df5
 8004cec:	08004db3 	.word	0x08004db3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68b9      	ldr	r1, [r7, #8]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 fa04 	bl	8005104 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699a      	ldr	r2, [r3, #24]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f042 0208 	orr.w	r2, r2, #8
 8004d0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699a      	ldr	r2, [r3, #24]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0204 	bic.w	r2, r2, #4
 8004d1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6999      	ldr	r1, [r3, #24]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	691a      	ldr	r2, [r3, #16]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	619a      	str	r2, [r3, #24]
      break;
 8004d2e:	e064      	b.n	8004dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68b9      	ldr	r1, [r7, #8]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fa4a 	bl	80051d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	699a      	ldr	r2, [r3, #24]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699a      	ldr	r2, [r3, #24]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6999      	ldr	r1, [r3, #24]
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	021a      	lsls	r2, r3, #8
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	619a      	str	r2, [r3, #24]
      break;
 8004d70:	e043      	b.n	8004dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68b9      	ldr	r1, [r7, #8]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 fa95 	bl	80052a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	69da      	ldr	r2, [r3, #28]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f042 0208 	orr.w	r2, r2, #8
 8004d8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	69da      	ldr	r2, [r3, #28]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0204 	bic.w	r2, r2, #4
 8004d9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	69d9      	ldr	r1, [r3, #28]
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	691a      	ldr	r2, [r3, #16]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	61da      	str	r2, [r3, #28]
      break;
 8004db0:	e023      	b.n	8004dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68b9      	ldr	r1, [r7, #8]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 fadf 	bl	800537c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	69da      	ldr	r2, [r3, #28]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	69da      	ldr	r2, [r3, #28]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ddc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	69d9      	ldr	r1, [r3, #28]
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	021a      	lsls	r2, r3, #8
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	61da      	str	r2, [r3, #28]
      break;
 8004df2:	e002      	b.n	8004dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	75fb      	strb	r3, [r7, #23]
      break;
 8004df8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3718      	adds	r7, #24
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e16:	2300      	movs	r3, #0
 8004e18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d101      	bne.n	8004e28 <HAL_TIM_ConfigClockSource+0x1c>
 8004e24:	2302      	movs	r3, #2
 8004e26:	e0b4      	b.n	8004f92 <HAL_TIM_ConfigClockSource+0x186>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e60:	d03e      	beq.n	8004ee0 <HAL_TIM_ConfigClockSource+0xd4>
 8004e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e66:	f200 8087 	bhi.w	8004f78 <HAL_TIM_ConfigClockSource+0x16c>
 8004e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e6e:	f000 8086 	beq.w	8004f7e <HAL_TIM_ConfigClockSource+0x172>
 8004e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e76:	d87f      	bhi.n	8004f78 <HAL_TIM_ConfigClockSource+0x16c>
 8004e78:	2b70      	cmp	r3, #112	; 0x70
 8004e7a:	d01a      	beq.n	8004eb2 <HAL_TIM_ConfigClockSource+0xa6>
 8004e7c:	2b70      	cmp	r3, #112	; 0x70
 8004e7e:	d87b      	bhi.n	8004f78 <HAL_TIM_ConfigClockSource+0x16c>
 8004e80:	2b60      	cmp	r3, #96	; 0x60
 8004e82:	d050      	beq.n	8004f26 <HAL_TIM_ConfigClockSource+0x11a>
 8004e84:	2b60      	cmp	r3, #96	; 0x60
 8004e86:	d877      	bhi.n	8004f78 <HAL_TIM_ConfigClockSource+0x16c>
 8004e88:	2b50      	cmp	r3, #80	; 0x50
 8004e8a:	d03c      	beq.n	8004f06 <HAL_TIM_ConfigClockSource+0xfa>
 8004e8c:	2b50      	cmp	r3, #80	; 0x50
 8004e8e:	d873      	bhi.n	8004f78 <HAL_TIM_ConfigClockSource+0x16c>
 8004e90:	2b40      	cmp	r3, #64	; 0x40
 8004e92:	d058      	beq.n	8004f46 <HAL_TIM_ConfigClockSource+0x13a>
 8004e94:	2b40      	cmp	r3, #64	; 0x40
 8004e96:	d86f      	bhi.n	8004f78 <HAL_TIM_ConfigClockSource+0x16c>
 8004e98:	2b30      	cmp	r3, #48	; 0x30
 8004e9a:	d064      	beq.n	8004f66 <HAL_TIM_ConfigClockSource+0x15a>
 8004e9c:	2b30      	cmp	r3, #48	; 0x30
 8004e9e:	d86b      	bhi.n	8004f78 <HAL_TIM_ConfigClockSource+0x16c>
 8004ea0:	2b20      	cmp	r3, #32
 8004ea2:	d060      	beq.n	8004f66 <HAL_TIM_ConfigClockSource+0x15a>
 8004ea4:	2b20      	cmp	r3, #32
 8004ea6:	d867      	bhi.n	8004f78 <HAL_TIM_ConfigClockSource+0x16c>
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d05c      	beq.n	8004f66 <HAL_TIM_ConfigClockSource+0x15a>
 8004eac:	2b10      	cmp	r3, #16
 8004eae:	d05a      	beq.n	8004f66 <HAL_TIM_ConfigClockSource+0x15a>
 8004eb0:	e062      	b.n	8004f78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ec2:	f000 fb25 	bl	8005510 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ed4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	609a      	str	r2, [r3, #8]
      break;
 8004ede:	e04f      	b.n	8004f80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ef0:	f000 fb0e 	bl	8005510 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689a      	ldr	r2, [r3, #8]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f02:	609a      	str	r2, [r3, #8]
      break;
 8004f04:	e03c      	b.n	8004f80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f12:	461a      	mov	r2, r3
 8004f14:	f000 fa82 	bl	800541c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2150      	movs	r1, #80	; 0x50
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 fadb 	bl	80054da <TIM_ITRx_SetConfig>
      break;
 8004f24:	e02c      	b.n	8004f80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f32:	461a      	mov	r2, r3
 8004f34:	f000 faa1 	bl	800547a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2160      	movs	r1, #96	; 0x60
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 facb 	bl	80054da <TIM_ITRx_SetConfig>
      break;
 8004f44:	e01c      	b.n	8004f80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f52:	461a      	mov	r2, r3
 8004f54:	f000 fa62 	bl	800541c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2140      	movs	r1, #64	; 0x40
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 fabb 	bl	80054da <TIM_ITRx_SetConfig>
      break;
 8004f64:	e00c      	b.n	8004f80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4619      	mov	r1, r3
 8004f70:	4610      	mov	r0, r2
 8004f72:	f000 fab2 	bl	80054da <TIM_ITRx_SetConfig>
      break;
 8004f76:	e003      	b.n	8004f80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f7c:	e000      	b.n	8004f80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fa2:	bf00      	nop
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b083      	sub	sp, #12
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b083      	sub	sp, #12
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fca:	bf00      	nop
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fde:	bf00      	nop
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
	...

08004fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a3a      	ldr	r2, [pc, #232]	; (80050e8 <TIM_Base_SetConfig+0xfc>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d00f      	beq.n	8005024 <TIM_Base_SetConfig+0x38>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500a:	d00b      	beq.n	8005024 <TIM_Base_SetConfig+0x38>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a37      	ldr	r2, [pc, #220]	; (80050ec <TIM_Base_SetConfig+0x100>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d007      	beq.n	8005024 <TIM_Base_SetConfig+0x38>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a36      	ldr	r2, [pc, #216]	; (80050f0 <TIM_Base_SetConfig+0x104>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d003      	beq.n	8005024 <TIM_Base_SetConfig+0x38>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a35      	ldr	r2, [pc, #212]	; (80050f4 <TIM_Base_SetConfig+0x108>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d108      	bne.n	8005036 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	4313      	orrs	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a2b      	ldr	r2, [pc, #172]	; (80050e8 <TIM_Base_SetConfig+0xfc>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d01b      	beq.n	8005076 <TIM_Base_SetConfig+0x8a>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005044:	d017      	beq.n	8005076 <TIM_Base_SetConfig+0x8a>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a28      	ldr	r2, [pc, #160]	; (80050ec <TIM_Base_SetConfig+0x100>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d013      	beq.n	8005076 <TIM_Base_SetConfig+0x8a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a27      	ldr	r2, [pc, #156]	; (80050f0 <TIM_Base_SetConfig+0x104>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d00f      	beq.n	8005076 <TIM_Base_SetConfig+0x8a>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a26      	ldr	r2, [pc, #152]	; (80050f4 <TIM_Base_SetConfig+0x108>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d00b      	beq.n	8005076 <TIM_Base_SetConfig+0x8a>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a25      	ldr	r2, [pc, #148]	; (80050f8 <TIM_Base_SetConfig+0x10c>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d007      	beq.n	8005076 <TIM_Base_SetConfig+0x8a>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a24      	ldr	r2, [pc, #144]	; (80050fc <TIM_Base_SetConfig+0x110>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d003      	beq.n	8005076 <TIM_Base_SetConfig+0x8a>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a23      	ldr	r2, [pc, #140]	; (8005100 <TIM_Base_SetConfig+0x114>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d108      	bne.n	8005088 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800507c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	4313      	orrs	r3, r2
 8005086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	4313      	orrs	r3, r2
 8005094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a0e      	ldr	r2, [pc, #56]	; (80050e8 <TIM_Base_SetConfig+0xfc>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d103      	bne.n	80050bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d105      	bne.n	80050da <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	f023 0201 	bic.w	r2, r3, #1
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	611a      	str	r2, [r3, #16]
  }
}
 80050da:	bf00      	nop
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	40010000 	.word	0x40010000
 80050ec:	40000400 	.word	0x40000400
 80050f0:	40000800 	.word	0x40000800
 80050f4:	40000c00 	.word	0x40000c00
 80050f8:	40014000 	.word	0x40014000
 80050fc:	40014400 	.word	0x40014400
 8005100:	40014800 	.word	0x40014800

08005104 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005104:	b480      	push	{r7}
 8005106:	b087      	sub	sp, #28
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	f023 0201 	bic.w	r2, r3, #1
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f023 0303 	bic.w	r3, r3, #3
 800513a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	4313      	orrs	r3, r2
 8005144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f023 0302 	bic.w	r3, r3, #2
 800514c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	4313      	orrs	r3, r2
 8005156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a1c      	ldr	r2, [pc, #112]	; (80051cc <TIM_OC1_SetConfig+0xc8>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d10c      	bne.n	800517a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f023 0308 	bic.w	r3, r3, #8
 8005166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	4313      	orrs	r3, r2
 8005170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f023 0304 	bic.w	r3, r3, #4
 8005178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a13      	ldr	r2, [pc, #76]	; (80051cc <TIM_OC1_SetConfig+0xc8>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d111      	bne.n	80051a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	4313      	orrs	r3, r2
 800519a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	621a      	str	r2, [r3, #32]
}
 80051c0:	bf00      	nop
 80051c2:	371c      	adds	r7, #28
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr
 80051cc:	40010000 	.word	0x40010000

080051d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	f023 0210 	bic.w	r2, r3, #16
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005206:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	021b      	lsls	r3, r3, #8
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	4313      	orrs	r3, r2
 8005212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f023 0320 	bic.w	r3, r3, #32
 800521a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	011b      	lsls	r3, r3, #4
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	4313      	orrs	r3, r2
 8005226:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a1e      	ldr	r2, [pc, #120]	; (80052a4 <TIM_OC2_SetConfig+0xd4>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d10d      	bne.n	800524c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005236:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	011b      	lsls	r3, r3, #4
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	4313      	orrs	r3, r2
 8005242:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800524a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a15      	ldr	r2, [pc, #84]	; (80052a4 <TIM_OC2_SetConfig+0xd4>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d113      	bne.n	800527c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800525a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005262:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	4313      	orrs	r3, r2
 800526e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	4313      	orrs	r3, r2
 800527a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	621a      	str	r2, [r3, #32]
}
 8005296:	bf00      	nop
 8005298:	371c      	adds	r7, #28
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	40010000 	.word	0x40010000

080052a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f023 0303 	bic.w	r3, r3, #3
 80052de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	021b      	lsls	r3, r3, #8
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a1d      	ldr	r2, [pc, #116]	; (8005378 <TIM_OC3_SetConfig+0xd0>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d10d      	bne.n	8005322 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800530c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	021b      	lsls	r3, r3, #8
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	4313      	orrs	r3, r2
 8005318:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005320:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a14      	ldr	r2, [pc, #80]	; (8005378 <TIM_OC3_SetConfig+0xd0>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d113      	bne.n	8005352 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005330:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005338:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	011b      	lsls	r3, r3, #4
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	4313      	orrs	r3, r2
 8005344:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	011b      	lsls	r3, r3, #4
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	4313      	orrs	r3, r2
 8005350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	621a      	str	r2, [r3, #32]
}
 800536c:	bf00      	nop
 800536e:	371c      	adds	r7, #28
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr
 8005378:	40010000 	.word	0x40010000

0800537c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	021b      	lsls	r3, r3, #8
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	4313      	orrs	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	031b      	lsls	r3, r3, #12
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a10      	ldr	r2, [pc, #64]	; (8005418 <TIM_OC4_SetConfig+0x9c>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d109      	bne.n	80053f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	019b      	lsls	r3, r3, #6
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	621a      	str	r2, [r3, #32]
}
 800540a:	bf00      	nop
 800540c:	371c      	adds	r7, #28
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	40010000 	.word	0x40010000

0800541c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800541c:	b480      	push	{r7}
 800541e:	b087      	sub	sp, #28
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	f023 0201 	bic.w	r2, r3, #1
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005446:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	011b      	lsls	r3, r3, #4
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	4313      	orrs	r3, r2
 8005450:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f023 030a 	bic.w	r3, r3, #10
 8005458:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	4313      	orrs	r3, r2
 8005460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	621a      	str	r2, [r3, #32]
}
 800546e:	bf00      	nop
 8005470:	371c      	adds	r7, #28
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800547a:	b480      	push	{r7}
 800547c:	b087      	sub	sp, #28
 800547e:	af00      	add	r7, sp, #0
 8005480:	60f8      	str	r0, [r7, #12]
 8005482:	60b9      	str	r1, [r7, #8]
 8005484:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	f023 0210 	bic.w	r2, r3, #16
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	031b      	lsls	r3, r3, #12
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	4313      	orrs	r3, r2
 80054c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	621a      	str	r2, [r3, #32]
}
 80054ce:	bf00      	nop
 80054d0:	371c      	adds	r7, #28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054da:	b480      	push	{r7}
 80054dc:	b085      	sub	sp, #20
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	f043 0307 	orr.w	r3, r3, #7
 80054fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	609a      	str	r2, [r3, #8]
}
 8005504:	bf00      	nop
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
 800551c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800552a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	021a      	lsls	r2, r3, #8
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	431a      	orrs	r2, r3
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	4313      	orrs	r3, r2
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	4313      	orrs	r3, r2
 800553c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	609a      	str	r2, [r3, #8]
}
 8005544:	bf00      	nop
 8005546:	371c      	adds	r7, #28
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	f003 031f 	and.w	r3, r3, #31
 8005562:	2201      	movs	r2, #1
 8005564:	fa02 f303 	lsl.w	r3, r2, r3
 8005568:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6a1a      	ldr	r2, [r3, #32]
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	43db      	mvns	r3, r3
 8005572:	401a      	ands	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6a1a      	ldr	r2, [r3, #32]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f003 031f 	and.w	r3, r3, #31
 8005582:	6879      	ldr	r1, [r7, #4]
 8005584:	fa01 f303 	lsl.w	r3, r1, r3
 8005588:	431a      	orrs	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	621a      	str	r2, [r3, #32]
}
 800558e:	bf00      	nop
 8005590:	371c      	adds	r7, #28
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
	...

0800559c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d101      	bne.n	80055b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055b0:	2302      	movs	r3, #2
 80055b2:	e050      	b.n	8005656 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a1c      	ldr	r2, [pc, #112]	; (8005664 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d018      	beq.n	800562a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005600:	d013      	beq.n	800562a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a18      	ldr	r2, [pc, #96]	; (8005668 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d00e      	beq.n	800562a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a16      	ldr	r2, [pc, #88]	; (800566c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d009      	beq.n	800562a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a15      	ldr	r2, [pc, #84]	; (8005670 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d004      	beq.n	800562a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a13      	ldr	r2, [pc, #76]	; (8005674 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d10c      	bne.n	8005644 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005630:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	4313      	orrs	r3, r2
 800563a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	40010000 	.word	0x40010000
 8005668:	40000400 	.word	0x40000400
 800566c:	40000800 	.word	0x40000800
 8005670:	40000c00 	.word	0x40000c00
 8005674:	40014000 	.word	0x40014000

08005678 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e042      	b.n	8005738 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d106      	bne.n	80056cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7fc f8d6 	bl	8001878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2224      	movs	r2, #36	; 0x24
 80056d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 fdbd 	bl	8006264 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	691a      	ldr	r2, [r3, #16]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	695a      	ldr	r2, [r3, #20]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005708:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68da      	ldr	r2, [r3, #12]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005718:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2220      	movs	r2, #32
 8005724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2220      	movs	r2, #32
 800572c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b08a      	sub	sp, #40	; 0x28
 8005744:	af02      	add	r7, sp, #8
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	603b      	str	r3, [r7, #0]
 800574c:	4613      	mov	r3, r2
 800574e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b20      	cmp	r3, #32
 800575e:	d175      	bne.n	800584c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d002      	beq.n	800576c <HAL_UART_Transmit+0x2c>
 8005766:	88fb      	ldrh	r3, [r7, #6]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e06e      	b.n	800584e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2221      	movs	r2, #33	; 0x21
 800577a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800577e:	f7fd f9fd 	bl	8002b7c <HAL_GetTick>
 8005782:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	88fa      	ldrh	r2, [r7, #6]
 8005788:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	88fa      	ldrh	r2, [r7, #6]
 800578e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005798:	d108      	bne.n	80057ac <HAL_UART_Transmit+0x6c>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d104      	bne.n	80057ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80057a2:	2300      	movs	r3, #0
 80057a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	61bb      	str	r3, [r7, #24]
 80057aa:	e003      	b.n	80057b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057b0:	2300      	movs	r3, #0
 80057b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057b4:	e02e      	b.n	8005814 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	2200      	movs	r2, #0
 80057be:	2180      	movs	r1, #128	; 0x80
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 fb1f 	bl	8005e04 <UART_WaitOnFlagUntilTimeout>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2220      	movs	r2, #32
 80057d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e03a      	b.n	800584e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10b      	bne.n	80057f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	881b      	ldrh	r3, [r3, #0]
 80057e2:	461a      	mov	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	3302      	adds	r3, #2
 80057f2:	61bb      	str	r3, [r7, #24]
 80057f4:	e007      	b.n	8005806 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	781a      	ldrb	r2, [r3, #0]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	3301      	adds	r3, #1
 8005804:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800580a:	b29b      	uxth	r3, r3
 800580c:	3b01      	subs	r3, #1
 800580e:	b29a      	uxth	r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005818:	b29b      	uxth	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1cb      	bne.n	80057b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	2200      	movs	r2, #0
 8005826:	2140      	movs	r1, #64	; 0x40
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 faeb 	bl	8005e04 <UART_WaitOnFlagUntilTimeout>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d005      	beq.n	8005840 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2220      	movs	r2, #32
 8005838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e006      	b.n	800584e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2220      	movs	r2, #32
 8005844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005848:	2300      	movs	r3, #0
 800584a:	e000      	b.n	800584e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800584c:	2302      	movs	r3, #2
  }
}
 800584e:	4618      	mov	r0, r3
 8005850:	3720      	adds	r7, #32
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b084      	sub	sp, #16
 800585a:	af00      	add	r7, sp, #0
 800585c:	60f8      	str	r0, [r7, #12]
 800585e:	60b9      	str	r1, [r7, #8]
 8005860:	4613      	mov	r3, r2
 8005862:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b20      	cmp	r3, #32
 800586e:	d112      	bne.n	8005896 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d002      	beq.n	800587c <HAL_UART_Receive_IT+0x26>
 8005876:	88fb      	ldrh	r3, [r7, #6]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e00b      	b.n	8005898 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005886:	88fb      	ldrh	r3, [r7, #6]
 8005888:	461a      	mov	r2, r3
 800588a:	68b9      	ldr	r1, [r7, #8]
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f000 fb12 	bl	8005eb6 <UART_Start_Receive_IT>
 8005892:	4603      	mov	r3, r0
 8005894:	e000      	b.n	8005898 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005896:	2302      	movs	r3, #2
  }
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b0ba      	sub	sp, #232	; 0xe8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80058d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058d6:	f003 030f 	and.w	r3, r3, #15
 80058da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80058de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10f      	bne.n	8005906 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ea:	f003 0320 	and.w	r3, r3, #32
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d009      	beq.n	8005906 <HAL_UART_IRQHandler+0x66>
 80058f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058f6:	f003 0320 	and.w	r3, r3, #32
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 fbf2 	bl	80060e8 <UART_Receive_IT>
      return;
 8005904:	e25b      	b.n	8005dbe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005906:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800590a:	2b00      	cmp	r3, #0
 800590c:	f000 80de 	beq.w	8005acc <HAL_UART_IRQHandler+0x22c>
 8005910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	2b00      	cmp	r3, #0
 800591a:	d106      	bne.n	800592a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800591c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005920:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 80d1 	beq.w	8005acc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800592a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00b      	beq.n	800594e <HAL_UART_IRQHandler+0xae>
 8005936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800593a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800593e:	2b00      	cmp	r3, #0
 8005940:	d005      	beq.n	800594e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005946:	f043 0201 	orr.w	r2, r3, #1
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800594e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005952:	f003 0304 	and.w	r3, r3, #4
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00b      	beq.n	8005972 <HAL_UART_IRQHandler+0xd2>
 800595a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d005      	beq.n	8005972 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800596a:	f043 0202 	orr.w	r2, r3, #2
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00b      	beq.n	8005996 <HAL_UART_IRQHandler+0xf6>
 800597e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d005      	beq.n	8005996 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800598e:	f043 0204 	orr.w	r2, r3, #4
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800599a:	f003 0308 	and.w	r3, r3, #8
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d011      	beq.n	80059c6 <HAL_UART_IRQHandler+0x126>
 80059a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059a6:	f003 0320 	and.w	r3, r3, #32
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d105      	bne.n	80059ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80059ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d005      	beq.n	80059c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059be:	f043 0208 	orr.w	r2, r3, #8
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 81f2 	beq.w	8005db4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059d4:	f003 0320 	and.w	r3, r3, #32
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d008      	beq.n	80059ee <HAL_UART_IRQHandler+0x14e>
 80059dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059e0:	f003 0320 	and.w	r3, r3, #32
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fb7d 	bl	80060e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f8:	2b40      	cmp	r3, #64	; 0x40
 80059fa:	bf0c      	ite	eq
 80059fc:	2301      	moveq	r3, #1
 80059fe:	2300      	movne	r3, #0
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0a:	f003 0308 	and.w	r3, r3, #8
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d103      	bne.n	8005a1a <HAL_UART_IRQHandler+0x17a>
 8005a12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d04f      	beq.n	8005aba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 fa85 	bl	8005f2a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2a:	2b40      	cmp	r3, #64	; 0x40
 8005a2c:	d141      	bne.n	8005ab2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	3314      	adds	r3, #20
 8005a34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a3c:	e853 3f00 	ldrex	r3, [r3]
 8005a40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	3314      	adds	r3, #20
 8005a56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a6a:	e841 2300 	strex	r3, r2, [r1]
 8005a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1d9      	bne.n	8005a2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d013      	beq.n	8005aaa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a86:	4a7e      	ldr	r2, [pc, #504]	; (8005c80 <HAL_UART_IRQHandler+0x3e0>)
 8005a88:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fd f9f6 	bl	8002e80 <HAL_DMA_Abort_IT>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d016      	beq.n	8005ac8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aa8:	e00e      	b.n	8005ac8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f994 	bl	8005dd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab0:	e00a      	b.n	8005ac8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f990 	bl	8005dd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab8:	e006      	b.n	8005ac8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f98c 	bl	8005dd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005ac6:	e175      	b.n	8005db4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac8:	bf00      	nop
    return;
 8005aca:	e173      	b.n	8005db4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	f040 814f 	bne.w	8005d74 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ada:	f003 0310 	and.w	r3, r3, #16
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f000 8148 	beq.w	8005d74 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ae8:	f003 0310 	and.w	r3, r3, #16
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f000 8141 	beq.w	8005d74 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005af2:	2300      	movs	r3, #0
 8005af4:	60bb      	str	r3, [r7, #8]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	60bb      	str	r3, [r7, #8]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	60bb      	str	r3, [r7, #8]
 8005b06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b12:	2b40      	cmp	r3, #64	; 0x40
 8005b14:	f040 80b6 	bne.w	8005c84 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 8145 	beq.w	8005db8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b36:	429a      	cmp	r2, r3
 8005b38:	f080 813e 	bcs.w	8005db8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b42:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b4e:	f000 8088 	beq.w	8005c62 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	330c      	adds	r3, #12
 8005b58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b60:	e853 3f00 	ldrex	r3, [r3]
 8005b64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	330c      	adds	r3, #12
 8005b7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005b7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b8e:	e841 2300 	strex	r3, r2, [r1]
 8005b92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1d9      	bne.n	8005b52 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	3314      	adds	r3, #20
 8005ba4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ba8:	e853 3f00 	ldrex	r3, [r3]
 8005bac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005bae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bb0:	f023 0301 	bic.w	r3, r3, #1
 8005bb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	3314      	adds	r3, #20
 8005bbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005bc2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005bc6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005bca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005bce:	e841 2300 	strex	r3, r2, [r1]
 8005bd2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005bd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1e1      	bne.n	8005b9e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	3314      	adds	r3, #20
 8005be0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005be4:	e853 3f00 	ldrex	r3, [r3]
 8005be8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005bea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	3314      	adds	r3, #20
 8005bfa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005bfe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c06:	e841 2300 	strex	r3, r2, [r1]
 8005c0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1e3      	bne.n	8005bda <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2220      	movs	r2, #32
 8005c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	330c      	adds	r3, #12
 8005c26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c2a:	e853 3f00 	ldrex	r3, [r3]
 8005c2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c32:	f023 0310 	bic.w	r3, r3, #16
 8005c36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	330c      	adds	r3, #12
 8005c40:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005c44:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c46:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c4c:	e841 2300 	strex	r3, r2, [r1]
 8005c50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e3      	bne.n	8005c20 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7fd f89f 	bl	8002da0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2202      	movs	r2, #2
 8005c66:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	4619      	mov	r1, r3
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 f8b7 	bl	8005dec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c7e:	e09b      	b.n	8005db8 <HAL_UART_IRQHandler+0x518>
 8005c80:	08005ff1 	.word	0x08005ff1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f000 808e 	beq.w	8005dbc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005ca0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 8089 	beq.w	8005dbc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	330c      	adds	r3, #12
 8005cb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb4:	e853 3f00 	ldrex	r3, [r3]
 8005cb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	330c      	adds	r3, #12
 8005cca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005cce:	647a      	str	r2, [r7, #68]	; 0x44
 8005cd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cd6:	e841 2300 	strex	r3, r2, [r1]
 8005cda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1e3      	bne.n	8005caa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3314      	adds	r3, #20
 8005ce8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	e853 3f00 	ldrex	r3, [r3]
 8005cf0:	623b      	str	r3, [r7, #32]
   return(result);
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	f023 0301 	bic.w	r3, r3, #1
 8005cf8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	3314      	adds	r3, #20
 8005d02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d06:	633a      	str	r2, [r7, #48]	; 0x30
 8005d08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d0e:	e841 2300 	strex	r3, r2, [r1]
 8005d12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1e3      	bne.n	8005ce2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	330c      	adds	r3, #12
 8005d2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	e853 3f00 	ldrex	r3, [r3]
 8005d36:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f023 0310 	bic.w	r3, r3, #16
 8005d3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	330c      	adds	r3, #12
 8005d48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005d4c:	61fa      	str	r2, [r7, #28]
 8005d4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d50:	69b9      	ldr	r1, [r7, #24]
 8005d52:	69fa      	ldr	r2, [r7, #28]
 8005d54:	e841 2300 	strex	r3, r2, [r1]
 8005d58:	617b      	str	r3, [r7, #20]
   return(result);
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1e3      	bne.n	8005d28 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2202      	movs	r2, #2
 8005d64:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f83d 	bl	8005dec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d72:	e023      	b.n	8005dbc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d009      	beq.n	8005d94 <HAL_UART_IRQHandler+0x4f4>
 8005d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d003      	beq.n	8005d94 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f943 	bl	8006018 <UART_Transmit_IT>
    return;
 8005d92:	e014      	b.n	8005dbe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00e      	beq.n	8005dbe <HAL_UART_IRQHandler+0x51e>
 8005da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d008      	beq.n	8005dbe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 f983 	bl	80060b8 <UART_EndTransmit_IT>
    return;
 8005db2:	e004      	b.n	8005dbe <HAL_UART_IRQHandler+0x51e>
    return;
 8005db4:	bf00      	nop
 8005db6:	e002      	b.n	8005dbe <HAL_UART_IRQHandler+0x51e>
      return;
 8005db8:	bf00      	nop
 8005dba:	e000      	b.n	8005dbe <HAL_UART_IRQHandler+0x51e>
      return;
 8005dbc:	bf00      	nop
  }
}
 8005dbe:	37e8      	adds	r7, #232	; 0xe8
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	460b      	mov	r3, r1
 8005df6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	603b      	str	r3, [r7, #0]
 8005e10:	4613      	mov	r3, r2
 8005e12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e14:	e03b      	b.n	8005e8e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e1c:	d037      	beq.n	8005e8e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e1e:	f7fc fead 	bl	8002b7c <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	6a3a      	ldr	r2, [r7, #32]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d302      	bcc.n	8005e34 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e03a      	b.n	8005eae <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f003 0304 	and.w	r3, r3, #4
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d023      	beq.n	8005e8e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	2b80      	cmp	r3, #128	; 0x80
 8005e4a:	d020      	beq.n	8005e8e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2b40      	cmp	r3, #64	; 0x40
 8005e50:	d01d      	beq.n	8005e8e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0308 	and.w	r3, r3, #8
 8005e5c:	2b08      	cmp	r3, #8
 8005e5e:	d116      	bne.n	8005e8e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005e60:	2300      	movs	r3, #0
 8005e62:	617b      	str	r3, [r7, #20]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	617b      	str	r3, [r7, #20]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	617b      	str	r3, [r7, #20]
 8005e74:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f000 f857 	bl	8005f2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2208      	movs	r2, #8
 8005e80:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e00f      	b.n	8005eae <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	4013      	ands	r3, r2
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	bf0c      	ite	eq
 8005e9e:	2301      	moveq	r3, #1
 8005ea0:	2300      	movne	r3, #0
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	79fb      	ldrb	r3, [r7, #7]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d0b4      	beq.n	8005e16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b085      	sub	sp, #20
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	60f8      	str	r0, [r7, #12]
 8005ebe:	60b9      	str	r1, [r7, #8]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	88fa      	ldrh	r2, [r7, #6]
 8005ece:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	88fa      	ldrh	r2, [r7, #6]
 8005ed4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2222      	movs	r2, #34	; 0x22
 8005ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d007      	beq.n	8005efc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68da      	ldr	r2, [r3, #12]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005efa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	695a      	ldr	r2, [r3, #20]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f042 0201 	orr.w	r2, r2, #1
 8005f0a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68da      	ldr	r2, [r3, #12]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f042 0220 	orr.w	r2, r2, #32
 8005f1a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3714      	adds	r7, #20
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b095      	sub	sp, #84	; 0x54
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	330c      	adds	r3, #12
 8005f38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3c:	e853 3f00 	ldrex	r3, [r3]
 8005f40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	330c      	adds	r3, #12
 8005f50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f52:	643a      	str	r2, [r7, #64]	; 0x40
 8005f54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f5a:	e841 2300 	strex	r3, r2, [r1]
 8005f5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1e5      	bne.n	8005f32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	3314      	adds	r3, #20
 8005f6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	e853 3f00 	ldrex	r3, [r3]
 8005f74:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	f023 0301 	bic.w	r3, r3, #1
 8005f7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	3314      	adds	r3, #20
 8005f84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f8e:	e841 2300 	strex	r3, r2, [r1]
 8005f92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1e5      	bne.n	8005f66 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d119      	bne.n	8005fd6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	330c      	adds	r3, #12
 8005fa8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	e853 3f00 	ldrex	r3, [r3]
 8005fb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	f023 0310 	bic.w	r3, r3, #16
 8005fb8:	647b      	str	r3, [r7, #68]	; 0x44
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	330c      	adds	r3, #12
 8005fc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fc2:	61ba      	str	r2, [r7, #24]
 8005fc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc6:	6979      	ldr	r1, [r7, #20]
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	e841 2300 	strex	r3, r2, [r1]
 8005fce:	613b      	str	r3, [r7, #16]
   return(result);
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1e5      	bne.n	8005fa2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005fe4:	bf00      	nop
 8005fe6:	3754      	adds	r7, #84	; 0x54
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f7ff fee4 	bl	8005dd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006010:	bf00      	nop
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b21      	cmp	r3, #33	; 0x21
 800602a:	d13e      	bne.n	80060aa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006034:	d114      	bne.n	8006060 <UART_Transmit_IT+0x48>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d110      	bne.n	8006060 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	881b      	ldrh	r3, [r3, #0]
 8006048:	461a      	mov	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006052:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	1c9a      	adds	r2, r3, #2
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	621a      	str	r2, [r3, #32]
 800605e:	e008      	b.n	8006072 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	1c59      	adds	r1, r3, #1
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	6211      	str	r1, [r2, #32]
 800606a:	781a      	ldrb	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006076:	b29b      	uxth	r3, r3
 8006078:	3b01      	subs	r3, #1
 800607a:	b29b      	uxth	r3, r3
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	4619      	mov	r1, r3
 8006080:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10f      	bne.n	80060a6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68da      	ldr	r2, [r3, #12]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006094:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68da      	ldr	r2, [r3, #12]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060a4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80060a6:	2300      	movs	r3, #0
 80060a8:	e000      	b.n	80060ac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80060aa:	2302      	movs	r3, #2
  }
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68da      	ldr	r2, [r3, #12]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2220      	movs	r2, #32
 80060d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f7ff fe73 	bl	8005dc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3708      	adds	r7, #8
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b08c      	sub	sp, #48	; 0x30
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	2b22      	cmp	r3, #34	; 0x22
 80060fa:	f040 80ae 	bne.w	800625a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006106:	d117      	bne.n	8006138 <UART_Receive_IT+0x50>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d113      	bne.n	8006138 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006110:	2300      	movs	r3, #0
 8006112:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006118:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	b29b      	uxth	r3, r3
 8006122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006126:	b29a      	uxth	r2, r3
 8006128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006130:	1c9a      	adds	r2, r3, #2
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	629a      	str	r2, [r3, #40]	; 0x28
 8006136:	e026      	b.n	8006186 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800613e:	2300      	movs	r3, #0
 8006140:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800614a:	d007      	beq.n	800615c <UART_Receive_IT+0x74>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10a      	bne.n	800616a <UART_Receive_IT+0x82>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d106      	bne.n	800616a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	b2da      	uxtb	r2, r3
 8006164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006166:	701a      	strb	r2, [r3, #0]
 8006168:	e008      	b.n	800617c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	b2db      	uxtb	r3, r3
 8006172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006176:	b2da      	uxtb	r2, r3
 8006178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006180:	1c5a      	adds	r2, r3, #1
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800618a:	b29b      	uxth	r3, r3
 800618c:	3b01      	subs	r3, #1
 800618e:	b29b      	uxth	r3, r3
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	4619      	mov	r1, r3
 8006194:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006196:	2b00      	cmp	r3, #0
 8006198:	d15d      	bne.n	8006256 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68da      	ldr	r2, [r3, #12]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f022 0220 	bic.w	r2, r2, #32
 80061a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68da      	ldr	r2, [r3, #12]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	695a      	ldr	r2, [r3, #20]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f022 0201 	bic.w	r2, r2, #1
 80061c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2220      	movs	r2, #32
 80061ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d135      	bne.n	800624c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	330c      	adds	r3, #12
 80061ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	e853 3f00 	ldrex	r3, [r3]
 80061f4:	613b      	str	r3, [r7, #16]
   return(result);
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	f023 0310 	bic.w	r3, r3, #16
 80061fc:	627b      	str	r3, [r7, #36]	; 0x24
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	330c      	adds	r3, #12
 8006204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006206:	623a      	str	r2, [r7, #32]
 8006208:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620a:	69f9      	ldr	r1, [r7, #28]
 800620c:	6a3a      	ldr	r2, [r7, #32]
 800620e:	e841 2300 	strex	r3, r2, [r1]
 8006212:	61bb      	str	r3, [r7, #24]
   return(result);
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1e5      	bne.n	80061e6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0310 	and.w	r3, r3, #16
 8006224:	2b10      	cmp	r3, #16
 8006226:	d10a      	bne.n	800623e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006228:	2300      	movs	r3, #0
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006242:	4619      	mov	r1, r3
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f7ff fdd1 	bl	8005dec <HAL_UARTEx_RxEventCallback>
 800624a:	e002      	b.n	8006252 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f7fa fdb9 	bl	8000dc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006252:	2300      	movs	r3, #0
 8006254:	e002      	b.n	800625c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006256:	2300      	movs	r3, #0
 8006258:	e000      	b.n	800625c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800625a:	2302      	movs	r3, #2
  }
}
 800625c:	4618      	mov	r0, r3
 800625e:	3730      	adds	r7, #48	; 0x30
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006268:	b0c0      	sub	sp, #256	; 0x100
 800626a:	af00      	add	r7, sp, #0
 800626c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800627c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006280:	68d9      	ldr	r1, [r3, #12]
 8006282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	ea40 0301 	orr.w	r3, r0, r1
 800628c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800628e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006292:	689a      	ldr	r2, [r3, #8]
 8006294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	431a      	orrs	r2, r3
 800629c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	431a      	orrs	r2, r3
 80062a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80062b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80062bc:	f021 010c 	bic.w	r1, r1, #12
 80062c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062ca:	430b      	orrs	r3, r1
 80062cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80062da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062de:	6999      	ldr	r1, [r3, #24]
 80062e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	ea40 0301 	orr.w	r3, r0, r1
 80062ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	4b8f      	ldr	r3, [pc, #572]	; (8006530 <UART_SetConfig+0x2cc>)
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d005      	beq.n	8006304 <UART_SetConfig+0xa0>
 80062f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	4b8d      	ldr	r3, [pc, #564]	; (8006534 <UART_SetConfig+0x2d0>)
 8006300:	429a      	cmp	r2, r3
 8006302:	d104      	bne.n	800630e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006304:	f7fe f8e8 	bl	80044d8 <HAL_RCC_GetPCLK2Freq>
 8006308:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800630c:	e003      	b.n	8006316 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800630e:	f7fe f8cf 	bl	80044b0 <HAL_RCC_GetPCLK1Freq>
 8006312:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800631a:	69db      	ldr	r3, [r3, #28]
 800631c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006320:	f040 810c 	bne.w	800653c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006324:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006328:	2200      	movs	r2, #0
 800632a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800632e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006332:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006336:	4622      	mov	r2, r4
 8006338:	462b      	mov	r3, r5
 800633a:	1891      	adds	r1, r2, r2
 800633c:	65b9      	str	r1, [r7, #88]	; 0x58
 800633e:	415b      	adcs	r3, r3
 8006340:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006342:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006346:	4621      	mov	r1, r4
 8006348:	eb12 0801 	adds.w	r8, r2, r1
 800634c:	4629      	mov	r1, r5
 800634e:	eb43 0901 	adc.w	r9, r3, r1
 8006352:	f04f 0200 	mov.w	r2, #0
 8006356:	f04f 0300 	mov.w	r3, #0
 800635a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800635e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006362:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006366:	4690      	mov	r8, r2
 8006368:	4699      	mov	r9, r3
 800636a:	4623      	mov	r3, r4
 800636c:	eb18 0303 	adds.w	r3, r8, r3
 8006370:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006374:	462b      	mov	r3, r5
 8006376:	eb49 0303 	adc.w	r3, r9, r3
 800637a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800637e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800638a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800638e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006392:	460b      	mov	r3, r1
 8006394:	18db      	adds	r3, r3, r3
 8006396:	653b      	str	r3, [r7, #80]	; 0x50
 8006398:	4613      	mov	r3, r2
 800639a:	eb42 0303 	adc.w	r3, r2, r3
 800639e:	657b      	str	r3, [r7, #84]	; 0x54
 80063a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80063a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80063a8:	f7fa fa78 	bl	800089c <__aeabi_uldivmod>
 80063ac:	4602      	mov	r2, r0
 80063ae:	460b      	mov	r3, r1
 80063b0:	4b61      	ldr	r3, [pc, #388]	; (8006538 <UART_SetConfig+0x2d4>)
 80063b2:	fba3 2302 	umull	r2, r3, r3, r2
 80063b6:	095b      	lsrs	r3, r3, #5
 80063b8:	011c      	lsls	r4, r3, #4
 80063ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063be:	2200      	movs	r2, #0
 80063c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80063c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80063cc:	4642      	mov	r2, r8
 80063ce:	464b      	mov	r3, r9
 80063d0:	1891      	adds	r1, r2, r2
 80063d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80063d4:	415b      	adcs	r3, r3
 80063d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80063dc:	4641      	mov	r1, r8
 80063de:	eb12 0a01 	adds.w	sl, r2, r1
 80063e2:	4649      	mov	r1, r9
 80063e4:	eb43 0b01 	adc.w	fp, r3, r1
 80063e8:	f04f 0200 	mov.w	r2, #0
 80063ec:	f04f 0300 	mov.w	r3, #0
 80063f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063fc:	4692      	mov	sl, r2
 80063fe:	469b      	mov	fp, r3
 8006400:	4643      	mov	r3, r8
 8006402:	eb1a 0303 	adds.w	r3, sl, r3
 8006406:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800640a:	464b      	mov	r3, r9
 800640c:	eb4b 0303 	adc.w	r3, fp, r3
 8006410:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006420:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006424:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006428:	460b      	mov	r3, r1
 800642a:	18db      	adds	r3, r3, r3
 800642c:	643b      	str	r3, [r7, #64]	; 0x40
 800642e:	4613      	mov	r3, r2
 8006430:	eb42 0303 	adc.w	r3, r2, r3
 8006434:	647b      	str	r3, [r7, #68]	; 0x44
 8006436:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800643a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800643e:	f7fa fa2d 	bl	800089c <__aeabi_uldivmod>
 8006442:	4602      	mov	r2, r0
 8006444:	460b      	mov	r3, r1
 8006446:	4611      	mov	r1, r2
 8006448:	4b3b      	ldr	r3, [pc, #236]	; (8006538 <UART_SetConfig+0x2d4>)
 800644a:	fba3 2301 	umull	r2, r3, r3, r1
 800644e:	095b      	lsrs	r3, r3, #5
 8006450:	2264      	movs	r2, #100	; 0x64
 8006452:	fb02 f303 	mul.w	r3, r2, r3
 8006456:	1acb      	subs	r3, r1, r3
 8006458:	00db      	lsls	r3, r3, #3
 800645a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800645e:	4b36      	ldr	r3, [pc, #216]	; (8006538 <UART_SetConfig+0x2d4>)
 8006460:	fba3 2302 	umull	r2, r3, r3, r2
 8006464:	095b      	lsrs	r3, r3, #5
 8006466:	005b      	lsls	r3, r3, #1
 8006468:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800646c:	441c      	add	r4, r3
 800646e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006472:	2200      	movs	r2, #0
 8006474:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006478:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800647c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006480:	4642      	mov	r2, r8
 8006482:	464b      	mov	r3, r9
 8006484:	1891      	adds	r1, r2, r2
 8006486:	63b9      	str	r1, [r7, #56]	; 0x38
 8006488:	415b      	adcs	r3, r3
 800648a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800648c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006490:	4641      	mov	r1, r8
 8006492:	1851      	adds	r1, r2, r1
 8006494:	6339      	str	r1, [r7, #48]	; 0x30
 8006496:	4649      	mov	r1, r9
 8006498:	414b      	adcs	r3, r1
 800649a:	637b      	str	r3, [r7, #52]	; 0x34
 800649c:	f04f 0200 	mov.w	r2, #0
 80064a0:	f04f 0300 	mov.w	r3, #0
 80064a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80064a8:	4659      	mov	r1, fp
 80064aa:	00cb      	lsls	r3, r1, #3
 80064ac:	4651      	mov	r1, sl
 80064ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064b2:	4651      	mov	r1, sl
 80064b4:	00ca      	lsls	r2, r1, #3
 80064b6:	4610      	mov	r0, r2
 80064b8:	4619      	mov	r1, r3
 80064ba:	4603      	mov	r3, r0
 80064bc:	4642      	mov	r2, r8
 80064be:	189b      	adds	r3, r3, r2
 80064c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064c4:	464b      	mov	r3, r9
 80064c6:	460a      	mov	r2, r1
 80064c8:	eb42 0303 	adc.w	r3, r2, r3
 80064cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80064dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80064e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80064e4:	460b      	mov	r3, r1
 80064e6:	18db      	adds	r3, r3, r3
 80064e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80064ea:	4613      	mov	r3, r2
 80064ec:	eb42 0303 	adc.w	r3, r2, r3
 80064f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80064fa:	f7fa f9cf 	bl	800089c <__aeabi_uldivmod>
 80064fe:	4602      	mov	r2, r0
 8006500:	460b      	mov	r3, r1
 8006502:	4b0d      	ldr	r3, [pc, #52]	; (8006538 <UART_SetConfig+0x2d4>)
 8006504:	fba3 1302 	umull	r1, r3, r3, r2
 8006508:	095b      	lsrs	r3, r3, #5
 800650a:	2164      	movs	r1, #100	; 0x64
 800650c:	fb01 f303 	mul.w	r3, r1, r3
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	00db      	lsls	r3, r3, #3
 8006514:	3332      	adds	r3, #50	; 0x32
 8006516:	4a08      	ldr	r2, [pc, #32]	; (8006538 <UART_SetConfig+0x2d4>)
 8006518:	fba2 2303 	umull	r2, r3, r2, r3
 800651c:	095b      	lsrs	r3, r3, #5
 800651e:	f003 0207 	and.w	r2, r3, #7
 8006522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4422      	add	r2, r4
 800652a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800652c:	e106      	b.n	800673c <UART_SetConfig+0x4d8>
 800652e:	bf00      	nop
 8006530:	40011000 	.word	0x40011000
 8006534:	40011400 	.word	0x40011400
 8006538:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800653c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006540:	2200      	movs	r2, #0
 8006542:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006546:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800654a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800654e:	4642      	mov	r2, r8
 8006550:	464b      	mov	r3, r9
 8006552:	1891      	adds	r1, r2, r2
 8006554:	6239      	str	r1, [r7, #32]
 8006556:	415b      	adcs	r3, r3
 8006558:	627b      	str	r3, [r7, #36]	; 0x24
 800655a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800655e:	4641      	mov	r1, r8
 8006560:	1854      	adds	r4, r2, r1
 8006562:	4649      	mov	r1, r9
 8006564:	eb43 0501 	adc.w	r5, r3, r1
 8006568:	f04f 0200 	mov.w	r2, #0
 800656c:	f04f 0300 	mov.w	r3, #0
 8006570:	00eb      	lsls	r3, r5, #3
 8006572:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006576:	00e2      	lsls	r2, r4, #3
 8006578:	4614      	mov	r4, r2
 800657a:	461d      	mov	r5, r3
 800657c:	4643      	mov	r3, r8
 800657e:	18e3      	adds	r3, r4, r3
 8006580:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006584:	464b      	mov	r3, r9
 8006586:	eb45 0303 	adc.w	r3, r5, r3
 800658a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800658e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800659a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800659e:	f04f 0200 	mov.w	r2, #0
 80065a2:	f04f 0300 	mov.w	r3, #0
 80065a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80065aa:	4629      	mov	r1, r5
 80065ac:	008b      	lsls	r3, r1, #2
 80065ae:	4621      	mov	r1, r4
 80065b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065b4:	4621      	mov	r1, r4
 80065b6:	008a      	lsls	r2, r1, #2
 80065b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80065bc:	f7fa f96e 	bl	800089c <__aeabi_uldivmod>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	4b60      	ldr	r3, [pc, #384]	; (8006748 <UART_SetConfig+0x4e4>)
 80065c6:	fba3 2302 	umull	r2, r3, r3, r2
 80065ca:	095b      	lsrs	r3, r3, #5
 80065cc:	011c      	lsls	r4, r3, #4
 80065ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065d2:	2200      	movs	r2, #0
 80065d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80065d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80065dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80065e0:	4642      	mov	r2, r8
 80065e2:	464b      	mov	r3, r9
 80065e4:	1891      	adds	r1, r2, r2
 80065e6:	61b9      	str	r1, [r7, #24]
 80065e8:	415b      	adcs	r3, r3
 80065ea:	61fb      	str	r3, [r7, #28]
 80065ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065f0:	4641      	mov	r1, r8
 80065f2:	1851      	adds	r1, r2, r1
 80065f4:	6139      	str	r1, [r7, #16]
 80065f6:	4649      	mov	r1, r9
 80065f8:	414b      	adcs	r3, r1
 80065fa:	617b      	str	r3, [r7, #20]
 80065fc:	f04f 0200 	mov.w	r2, #0
 8006600:	f04f 0300 	mov.w	r3, #0
 8006604:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006608:	4659      	mov	r1, fp
 800660a:	00cb      	lsls	r3, r1, #3
 800660c:	4651      	mov	r1, sl
 800660e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006612:	4651      	mov	r1, sl
 8006614:	00ca      	lsls	r2, r1, #3
 8006616:	4610      	mov	r0, r2
 8006618:	4619      	mov	r1, r3
 800661a:	4603      	mov	r3, r0
 800661c:	4642      	mov	r2, r8
 800661e:	189b      	adds	r3, r3, r2
 8006620:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006624:	464b      	mov	r3, r9
 8006626:	460a      	mov	r2, r1
 8006628:	eb42 0303 	adc.w	r3, r2, r3
 800662c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	67bb      	str	r3, [r7, #120]	; 0x78
 800663a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800663c:	f04f 0200 	mov.w	r2, #0
 8006640:	f04f 0300 	mov.w	r3, #0
 8006644:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006648:	4649      	mov	r1, r9
 800664a:	008b      	lsls	r3, r1, #2
 800664c:	4641      	mov	r1, r8
 800664e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006652:	4641      	mov	r1, r8
 8006654:	008a      	lsls	r2, r1, #2
 8006656:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800665a:	f7fa f91f 	bl	800089c <__aeabi_uldivmod>
 800665e:	4602      	mov	r2, r0
 8006660:	460b      	mov	r3, r1
 8006662:	4611      	mov	r1, r2
 8006664:	4b38      	ldr	r3, [pc, #224]	; (8006748 <UART_SetConfig+0x4e4>)
 8006666:	fba3 2301 	umull	r2, r3, r3, r1
 800666a:	095b      	lsrs	r3, r3, #5
 800666c:	2264      	movs	r2, #100	; 0x64
 800666e:	fb02 f303 	mul.w	r3, r2, r3
 8006672:	1acb      	subs	r3, r1, r3
 8006674:	011b      	lsls	r3, r3, #4
 8006676:	3332      	adds	r3, #50	; 0x32
 8006678:	4a33      	ldr	r2, [pc, #204]	; (8006748 <UART_SetConfig+0x4e4>)
 800667a:	fba2 2303 	umull	r2, r3, r2, r3
 800667e:	095b      	lsrs	r3, r3, #5
 8006680:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006684:	441c      	add	r4, r3
 8006686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800668a:	2200      	movs	r2, #0
 800668c:	673b      	str	r3, [r7, #112]	; 0x70
 800668e:	677a      	str	r2, [r7, #116]	; 0x74
 8006690:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006694:	4642      	mov	r2, r8
 8006696:	464b      	mov	r3, r9
 8006698:	1891      	adds	r1, r2, r2
 800669a:	60b9      	str	r1, [r7, #8]
 800669c:	415b      	adcs	r3, r3
 800669e:	60fb      	str	r3, [r7, #12]
 80066a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066a4:	4641      	mov	r1, r8
 80066a6:	1851      	adds	r1, r2, r1
 80066a8:	6039      	str	r1, [r7, #0]
 80066aa:	4649      	mov	r1, r9
 80066ac:	414b      	adcs	r3, r1
 80066ae:	607b      	str	r3, [r7, #4]
 80066b0:	f04f 0200 	mov.w	r2, #0
 80066b4:	f04f 0300 	mov.w	r3, #0
 80066b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80066bc:	4659      	mov	r1, fp
 80066be:	00cb      	lsls	r3, r1, #3
 80066c0:	4651      	mov	r1, sl
 80066c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066c6:	4651      	mov	r1, sl
 80066c8:	00ca      	lsls	r2, r1, #3
 80066ca:	4610      	mov	r0, r2
 80066cc:	4619      	mov	r1, r3
 80066ce:	4603      	mov	r3, r0
 80066d0:	4642      	mov	r2, r8
 80066d2:	189b      	adds	r3, r3, r2
 80066d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80066d6:	464b      	mov	r3, r9
 80066d8:	460a      	mov	r2, r1
 80066da:	eb42 0303 	adc.w	r3, r2, r3
 80066de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	663b      	str	r3, [r7, #96]	; 0x60
 80066ea:	667a      	str	r2, [r7, #100]	; 0x64
 80066ec:	f04f 0200 	mov.w	r2, #0
 80066f0:	f04f 0300 	mov.w	r3, #0
 80066f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80066f8:	4649      	mov	r1, r9
 80066fa:	008b      	lsls	r3, r1, #2
 80066fc:	4641      	mov	r1, r8
 80066fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006702:	4641      	mov	r1, r8
 8006704:	008a      	lsls	r2, r1, #2
 8006706:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800670a:	f7fa f8c7 	bl	800089c <__aeabi_uldivmod>
 800670e:	4602      	mov	r2, r0
 8006710:	460b      	mov	r3, r1
 8006712:	4b0d      	ldr	r3, [pc, #52]	; (8006748 <UART_SetConfig+0x4e4>)
 8006714:	fba3 1302 	umull	r1, r3, r3, r2
 8006718:	095b      	lsrs	r3, r3, #5
 800671a:	2164      	movs	r1, #100	; 0x64
 800671c:	fb01 f303 	mul.w	r3, r1, r3
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	011b      	lsls	r3, r3, #4
 8006724:	3332      	adds	r3, #50	; 0x32
 8006726:	4a08      	ldr	r2, [pc, #32]	; (8006748 <UART_SetConfig+0x4e4>)
 8006728:	fba2 2303 	umull	r2, r3, r2, r3
 800672c:	095b      	lsrs	r3, r3, #5
 800672e:	f003 020f 	and.w	r2, r3, #15
 8006732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4422      	add	r2, r4
 800673a:	609a      	str	r2, [r3, #8]
}
 800673c:	bf00      	nop
 800673e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006742:	46bd      	mov	sp, r7
 8006744:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006748:	51eb851f 	.word	0x51eb851f

0800674c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	4603      	mov	r3, r0
 8006754:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006756:	2300      	movs	r3, #0
 8006758:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800675a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800675e:	2b84      	cmp	r3, #132	; 0x84
 8006760:	d005      	beq.n	800676e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006762:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	4413      	add	r3, r2
 800676a:	3303      	adds	r3, #3
 800676c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800676e:	68fb      	ldr	r3, [r7, #12]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006780:	f000 faf6 	bl	8006d70 <vTaskStartScheduler>
  
  return osOK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	bd80      	pop	{r7, pc}

0800678a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800678a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800678c:	b089      	sub	sp, #36	; 0x24
 800678e:	af04      	add	r7, sp, #16
 8006790:	6078      	str	r0, [r7, #4]
 8006792:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d020      	beq.n	80067de <osThreadCreate+0x54>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d01c      	beq.n	80067de <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685c      	ldr	r4, [r3, #4]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691e      	ldr	r6, [r3, #16]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7ff ffc8 	bl	800674c <makeFreeRtosPriority>
 80067bc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067c6:	9202      	str	r2, [sp, #8]
 80067c8:	9301      	str	r3, [sp, #4]
 80067ca:	9100      	str	r1, [sp, #0]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	4632      	mov	r2, r6
 80067d0:	4629      	mov	r1, r5
 80067d2:	4620      	mov	r0, r4
 80067d4:	f000 f8ed 	bl	80069b2 <xTaskCreateStatic>
 80067d8:	4603      	mov	r3, r0
 80067da:	60fb      	str	r3, [r7, #12]
 80067dc:	e01c      	b.n	8006818 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685c      	ldr	r4, [r3, #4]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067ea:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7ff ffaa 	bl	800674c <makeFreeRtosPriority>
 80067f8:	4602      	mov	r2, r0
 80067fa:	f107 030c 	add.w	r3, r7, #12
 80067fe:	9301      	str	r3, [sp, #4]
 8006800:	9200      	str	r2, [sp, #0]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	4632      	mov	r2, r6
 8006806:	4629      	mov	r1, r5
 8006808:	4620      	mov	r0, r4
 800680a:	f000 f92f 	bl	8006a6c <xTaskCreate>
 800680e:	4603      	mov	r3, r0
 8006810:	2b01      	cmp	r3, #1
 8006812:	d001      	beq.n	8006818 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006814:	2300      	movs	r3, #0
 8006816:	e000      	b.n	800681a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006818:	68fb      	ldr	r3, [r7, #12]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006822 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b084      	sub	sp, #16
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <osDelay+0x16>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	e000      	b.n	800683a <osDelay+0x18>
 8006838:	2301      	movs	r3, #1
 800683a:	4618      	mov	r0, r3
 800683c:	f000 fa64 	bl	8006d08 <vTaskDelay>
  
  return osOK;
 8006840:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800684a:	b480      	push	{r7}
 800684c:	b083      	sub	sp, #12
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f103 0208 	add.w	r2, r3, #8
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f04f 32ff 	mov.w	r2, #4294967295
 8006862:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f103 0208 	add.w	r2, r3, #8
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f103 0208 	add.w	r2, r3, #8
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800687e:	bf00      	nop
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800688a:	b480      	push	{r7}
 800688c:	b083      	sub	sp, #12
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	689a      	ldr	r2, [r3, #8]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	683a      	ldr	r2, [r7, #0]
 80068ce:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	1c5a      	adds	r2, r3, #1
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	601a      	str	r2, [r3, #0]
}
 80068e0:	bf00      	nop
 80068e2:	3714      	adds	r7, #20
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006902:	d103      	bne.n	800690c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	60fb      	str	r3, [r7, #12]
 800690a:	e00c      	b.n	8006926 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	3308      	adds	r3, #8
 8006910:	60fb      	str	r3, [r7, #12]
 8006912:	e002      	b.n	800691a <vListInsert+0x2e>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	60fb      	str	r3, [r7, #12]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	429a      	cmp	r2, r3
 8006924:	d2f6      	bcs.n	8006914 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	683a      	ldr	r2, [r7, #0]
 8006934:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	1c5a      	adds	r2, r3, #1
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	601a      	str	r2, [r3, #0]
}
 8006952:	bf00      	nop
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800695e:	b480      	push	{r7}
 8006960:	b085      	sub	sp, #20
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	6892      	ldr	r2, [r2, #8]
 8006974:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	6852      	ldr	r2, [r2, #4]
 800697e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	429a      	cmp	r2, r3
 8006988:	d103      	bne.n	8006992 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	689a      	ldr	r2, [r3, #8]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	1e5a      	subs	r2, r3, #1
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3714      	adds	r7, #20
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b08e      	sub	sp, #56	; 0x38
 80069b6:	af04      	add	r7, sp, #16
 80069b8:	60f8      	str	r0, [r7, #12]
 80069ba:	60b9      	str	r1, [r7, #8]
 80069bc:	607a      	str	r2, [r7, #4]
 80069be:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80069c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d10a      	bne.n	80069dc <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80069c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ca:	f383 8811 	msr	BASEPRI, r3
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80069d8:	bf00      	nop
 80069da:	e7fe      	b.n	80069da <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80069dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10a      	bne.n	80069f8 <xTaskCreateStatic+0x46>
	__asm volatile
 80069e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	61fb      	str	r3, [r7, #28]
}
 80069f4:	bf00      	nop
 80069f6:	e7fe      	b.n	80069f6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80069f8:	23a0      	movs	r3, #160	; 0xa0
 80069fa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	2ba0      	cmp	r3, #160	; 0xa0
 8006a00:	d00a      	beq.n	8006a18 <xTaskCreateStatic+0x66>
	__asm volatile
 8006a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a06:	f383 8811 	msr	BASEPRI, r3
 8006a0a:	f3bf 8f6f 	isb	sy
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	61bb      	str	r3, [r7, #24]
}
 8006a14:	bf00      	nop
 8006a16:	e7fe      	b.n	8006a16 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a18:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d01e      	beq.n	8006a5e <xTaskCreateStatic+0xac>
 8006a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d01b      	beq.n	8006a5e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a28:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a2e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	2202      	movs	r2, #2
 8006a34:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a38:	2300      	movs	r3, #0
 8006a3a:	9303      	str	r3, [sp, #12]
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3e:	9302      	str	r3, [sp, #8]
 8006a40:	f107 0314 	add.w	r3, r7, #20
 8006a44:	9301      	str	r3, [sp, #4]
 8006a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a48:	9300      	str	r3, [sp, #0]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	68b9      	ldr	r1, [r7, #8]
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f000 f851 	bl	8006af8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a58:	f000 f8ec 	bl	8006c34 <prvAddNewTaskToReadyList>
 8006a5c:	e001      	b.n	8006a62 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a62:	697b      	ldr	r3, [r7, #20]
	}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3728      	adds	r7, #40	; 0x28
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b08c      	sub	sp, #48	; 0x30
 8006a70:	af04      	add	r7, sp, #16
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	603b      	str	r3, [r7, #0]
 8006a78:	4613      	mov	r3, r2
 8006a7a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a7c:	88fb      	ldrh	r3, [r7, #6]
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4618      	mov	r0, r3
 8006a82:	f000 fef1 	bl	8007868 <pvPortMalloc>
 8006a86:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00e      	beq.n	8006aac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a8e:	20a0      	movs	r0, #160	; 0xa0
 8006a90:	f000 feea 	bl	8007868 <pvPortMalloc>
 8006a94:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d003      	beq.n	8006aa4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	631a      	str	r2, [r3, #48]	; 0x30
 8006aa2:	e005      	b.n	8006ab0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006aa4:	6978      	ldr	r0, [r7, #20]
 8006aa6:	f000 ffab 	bl	8007a00 <vPortFree>
 8006aaa:	e001      	b.n	8006ab0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006aac:	2300      	movs	r3, #0
 8006aae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d017      	beq.n	8006ae6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006abe:	88fa      	ldrh	r2, [r7, #6]
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	9303      	str	r3, [sp, #12]
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	9302      	str	r3, [sp, #8]
 8006ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aca:	9301      	str	r3, [sp, #4]
 8006acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	68b9      	ldr	r1, [r7, #8]
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f000 f80f 	bl	8006af8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ada:	69f8      	ldr	r0, [r7, #28]
 8006adc:	f000 f8aa 	bl	8006c34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	61bb      	str	r3, [r7, #24]
 8006ae4:	e002      	b.n	8006aec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8006aea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006aec:	69bb      	ldr	r3, [r7, #24]
	}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3720      	adds	r7, #32
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
	...

08006af8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b088      	sub	sp, #32
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
 8006b04:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b10:	3b01      	subs	r3, #1
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	f023 0307 	bic.w	r3, r3, #7
 8006b1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	f003 0307 	and.w	r3, r3, #7
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2e:	f383 8811 	msr	BASEPRI, r3
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	f3bf 8f4f 	dsb	sy
 8006b3a:	617b      	str	r3, [r7, #20]
}
 8006b3c:	bf00      	nop
 8006b3e:	e7fe      	b.n	8006b3e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d01f      	beq.n	8006b86 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b46:	2300      	movs	r3, #0
 8006b48:	61fb      	str	r3, [r7, #28]
 8006b4a:	e012      	b.n	8006b72 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	4413      	add	r3, r2
 8006b52:	7819      	ldrb	r1, [r3, #0]
 8006b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	4413      	add	r3, r2
 8006b5a:	3334      	adds	r3, #52	; 0x34
 8006b5c:	460a      	mov	r2, r1
 8006b5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	4413      	add	r3, r2
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d006      	beq.n	8006b7a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	61fb      	str	r3, [r7, #28]
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	2b0f      	cmp	r3, #15
 8006b76:	d9e9      	bls.n	8006b4c <prvInitialiseNewTask+0x54>
 8006b78:	e000      	b.n	8006b7c <prvInitialiseNewTask+0x84>
			{
				break;
 8006b7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b84:	e003      	b.n	8006b8e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b90:	2b06      	cmp	r3, #6
 8006b92:	d901      	bls.n	8006b98 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b94:	2306      	movs	r3, #6
 8006b96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ba2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bac:	3304      	adds	r3, #4
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7ff fe6b 	bl	800688a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb6:	3318      	adds	r3, #24
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7ff fe66 	bl	800688a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc6:	f1c3 0207 	rsb	r2, r3, #7
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be6:	334c      	adds	r3, #76	; 0x4c
 8006be8:	224c      	movs	r2, #76	; 0x4c
 8006bea:	2100      	movs	r1, #0
 8006bec:	4618      	mov	r0, r3
 8006bee:	f001 f8d5 	bl	8007d9c <memset>
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf4:	4a0c      	ldr	r2, [pc, #48]	; (8006c28 <prvInitialiseNewTask+0x130>)
 8006bf6:	651a      	str	r2, [r3, #80]	; 0x50
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfa:	4a0c      	ldr	r2, [pc, #48]	; (8006c2c <prvInitialiseNewTask+0x134>)
 8006bfc:	655a      	str	r2, [r3, #84]	; 0x54
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c00:	4a0b      	ldr	r2, [pc, #44]	; (8006c30 <prvInitialiseNewTask+0x138>)
 8006c02:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	68f9      	ldr	r1, [r7, #12]
 8006c08:	69b8      	ldr	r0, [r7, #24]
 8006c0a:	f000 fc1f 	bl	800744c <pxPortInitialiseStack>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c12:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d002      	beq.n	8006c20 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c1e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c20:	bf00      	nop
 8006c22:	3720      	adds	r7, #32
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	2000446c 	.word	0x2000446c
 8006c2c:	200044d4 	.word	0x200044d4
 8006c30:	2000453c 	.word	0x2000453c

08006c34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c3c:	f000 fd32 	bl	80076a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c40:	4b2a      	ldr	r3, [pc, #168]	; (8006cec <prvAddNewTaskToReadyList+0xb8>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	3301      	adds	r3, #1
 8006c46:	4a29      	ldr	r2, [pc, #164]	; (8006cec <prvAddNewTaskToReadyList+0xb8>)
 8006c48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c4a:	4b29      	ldr	r3, [pc, #164]	; (8006cf0 <prvAddNewTaskToReadyList+0xbc>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d109      	bne.n	8006c66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c52:	4a27      	ldr	r2, [pc, #156]	; (8006cf0 <prvAddNewTaskToReadyList+0xbc>)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c58:	4b24      	ldr	r3, [pc, #144]	; (8006cec <prvAddNewTaskToReadyList+0xb8>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d110      	bne.n	8006c82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c60:	f000 facc 	bl	80071fc <prvInitialiseTaskLists>
 8006c64:	e00d      	b.n	8006c82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c66:	4b23      	ldr	r3, [pc, #140]	; (8006cf4 <prvAddNewTaskToReadyList+0xc0>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d109      	bne.n	8006c82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c6e:	4b20      	ldr	r3, [pc, #128]	; (8006cf0 <prvAddNewTaskToReadyList+0xbc>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d802      	bhi.n	8006c82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c7c:	4a1c      	ldr	r2, [pc, #112]	; (8006cf0 <prvAddNewTaskToReadyList+0xbc>)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c82:	4b1d      	ldr	r3, [pc, #116]	; (8006cf8 <prvAddNewTaskToReadyList+0xc4>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	3301      	adds	r3, #1
 8006c88:	4a1b      	ldr	r2, [pc, #108]	; (8006cf8 <prvAddNewTaskToReadyList+0xc4>)
 8006c8a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c90:	2201      	movs	r2, #1
 8006c92:	409a      	lsls	r2, r3
 8006c94:	4b19      	ldr	r3, [pc, #100]	; (8006cfc <prvAddNewTaskToReadyList+0xc8>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	4a18      	ldr	r2, [pc, #96]	; (8006cfc <prvAddNewTaskToReadyList+0xc8>)
 8006c9c:	6013      	str	r3, [r2, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4a15      	ldr	r2, [pc, #84]	; (8006d00 <prvAddNewTaskToReadyList+0xcc>)
 8006cac:	441a      	add	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	3304      	adds	r3, #4
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	4610      	mov	r0, r2
 8006cb6:	f7ff fdf5 	bl	80068a4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006cba:	f000 fd23 	bl	8007704 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006cbe:	4b0d      	ldr	r3, [pc, #52]	; (8006cf4 <prvAddNewTaskToReadyList+0xc0>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00e      	beq.n	8006ce4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006cc6:	4b0a      	ldr	r3, [pc, #40]	; (8006cf0 <prvAddNewTaskToReadyList+0xbc>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d207      	bcs.n	8006ce4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006cd4:	4b0b      	ldr	r3, [pc, #44]	; (8006d04 <prvAddNewTaskToReadyList+0xd0>)
 8006cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	f3bf 8f4f 	dsb	sy
 8006ce0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ce4:	bf00      	nop
 8006ce6:	3708      	adds	r7, #8
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	20000818 	.word	0x20000818
 8006cf0:	20000718 	.word	0x20000718
 8006cf4:	20000824 	.word	0x20000824
 8006cf8:	20000834 	.word	0x20000834
 8006cfc:	20000820 	.word	0x20000820
 8006d00:	2000071c 	.word	0x2000071c
 8006d04:	e000ed04 	.word	0xe000ed04

08006d08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d10:	2300      	movs	r3, #0
 8006d12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d017      	beq.n	8006d4a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d1a:	4b13      	ldr	r3, [pc, #76]	; (8006d68 <vTaskDelay+0x60>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00a      	beq.n	8006d38 <vTaskDelay+0x30>
	__asm volatile
 8006d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d26:	f383 8811 	msr	BASEPRI, r3
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	60bb      	str	r3, [r7, #8]
}
 8006d34:	bf00      	nop
 8006d36:	e7fe      	b.n	8006d36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d38:	f000 f884 	bl	8006e44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 fb1e 	bl	8007380 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d44:	f000 f88c 	bl	8006e60 <xTaskResumeAll>
 8006d48:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d107      	bne.n	8006d60 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006d50:	4b06      	ldr	r3, [pc, #24]	; (8006d6c <vTaskDelay+0x64>)
 8006d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d56:	601a      	str	r2, [r3, #0]
 8006d58:	f3bf 8f4f 	dsb	sy
 8006d5c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d60:	bf00      	nop
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	20000840 	.word	0x20000840
 8006d6c:	e000ed04 	.word	0xe000ed04

08006d70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b08a      	sub	sp, #40	; 0x28
 8006d74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d76:	2300      	movs	r3, #0
 8006d78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d7e:	463a      	mov	r2, r7
 8006d80:	1d39      	adds	r1, r7, #4
 8006d82:	f107 0308 	add.w	r3, r7, #8
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7fa f802 	bl	8000d90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d8c:	6839      	ldr	r1, [r7, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	9202      	str	r2, [sp, #8]
 8006d94:	9301      	str	r3, [sp, #4]
 8006d96:	2300      	movs	r3, #0
 8006d98:	9300      	str	r3, [sp, #0]
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	460a      	mov	r2, r1
 8006d9e:	4921      	ldr	r1, [pc, #132]	; (8006e24 <vTaskStartScheduler+0xb4>)
 8006da0:	4821      	ldr	r0, [pc, #132]	; (8006e28 <vTaskStartScheduler+0xb8>)
 8006da2:	f7ff fe06 	bl	80069b2 <xTaskCreateStatic>
 8006da6:	4603      	mov	r3, r0
 8006da8:	4a20      	ldr	r2, [pc, #128]	; (8006e2c <vTaskStartScheduler+0xbc>)
 8006daa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006dac:	4b1f      	ldr	r3, [pc, #124]	; (8006e2c <vTaskStartScheduler+0xbc>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d002      	beq.n	8006dba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006db4:	2301      	movs	r3, #1
 8006db6:	617b      	str	r3, [r7, #20]
 8006db8:	e001      	b.n	8006dbe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d11b      	bne.n	8006dfc <vTaskStartScheduler+0x8c>
	__asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	613b      	str	r3, [r7, #16]
}
 8006dd6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006dd8:	4b15      	ldr	r3, [pc, #84]	; (8006e30 <vTaskStartScheduler+0xc0>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	334c      	adds	r3, #76	; 0x4c
 8006dde:	4a15      	ldr	r2, [pc, #84]	; (8006e34 <vTaskStartScheduler+0xc4>)
 8006de0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006de2:	4b15      	ldr	r3, [pc, #84]	; (8006e38 <vTaskStartScheduler+0xc8>)
 8006de4:	f04f 32ff 	mov.w	r2, #4294967295
 8006de8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006dea:	4b14      	ldr	r3, [pc, #80]	; (8006e3c <vTaskStartScheduler+0xcc>)
 8006dec:	2201      	movs	r2, #1
 8006dee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006df0:	4b13      	ldr	r3, [pc, #76]	; (8006e40 <vTaskStartScheduler+0xd0>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006df6:	f000 fbb3 	bl	8007560 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006dfa:	e00e      	b.n	8006e1a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e02:	d10a      	bne.n	8006e1a <vTaskStartScheduler+0xaa>
	__asm volatile
 8006e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e08:	f383 8811 	msr	BASEPRI, r3
 8006e0c:	f3bf 8f6f 	isb	sy
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	60fb      	str	r3, [r7, #12]
}
 8006e16:	bf00      	nop
 8006e18:	e7fe      	b.n	8006e18 <vTaskStartScheduler+0xa8>
}
 8006e1a:	bf00      	nop
 8006e1c:	3718      	adds	r7, #24
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	08008874 	.word	0x08008874
 8006e28:	080071cd 	.word	0x080071cd
 8006e2c:	2000083c 	.word	0x2000083c
 8006e30:	20000718 	.word	0x20000718
 8006e34:	2000005c 	.word	0x2000005c
 8006e38:	20000838 	.word	0x20000838
 8006e3c:	20000824 	.word	0x20000824
 8006e40:	2000081c 	.word	0x2000081c

08006e44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e44:	b480      	push	{r7}
 8006e46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e48:	4b04      	ldr	r3, [pc, #16]	; (8006e5c <vTaskSuspendAll+0x18>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	4a03      	ldr	r2, [pc, #12]	; (8006e5c <vTaskSuspendAll+0x18>)
 8006e50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006e52:	bf00      	nop
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	20000840 	.word	0x20000840

08006e60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e66:	2300      	movs	r3, #0
 8006e68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e6e:	4b41      	ldr	r3, [pc, #260]	; (8006f74 <xTaskResumeAll+0x114>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10a      	bne.n	8006e8c <xTaskResumeAll+0x2c>
	__asm volatile
 8006e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7a:	f383 8811 	msr	BASEPRI, r3
 8006e7e:	f3bf 8f6f 	isb	sy
 8006e82:	f3bf 8f4f 	dsb	sy
 8006e86:	603b      	str	r3, [r7, #0]
}
 8006e88:	bf00      	nop
 8006e8a:	e7fe      	b.n	8006e8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e8c:	f000 fc0a 	bl	80076a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e90:	4b38      	ldr	r3, [pc, #224]	; (8006f74 <xTaskResumeAll+0x114>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	3b01      	subs	r3, #1
 8006e96:	4a37      	ldr	r2, [pc, #220]	; (8006f74 <xTaskResumeAll+0x114>)
 8006e98:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e9a:	4b36      	ldr	r3, [pc, #216]	; (8006f74 <xTaskResumeAll+0x114>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d161      	bne.n	8006f66 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ea2:	4b35      	ldr	r3, [pc, #212]	; (8006f78 <xTaskResumeAll+0x118>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d05d      	beq.n	8006f66 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006eaa:	e02e      	b.n	8006f0a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eac:	4b33      	ldr	r3, [pc, #204]	; (8006f7c <xTaskResumeAll+0x11c>)
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	3318      	adds	r3, #24
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7ff fd50 	bl	800695e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7ff fd4b 	bl	800695e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ecc:	2201      	movs	r2, #1
 8006ece:	409a      	lsls	r2, r3
 8006ed0:	4b2b      	ldr	r3, [pc, #172]	; (8006f80 <xTaskResumeAll+0x120>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	4a2a      	ldr	r2, [pc, #168]	; (8006f80 <xTaskResumeAll+0x120>)
 8006ed8:	6013      	str	r3, [r2, #0]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ede:	4613      	mov	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4413      	add	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4a27      	ldr	r2, [pc, #156]	; (8006f84 <xTaskResumeAll+0x124>)
 8006ee8:	441a      	add	r2, r3
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	3304      	adds	r3, #4
 8006eee:	4619      	mov	r1, r3
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	f7ff fcd7 	bl	80068a4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006efa:	4b23      	ldr	r3, [pc, #140]	; (8006f88 <xTaskResumeAll+0x128>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d302      	bcc.n	8006f0a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006f04:	4b21      	ldr	r3, [pc, #132]	; (8006f8c <xTaskResumeAll+0x12c>)
 8006f06:	2201      	movs	r2, #1
 8006f08:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f0a:	4b1c      	ldr	r3, [pc, #112]	; (8006f7c <xTaskResumeAll+0x11c>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1cc      	bne.n	8006eac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d001      	beq.n	8006f1c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f18:	f000 fa12 	bl	8007340 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f1c:	4b1c      	ldr	r3, [pc, #112]	; (8006f90 <xTaskResumeAll+0x130>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d010      	beq.n	8006f4a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f28:	f000 f836 	bl	8006f98 <xTaskIncrementTick>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d002      	beq.n	8006f38 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006f32:	4b16      	ldr	r3, [pc, #88]	; (8006f8c <xTaskResumeAll+0x12c>)
 8006f34:	2201      	movs	r2, #1
 8006f36:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1f1      	bne.n	8006f28 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006f44:	4b12      	ldr	r3, [pc, #72]	; (8006f90 <xTaskResumeAll+0x130>)
 8006f46:	2200      	movs	r2, #0
 8006f48:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f4a:	4b10      	ldr	r3, [pc, #64]	; (8006f8c <xTaskResumeAll+0x12c>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d009      	beq.n	8006f66 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f52:	2301      	movs	r3, #1
 8006f54:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f56:	4b0f      	ldr	r3, [pc, #60]	; (8006f94 <xTaskResumeAll+0x134>)
 8006f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f5c:	601a      	str	r2, [r3, #0]
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f66:	f000 fbcd 	bl	8007704 <vPortExitCritical>

	return xAlreadyYielded;
 8006f6a:	68bb      	ldr	r3, [r7, #8]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	20000840 	.word	0x20000840
 8006f78:	20000818 	.word	0x20000818
 8006f7c:	200007d8 	.word	0x200007d8
 8006f80:	20000820 	.word	0x20000820
 8006f84:	2000071c 	.word	0x2000071c
 8006f88:	20000718 	.word	0x20000718
 8006f8c:	2000082c 	.word	0x2000082c
 8006f90:	20000828 	.word	0x20000828
 8006f94:	e000ed04 	.word	0xe000ed04

08006f98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b086      	sub	sp, #24
 8006f9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fa2:	4b4e      	ldr	r3, [pc, #312]	; (80070dc <xTaskIncrementTick+0x144>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f040 808e 	bne.w	80070c8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006fac:	4b4c      	ldr	r3, [pc, #304]	; (80070e0 <xTaskIncrementTick+0x148>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006fb4:	4a4a      	ldr	r2, [pc, #296]	; (80070e0 <xTaskIncrementTick+0x148>)
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d120      	bne.n	8007002 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006fc0:	4b48      	ldr	r3, [pc, #288]	; (80070e4 <xTaskIncrementTick+0x14c>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00a      	beq.n	8006fe0 <xTaskIncrementTick+0x48>
	__asm volatile
 8006fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fce:	f383 8811 	msr	BASEPRI, r3
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	603b      	str	r3, [r7, #0]
}
 8006fdc:	bf00      	nop
 8006fde:	e7fe      	b.n	8006fde <xTaskIncrementTick+0x46>
 8006fe0:	4b40      	ldr	r3, [pc, #256]	; (80070e4 <xTaskIncrementTick+0x14c>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	60fb      	str	r3, [r7, #12]
 8006fe6:	4b40      	ldr	r3, [pc, #256]	; (80070e8 <xTaskIncrementTick+0x150>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a3e      	ldr	r2, [pc, #248]	; (80070e4 <xTaskIncrementTick+0x14c>)
 8006fec:	6013      	str	r3, [r2, #0]
 8006fee:	4a3e      	ldr	r2, [pc, #248]	; (80070e8 <xTaskIncrementTick+0x150>)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6013      	str	r3, [r2, #0]
 8006ff4:	4b3d      	ldr	r3, [pc, #244]	; (80070ec <xTaskIncrementTick+0x154>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	4a3c      	ldr	r2, [pc, #240]	; (80070ec <xTaskIncrementTick+0x154>)
 8006ffc:	6013      	str	r3, [r2, #0]
 8006ffe:	f000 f99f 	bl	8007340 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007002:	4b3b      	ldr	r3, [pc, #236]	; (80070f0 <xTaskIncrementTick+0x158>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	693a      	ldr	r2, [r7, #16]
 8007008:	429a      	cmp	r2, r3
 800700a:	d348      	bcc.n	800709e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800700c:	4b35      	ldr	r3, [pc, #212]	; (80070e4 <xTaskIncrementTick+0x14c>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d104      	bne.n	8007020 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007016:	4b36      	ldr	r3, [pc, #216]	; (80070f0 <xTaskIncrementTick+0x158>)
 8007018:	f04f 32ff 	mov.w	r2, #4294967295
 800701c:	601a      	str	r2, [r3, #0]
					break;
 800701e:	e03e      	b.n	800709e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007020:	4b30      	ldr	r3, [pc, #192]	; (80070e4 <xTaskIncrementTick+0x14c>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	429a      	cmp	r2, r3
 8007036:	d203      	bcs.n	8007040 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007038:	4a2d      	ldr	r2, [pc, #180]	; (80070f0 <xTaskIncrementTick+0x158>)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800703e:	e02e      	b.n	800709e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	3304      	adds	r3, #4
 8007044:	4618      	mov	r0, r3
 8007046:	f7ff fc8a 	bl	800695e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704e:	2b00      	cmp	r3, #0
 8007050:	d004      	beq.n	800705c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	3318      	adds	r3, #24
 8007056:	4618      	mov	r0, r3
 8007058:	f7ff fc81 	bl	800695e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007060:	2201      	movs	r2, #1
 8007062:	409a      	lsls	r2, r3
 8007064:	4b23      	ldr	r3, [pc, #140]	; (80070f4 <xTaskIncrementTick+0x15c>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4313      	orrs	r3, r2
 800706a:	4a22      	ldr	r2, [pc, #136]	; (80070f4 <xTaskIncrementTick+0x15c>)
 800706c:	6013      	str	r3, [r2, #0]
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007072:	4613      	mov	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4413      	add	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4a1f      	ldr	r2, [pc, #124]	; (80070f8 <xTaskIncrementTick+0x160>)
 800707c:	441a      	add	r2, r3
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	3304      	adds	r3, #4
 8007082:	4619      	mov	r1, r3
 8007084:	4610      	mov	r0, r2
 8007086:	f7ff fc0d 	bl	80068a4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800708e:	4b1b      	ldr	r3, [pc, #108]	; (80070fc <xTaskIncrementTick+0x164>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007094:	429a      	cmp	r2, r3
 8007096:	d3b9      	bcc.n	800700c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007098:	2301      	movs	r3, #1
 800709a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800709c:	e7b6      	b.n	800700c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800709e:	4b17      	ldr	r3, [pc, #92]	; (80070fc <xTaskIncrementTick+0x164>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a4:	4914      	ldr	r1, [pc, #80]	; (80070f8 <xTaskIncrementTick+0x160>)
 80070a6:	4613      	mov	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4413      	add	r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	440b      	add	r3, r1
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d901      	bls.n	80070ba <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80070b6:	2301      	movs	r3, #1
 80070b8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80070ba:	4b11      	ldr	r3, [pc, #68]	; (8007100 <xTaskIncrementTick+0x168>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d007      	beq.n	80070d2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80070c2:	2301      	movs	r3, #1
 80070c4:	617b      	str	r3, [r7, #20]
 80070c6:	e004      	b.n	80070d2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80070c8:	4b0e      	ldr	r3, [pc, #56]	; (8007104 <xTaskIncrementTick+0x16c>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	3301      	adds	r3, #1
 80070ce:	4a0d      	ldr	r2, [pc, #52]	; (8007104 <xTaskIncrementTick+0x16c>)
 80070d0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80070d2:	697b      	ldr	r3, [r7, #20]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3718      	adds	r7, #24
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	20000840 	.word	0x20000840
 80070e0:	2000081c 	.word	0x2000081c
 80070e4:	200007d0 	.word	0x200007d0
 80070e8:	200007d4 	.word	0x200007d4
 80070ec:	20000830 	.word	0x20000830
 80070f0:	20000838 	.word	0x20000838
 80070f4:	20000820 	.word	0x20000820
 80070f8:	2000071c 	.word	0x2000071c
 80070fc:	20000718 	.word	0x20000718
 8007100:	2000082c 	.word	0x2000082c
 8007104:	20000828 	.word	0x20000828

08007108 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007108:	b480      	push	{r7}
 800710a:	b087      	sub	sp, #28
 800710c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800710e:	4b29      	ldr	r3, [pc, #164]	; (80071b4 <vTaskSwitchContext+0xac>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d003      	beq.n	800711e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007116:	4b28      	ldr	r3, [pc, #160]	; (80071b8 <vTaskSwitchContext+0xb0>)
 8007118:	2201      	movs	r2, #1
 800711a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800711c:	e044      	b.n	80071a8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800711e:	4b26      	ldr	r3, [pc, #152]	; (80071b8 <vTaskSwitchContext+0xb0>)
 8007120:	2200      	movs	r2, #0
 8007122:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007124:	4b25      	ldr	r3, [pc, #148]	; (80071bc <vTaskSwitchContext+0xb4>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	fab3 f383 	clz	r3, r3
 8007130:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007132:	7afb      	ldrb	r3, [r7, #11]
 8007134:	f1c3 031f 	rsb	r3, r3, #31
 8007138:	617b      	str	r3, [r7, #20]
 800713a:	4921      	ldr	r1, [pc, #132]	; (80071c0 <vTaskSwitchContext+0xb8>)
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	4613      	mov	r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	4413      	add	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	440b      	add	r3, r1
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10a      	bne.n	8007164 <vTaskSwitchContext+0x5c>
	__asm volatile
 800714e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007152:	f383 8811 	msr	BASEPRI, r3
 8007156:	f3bf 8f6f 	isb	sy
 800715a:	f3bf 8f4f 	dsb	sy
 800715e:	607b      	str	r3, [r7, #4]
}
 8007160:	bf00      	nop
 8007162:	e7fe      	b.n	8007162 <vTaskSwitchContext+0x5a>
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	4613      	mov	r3, r2
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4413      	add	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4a14      	ldr	r2, [pc, #80]	; (80071c0 <vTaskSwitchContext+0xb8>)
 8007170:	4413      	add	r3, r2
 8007172:	613b      	str	r3, [r7, #16]
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	685a      	ldr	r2, [r3, #4]
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	605a      	str	r2, [r3, #4]
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	685a      	ldr	r2, [r3, #4]
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	3308      	adds	r3, #8
 8007186:	429a      	cmp	r2, r3
 8007188:	d104      	bne.n	8007194 <vTaskSwitchContext+0x8c>
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	685a      	ldr	r2, [r3, #4]
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	605a      	str	r2, [r3, #4]
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	4a0a      	ldr	r2, [pc, #40]	; (80071c4 <vTaskSwitchContext+0xbc>)
 800719c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800719e:	4b09      	ldr	r3, [pc, #36]	; (80071c4 <vTaskSwitchContext+0xbc>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	334c      	adds	r3, #76	; 0x4c
 80071a4:	4a08      	ldr	r2, [pc, #32]	; (80071c8 <vTaskSwitchContext+0xc0>)
 80071a6:	6013      	str	r3, [r2, #0]
}
 80071a8:	bf00      	nop
 80071aa:	371c      	adds	r7, #28
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr
 80071b4:	20000840 	.word	0x20000840
 80071b8:	2000082c 	.word	0x2000082c
 80071bc:	20000820 	.word	0x20000820
 80071c0:	2000071c 	.word	0x2000071c
 80071c4:	20000718 	.word	0x20000718
 80071c8:	2000005c 	.word	0x2000005c

080071cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80071d4:	f000 f852 	bl	800727c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80071d8:	4b06      	ldr	r3, [pc, #24]	; (80071f4 <prvIdleTask+0x28>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d9f9      	bls.n	80071d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80071e0:	4b05      	ldr	r3, [pc, #20]	; (80071f8 <prvIdleTask+0x2c>)
 80071e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071e6:	601a      	str	r2, [r3, #0]
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80071f0:	e7f0      	b.n	80071d4 <prvIdleTask+0x8>
 80071f2:	bf00      	nop
 80071f4:	2000071c 	.word	0x2000071c
 80071f8:	e000ed04 	.word	0xe000ed04

080071fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007202:	2300      	movs	r3, #0
 8007204:	607b      	str	r3, [r7, #4]
 8007206:	e00c      	b.n	8007222 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	4613      	mov	r3, r2
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	4413      	add	r3, r2
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	4a12      	ldr	r2, [pc, #72]	; (800725c <prvInitialiseTaskLists+0x60>)
 8007214:	4413      	add	r3, r2
 8007216:	4618      	mov	r0, r3
 8007218:	f7ff fb17 	bl	800684a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	3301      	adds	r3, #1
 8007220:	607b      	str	r3, [r7, #4]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2b06      	cmp	r3, #6
 8007226:	d9ef      	bls.n	8007208 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007228:	480d      	ldr	r0, [pc, #52]	; (8007260 <prvInitialiseTaskLists+0x64>)
 800722a:	f7ff fb0e 	bl	800684a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800722e:	480d      	ldr	r0, [pc, #52]	; (8007264 <prvInitialiseTaskLists+0x68>)
 8007230:	f7ff fb0b 	bl	800684a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007234:	480c      	ldr	r0, [pc, #48]	; (8007268 <prvInitialiseTaskLists+0x6c>)
 8007236:	f7ff fb08 	bl	800684a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800723a:	480c      	ldr	r0, [pc, #48]	; (800726c <prvInitialiseTaskLists+0x70>)
 800723c:	f7ff fb05 	bl	800684a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007240:	480b      	ldr	r0, [pc, #44]	; (8007270 <prvInitialiseTaskLists+0x74>)
 8007242:	f7ff fb02 	bl	800684a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007246:	4b0b      	ldr	r3, [pc, #44]	; (8007274 <prvInitialiseTaskLists+0x78>)
 8007248:	4a05      	ldr	r2, [pc, #20]	; (8007260 <prvInitialiseTaskLists+0x64>)
 800724a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800724c:	4b0a      	ldr	r3, [pc, #40]	; (8007278 <prvInitialiseTaskLists+0x7c>)
 800724e:	4a05      	ldr	r2, [pc, #20]	; (8007264 <prvInitialiseTaskLists+0x68>)
 8007250:	601a      	str	r2, [r3, #0]
}
 8007252:	bf00      	nop
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	2000071c 	.word	0x2000071c
 8007260:	200007a8 	.word	0x200007a8
 8007264:	200007bc 	.word	0x200007bc
 8007268:	200007d8 	.word	0x200007d8
 800726c:	200007ec 	.word	0x200007ec
 8007270:	20000804 	.word	0x20000804
 8007274:	200007d0 	.word	0x200007d0
 8007278:	200007d4 	.word	0x200007d4

0800727c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007282:	e019      	b.n	80072b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007284:	f000 fa0e 	bl	80076a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007288:	4b10      	ldr	r3, [pc, #64]	; (80072cc <prvCheckTasksWaitingTermination+0x50>)
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	3304      	adds	r3, #4
 8007294:	4618      	mov	r0, r3
 8007296:	f7ff fb62 	bl	800695e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800729a:	4b0d      	ldr	r3, [pc, #52]	; (80072d0 <prvCheckTasksWaitingTermination+0x54>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	3b01      	subs	r3, #1
 80072a0:	4a0b      	ldr	r2, [pc, #44]	; (80072d0 <prvCheckTasksWaitingTermination+0x54>)
 80072a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80072a4:	4b0b      	ldr	r3, [pc, #44]	; (80072d4 <prvCheckTasksWaitingTermination+0x58>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	3b01      	subs	r3, #1
 80072aa:	4a0a      	ldr	r2, [pc, #40]	; (80072d4 <prvCheckTasksWaitingTermination+0x58>)
 80072ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80072ae:	f000 fa29 	bl	8007704 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f810 	bl	80072d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072b8:	4b06      	ldr	r3, [pc, #24]	; (80072d4 <prvCheckTasksWaitingTermination+0x58>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1e1      	bne.n	8007284 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80072c0:	bf00      	nop
 80072c2:	bf00      	nop
 80072c4:	3708      	adds	r7, #8
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	200007ec 	.word	0x200007ec
 80072d0:	20000818 	.word	0x20000818
 80072d4:	20000800 	.word	0x20000800

080072d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	334c      	adds	r3, #76	; 0x4c
 80072e4:	4618      	mov	r0, r3
 80072e6:	f000 fd61 	bl	8007dac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d108      	bne.n	8007306 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f8:	4618      	mov	r0, r3
 80072fa:	f000 fb81 	bl	8007a00 <vPortFree>
				vPortFree( pxTCB );
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fb7e 	bl	8007a00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007304:	e018      	b.n	8007338 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800730c:	2b01      	cmp	r3, #1
 800730e:	d103      	bne.n	8007318 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fb75 	bl	8007a00 <vPortFree>
	}
 8007316:	e00f      	b.n	8007338 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800731e:	2b02      	cmp	r3, #2
 8007320:	d00a      	beq.n	8007338 <prvDeleteTCB+0x60>
	__asm volatile
 8007322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007326:	f383 8811 	msr	BASEPRI, r3
 800732a:	f3bf 8f6f 	isb	sy
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	60fb      	str	r3, [r7, #12]
}
 8007334:	bf00      	nop
 8007336:	e7fe      	b.n	8007336 <prvDeleteTCB+0x5e>
	}
 8007338:	bf00      	nop
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007346:	4b0c      	ldr	r3, [pc, #48]	; (8007378 <prvResetNextTaskUnblockTime+0x38>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d104      	bne.n	800735a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007350:	4b0a      	ldr	r3, [pc, #40]	; (800737c <prvResetNextTaskUnblockTime+0x3c>)
 8007352:	f04f 32ff 	mov.w	r2, #4294967295
 8007356:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007358:	e008      	b.n	800736c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800735a:	4b07      	ldr	r3, [pc, #28]	; (8007378 <prvResetNextTaskUnblockTime+0x38>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	4a04      	ldr	r2, [pc, #16]	; (800737c <prvResetNextTaskUnblockTime+0x3c>)
 800736a:	6013      	str	r3, [r2, #0]
}
 800736c:	bf00      	nop
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr
 8007378:	200007d0 	.word	0x200007d0
 800737c:	20000838 	.word	0x20000838

08007380 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800738a:	4b29      	ldr	r3, [pc, #164]	; (8007430 <prvAddCurrentTaskToDelayedList+0xb0>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007390:	4b28      	ldr	r3, [pc, #160]	; (8007434 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	3304      	adds	r3, #4
 8007396:	4618      	mov	r0, r3
 8007398:	f7ff fae1 	bl	800695e <uxListRemove>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d10b      	bne.n	80073ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80073a2:	4b24      	ldr	r3, [pc, #144]	; (8007434 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a8:	2201      	movs	r2, #1
 80073aa:	fa02 f303 	lsl.w	r3, r2, r3
 80073ae:	43da      	mvns	r2, r3
 80073b0:	4b21      	ldr	r3, [pc, #132]	; (8007438 <prvAddCurrentTaskToDelayedList+0xb8>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4013      	ands	r3, r2
 80073b6:	4a20      	ldr	r2, [pc, #128]	; (8007438 <prvAddCurrentTaskToDelayedList+0xb8>)
 80073b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c0:	d10a      	bne.n	80073d8 <prvAddCurrentTaskToDelayedList+0x58>
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d007      	beq.n	80073d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073c8:	4b1a      	ldr	r3, [pc, #104]	; (8007434 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3304      	adds	r3, #4
 80073ce:	4619      	mov	r1, r3
 80073d0:	481a      	ldr	r0, [pc, #104]	; (800743c <prvAddCurrentTaskToDelayedList+0xbc>)
 80073d2:	f7ff fa67 	bl	80068a4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80073d6:	e026      	b.n	8007426 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4413      	add	r3, r2
 80073de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80073e0:	4b14      	ldr	r3, [pc, #80]	; (8007434 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68ba      	ldr	r2, [r7, #8]
 80073e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d209      	bcs.n	8007404 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073f0:	4b13      	ldr	r3, [pc, #76]	; (8007440 <prvAddCurrentTaskToDelayedList+0xc0>)
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	4b0f      	ldr	r3, [pc, #60]	; (8007434 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	3304      	adds	r3, #4
 80073fa:	4619      	mov	r1, r3
 80073fc:	4610      	mov	r0, r2
 80073fe:	f7ff fa75 	bl	80068ec <vListInsert>
}
 8007402:	e010      	b.n	8007426 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007404:	4b0f      	ldr	r3, [pc, #60]	; (8007444 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	4b0a      	ldr	r3, [pc, #40]	; (8007434 <prvAddCurrentTaskToDelayedList+0xb4>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	3304      	adds	r3, #4
 800740e:	4619      	mov	r1, r3
 8007410:	4610      	mov	r0, r2
 8007412:	f7ff fa6b 	bl	80068ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007416:	4b0c      	ldr	r3, [pc, #48]	; (8007448 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	429a      	cmp	r2, r3
 800741e:	d202      	bcs.n	8007426 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007420:	4a09      	ldr	r2, [pc, #36]	; (8007448 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	6013      	str	r3, [r2, #0]
}
 8007426:	bf00      	nop
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	2000081c 	.word	0x2000081c
 8007434:	20000718 	.word	0x20000718
 8007438:	20000820 	.word	0x20000820
 800743c:	20000804 	.word	0x20000804
 8007440:	200007d4 	.word	0x200007d4
 8007444:	200007d0 	.word	0x200007d0
 8007448:	20000838 	.word	0x20000838

0800744c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	3b04      	subs	r3, #4
 800745c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007464:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	3b04      	subs	r3, #4
 800746a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	f023 0201 	bic.w	r2, r3, #1
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	3b04      	subs	r3, #4
 800747a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800747c:	4a0c      	ldr	r2, [pc, #48]	; (80074b0 <pxPortInitialiseStack+0x64>)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	3b14      	subs	r3, #20
 8007486:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	3b04      	subs	r3, #4
 8007492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f06f 0202 	mvn.w	r2, #2
 800749a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	3b20      	subs	r3, #32
 80074a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80074a2:	68fb      	ldr	r3, [r7, #12]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	080074b5 	.word	0x080074b5

080074b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80074ba:	2300      	movs	r3, #0
 80074bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80074be:	4b12      	ldr	r3, [pc, #72]	; (8007508 <prvTaskExitError+0x54>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c6:	d00a      	beq.n	80074de <prvTaskExitError+0x2a>
	__asm volatile
 80074c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074cc:	f383 8811 	msr	BASEPRI, r3
 80074d0:	f3bf 8f6f 	isb	sy
 80074d4:	f3bf 8f4f 	dsb	sy
 80074d8:	60fb      	str	r3, [r7, #12]
}
 80074da:	bf00      	nop
 80074dc:	e7fe      	b.n	80074dc <prvTaskExitError+0x28>
	__asm volatile
 80074de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e2:	f383 8811 	msr	BASEPRI, r3
 80074e6:	f3bf 8f6f 	isb	sy
 80074ea:	f3bf 8f4f 	dsb	sy
 80074ee:	60bb      	str	r3, [r7, #8]
}
 80074f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80074f2:	bf00      	nop
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d0fc      	beq.n	80074f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80074fa:	bf00      	nop
 80074fc:	bf00      	nop
 80074fe:	3714      	adds	r7, #20
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr
 8007508:	2000000c 	.word	0x2000000c
 800750c:	00000000 	.word	0x00000000

08007510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007510:	4b07      	ldr	r3, [pc, #28]	; (8007530 <pxCurrentTCBConst2>)
 8007512:	6819      	ldr	r1, [r3, #0]
 8007514:	6808      	ldr	r0, [r1, #0]
 8007516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800751a:	f380 8809 	msr	PSP, r0
 800751e:	f3bf 8f6f 	isb	sy
 8007522:	f04f 0000 	mov.w	r0, #0
 8007526:	f380 8811 	msr	BASEPRI, r0
 800752a:	4770      	bx	lr
 800752c:	f3af 8000 	nop.w

08007530 <pxCurrentTCBConst2>:
 8007530:	20000718 	.word	0x20000718
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007534:	bf00      	nop
 8007536:	bf00      	nop

08007538 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007538:	4808      	ldr	r0, [pc, #32]	; (800755c <prvPortStartFirstTask+0x24>)
 800753a:	6800      	ldr	r0, [r0, #0]
 800753c:	6800      	ldr	r0, [r0, #0]
 800753e:	f380 8808 	msr	MSP, r0
 8007542:	f04f 0000 	mov.w	r0, #0
 8007546:	f380 8814 	msr	CONTROL, r0
 800754a:	b662      	cpsie	i
 800754c:	b661      	cpsie	f
 800754e:	f3bf 8f4f 	dsb	sy
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	df00      	svc	0
 8007558:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800755a:	bf00      	nop
 800755c:	e000ed08 	.word	0xe000ed08

08007560 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007566:	4b46      	ldr	r3, [pc, #280]	; (8007680 <xPortStartScheduler+0x120>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a46      	ldr	r2, [pc, #280]	; (8007684 <xPortStartScheduler+0x124>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d10a      	bne.n	8007586 <xPortStartScheduler+0x26>
	__asm volatile
 8007570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007574:	f383 8811 	msr	BASEPRI, r3
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	613b      	str	r3, [r7, #16]
}
 8007582:	bf00      	nop
 8007584:	e7fe      	b.n	8007584 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007586:	4b3e      	ldr	r3, [pc, #248]	; (8007680 <xPortStartScheduler+0x120>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a3f      	ldr	r2, [pc, #252]	; (8007688 <xPortStartScheduler+0x128>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d10a      	bne.n	80075a6 <xPortStartScheduler+0x46>
	__asm volatile
 8007590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007594:	f383 8811 	msr	BASEPRI, r3
 8007598:	f3bf 8f6f 	isb	sy
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	60fb      	str	r3, [r7, #12]
}
 80075a2:	bf00      	nop
 80075a4:	e7fe      	b.n	80075a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80075a6:	4b39      	ldr	r3, [pc, #228]	; (800768c <xPortStartScheduler+0x12c>)
 80075a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	22ff      	movs	r2, #255	; 0xff
 80075b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80075c0:	78fb      	ldrb	r3, [r7, #3]
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80075c8:	b2da      	uxtb	r2, r3
 80075ca:	4b31      	ldr	r3, [pc, #196]	; (8007690 <xPortStartScheduler+0x130>)
 80075cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80075ce:	4b31      	ldr	r3, [pc, #196]	; (8007694 <xPortStartScheduler+0x134>)
 80075d0:	2207      	movs	r2, #7
 80075d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075d4:	e009      	b.n	80075ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80075d6:	4b2f      	ldr	r3, [pc, #188]	; (8007694 <xPortStartScheduler+0x134>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	3b01      	subs	r3, #1
 80075dc:	4a2d      	ldr	r2, [pc, #180]	; (8007694 <xPortStartScheduler+0x134>)
 80075de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80075e0:	78fb      	ldrb	r3, [r7, #3]
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	005b      	lsls	r3, r3, #1
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075ea:	78fb      	ldrb	r3, [r7, #3]
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075f2:	2b80      	cmp	r3, #128	; 0x80
 80075f4:	d0ef      	beq.n	80075d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80075f6:	4b27      	ldr	r3, [pc, #156]	; (8007694 <xPortStartScheduler+0x134>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f1c3 0307 	rsb	r3, r3, #7
 80075fe:	2b04      	cmp	r3, #4
 8007600:	d00a      	beq.n	8007618 <xPortStartScheduler+0xb8>
	__asm volatile
 8007602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	60bb      	str	r3, [r7, #8]
}
 8007614:	bf00      	nop
 8007616:	e7fe      	b.n	8007616 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007618:	4b1e      	ldr	r3, [pc, #120]	; (8007694 <xPortStartScheduler+0x134>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	021b      	lsls	r3, r3, #8
 800761e:	4a1d      	ldr	r2, [pc, #116]	; (8007694 <xPortStartScheduler+0x134>)
 8007620:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007622:	4b1c      	ldr	r3, [pc, #112]	; (8007694 <xPortStartScheduler+0x134>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800762a:	4a1a      	ldr	r2, [pc, #104]	; (8007694 <xPortStartScheduler+0x134>)
 800762c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	b2da      	uxtb	r2, r3
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007636:	4b18      	ldr	r3, [pc, #96]	; (8007698 <xPortStartScheduler+0x138>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a17      	ldr	r2, [pc, #92]	; (8007698 <xPortStartScheduler+0x138>)
 800763c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007640:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007642:	4b15      	ldr	r3, [pc, #84]	; (8007698 <xPortStartScheduler+0x138>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a14      	ldr	r2, [pc, #80]	; (8007698 <xPortStartScheduler+0x138>)
 8007648:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800764c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800764e:	f000 f8dd 	bl	800780c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007652:	4b12      	ldr	r3, [pc, #72]	; (800769c <xPortStartScheduler+0x13c>)
 8007654:	2200      	movs	r2, #0
 8007656:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007658:	f000 f8fc 	bl	8007854 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800765c:	4b10      	ldr	r3, [pc, #64]	; (80076a0 <xPortStartScheduler+0x140>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a0f      	ldr	r2, [pc, #60]	; (80076a0 <xPortStartScheduler+0x140>)
 8007662:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007666:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007668:	f7ff ff66 	bl	8007538 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800766c:	f7ff fd4c 	bl	8007108 <vTaskSwitchContext>
	prvTaskExitError();
 8007670:	f7ff ff20 	bl	80074b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3718      	adds	r7, #24
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	e000ed00 	.word	0xe000ed00
 8007684:	410fc271 	.word	0x410fc271
 8007688:	410fc270 	.word	0x410fc270
 800768c:	e000e400 	.word	0xe000e400
 8007690:	20000844 	.word	0x20000844
 8007694:	20000848 	.word	0x20000848
 8007698:	e000ed20 	.word	0xe000ed20
 800769c:	2000000c 	.word	0x2000000c
 80076a0:	e000ef34 	.word	0xe000ef34

080076a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
	__asm volatile
 80076aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ae:	f383 8811 	msr	BASEPRI, r3
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	607b      	str	r3, [r7, #4]
}
 80076bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80076be:	4b0f      	ldr	r3, [pc, #60]	; (80076fc <vPortEnterCritical+0x58>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	3301      	adds	r3, #1
 80076c4:	4a0d      	ldr	r2, [pc, #52]	; (80076fc <vPortEnterCritical+0x58>)
 80076c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80076c8:	4b0c      	ldr	r3, [pc, #48]	; (80076fc <vPortEnterCritical+0x58>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d10f      	bne.n	80076f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80076d0:	4b0b      	ldr	r3, [pc, #44]	; (8007700 <vPortEnterCritical+0x5c>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00a      	beq.n	80076f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80076da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076de:	f383 8811 	msr	BASEPRI, r3
 80076e2:	f3bf 8f6f 	isb	sy
 80076e6:	f3bf 8f4f 	dsb	sy
 80076ea:	603b      	str	r3, [r7, #0]
}
 80076ec:	bf00      	nop
 80076ee:	e7fe      	b.n	80076ee <vPortEnterCritical+0x4a>
	}
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	2000000c 	.word	0x2000000c
 8007700:	e000ed04 	.word	0xe000ed04

08007704 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800770a:	4b12      	ldr	r3, [pc, #72]	; (8007754 <vPortExitCritical+0x50>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10a      	bne.n	8007728 <vPortExitCritical+0x24>
	__asm volatile
 8007712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007716:	f383 8811 	msr	BASEPRI, r3
 800771a:	f3bf 8f6f 	isb	sy
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	607b      	str	r3, [r7, #4]
}
 8007724:	bf00      	nop
 8007726:	e7fe      	b.n	8007726 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007728:	4b0a      	ldr	r3, [pc, #40]	; (8007754 <vPortExitCritical+0x50>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	3b01      	subs	r3, #1
 800772e:	4a09      	ldr	r2, [pc, #36]	; (8007754 <vPortExitCritical+0x50>)
 8007730:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007732:	4b08      	ldr	r3, [pc, #32]	; (8007754 <vPortExitCritical+0x50>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d105      	bne.n	8007746 <vPortExitCritical+0x42>
 800773a:	2300      	movs	r3, #0
 800773c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007744:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007746:	bf00      	nop
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	2000000c 	.word	0x2000000c
	...

08007760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007760:	f3ef 8009 	mrs	r0, PSP
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	4b15      	ldr	r3, [pc, #84]	; (80077c0 <pxCurrentTCBConst>)
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	f01e 0f10 	tst.w	lr, #16
 8007770:	bf08      	it	eq
 8007772:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007776:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777a:	6010      	str	r0, [r2, #0]
 800777c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007780:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007784:	f380 8811 	msr	BASEPRI, r0
 8007788:	f3bf 8f4f 	dsb	sy
 800778c:	f3bf 8f6f 	isb	sy
 8007790:	f7ff fcba 	bl	8007108 <vTaskSwitchContext>
 8007794:	f04f 0000 	mov.w	r0, #0
 8007798:	f380 8811 	msr	BASEPRI, r0
 800779c:	bc09      	pop	{r0, r3}
 800779e:	6819      	ldr	r1, [r3, #0]
 80077a0:	6808      	ldr	r0, [r1, #0]
 80077a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a6:	f01e 0f10 	tst.w	lr, #16
 80077aa:	bf08      	it	eq
 80077ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80077b0:	f380 8809 	msr	PSP, r0
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	f3af 8000 	nop.w

080077c0 <pxCurrentTCBConst>:
 80077c0:	20000718 	.word	0x20000718
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80077c4:	bf00      	nop
 80077c6:	bf00      	nop

080077c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
	__asm volatile
 80077ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	607b      	str	r3, [r7, #4]
}
 80077e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80077e2:	f7ff fbd9 	bl	8006f98 <xTaskIncrementTick>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d003      	beq.n	80077f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80077ec:	4b06      	ldr	r3, [pc, #24]	; (8007808 <SysTick_Handler+0x40>)
 80077ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077f2:	601a      	str	r2, [r3, #0]
 80077f4:	2300      	movs	r3, #0
 80077f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	f383 8811 	msr	BASEPRI, r3
}
 80077fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007800:	bf00      	nop
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	e000ed04 	.word	0xe000ed04

0800780c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800780c:	b480      	push	{r7}
 800780e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007810:	4b0b      	ldr	r3, [pc, #44]	; (8007840 <vPortSetupTimerInterrupt+0x34>)
 8007812:	2200      	movs	r2, #0
 8007814:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007816:	4b0b      	ldr	r3, [pc, #44]	; (8007844 <vPortSetupTimerInterrupt+0x38>)
 8007818:	2200      	movs	r2, #0
 800781a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800781c:	4b0a      	ldr	r3, [pc, #40]	; (8007848 <vPortSetupTimerInterrupt+0x3c>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a0a      	ldr	r2, [pc, #40]	; (800784c <vPortSetupTimerInterrupt+0x40>)
 8007822:	fba2 2303 	umull	r2, r3, r2, r3
 8007826:	099b      	lsrs	r3, r3, #6
 8007828:	4a09      	ldr	r2, [pc, #36]	; (8007850 <vPortSetupTimerInterrupt+0x44>)
 800782a:	3b01      	subs	r3, #1
 800782c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800782e:	4b04      	ldr	r3, [pc, #16]	; (8007840 <vPortSetupTimerInterrupt+0x34>)
 8007830:	2207      	movs	r2, #7
 8007832:	601a      	str	r2, [r3, #0]
}
 8007834:	bf00      	nop
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	e000e010 	.word	0xe000e010
 8007844:	e000e018 	.word	0xe000e018
 8007848:	20000000 	.word	0x20000000
 800784c:	10624dd3 	.word	0x10624dd3
 8007850:	e000e014 	.word	0xe000e014

08007854 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007854:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007864 <vPortEnableVFP+0x10>
 8007858:	6801      	ldr	r1, [r0, #0]
 800785a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800785e:	6001      	str	r1, [r0, #0]
 8007860:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007862:	bf00      	nop
 8007864:	e000ed88 	.word	0xe000ed88

08007868 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b08a      	sub	sp, #40	; 0x28
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007870:	2300      	movs	r3, #0
 8007872:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007874:	f7ff fae6 	bl	8006e44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007878:	4b5b      	ldr	r3, [pc, #364]	; (80079e8 <pvPortMalloc+0x180>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d101      	bne.n	8007884 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007880:	f000 f920 	bl	8007ac4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007884:	4b59      	ldr	r3, [pc, #356]	; (80079ec <pvPortMalloc+0x184>)
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4013      	ands	r3, r2
 800788c:	2b00      	cmp	r3, #0
 800788e:	f040 8093 	bne.w	80079b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d01d      	beq.n	80078d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007898:	2208      	movs	r2, #8
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4413      	add	r3, r2
 800789e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f003 0307 	and.w	r3, r3, #7
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d014      	beq.n	80078d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f023 0307 	bic.w	r3, r3, #7
 80078b0:	3308      	adds	r3, #8
 80078b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f003 0307 	and.w	r3, r3, #7
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00a      	beq.n	80078d4 <pvPortMalloc+0x6c>
	__asm volatile
 80078be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c2:	f383 8811 	msr	BASEPRI, r3
 80078c6:	f3bf 8f6f 	isb	sy
 80078ca:	f3bf 8f4f 	dsb	sy
 80078ce:	617b      	str	r3, [r7, #20]
}
 80078d0:	bf00      	nop
 80078d2:	e7fe      	b.n	80078d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d06e      	beq.n	80079b8 <pvPortMalloc+0x150>
 80078da:	4b45      	ldr	r3, [pc, #276]	; (80079f0 <pvPortMalloc+0x188>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d869      	bhi.n	80079b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80078e4:	4b43      	ldr	r3, [pc, #268]	; (80079f4 <pvPortMalloc+0x18c>)
 80078e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80078e8:	4b42      	ldr	r3, [pc, #264]	; (80079f4 <pvPortMalloc+0x18c>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078ee:	e004      	b.n	80078fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80078f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80078f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	429a      	cmp	r2, r3
 8007902:	d903      	bls.n	800790c <pvPortMalloc+0xa4>
 8007904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1f1      	bne.n	80078f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800790c:	4b36      	ldr	r3, [pc, #216]	; (80079e8 <pvPortMalloc+0x180>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007912:	429a      	cmp	r2, r3
 8007914:	d050      	beq.n	80079b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007916:	6a3b      	ldr	r3, [r7, #32]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2208      	movs	r2, #8
 800791c:	4413      	add	r3, r2
 800791e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	6a3b      	ldr	r3, [r7, #32]
 8007926:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792a:	685a      	ldr	r2, [r3, #4]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	1ad2      	subs	r2, r2, r3
 8007930:	2308      	movs	r3, #8
 8007932:	005b      	lsls	r3, r3, #1
 8007934:	429a      	cmp	r2, r3
 8007936:	d91f      	bls.n	8007978 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4413      	add	r3, r2
 800793e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	f003 0307 	and.w	r3, r3, #7
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00a      	beq.n	8007960 <pvPortMalloc+0xf8>
	__asm volatile
 800794a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	613b      	str	r3, [r7, #16]
}
 800795c:	bf00      	nop
 800795e:	e7fe      	b.n	800795e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007962:	685a      	ldr	r2, [r3, #4]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	1ad2      	subs	r2, r2, r3
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007972:	69b8      	ldr	r0, [r7, #24]
 8007974:	f000 f908 	bl	8007b88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007978:	4b1d      	ldr	r3, [pc, #116]	; (80079f0 <pvPortMalloc+0x188>)
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	4a1b      	ldr	r2, [pc, #108]	; (80079f0 <pvPortMalloc+0x188>)
 8007984:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007986:	4b1a      	ldr	r3, [pc, #104]	; (80079f0 <pvPortMalloc+0x188>)
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	4b1b      	ldr	r3, [pc, #108]	; (80079f8 <pvPortMalloc+0x190>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	429a      	cmp	r2, r3
 8007990:	d203      	bcs.n	800799a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007992:	4b17      	ldr	r3, [pc, #92]	; (80079f0 <pvPortMalloc+0x188>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a18      	ldr	r2, [pc, #96]	; (80079f8 <pvPortMalloc+0x190>)
 8007998:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799c:	685a      	ldr	r2, [r3, #4]
 800799e:	4b13      	ldr	r3, [pc, #76]	; (80079ec <pvPortMalloc+0x184>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	431a      	orrs	r2, r3
 80079a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079aa:	2200      	movs	r2, #0
 80079ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80079ae:	4b13      	ldr	r3, [pc, #76]	; (80079fc <pvPortMalloc+0x194>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	3301      	adds	r3, #1
 80079b4:	4a11      	ldr	r2, [pc, #68]	; (80079fc <pvPortMalloc+0x194>)
 80079b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079b8:	f7ff fa52 	bl	8006e60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	f003 0307 	and.w	r3, r3, #7
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00a      	beq.n	80079dc <pvPortMalloc+0x174>
	__asm volatile
 80079c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ca:	f383 8811 	msr	BASEPRI, r3
 80079ce:	f3bf 8f6f 	isb	sy
 80079d2:	f3bf 8f4f 	dsb	sy
 80079d6:	60fb      	str	r3, [r7, #12]
}
 80079d8:	bf00      	nop
 80079da:	e7fe      	b.n	80079da <pvPortMalloc+0x172>
	return pvReturn;
 80079dc:	69fb      	ldr	r3, [r7, #28]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3728      	adds	r7, #40	; 0x28
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	20004454 	.word	0x20004454
 80079ec:	20004468 	.word	0x20004468
 80079f0:	20004458 	.word	0x20004458
 80079f4:	2000444c 	.word	0x2000444c
 80079f8:	2000445c 	.word	0x2000445c
 80079fc:	20004460 	.word	0x20004460

08007a00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b086      	sub	sp, #24
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d04d      	beq.n	8007aae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a12:	2308      	movs	r3, #8
 8007a14:	425b      	negs	r3, r3
 8007a16:	697a      	ldr	r2, [r7, #20]
 8007a18:	4413      	add	r3, r2
 8007a1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	685a      	ldr	r2, [r3, #4]
 8007a24:	4b24      	ldr	r3, [pc, #144]	; (8007ab8 <vPortFree+0xb8>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4013      	ands	r3, r2
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10a      	bne.n	8007a44 <vPortFree+0x44>
	__asm volatile
 8007a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	60fb      	str	r3, [r7, #12]
}
 8007a40:	bf00      	nop
 8007a42:	e7fe      	b.n	8007a42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00a      	beq.n	8007a62 <vPortFree+0x62>
	__asm volatile
 8007a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a50:	f383 8811 	msr	BASEPRI, r3
 8007a54:	f3bf 8f6f 	isb	sy
 8007a58:	f3bf 8f4f 	dsb	sy
 8007a5c:	60bb      	str	r3, [r7, #8]
}
 8007a5e:	bf00      	nop
 8007a60:	e7fe      	b.n	8007a60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	685a      	ldr	r2, [r3, #4]
 8007a66:	4b14      	ldr	r3, [pc, #80]	; (8007ab8 <vPortFree+0xb8>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d01e      	beq.n	8007aae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d11a      	bne.n	8007aae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	4b0e      	ldr	r3, [pc, #56]	; (8007ab8 <vPortFree+0xb8>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	43db      	mvns	r3, r3
 8007a82:	401a      	ands	r2, r3
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a88:	f7ff f9dc 	bl	8006e44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	4b0a      	ldr	r3, [pc, #40]	; (8007abc <vPortFree+0xbc>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4413      	add	r3, r2
 8007a96:	4a09      	ldr	r2, [pc, #36]	; (8007abc <vPortFree+0xbc>)
 8007a98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a9a:	6938      	ldr	r0, [r7, #16]
 8007a9c:	f000 f874 	bl	8007b88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007aa0:	4b07      	ldr	r3, [pc, #28]	; (8007ac0 <vPortFree+0xc0>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	4a06      	ldr	r2, [pc, #24]	; (8007ac0 <vPortFree+0xc0>)
 8007aa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007aaa:	f7ff f9d9 	bl	8006e60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007aae:	bf00      	nop
 8007ab0:	3718      	adds	r7, #24
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	20004468 	.word	0x20004468
 8007abc:	20004458 	.word	0x20004458
 8007ac0:	20004464 	.word	0x20004464

08007ac4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007aca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007ace:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ad0:	4b27      	ldr	r3, [pc, #156]	; (8007b70 <prvHeapInit+0xac>)
 8007ad2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f003 0307 	and.w	r3, r3, #7
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00c      	beq.n	8007af8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	3307      	adds	r3, #7
 8007ae2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f023 0307 	bic.w	r3, r3, #7
 8007aea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007aec:	68ba      	ldr	r2, [r7, #8]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	4a1f      	ldr	r2, [pc, #124]	; (8007b70 <prvHeapInit+0xac>)
 8007af4:	4413      	add	r3, r2
 8007af6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007afc:	4a1d      	ldr	r2, [pc, #116]	; (8007b74 <prvHeapInit+0xb0>)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b02:	4b1c      	ldr	r3, [pc, #112]	; (8007b74 <prvHeapInit+0xb0>)
 8007b04:	2200      	movs	r2, #0
 8007b06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b10:	2208      	movs	r2, #8
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	1a9b      	subs	r3, r3, r2
 8007b16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f023 0307 	bic.w	r3, r3, #7
 8007b1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	4a15      	ldr	r2, [pc, #84]	; (8007b78 <prvHeapInit+0xb4>)
 8007b24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b26:	4b14      	ldr	r3, [pc, #80]	; (8007b78 <prvHeapInit+0xb4>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b2e:	4b12      	ldr	r3, [pc, #72]	; (8007b78 <prvHeapInit+0xb4>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2200      	movs	r2, #0
 8007b34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	1ad2      	subs	r2, r2, r3
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b44:	4b0c      	ldr	r3, [pc, #48]	; (8007b78 <prvHeapInit+0xb4>)
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	4a0a      	ldr	r2, [pc, #40]	; (8007b7c <prvHeapInit+0xb8>)
 8007b52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	4a09      	ldr	r2, [pc, #36]	; (8007b80 <prvHeapInit+0xbc>)
 8007b5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b5c:	4b09      	ldr	r3, [pc, #36]	; (8007b84 <prvHeapInit+0xc0>)
 8007b5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b62:	601a      	str	r2, [r3, #0]
}
 8007b64:	bf00      	nop
 8007b66:	3714      	adds	r7, #20
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr
 8007b70:	2000084c 	.word	0x2000084c
 8007b74:	2000444c 	.word	0x2000444c
 8007b78:	20004454 	.word	0x20004454
 8007b7c:	2000445c 	.word	0x2000445c
 8007b80:	20004458 	.word	0x20004458
 8007b84:	20004468 	.word	0x20004468

08007b88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b90:	4b28      	ldr	r3, [pc, #160]	; (8007c34 <prvInsertBlockIntoFreeList+0xac>)
 8007b92:	60fb      	str	r3, [r7, #12]
 8007b94:	e002      	b.n	8007b9c <prvInsertBlockIntoFreeList+0x14>
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	60fb      	str	r3, [r7, #12]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d8f7      	bhi.n	8007b96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	68ba      	ldr	r2, [r7, #8]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d108      	bne.n	8007bca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	685a      	ldr	r2, [r3, #4]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	441a      	add	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	441a      	add	r2, r3
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d118      	bne.n	8007c10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	4b15      	ldr	r3, [pc, #84]	; (8007c38 <prvInsertBlockIntoFreeList+0xb0>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d00d      	beq.n	8007c06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	685a      	ldr	r2, [r3, #4]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	441a      	add	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	601a      	str	r2, [r3, #0]
 8007c04:	e008      	b.n	8007c18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c06:	4b0c      	ldr	r3, [pc, #48]	; (8007c38 <prvInsertBlockIntoFreeList+0xb0>)
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	601a      	str	r2, [r3, #0]
 8007c0e:	e003      	b.n	8007c18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d002      	beq.n	8007c26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c26:	bf00      	nop
 8007c28:	3714      	adds	r7, #20
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	2000444c 	.word	0x2000444c
 8007c38:	20004454 	.word	0x20004454

08007c3c <atoi>:
 8007c3c:	220a      	movs	r2, #10
 8007c3e:	2100      	movs	r1, #0
 8007c40:	f000 b882 	b.w	8007d48 <strtol>

08007c44 <_strtol_l.constprop.0>:
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c4a:	d001      	beq.n	8007c50 <_strtol_l.constprop.0+0xc>
 8007c4c:	2b24      	cmp	r3, #36	; 0x24
 8007c4e:	d906      	bls.n	8007c5e <_strtol_l.constprop.0+0x1a>
 8007c50:	f000 f902 	bl	8007e58 <__errno>
 8007c54:	2316      	movs	r3, #22
 8007c56:	6003      	str	r3, [r0, #0]
 8007c58:	2000      	movs	r0, #0
 8007c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c5e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007d44 <_strtol_l.constprop.0+0x100>
 8007c62:	460d      	mov	r5, r1
 8007c64:	462e      	mov	r6, r5
 8007c66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c6a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007c6e:	f017 0708 	ands.w	r7, r7, #8
 8007c72:	d1f7      	bne.n	8007c64 <_strtol_l.constprop.0+0x20>
 8007c74:	2c2d      	cmp	r4, #45	; 0x2d
 8007c76:	d132      	bne.n	8007cde <_strtol_l.constprop.0+0x9a>
 8007c78:	782c      	ldrb	r4, [r5, #0]
 8007c7a:	2701      	movs	r7, #1
 8007c7c:	1cb5      	adds	r5, r6, #2
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d05b      	beq.n	8007d3a <_strtol_l.constprop.0+0xf6>
 8007c82:	2b10      	cmp	r3, #16
 8007c84:	d109      	bne.n	8007c9a <_strtol_l.constprop.0+0x56>
 8007c86:	2c30      	cmp	r4, #48	; 0x30
 8007c88:	d107      	bne.n	8007c9a <_strtol_l.constprop.0+0x56>
 8007c8a:	782c      	ldrb	r4, [r5, #0]
 8007c8c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007c90:	2c58      	cmp	r4, #88	; 0x58
 8007c92:	d14d      	bne.n	8007d30 <_strtol_l.constprop.0+0xec>
 8007c94:	786c      	ldrb	r4, [r5, #1]
 8007c96:	2310      	movs	r3, #16
 8007c98:	3502      	adds	r5, #2
 8007c9a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007c9e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007ca2:	f04f 0e00 	mov.w	lr, #0
 8007ca6:	fbb8 f9f3 	udiv	r9, r8, r3
 8007caa:	4676      	mov	r6, lr
 8007cac:	fb03 8a19 	mls	sl, r3, r9, r8
 8007cb0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007cb4:	f1bc 0f09 	cmp.w	ip, #9
 8007cb8:	d816      	bhi.n	8007ce8 <_strtol_l.constprop.0+0xa4>
 8007cba:	4664      	mov	r4, ip
 8007cbc:	42a3      	cmp	r3, r4
 8007cbe:	dd24      	ble.n	8007d0a <_strtol_l.constprop.0+0xc6>
 8007cc0:	f1be 3fff 	cmp.w	lr, #4294967295
 8007cc4:	d008      	beq.n	8007cd8 <_strtol_l.constprop.0+0x94>
 8007cc6:	45b1      	cmp	r9, r6
 8007cc8:	d31c      	bcc.n	8007d04 <_strtol_l.constprop.0+0xc0>
 8007cca:	d101      	bne.n	8007cd0 <_strtol_l.constprop.0+0x8c>
 8007ccc:	45a2      	cmp	sl, r4
 8007cce:	db19      	blt.n	8007d04 <_strtol_l.constprop.0+0xc0>
 8007cd0:	fb06 4603 	mla	r6, r6, r3, r4
 8007cd4:	f04f 0e01 	mov.w	lr, #1
 8007cd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cdc:	e7e8      	b.n	8007cb0 <_strtol_l.constprop.0+0x6c>
 8007cde:	2c2b      	cmp	r4, #43	; 0x2b
 8007ce0:	bf04      	itt	eq
 8007ce2:	782c      	ldrbeq	r4, [r5, #0]
 8007ce4:	1cb5      	addeq	r5, r6, #2
 8007ce6:	e7ca      	b.n	8007c7e <_strtol_l.constprop.0+0x3a>
 8007ce8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007cec:	f1bc 0f19 	cmp.w	ip, #25
 8007cf0:	d801      	bhi.n	8007cf6 <_strtol_l.constprop.0+0xb2>
 8007cf2:	3c37      	subs	r4, #55	; 0x37
 8007cf4:	e7e2      	b.n	8007cbc <_strtol_l.constprop.0+0x78>
 8007cf6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007cfa:	f1bc 0f19 	cmp.w	ip, #25
 8007cfe:	d804      	bhi.n	8007d0a <_strtol_l.constprop.0+0xc6>
 8007d00:	3c57      	subs	r4, #87	; 0x57
 8007d02:	e7db      	b.n	8007cbc <_strtol_l.constprop.0+0x78>
 8007d04:	f04f 3eff 	mov.w	lr, #4294967295
 8007d08:	e7e6      	b.n	8007cd8 <_strtol_l.constprop.0+0x94>
 8007d0a:	f1be 3fff 	cmp.w	lr, #4294967295
 8007d0e:	d105      	bne.n	8007d1c <_strtol_l.constprop.0+0xd8>
 8007d10:	2322      	movs	r3, #34	; 0x22
 8007d12:	6003      	str	r3, [r0, #0]
 8007d14:	4646      	mov	r6, r8
 8007d16:	b942      	cbnz	r2, 8007d2a <_strtol_l.constprop.0+0xe6>
 8007d18:	4630      	mov	r0, r6
 8007d1a:	e79e      	b.n	8007c5a <_strtol_l.constprop.0+0x16>
 8007d1c:	b107      	cbz	r7, 8007d20 <_strtol_l.constprop.0+0xdc>
 8007d1e:	4276      	negs	r6, r6
 8007d20:	2a00      	cmp	r2, #0
 8007d22:	d0f9      	beq.n	8007d18 <_strtol_l.constprop.0+0xd4>
 8007d24:	f1be 0f00 	cmp.w	lr, #0
 8007d28:	d000      	beq.n	8007d2c <_strtol_l.constprop.0+0xe8>
 8007d2a:	1e69      	subs	r1, r5, #1
 8007d2c:	6011      	str	r1, [r2, #0]
 8007d2e:	e7f3      	b.n	8007d18 <_strtol_l.constprop.0+0xd4>
 8007d30:	2430      	movs	r4, #48	; 0x30
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1b1      	bne.n	8007c9a <_strtol_l.constprop.0+0x56>
 8007d36:	2308      	movs	r3, #8
 8007d38:	e7af      	b.n	8007c9a <_strtol_l.constprop.0+0x56>
 8007d3a:	2c30      	cmp	r4, #48	; 0x30
 8007d3c:	d0a5      	beq.n	8007c8a <_strtol_l.constprop.0+0x46>
 8007d3e:	230a      	movs	r3, #10
 8007d40:	e7ab      	b.n	8007c9a <_strtol_l.constprop.0+0x56>
 8007d42:	bf00      	nop
 8007d44:	08008895 	.word	0x08008895

08007d48 <strtol>:
 8007d48:	4613      	mov	r3, r2
 8007d4a:	460a      	mov	r2, r1
 8007d4c:	4601      	mov	r1, r0
 8007d4e:	4802      	ldr	r0, [pc, #8]	; (8007d58 <strtol+0x10>)
 8007d50:	6800      	ldr	r0, [r0, #0]
 8007d52:	f7ff bf77 	b.w	8007c44 <_strtol_l.constprop.0>
 8007d56:	bf00      	nop
 8007d58:	2000005c 	.word	0x2000005c

08007d5c <siprintf>:
 8007d5c:	b40e      	push	{r1, r2, r3}
 8007d5e:	b500      	push	{lr}
 8007d60:	b09c      	sub	sp, #112	; 0x70
 8007d62:	ab1d      	add	r3, sp, #116	; 0x74
 8007d64:	9002      	str	r0, [sp, #8]
 8007d66:	9006      	str	r0, [sp, #24]
 8007d68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d6c:	4809      	ldr	r0, [pc, #36]	; (8007d94 <siprintf+0x38>)
 8007d6e:	9107      	str	r1, [sp, #28]
 8007d70:	9104      	str	r1, [sp, #16]
 8007d72:	4909      	ldr	r1, [pc, #36]	; (8007d98 <siprintf+0x3c>)
 8007d74:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d78:	9105      	str	r1, [sp, #20]
 8007d7a:	6800      	ldr	r0, [r0, #0]
 8007d7c:	9301      	str	r3, [sp, #4]
 8007d7e:	a902      	add	r1, sp, #8
 8007d80:	f000 f9f6 	bl	8008170 <_svfiprintf_r>
 8007d84:	9b02      	ldr	r3, [sp, #8]
 8007d86:	2200      	movs	r2, #0
 8007d88:	701a      	strb	r2, [r3, #0]
 8007d8a:	b01c      	add	sp, #112	; 0x70
 8007d8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d90:	b003      	add	sp, #12
 8007d92:	4770      	bx	lr
 8007d94:	2000005c 	.word	0x2000005c
 8007d98:	ffff0208 	.word	0xffff0208

08007d9c <memset>:
 8007d9c:	4402      	add	r2, r0
 8007d9e:	4603      	mov	r3, r0
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d100      	bne.n	8007da6 <memset+0xa>
 8007da4:	4770      	bx	lr
 8007da6:	f803 1b01 	strb.w	r1, [r3], #1
 8007daa:	e7f9      	b.n	8007da0 <memset+0x4>

08007dac <_reclaim_reent>:
 8007dac:	4b29      	ldr	r3, [pc, #164]	; (8007e54 <_reclaim_reent+0xa8>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4283      	cmp	r3, r0
 8007db2:	b570      	push	{r4, r5, r6, lr}
 8007db4:	4604      	mov	r4, r0
 8007db6:	d04b      	beq.n	8007e50 <_reclaim_reent+0xa4>
 8007db8:	69c3      	ldr	r3, [r0, #28]
 8007dba:	b143      	cbz	r3, 8007dce <_reclaim_reent+0x22>
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d144      	bne.n	8007e4c <_reclaim_reent+0xa0>
 8007dc2:	69e3      	ldr	r3, [r4, #28]
 8007dc4:	6819      	ldr	r1, [r3, #0]
 8007dc6:	b111      	cbz	r1, 8007dce <_reclaim_reent+0x22>
 8007dc8:	4620      	mov	r0, r4
 8007dca:	f000 f87f 	bl	8007ecc <_free_r>
 8007dce:	6961      	ldr	r1, [r4, #20]
 8007dd0:	b111      	cbz	r1, 8007dd8 <_reclaim_reent+0x2c>
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	f000 f87a 	bl	8007ecc <_free_r>
 8007dd8:	69e1      	ldr	r1, [r4, #28]
 8007dda:	b111      	cbz	r1, 8007de2 <_reclaim_reent+0x36>
 8007ddc:	4620      	mov	r0, r4
 8007dde:	f000 f875 	bl	8007ecc <_free_r>
 8007de2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007de4:	b111      	cbz	r1, 8007dec <_reclaim_reent+0x40>
 8007de6:	4620      	mov	r0, r4
 8007de8:	f000 f870 	bl	8007ecc <_free_r>
 8007dec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dee:	b111      	cbz	r1, 8007df6 <_reclaim_reent+0x4a>
 8007df0:	4620      	mov	r0, r4
 8007df2:	f000 f86b 	bl	8007ecc <_free_r>
 8007df6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007df8:	b111      	cbz	r1, 8007e00 <_reclaim_reent+0x54>
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	f000 f866 	bl	8007ecc <_free_r>
 8007e00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007e02:	b111      	cbz	r1, 8007e0a <_reclaim_reent+0x5e>
 8007e04:	4620      	mov	r0, r4
 8007e06:	f000 f861 	bl	8007ecc <_free_r>
 8007e0a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007e0c:	b111      	cbz	r1, 8007e14 <_reclaim_reent+0x68>
 8007e0e:	4620      	mov	r0, r4
 8007e10:	f000 f85c 	bl	8007ecc <_free_r>
 8007e14:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007e16:	b111      	cbz	r1, 8007e1e <_reclaim_reent+0x72>
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f000 f857 	bl	8007ecc <_free_r>
 8007e1e:	6a23      	ldr	r3, [r4, #32]
 8007e20:	b1b3      	cbz	r3, 8007e50 <_reclaim_reent+0xa4>
 8007e22:	4620      	mov	r0, r4
 8007e24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007e28:	4718      	bx	r3
 8007e2a:	5949      	ldr	r1, [r1, r5]
 8007e2c:	b941      	cbnz	r1, 8007e40 <_reclaim_reent+0x94>
 8007e2e:	3504      	adds	r5, #4
 8007e30:	69e3      	ldr	r3, [r4, #28]
 8007e32:	2d80      	cmp	r5, #128	; 0x80
 8007e34:	68d9      	ldr	r1, [r3, #12]
 8007e36:	d1f8      	bne.n	8007e2a <_reclaim_reent+0x7e>
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f000 f847 	bl	8007ecc <_free_r>
 8007e3e:	e7c0      	b.n	8007dc2 <_reclaim_reent+0x16>
 8007e40:	680e      	ldr	r6, [r1, #0]
 8007e42:	4620      	mov	r0, r4
 8007e44:	f000 f842 	bl	8007ecc <_free_r>
 8007e48:	4631      	mov	r1, r6
 8007e4a:	e7ef      	b.n	8007e2c <_reclaim_reent+0x80>
 8007e4c:	2500      	movs	r5, #0
 8007e4e:	e7ef      	b.n	8007e30 <_reclaim_reent+0x84>
 8007e50:	bd70      	pop	{r4, r5, r6, pc}
 8007e52:	bf00      	nop
 8007e54:	2000005c 	.word	0x2000005c

08007e58 <__errno>:
 8007e58:	4b01      	ldr	r3, [pc, #4]	; (8007e60 <__errno+0x8>)
 8007e5a:	6818      	ldr	r0, [r3, #0]
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	2000005c 	.word	0x2000005c

08007e64 <__libc_init_array>:
 8007e64:	b570      	push	{r4, r5, r6, lr}
 8007e66:	4d0d      	ldr	r5, [pc, #52]	; (8007e9c <__libc_init_array+0x38>)
 8007e68:	4c0d      	ldr	r4, [pc, #52]	; (8007ea0 <__libc_init_array+0x3c>)
 8007e6a:	1b64      	subs	r4, r4, r5
 8007e6c:	10a4      	asrs	r4, r4, #2
 8007e6e:	2600      	movs	r6, #0
 8007e70:	42a6      	cmp	r6, r4
 8007e72:	d109      	bne.n	8007e88 <__libc_init_array+0x24>
 8007e74:	4d0b      	ldr	r5, [pc, #44]	; (8007ea4 <__libc_init_array+0x40>)
 8007e76:	4c0c      	ldr	r4, [pc, #48]	; (8007ea8 <__libc_init_array+0x44>)
 8007e78:	f000 fc6a 	bl	8008750 <_init>
 8007e7c:	1b64      	subs	r4, r4, r5
 8007e7e:	10a4      	asrs	r4, r4, #2
 8007e80:	2600      	movs	r6, #0
 8007e82:	42a6      	cmp	r6, r4
 8007e84:	d105      	bne.n	8007e92 <__libc_init_array+0x2e>
 8007e86:	bd70      	pop	{r4, r5, r6, pc}
 8007e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e8c:	4798      	blx	r3
 8007e8e:	3601      	adds	r6, #1
 8007e90:	e7ee      	b.n	8007e70 <__libc_init_array+0xc>
 8007e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e96:	4798      	blx	r3
 8007e98:	3601      	adds	r6, #1
 8007e9a:	e7f2      	b.n	8007e82 <__libc_init_array+0x1e>
 8007e9c:	080089d0 	.word	0x080089d0
 8007ea0:	080089d0 	.word	0x080089d0
 8007ea4:	080089d0 	.word	0x080089d0
 8007ea8:	080089d4 	.word	0x080089d4

08007eac <__retarget_lock_acquire_recursive>:
 8007eac:	4770      	bx	lr

08007eae <__retarget_lock_release_recursive>:
 8007eae:	4770      	bx	lr

08007eb0 <memcpy>:
 8007eb0:	440a      	add	r2, r1
 8007eb2:	4291      	cmp	r1, r2
 8007eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007eb8:	d100      	bne.n	8007ebc <memcpy+0xc>
 8007eba:	4770      	bx	lr
 8007ebc:	b510      	push	{r4, lr}
 8007ebe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ec2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ec6:	4291      	cmp	r1, r2
 8007ec8:	d1f9      	bne.n	8007ebe <memcpy+0xe>
 8007eca:	bd10      	pop	{r4, pc}

08007ecc <_free_r>:
 8007ecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ece:	2900      	cmp	r1, #0
 8007ed0:	d044      	beq.n	8007f5c <_free_r+0x90>
 8007ed2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ed6:	9001      	str	r0, [sp, #4]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f1a1 0404 	sub.w	r4, r1, #4
 8007ede:	bfb8      	it	lt
 8007ee0:	18e4      	addlt	r4, r4, r3
 8007ee2:	f000 f8df 	bl	80080a4 <__malloc_lock>
 8007ee6:	4a1e      	ldr	r2, [pc, #120]	; (8007f60 <_free_r+0x94>)
 8007ee8:	9801      	ldr	r0, [sp, #4]
 8007eea:	6813      	ldr	r3, [r2, #0]
 8007eec:	b933      	cbnz	r3, 8007efc <_free_r+0x30>
 8007eee:	6063      	str	r3, [r4, #4]
 8007ef0:	6014      	str	r4, [r2, #0]
 8007ef2:	b003      	add	sp, #12
 8007ef4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ef8:	f000 b8da 	b.w	80080b0 <__malloc_unlock>
 8007efc:	42a3      	cmp	r3, r4
 8007efe:	d908      	bls.n	8007f12 <_free_r+0x46>
 8007f00:	6825      	ldr	r5, [r4, #0]
 8007f02:	1961      	adds	r1, r4, r5
 8007f04:	428b      	cmp	r3, r1
 8007f06:	bf01      	itttt	eq
 8007f08:	6819      	ldreq	r1, [r3, #0]
 8007f0a:	685b      	ldreq	r3, [r3, #4]
 8007f0c:	1949      	addeq	r1, r1, r5
 8007f0e:	6021      	streq	r1, [r4, #0]
 8007f10:	e7ed      	b.n	8007eee <_free_r+0x22>
 8007f12:	461a      	mov	r2, r3
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	b10b      	cbz	r3, 8007f1c <_free_r+0x50>
 8007f18:	42a3      	cmp	r3, r4
 8007f1a:	d9fa      	bls.n	8007f12 <_free_r+0x46>
 8007f1c:	6811      	ldr	r1, [r2, #0]
 8007f1e:	1855      	adds	r5, r2, r1
 8007f20:	42a5      	cmp	r5, r4
 8007f22:	d10b      	bne.n	8007f3c <_free_r+0x70>
 8007f24:	6824      	ldr	r4, [r4, #0]
 8007f26:	4421      	add	r1, r4
 8007f28:	1854      	adds	r4, r2, r1
 8007f2a:	42a3      	cmp	r3, r4
 8007f2c:	6011      	str	r1, [r2, #0]
 8007f2e:	d1e0      	bne.n	8007ef2 <_free_r+0x26>
 8007f30:	681c      	ldr	r4, [r3, #0]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	6053      	str	r3, [r2, #4]
 8007f36:	440c      	add	r4, r1
 8007f38:	6014      	str	r4, [r2, #0]
 8007f3a:	e7da      	b.n	8007ef2 <_free_r+0x26>
 8007f3c:	d902      	bls.n	8007f44 <_free_r+0x78>
 8007f3e:	230c      	movs	r3, #12
 8007f40:	6003      	str	r3, [r0, #0]
 8007f42:	e7d6      	b.n	8007ef2 <_free_r+0x26>
 8007f44:	6825      	ldr	r5, [r4, #0]
 8007f46:	1961      	adds	r1, r4, r5
 8007f48:	428b      	cmp	r3, r1
 8007f4a:	bf04      	itt	eq
 8007f4c:	6819      	ldreq	r1, [r3, #0]
 8007f4e:	685b      	ldreq	r3, [r3, #4]
 8007f50:	6063      	str	r3, [r4, #4]
 8007f52:	bf04      	itt	eq
 8007f54:	1949      	addeq	r1, r1, r5
 8007f56:	6021      	streq	r1, [r4, #0]
 8007f58:	6054      	str	r4, [r2, #4]
 8007f5a:	e7ca      	b.n	8007ef2 <_free_r+0x26>
 8007f5c:	b003      	add	sp, #12
 8007f5e:	bd30      	pop	{r4, r5, pc}
 8007f60:	200045ac 	.word	0x200045ac

08007f64 <sbrk_aligned>:
 8007f64:	b570      	push	{r4, r5, r6, lr}
 8007f66:	4e0e      	ldr	r6, [pc, #56]	; (8007fa0 <sbrk_aligned+0x3c>)
 8007f68:	460c      	mov	r4, r1
 8007f6a:	6831      	ldr	r1, [r6, #0]
 8007f6c:	4605      	mov	r5, r0
 8007f6e:	b911      	cbnz	r1, 8007f76 <sbrk_aligned+0x12>
 8007f70:	f000 fba6 	bl	80086c0 <_sbrk_r>
 8007f74:	6030      	str	r0, [r6, #0]
 8007f76:	4621      	mov	r1, r4
 8007f78:	4628      	mov	r0, r5
 8007f7a:	f000 fba1 	bl	80086c0 <_sbrk_r>
 8007f7e:	1c43      	adds	r3, r0, #1
 8007f80:	d00a      	beq.n	8007f98 <sbrk_aligned+0x34>
 8007f82:	1cc4      	adds	r4, r0, #3
 8007f84:	f024 0403 	bic.w	r4, r4, #3
 8007f88:	42a0      	cmp	r0, r4
 8007f8a:	d007      	beq.n	8007f9c <sbrk_aligned+0x38>
 8007f8c:	1a21      	subs	r1, r4, r0
 8007f8e:	4628      	mov	r0, r5
 8007f90:	f000 fb96 	bl	80086c0 <_sbrk_r>
 8007f94:	3001      	adds	r0, #1
 8007f96:	d101      	bne.n	8007f9c <sbrk_aligned+0x38>
 8007f98:	f04f 34ff 	mov.w	r4, #4294967295
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	bd70      	pop	{r4, r5, r6, pc}
 8007fa0:	200045b0 	.word	0x200045b0

08007fa4 <_malloc_r>:
 8007fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fa8:	1ccd      	adds	r5, r1, #3
 8007faa:	f025 0503 	bic.w	r5, r5, #3
 8007fae:	3508      	adds	r5, #8
 8007fb0:	2d0c      	cmp	r5, #12
 8007fb2:	bf38      	it	cc
 8007fb4:	250c      	movcc	r5, #12
 8007fb6:	2d00      	cmp	r5, #0
 8007fb8:	4607      	mov	r7, r0
 8007fba:	db01      	blt.n	8007fc0 <_malloc_r+0x1c>
 8007fbc:	42a9      	cmp	r1, r5
 8007fbe:	d905      	bls.n	8007fcc <_malloc_r+0x28>
 8007fc0:	230c      	movs	r3, #12
 8007fc2:	603b      	str	r3, [r7, #0]
 8007fc4:	2600      	movs	r6, #0
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fcc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80080a0 <_malloc_r+0xfc>
 8007fd0:	f000 f868 	bl	80080a4 <__malloc_lock>
 8007fd4:	f8d8 3000 	ldr.w	r3, [r8]
 8007fd8:	461c      	mov	r4, r3
 8007fda:	bb5c      	cbnz	r4, 8008034 <_malloc_r+0x90>
 8007fdc:	4629      	mov	r1, r5
 8007fde:	4638      	mov	r0, r7
 8007fe0:	f7ff ffc0 	bl	8007f64 <sbrk_aligned>
 8007fe4:	1c43      	adds	r3, r0, #1
 8007fe6:	4604      	mov	r4, r0
 8007fe8:	d155      	bne.n	8008096 <_malloc_r+0xf2>
 8007fea:	f8d8 4000 	ldr.w	r4, [r8]
 8007fee:	4626      	mov	r6, r4
 8007ff0:	2e00      	cmp	r6, #0
 8007ff2:	d145      	bne.n	8008080 <_malloc_r+0xdc>
 8007ff4:	2c00      	cmp	r4, #0
 8007ff6:	d048      	beq.n	800808a <_malloc_r+0xe6>
 8007ff8:	6823      	ldr	r3, [r4, #0]
 8007ffa:	4631      	mov	r1, r6
 8007ffc:	4638      	mov	r0, r7
 8007ffe:	eb04 0903 	add.w	r9, r4, r3
 8008002:	f000 fb5d 	bl	80086c0 <_sbrk_r>
 8008006:	4581      	cmp	r9, r0
 8008008:	d13f      	bne.n	800808a <_malloc_r+0xe6>
 800800a:	6821      	ldr	r1, [r4, #0]
 800800c:	1a6d      	subs	r5, r5, r1
 800800e:	4629      	mov	r1, r5
 8008010:	4638      	mov	r0, r7
 8008012:	f7ff ffa7 	bl	8007f64 <sbrk_aligned>
 8008016:	3001      	adds	r0, #1
 8008018:	d037      	beq.n	800808a <_malloc_r+0xe6>
 800801a:	6823      	ldr	r3, [r4, #0]
 800801c:	442b      	add	r3, r5
 800801e:	6023      	str	r3, [r4, #0]
 8008020:	f8d8 3000 	ldr.w	r3, [r8]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d038      	beq.n	800809a <_malloc_r+0xf6>
 8008028:	685a      	ldr	r2, [r3, #4]
 800802a:	42a2      	cmp	r2, r4
 800802c:	d12b      	bne.n	8008086 <_malloc_r+0xe2>
 800802e:	2200      	movs	r2, #0
 8008030:	605a      	str	r2, [r3, #4]
 8008032:	e00f      	b.n	8008054 <_malloc_r+0xb0>
 8008034:	6822      	ldr	r2, [r4, #0]
 8008036:	1b52      	subs	r2, r2, r5
 8008038:	d41f      	bmi.n	800807a <_malloc_r+0xd6>
 800803a:	2a0b      	cmp	r2, #11
 800803c:	d917      	bls.n	800806e <_malloc_r+0xca>
 800803e:	1961      	adds	r1, r4, r5
 8008040:	42a3      	cmp	r3, r4
 8008042:	6025      	str	r5, [r4, #0]
 8008044:	bf18      	it	ne
 8008046:	6059      	strne	r1, [r3, #4]
 8008048:	6863      	ldr	r3, [r4, #4]
 800804a:	bf08      	it	eq
 800804c:	f8c8 1000 	streq.w	r1, [r8]
 8008050:	5162      	str	r2, [r4, r5]
 8008052:	604b      	str	r3, [r1, #4]
 8008054:	4638      	mov	r0, r7
 8008056:	f104 060b 	add.w	r6, r4, #11
 800805a:	f000 f829 	bl	80080b0 <__malloc_unlock>
 800805e:	f026 0607 	bic.w	r6, r6, #7
 8008062:	1d23      	adds	r3, r4, #4
 8008064:	1af2      	subs	r2, r6, r3
 8008066:	d0ae      	beq.n	8007fc6 <_malloc_r+0x22>
 8008068:	1b9b      	subs	r3, r3, r6
 800806a:	50a3      	str	r3, [r4, r2]
 800806c:	e7ab      	b.n	8007fc6 <_malloc_r+0x22>
 800806e:	42a3      	cmp	r3, r4
 8008070:	6862      	ldr	r2, [r4, #4]
 8008072:	d1dd      	bne.n	8008030 <_malloc_r+0x8c>
 8008074:	f8c8 2000 	str.w	r2, [r8]
 8008078:	e7ec      	b.n	8008054 <_malloc_r+0xb0>
 800807a:	4623      	mov	r3, r4
 800807c:	6864      	ldr	r4, [r4, #4]
 800807e:	e7ac      	b.n	8007fda <_malloc_r+0x36>
 8008080:	4634      	mov	r4, r6
 8008082:	6876      	ldr	r6, [r6, #4]
 8008084:	e7b4      	b.n	8007ff0 <_malloc_r+0x4c>
 8008086:	4613      	mov	r3, r2
 8008088:	e7cc      	b.n	8008024 <_malloc_r+0x80>
 800808a:	230c      	movs	r3, #12
 800808c:	603b      	str	r3, [r7, #0]
 800808e:	4638      	mov	r0, r7
 8008090:	f000 f80e 	bl	80080b0 <__malloc_unlock>
 8008094:	e797      	b.n	8007fc6 <_malloc_r+0x22>
 8008096:	6025      	str	r5, [r4, #0]
 8008098:	e7dc      	b.n	8008054 <_malloc_r+0xb0>
 800809a:	605b      	str	r3, [r3, #4]
 800809c:	deff      	udf	#255	; 0xff
 800809e:	bf00      	nop
 80080a0:	200045ac 	.word	0x200045ac

080080a4 <__malloc_lock>:
 80080a4:	4801      	ldr	r0, [pc, #4]	; (80080ac <__malloc_lock+0x8>)
 80080a6:	f7ff bf01 	b.w	8007eac <__retarget_lock_acquire_recursive>
 80080aa:	bf00      	nop
 80080ac:	200045a8 	.word	0x200045a8

080080b0 <__malloc_unlock>:
 80080b0:	4801      	ldr	r0, [pc, #4]	; (80080b8 <__malloc_unlock+0x8>)
 80080b2:	f7ff befc 	b.w	8007eae <__retarget_lock_release_recursive>
 80080b6:	bf00      	nop
 80080b8:	200045a8 	.word	0x200045a8

080080bc <__ssputs_r>:
 80080bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080c0:	688e      	ldr	r6, [r1, #8]
 80080c2:	461f      	mov	r7, r3
 80080c4:	42be      	cmp	r6, r7
 80080c6:	680b      	ldr	r3, [r1, #0]
 80080c8:	4682      	mov	sl, r0
 80080ca:	460c      	mov	r4, r1
 80080cc:	4690      	mov	r8, r2
 80080ce:	d82c      	bhi.n	800812a <__ssputs_r+0x6e>
 80080d0:	898a      	ldrh	r2, [r1, #12]
 80080d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80080d6:	d026      	beq.n	8008126 <__ssputs_r+0x6a>
 80080d8:	6965      	ldr	r5, [r4, #20]
 80080da:	6909      	ldr	r1, [r1, #16]
 80080dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080e0:	eba3 0901 	sub.w	r9, r3, r1
 80080e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080e8:	1c7b      	adds	r3, r7, #1
 80080ea:	444b      	add	r3, r9
 80080ec:	106d      	asrs	r5, r5, #1
 80080ee:	429d      	cmp	r5, r3
 80080f0:	bf38      	it	cc
 80080f2:	461d      	movcc	r5, r3
 80080f4:	0553      	lsls	r3, r2, #21
 80080f6:	d527      	bpl.n	8008148 <__ssputs_r+0x8c>
 80080f8:	4629      	mov	r1, r5
 80080fa:	f7ff ff53 	bl	8007fa4 <_malloc_r>
 80080fe:	4606      	mov	r6, r0
 8008100:	b360      	cbz	r0, 800815c <__ssputs_r+0xa0>
 8008102:	6921      	ldr	r1, [r4, #16]
 8008104:	464a      	mov	r2, r9
 8008106:	f7ff fed3 	bl	8007eb0 <memcpy>
 800810a:	89a3      	ldrh	r3, [r4, #12]
 800810c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008114:	81a3      	strh	r3, [r4, #12]
 8008116:	6126      	str	r6, [r4, #16]
 8008118:	6165      	str	r5, [r4, #20]
 800811a:	444e      	add	r6, r9
 800811c:	eba5 0509 	sub.w	r5, r5, r9
 8008120:	6026      	str	r6, [r4, #0]
 8008122:	60a5      	str	r5, [r4, #8]
 8008124:	463e      	mov	r6, r7
 8008126:	42be      	cmp	r6, r7
 8008128:	d900      	bls.n	800812c <__ssputs_r+0x70>
 800812a:	463e      	mov	r6, r7
 800812c:	6820      	ldr	r0, [r4, #0]
 800812e:	4632      	mov	r2, r6
 8008130:	4641      	mov	r1, r8
 8008132:	f000 faab 	bl	800868c <memmove>
 8008136:	68a3      	ldr	r3, [r4, #8]
 8008138:	1b9b      	subs	r3, r3, r6
 800813a:	60a3      	str	r3, [r4, #8]
 800813c:	6823      	ldr	r3, [r4, #0]
 800813e:	4433      	add	r3, r6
 8008140:	6023      	str	r3, [r4, #0]
 8008142:	2000      	movs	r0, #0
 8008144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008148:	462a      	mov	r2, r5
 800814a:	f000 fac9 	bl	80086e0 <_realloc_r>
 800814e:	4606      	mov	r6, r0
 8008150:	2800      	cmp	r0, #0
 8008152:	d1e0      	bne.n	8008116 <__ssputs_r+0x5a>
 8008154:	6921      	ldr	r1, [r4, #16]
 8008156:	4650      	mov	r0, sl
 8008158:	f7ff feb8 	bl	8007ecc <_free_r>
 800815c:	230c      	movs	r3, #12
 800815e:	f8ca 3000 	str.w	r3, [sl]
 8008162:	89a3      	ldrh	r3, [r4, #12]
 8008164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008168:	81a3      	strh	r3, [r4, #12]
 800816a:	f04f 30ff 	mov.w	r0, #4294967295
 800816e:	e7e9      	b.n	8008144 <__ssputs_r+0x88>

08008170 <_svfiprintf_r>:
 8008170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008174:	4698      	mov	r8, r3
 8008176:	898b      	ldrh	r3, [r1, #12]
 8008178:	061b      	lsls	r3, r3, #24
 800817a:	b09d      	sub	sp, #116	; 0x74
 800817c:	4607      	mov	r7, r0
 800817e:	460d      	mov	r5, r1
 8008180:	4614      	mov	r4, r2
 8008182:	d50e      	bpl.n	80081a2 <_svfiprintf_r+0x32>
 8008184:	690b      	ldr	r3, [r1, #16]
 8008186:	b963      	cbnz	r3, 80081a2 <_svfiprintf_r+0x32>
 8008188:	2140      	movs	r1, #64	; 0x40
 800818a:	f7ff ff0b 	bl	8007fa4 <_malloc_r>
 800818e:	6028      	str	r0, [r5, #0]
 8008190:	6128      	str	r0, [r5, #16]
 8008192:	b920      	cbnz	r0, 800819e <_svfiprintf_r+0x2e>
 8008194:	230c      	movs	r3, #12
 8008196:	603b      	str	r3, [r7, #0]
 8008198:	f04f 30ff 	mov.w	r0, #4294967295
 800819c:	e0d0      	b.n	8008340 <_svfiprintf_r+0x1d0>
 800819e:	2340      	movs	r3, #64	; 0x40
 80081a0:	616b      	str	r3, [r5, #20]
 80081a2:	2300      	movs	r3, #0
 80081a4:	9309      	str	r3, [sp, #36]	; 0x24
 80081a6:	2320      	movs	r3, #32
 80081a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80081b0:	2330      	movs	r3, #48	; 0x30
 80081b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008358 <_svfiprintf_r+0x1e8>
 80081b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081ba:	f04f 0901 	mov.w	r9, #1
 80081be:	4623      	mov	r3, r4
 80081c0:	469a      	mov	sl, r3
 80081c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081c6:	b10a      	cbz	r2, 80081cc <_svfiprintf_r+0x5c>
 80081c8:	2a25      	cmp	r2, #37	; 0x25
 80081ca:	d1f9      	bne.n	80081c0 <_svfiprintf_r+0x50>
 80081cc:	ebba 0b04 	subs.w	fp, sl, r4
 80081d0:	d00b      	beq.n	80081ea <_svfiprintf_r+0x7a>
 80081d2:	465b      	mov	r3, fp
 80081d4:	4622      	mov	r2, r4
 80081d6:	4629      	mov	r1, r5
 80081d8:	4638      	mov	r0, r7
 80081da:	f7ff ff6f 	bl	80080bc <__ssputs_r>
 80081de:	3001      	adds	r0, #1
 80081e0:	f000 80a9 	beq.w	8008336 <_svfiprintf_r+0x1c6>
 80081e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081e6:	445a      	add	r2, fp
 80081e8:	9209      	str	r2, [sp, #36]	; 0x24
 80081ea:	f89a 3000 	ldrb.w	r3, [sl]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f000 80a1 	beq.w	8008336 <_svfiprintf_r+0x1c6>
 80081f4:	2300      	movs	r3, #0
 80081f6:	f04f 32ff 	mov.w	r2, #4294967295
 80081fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081fe:	f10a 0a01 	add.w	sl, sl, #1
 8008202:	9304      	str	r3, [sp, #16]
 8008204:	9307      	str	r3, [sp, #28]
 8008206:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800820a:	931a      	str	r3, [sp, #104]	; 0x68
 800820c:	4654      	mov	r4, sl
 800820e:	2205      	movs	r2, #5
 8008210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008214:	4850      	ldr	r0, [pc, #320]	; (8008358 <_svfiprintf_r+0x1e8>)
 8008216:	f7f7 ffe3 	bl	80001e0 <memchr>
 800821a:	9a04      	ldr	r2, [sp, #16]
 800821c:	b9d8      	cbnz	r0, 8008256 <_svfiprintf_r+0xe6>
 800821e:	06d0      	lsls	r0, r2, #27
 8008220:	bf44      	itt	mi
 8008222:	2320      	movmi	r3, #32
 8008224:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008228:	0711      	lsls	r1, r2, #28
 800822a:	bf44      	itt	mi
 800822c:	232b      	movmi	r3, #43	; 0x2b
 800822e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008232:	f89a 3000 	ldrb.w	r3, [sl]
 8008236:	2b2a      	cmp	r3, #42	; 0x2a
 8008238:	d015      	beq.n	8008266 <_svfiprintf_r+0xf6>
 800823a:	9a07      	ldr	r2, [sp, #28]
 800823c:	4654      	mov	r4, sl
 800823e:	2000      	movs	r0, #0
 8008240:	f04f 0c0a 	mov.w	ip, #10
 8008244:	4621      	mov	r1, r4
 8008246:	f811 3b01 	ldrb.w	r3, [r1], #1
 800824a:	3b30      	subs	r3, #48	; 0x30
 800824c:	2b09      	cmp	r3, #9
 800824e:	d94d      	bls.n	80082ec <_svfiprintf_r+0x17c>
 8008250:	b1b0      	cbz	r0, 8008280 <_svfiprintf_r+0x110>
 8008252:	9207      	str	r2, [sp, #28]
 8008254:	e014      	b.n	8008280 <_svfiprintf_r+0x110>
 8008256:	eba0 0308 	sub.w	r3, r0, r8
 800825a:	fa09 f303 	lsl.w	r3, r9, r3
 800825e:	4313      	orrs	r3, r2
 8008260:	9304      	str	r3, [sp, #16]
 8008262:	46a2      	mov	sl, r4
 8008264:	e7d2      	b.n	800820c <_svfiprintf_r+0x9c>
 8008266:	9b03      	ldr	r3, [sp, #12]
 8008268:	1d19      	adds	r1, r3, #4
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	9103      	str	r1, [sp, #12]
 800826e:	2b00      	cmp	r3, #0
 8008270:	bfbb      	ittet	lt
 8008272:	425b      	neglt	r3, r3
 8008274:	f042 0202 	orrlt.w	r2, r2, #2
 8008278:	9307      	strge	r3, [sp, #28]
 800827a:	9307      	strlt	r3, [sp, #28]
 800827c:	bfb8      	it	lt
 800827e:	9204      	strlt	r2, [sp, #16]
 8008280:	7823      	ldrb	r3, [r4, #0]
 8008282:	2b2e      	cmp	r3, #46	; 0x2e
 8008284:	d10c      	bne.n	80082a0 <_svfiprintf_r+0x130>
 8008286:	7863      	ldrb	r3, [r4, #1]
 8008288:	2b2a      	cmp	r3, #42	; 0x2a
 800828a:	d134      	bne.n	80082f6 <_svfiprintf_r+0x186>
 800828c:	9b03      	ldr	r3, [sp, #12]
 800828e:	1d1a      	adds	r2, r3, #4
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	9203      	str	r2, [sp, #12]
 8008294:	2b00      	cmp	r3, #0
 8008296:	bfb8      	it	lt
 8008298:	f04f 33ff 	movlt.w	r3, #4294967295
 800829c:	3402      	adds	r4, #2
 800829e:	9305      	str	r3, [sp, #20]
 80082a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008368 <_svfiprintf_r+0x1f8>
 80082a4:	7821      	ldrb	r1, [r4, #0]
 80082a6:	2203      	movs	r2, #3
 80082a8:	4650      	mov	r0, sl
 80082aa:	f7f7 ff99 	bl	80001e0 <memchr>
 80082ae:	b138      	cbz	r0, 80082c0 <_svfiprintf_r+0x150>
 80082b0:	9b04      	ldr	r3, [sp, #16]
 80082b2:	eba0 000a 	sub.w	r0, r0, sl
 80082b6:	2240      	movs	r2, #64	; 0x40
 80082b8:	4082      	lsls	r2, r0
 80082ba:	4313      	orrs	r3, r2
 80082bc:	3401      	adds	r4, #1
 80082be:	9304      	str	r3, [sp, #16]
 80082c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082c4:	4825      	ldr	r0, [pc, #148]	; (800835c <_svfiprintf_r+0x1ec>)
 80082c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082ca:	2206      	movs	r2, #6
 80082cc:	f7f7 ff88 	bl	80001e0 <memchr>
 80082d0:	2800      	cmp	r0, #0
 80082d2:	d038      	beq.n	8008346 <_svfiprintf_r+0x1d6>
 80082d4:	4b22      	ldr	r3, [pc, #136]	; (8008360 <_svfiprintf_r+0x1f0>)
 80082d6:	bb1b      	cbnz	r3, 8008320 <_svfiprintf_r+0x1b0>
 80082d8:	9b03      	ldr	r3, [sp, #12]
 80082da:	3307      	adds	r3, #7
 80082dc:	f023 0307 	bic.w	r3, r3, #7
 80082e0:	3308      	adds	r3, #8
 80082e2:	9303      	str	r3, [sp, #12]
 80082e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082e6:	4433      	add	r3, r6
 80082e8:	9309      	str	r3, [sp, #36]	; 0x24
 80082ea:	e768      	b.n	80081be <_svfiprintf_r+0x4e>
 80082ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80082f0:	460c      	mov	r4, r1
 80082f2:	2001      	movs	r0, #1
 80082f4:	e7a6      	b.n	8008244 <_svfiprintf_r+0xd4>
 80082f6:	2300      	movs	r3, #0
 80082f8:	3401      	adds	r4, #1
 80082fa:	9305      	str	r3, [sp, #20]
 80082fc:	4619      	mov	r1, r3
 80082fe:	f04f 0c0a 	mov.w	ip, #10
 8008302:	4620      	mov	r0, r4
 8008304:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008308:	3a30      	subs	r2, #48	; 0x30
 800830a:	2a09      	cmp	r2, #9
 800830c:	d903      	bls.n	8008316 <_svfiprintf_r+0x1a6>
 800830e:	2b00      	cmp	r3, #0
 8008310:	d0c6      	beq.n	80082a0 <_svfiprintf_r+0x130>
 8008312:	9105      	str	r1, [sp, #20]
 8008314:	e7c4      	b.n	80082a0 <_svfiprintf_r+0x130>
 8008316:	fb0c 2101 	mla	r1, ip, r1, r2
 800831a:	4604      	mov	r4, r0
 800831c:	2301      	movs	r3, #1
 800831e:	e7f0      	b.n	8008302 <_svfiprintf_r+0x192>
 8008320:	ab03      	add	r3, sp, #12
 8008322:	9300      	str	r3, [sp, #0]
 8008324:	462a      	mov	r2, r5
 8008326:	4b0f      	ldr	r3, [pc, #60]	; (8008364 <_svfiprintf_r+0x1f4>)
 8008328:	a904      	add	r1, sp, #16
 800832a:	4638      	mov	r0, r7
 800832c:	f3af 8000 	nop.w
 8008330:	1c42      	adds	r2, r0, #1
 8008332:	4606      	mov	r6, r0
 8008334:	d1d6      	bne.n	80082e4 <_svfiprintf_r+0x174>
 8008336:	89ab      	ldrh	r3, [r5, #12]
 8008338:	065b      	lsls	r3, r3, #25
 800833a:	f53f af2d 	bmi.w	8008198 <_svfiprintf_r+0x28>
 800833e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008340:	b01d      	add	sp, #116	; 0x74
 8008342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008346:	ab03      	add	r3, sp, #12
 8008348:	9300      	str	r3, [sp, #0]
 800834a:	462a      	mov	r2, r5
 800834c:	4b05      	ldr	r3, [pc, #20]	; (8008364 <_svfiprintf_r+0x1f4>)
 800834e:	a904      	add	r1, sp, #16
 8008350:	4638      	mov	r0, r7
 8008352:	f000 f879 	bl	8008448 <_printf_i>
 8008356:	e7eb      	b.n	8008330 <_svfiprintf_r+0x1c0>
 8008358:	08008995 	.word	0x08008995
 800835c:	0800899f 	.word	0x0800899f
 8008360:	00000000 	.word	0x00000000
 8008364:	080080bd 	.word	0x080080bd
 8008368:	0800899b 	.word	0x0800899b

0800836c <_printf_common>:
 800836c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008370:	4616      	mov	r6, r2
 8008372:	4699      	mov	r9, r3
 8008374:	688a      	ldr	r2, [r1, #8]
 8008376:	690b      	ldr	r3, [r1, #16]
 8008378:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800837c:	4293      	cmp	r3, r2
 800837e:	bfb8      	it	lt
 8008380:	4613      	movlt	r3, r2
 8008382:	6033      	str	r3, [r6, #0]
 8008384:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008388:	4607      	mov	r7, r0
 800838a:	460c      	mov	r4, r1
 800838c:	b10a      	cbz	r2, 8008392 <_printf_common+0x26>
 800838e:	3301      	adds	r3, #1
 8008390:	6033      	str	r3, [r6, #0]
 8008392:	6823      	ldr	r3, [r4, #0]
 8008394:	0699      	lsls	r1, r3, #26
 8008396:	bf42      	ittt	mi
 8008398:	6833      	ldrmi	r3, [r6, #0]
 800839a:	3302      	addmi	r3, #2
 800839c:	6033      	strmi	r3, [r6, #0]
 800839e:	6825      	ldr	r5, [r4, #0]
 80083a0:	f015 0506 	ands.w	r5, r5, #6
 80083a4:	d106      	bne.n	80083b4 <_printf_common+0x48>
 80083a6:	f104 0a19 	add.w	sl, r4, #25
 80083aa:	68e3      	ldr	r3, [r4, #12]
 80083ac:	6832      	ldr	r2, [r6, #0]
 80083ae:	1a9b      	subs	r3, r3, r2
 80083b0:	42ab      	cmp	r3, r5
 80083b2:	dc26      	bgt.n	8008402 <_printf_common+0x96>
 80083b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083b8:	1e13      	subs	r3, r2, #0
 80083ba:	6822      	ldr	r2, [r4, #0]
 80083bc:	bf18      	it	ne
 80083be:	2301      	movne	r3, #1
 80083c0:	0692      	lsls	r2, r2, #26
 80083c2:	d42b      	bmi.n	800841c <_printf_common+0xb0>
 80083c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083c8:	4649      	mov	r1, r9
 80083ca:	4638      	mov	r0, r7
 80083cc:	47c0      	blx	r8
 80083ce:	3001      	adds	r0, #1
 80083d0:	d01e      	beq.n	8008410 <_printf_common+0xa4>
 80083d2:	6823      	ldr	r3, [r4, #0]
 80083d4:	6922      	ldr	r2, [r4, #16]
 80083d6:	f003 0306 	and.w	r3, r3, #6
 80083da:	2b04      	cmp	r3, #4
 80083dc:	bf02      	ittt	eq
 80083de:	68e5      	ldreq	r5, [r4, #12]
 80083e0:	6833      	ldreq	r3, [r6, #0]
 80083e2:	1aed      	subeq	r5, r5, r3
 80083e4:	68a3      	ldr	r3, [r4, #8]
 80083e6:	bf0c      	ite	eq
 80083e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083ec:	2500      	movne	r5, #0
 80083ee:	4293      	cmp	r3, r2
 80083f0:	bfc4      	itt	gt
 80083f2:	1a9b      	subgt	r3, r3, r2
 80083f4:	18ed      	addgt	r5, r5, r3
 80083f6:	2600      	movs	r6, #0
 80083f8:	341a      	adds	r4, #26
 80083fa:	42b5      	cmp	r5, r6
 80083fc:	d11a      	bne.n	8008434 <_printf_common+0xc8>
 80083fe:	2000      	movs	r0, #0
 8008400:	e008      	b.n	8008414 <_printf_common+0xa8>
 8008402:	2301      	movs	r3, #1
 8008404:	4652      	mov	r2, sl
 8008406:	4649      	mov	r1, r9
 8008408:	4638      	mov	r0, r7
 800840a:	47c0      	blx	r8
 800840c:	3001      	adds	r0, #1
 800840e:	d103      	bne.n	8008418 <_printf_common+0xac>
 8008410:	f04f 30ff 	mov.w	r0, #4294967295
 8008414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008418:	3501      	adds	r5, #1
 800841a:	e7c6      	b.n	80083aa <_printf_common+0x3e>
 800841c:	18e1      	adds	r1, r4, r3
 800841e:	1c5a      	adds	r2, r3, #1
 8008420:	2030      	movs	r0, #48	; 0x30
 8008422:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008426:	4422      	add	r2, r4
 8008428:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800842c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008430:	3302      	adds	r3, #2
 8008432:	e7c7      	b.n	80083c4 <_printf_common+0x58>
 8008434:	2301      	movs	r3, #1
 8008436:	4622      	mov	r2, r4
 8008438:	4649      	mov	r1, r9
 800843a:	4638      	mov	r0, r7
 800843c:	47c0      	blx	r8
 800843e:	3001      	adds	r0, #1
 8008440:	d0e6      	beq.n	8008410 <_printf_common+0xa4>
 8008442:	3601      	adds	r6, #1
 8008444:	e7d9      	b.n	80083fa <_printf_common+0x8e>
	...

08008448 <_printf_i>:
 8008448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800844c:	7e0f      	ldrb	r7, [r1, #24]
 800844e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008450:	2f78      	cmp	r7, #120	; 0x78
 8008452:	4691      	mov	r9, r2
 8008454:	4680      	mov	r8, r0
 8008456:	460c      	mov	r4, r1
 8008458:	469a      	mov	sl, r3
 800845a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800845e:	d807      	bhi.n	8008470 <_printf_i+0x28>
 8008460:	2f62      	cmp	r7, #98	; 0x62
 8008462:	d80a      	bhi.n	800847a <_printf_i+0x32>
 8008464:	2f00      	cmp	r7, #0
 8008466:	f000 80d4 	beq.w	8008612 <_printf_i+0x1ca>
 800846a:	2f58      	cmp	r7, #88	; 0x58
 800846c:	f000 80c0 	beq.w	80085f0 <_printf_i+0x1a8>
 8008470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008474:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008478:	e03a      	b.n	80084f0 <_printf_i+0xa8>
 800847a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800847e:	2b15      	cmp	r3, #21
 8008480:	d8f6      	bhi.n	8008470 <_printf_i+0x28>
 8008482:	a101      	add	r1, pc, #4	; (adr r1, 8008488 <_printf_i+0x40>)
 8008484:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008488:	080084e1 	.word	0x080084e1
 800848c:	080084f5 	.word	0x080084f5
 8008490:	08008471 	.word	0x08008471
 8008494:	08008471 	.word	0x08008471
 8008498:	08008471 	.word	0x08008471
 800849c:	08008471 	.word	0x08008471
 80084a0:	080084f5 	.word	0x080084f5
 80084a4:	08008471 	.word	0x08008471
 80084a8:	08008471 	.word	0x08008471
 80084ac:	08008471 	.word	0x08008471
 80084b0:	08008471 	.word	0x08008471
 80084b4:	080085f9 	.word	0x080085f9
 80084b8:	08008521 	.word	0x08008521
 80084bc:	080085b3 	.word	0x080085b3
 80084c0:	08008471 	.word	0x08008471
 80084c4:	08008471 	.word	0x08008471
 80084c8:	0800861b 	.word	0x0800861b
 80084cc:	08008471 	.word	0x08008471
 80084d0:	08008521 	.word	0x08008521
 80084d4:	08008471 	.word	0x08008471
 80084d8:	08008471 	.word	0x08008471
 80084dc:	080085bb 	.word	0x080085bb
 80084e0:	682b      	ldr	r3, [r5, #0]
 80084e2:	1d1a      	adds	r2, r3, #4
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	602a      	str	r2, [r5, #0]
 80084e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084f0:	2301      	movs	r3, #1
 80084f2:	e09f      	b.n	8008634 <_printf_i+0x1ec>
 80084f4:	6820      	ldr	r0, [r4, #0]
 80084f6:	682b      	ldr	r3, [r5, #0]
 80084f8:	0607      	lsls	r7, r0, #24
 80084fa:	f103 0104 	add.w	r1, r3, #4
 80084fe:	6029      	str	r1, [r5, #0]
 8008500:	d501      	bpl.n	8008506 <_printf_i+0xbe>
 8008502:	681e      	ldr	r6, [r3, #0]
 8008504:	e003      	b.n	800850e <_printf_i+0xc6>
 8008506:	0646      	lsls	r6, r0, #25
 8008508:	d5fb      	bpl.n	8008502 <_printf_i+0xba>
 800850a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800850e:	2e00      	cmp	r6, #0
 8008510:	da03      	bge.n	800851a <_printf_i+0xd2>
 8008512:	232d      	movs	r3, #45	; 0x2d
 8008514:	4276      	negs	r6, r6
 8008516:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800851a:	485a      	ldr	r0, [pc, #360]	; (8008684 <_printf_i+0x23c>)
 800851c:	230a      	movs	r3, #10
 800851e:	e012      	b.n	8008546 <_printf_i+0xfe>
 8008520:	682b      	ldr	r3, [r5, #0]
 8008522:	6820      	ldr	r0, [r4, #0]
 8008524:	1d19      	adds	r1, r3, #4
 8008526:	6029      	str	r1, [r5, #0]
 8008528:	0605      	lsls	r5, r0, #24
 800852a:	d501      	bpl.n	8008530 <_printf_i+0xe8>
 800852c:	681e      	ldr	r6, [r3, #0]
 800852e:	e002      	b.n	8008536 <_printf_i+0xee>
 8008530:	0641      	lsls	r1, r0, #25
 8008532:	d5fb      	bpl.n	800852c <_printf_i+0xe4>
 8008534:	881e      	ldrh	r6, [r3, #0]
 8008536:	4853      	ldr	r0, [pc, #332]	; (8008684 <_printf_i+0x23c>)
 8008538:	2f6f      	cmp	r7, #111	; 0x6f
 800853a:	bf0c      	ite	eq
 800853c:	2308      	moveq	r3, #8
 800853e:	230a      	movne	r3, #10
 8008540:	2100      	movs	r1, #0
 8008542:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008546:	6865      	ldr	r5, [r4, #4]
 8008548:	60a5      	str	r5, [r4, #8]
 800854a:	2d00      	cmp	r5, #0
 800854c:	bfa2      	ittt	ge
 800854e:	6821      	ldrge	r1, [r4, #0]
 8008550:	f021 0104 	bicge.w	r1, r1, #4
 8008554:	6021      	strge	r1, [r4, #0]
 8008556:	b90e      	cbnz	r6, 800855c <_printf_i+0x114>
 8008558:	2d00      	cmp	r5, #0
 800855a:	d04b      	beq.n	80085f4 <_printf_i+0x1ac>
 800855c:	4615      	mov	r5, r2
 800855e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008562:	fb03 6711 	mls	r7, r3, r1, r6
 8008566:	5dc7      	ldrb	r7, [r0, r7]
 8008568:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800856c:	4637      	mov	r7, r6
 800856e:	42bb      	cmp	r3, r7
 8008570:	460e      	mov	r6, r1
 8008572:	d9f4      	bls.n	800855e <_printf_i+0x116>
 8008574:	2b08      	cmp	r3, #8
 8008576:	d10b      	bne.n	8008590 <_printf_i+0x148>
 8008578:	6823      	ldr	r3, [r4, #0]
 800857a:	07de      	lsls	r6, r3, #31
 800857c:	d508      	bpl.n	8008590 <_printf_i+0x148>
 800857e:	6923      	ldr	r3, [r4, #16]
 8008580:	6861      	ldr	r1, [r4, #4]
 8008582:	4299      	cmp	r1, r3
 8008584:	bfde      	ittt	le
 8008586:	2330      	movle	r3, #48	; 0x30
 8008588:	f805 3c01 	strble.w	r3, [r5, #-1]
 800858c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008590:	1b52      	subs	r2, r2, r5
 8008592:	6122      	str	r2, [r4, #16]
 8008594:	f8cd a000 	str.w	sl, [sp]
 8008598:	464b      	mov	r3, r9
 800859a:	aa03      	add	r2, sp, #12
 800859c:	4621      	mov	r1, r4
 800859e:	4640      	mov	r0, r8
 80085a0:	f7ff fee4 	bl	800836c <_printf_common>
 80085a4:	3001      	adds	r0, #1
 80085a6:	d14a      	bne.n	800863e <_printf_i+0x1f6>
 80085a8:	f04f 30ff 	mov.w	r0, #4294967295
 80085ac:	b004      	add	sp, #16
 80085ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085b2:	6823      	ldr	r3, [r4, #0]
 80085b4:	f043 0320 	orr.w	r3, r3, #32
 80085b8:	6023      	str	r3, [r4, #0]
 80085ba:	4833      	ldr	r0, [pc, #204]	; (8008688 <_printf_i+0x240>)
 80085bc:	2778      	movs	r7, #120	; 0x78
 80085be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80085c2:	6823      	ldr	r3, [r4, #0]
 80085c4:	6829      	ldr	r1, [r5, #0]
 80085c6:	061f      	lsls	r7, r3, #24
 80085c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80085cc:	d402      	bmi.n	80085d4 <_printf_i+0x18c>
 80085ce:	065f      	lsls	r7, r3, #25
 80085d0:	bf48      	it	mi
 80085d2:	b2b6      	uxthmi	r6, r6
 80085d4:	07df      	lsls	r7, r3, #31
 80085d6:	bf48      	it	mi
 80085d8:	f043 0320 	orrmi.w	r3, r3, #32
 80085dc:	6029      	str	r1, [r5, #0]
 80085de:	bf48      	it	mi
 80085e0:	6023      	strmi	r3, [r4, #0]
 80085e2:	b91e      	cbnz	r6, 80085ec <_printf_i+0x1a4>
 80085e4:	6823      	ldr	r3, [r4, #0]
 80085e6:	f023 0320 	bic.w	r3, r3, #32
 80085ea:	6023      	str	r3, [r4, #0]
 80085ec:	2310      	movs	r3, #16
 80085ee:	e7a7      	b.n	8008540 <_printf_i+0xf8>
 80085f0:	4824      	ldr	r0, [pc, #144]	; (8008684 <_printf_i+0x23c>)
 80085f2:	e7e4      	b.n	80085be <_printf_i+0x176>
 80085f4:	4615      	mov	r5, r2
 80085f6:	e7bd      	b.n	8008574 <_printf_i+0x12c>
 80085f8:	682b      	ldr	r3, [r5, #0]
 80085fa:	6826      	ldr	r6, [r4, #0]
 80085fc:	6961      	ldr	r1, [r4, #20]
 80085fe:	1d18      	adds	r0, r3, #4
 8008600:	6028      	str	r0, [r5, #0]
 8008602:	0635      	lsls	r5, r6, #24
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	d501      	bpl.n	800860c <_printf_i+0x1c4>
 8008608:	6019      	str	r1, [r3, #0]
 800860a:	e002      	b.n	8008612 <_printf_i+0x1ca>
 800860c:	0670      	lsls	r0, r6, #25
 800860e:	d5fb      	bpl.n	8008608 <_printf_i+0x1c0>
 8008610:	8019      	strh	r1, [r3, #0]
 8008612:	2300      	movs	r3, #0
 8008614:	6123      	str	r3, [r4, #16]
 8008616:	4615      	mov	r5, r2
 8008618:	e7bc      	b.n	8008594 <_printf_i+0x14c>
 800861a:	682b      	ldr	r3, [r5, #0]
 800861c:	1d1a      	adds	r2, r3, #4
 800861e:	602a      	str	r2, [r5, #0]
 8008620:	681d      	ldr	r5, [r3, #0]
 8008622:	6862      	ldr	r2, [r4, #4]
 8008624:	2100      	movs	r1, #0
 8008626:	4628      	mov	r0, r5
 8008628:	f7f7 fdda 	bl	80001e0 <memchr>
 800862c:	b108      	cbz	r0, 8008632 <_printf_i+0x1ea>
 800862e:	1b40      	subs	r0, r0, r5
 8008630:	6060      	str	r0, [r4, #4]
 8008632:	6863      	ldr	r3, [r4, #4]
 8008634:	6123      	str	r3, [r4, #16]
 8008636:	2300      	movs	r3, #0
 8008638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800863c:	e7aa      	b.n	8008594 <_printf_i+0x14c>
 800863e:	6923      	ldr	r3, [r4, #16]
 8008640:	462a      	mov	r2, r5
 8008642:	4649      	mov	r1, r9
 8008644:	4640      	mov	r0, r8
 8008646:	47d0      	blx	sl
 8008648:	3001      	adds	r0, #1
 800864a:	d0ad      	beq.n	80085a8 <_printf_i+0x160>
 800864c:	6823      	ldr	r3, [r4, #0]
 800864e:	079b      	lsls	r3, r3, #30
 8008650:	d413      	bmi.n	800867a <_printf_i+0x232>
 8008652:	68e0      	ldr	r0, [r4, #12]
 8008654:	9b03      	ldr	r3, [sp, #12]
 8008656:	4298      	cmp	r0, r3
 8008658:	bfb8      	it	lt
 800865a:	4618      	movlt	r0, r3
 800865c:	e7a6      	b.n	80085ac <_printf_i+0x164>
 800865e:	2301      	movs	r3, #1
 8008660:	4632      	mov	r2, r6
 8008662:	4649      	mov	r1, r9
 8008664:	4640      	mov	r0, r8
 8008666:	47d0      	blx	sl
 8008668:	3001      	adds	r0, #1
 800866a:	d09d      	beq.n	80085a8 <_printf_i+0x160>
 800866c:	3501      	adds	r5, #1
 800866e:	68e3      	ldr	r3, [r4, #12]
 8008670:	9903      	ldr	r1, [sp, #12]
 8008672:	1a5b      	subs	r3, r3, r1
 8008674:	42ab      	cmp	r3, r5
 8008676:	dcf2      	bgt.n	800865e <_printf_i+0x216>
 8008678:	e7eb      	b.n	8008652 <_printf_i+0x20a>
 800867a:	2500      	movs	r5, #0
 800867c:	f104 0619 	add.w	r6, r4, #25
 8008680:	e7f5      	b.n	800866e <_printf_i+0x226>
 8008682:	bf00      	nop
 8008684:	080089a6 	.word	0x080089a6
 8008688:	080089b7 	.word	0x080089b7

0800868c <memmove>:
 800868c:	4288      	cmp	r0, r1
 800868e:	b510      	push	{r4, lr}
 8008690:	eb01 0402 	add.w	r4, r1, r2
 8008694:	d902      	bls.n	800869c <memmove+0x10>
 8008696:	4284      	cmp	r4, r0
 8008698:	4623      	mov	r3, r4
 800869a:	d807      	bhi.n	80086ac <memmove+0x20>
 800869c:	1e43      	subs	r3, r0, #1
 800869e:	42a1      	cmp	r1, r4
 80086a0:	d008      	beq.n	80086b4 <memmove+0x28>
 80086a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086aa:	e7f8      	b.n	800869e <memmove+0x12>
 80086ac:	4402      	add	r2, r0
 80086ae:	4601      	mov	r1, r0
 80086b0:	428a      	cmp	r2, r1
 80086b2:	d100      	bne.n	80086b6 <memmove+0x2a>
 80086b4:	bd10      	pop	{r4, pc}
 80086b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086be:	e7f7      	b.n	80086b0 <memmove+0x24>

080086c0 <_sbrk_r>:
 80086c0:	b538      	push	{r3, r4, r5, lr}
 80086c2:	4d06      	ldr	r5, [pc, #24]	; (80086dc <_sbrk_r+0x1c>)
 80086c4:	2300      	movs	r3, #0
 80086c6:	4604      	mov	r4, r0
 80086c8:	4608      	mov	r0, r1
 80086ca:	602b      	str	r3, [r5, #0]
 80086cc:	f7f9 fa40 	bl	8001b50 <_sbrk>
 80086d0:	1c43      	adds	r3, r0, #1
 80086d2:	d102      	bne.n	80086da <_sbrk_r+0x1a>
 80086d4:	682b      	ldr	r3, [r5, #0]
 80086d6:	b103      	cbz	r3, 80086da <_sbrk_r+0x1a>
 80086d8:	6023      	str	r3, [r4, #0]
 80086da:	bd38      	pop	{r3, r4, r5, pc}
 80086dc:	200045a4 	.word	0x200045a4

080086e0 <_realloc_r>:
 80086e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086e4:	4680      	mov	r8, r0
 80086e6:	4614      	mov	r4, r2
 80086e8:	460e      	mov	r6, r1
 80086ea:	b921      	cbnz	r1, 80086f6 <_realloc_r+0x16>
 80086ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086f0:	4611      	mov	r1, r2
 80086f2:	f7ff bc57 	b.w	8007fa4 <_malloc_r>
 80086f6:	b92a      	cbnz	r2, 8008704 <_realloc_r+0x24>
 80086f8:	f7ff fbe8 	bl	8007ecc <_free_r>
 80086fc:	4625      	mov	r5, r4
 80086fe:	4628      	mov	r0, r5
 8008700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008704:	f000 f81b 	bl	800873e <_malloc_usable_size_r>
 8008708:	4284      	cmp	r4, r0
 800870a:	4607      	mov	r7, r0
 800870c:	d802      	bhi.n	8008714 <_realloc_r+0x34>
 800870e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008712:	d812      	bhi.n	800873a <_realloc_r+0x5a>
 8008714:	4621      	mov	r1, r4
 8008716:	4640      	mov	r0, r8
 8008718:	f7ff fc44 	bl	8007fa4 <_malloc_r>
 800871c:	4605      	mov	r5, r0
 800871e:	2800      	cmp	r0, #0
 8008720:	d0ed      	beq.n	80086fe <_realloc_r+0x1e>
 8008722:	42bc      	cmp	r4, r7
 8008724:	4622      	mov	r2, r4
 8008726:	4631      	mov	r1, r6
 8008728:	bf28      	it	cs
 800872a:	463a      	movcs	r2, r7
 800872c:	f7ff fbc0 	bl	8007eb0 <memcpy>
 8008730:	4631      	mov	r1, r6
 8008732:	4640      	mov	r0, r8
 8008734:	f7ff fbca 	bl	8007ecc <_free_r>
 8008738:	e7e1      	b.n	80086fe <_realloc_r+0x1e>
 800873a:	4635      	mov	r5, r6
 800873c:	e7df      	b.n	80086fe <_realloc_r+0x1e>

0800873e <_malloc_usable_size_r>:
 800873e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008742:	1f18      	subs	r0, r3, #4
 8008744:	2b00      	cmp	r3, #0
 8008746:	bfbc      	itt	lt
 8008748:	580b      	ldrlt	r3, [r1, r0]
 800874a:	18c0      	addlt	r0, r0, r3
 800874c:	4770      	bx	lr
	...

08008750 <_init>:
 8008750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008752:	bf00      	nop
 8008754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008756:	bc08      	pop	{r3}
 8008758:	469e      	mov	lr, r3
 800875a:	4770      	bx	lr

0800875c <_fini>:
 800875c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800875e:	bf00      	nop
 8008760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008762:	bc08      	pop	{r3}
 8008764:	469e      	mov	lr, r3
 8008766:	4770      	bx	lr
