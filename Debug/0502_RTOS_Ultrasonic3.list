
0502_RTOS_Ultrasonic3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  08009340  08009340  00019340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095fc  080095fc  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080095fc  080095fc  000195fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009604  08009604  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009604  08009604  00019604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009608  08009608  00019608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800960c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004508  2000006c  08009678  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004574  08009678  00024574  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b73c  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000465a  00000000  00000000  0003b81b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001910  00000000  00000000  0003fe78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001345  00000000  00000000  00041788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b52c  00000000  00000000  00042acd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fdda  00000000  00000000  0005dff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c430  00000000  00000000  0007ddd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007094  00000000  00000000  0011a204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00121298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009328 	.word	0x08009328

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08009328 	.word	0x08009328

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2iz>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d215      	bcs.n	8000882 <__aeabi_d2iz+0x36>
 8000856:	d511      	bpl.n	800087c <__aeabi_d2iz+0x30>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d912      	bls.n	8000888 <__aeabi_d2iz+0x3c>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000872:	fa23 f002 	lsr.w	r0, r3, r2
 8000876:	bf18      	it	ne
 8000878:	4240      	negne	r0, r0
 800087a:	4770      	bx	lr
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	4770      	bx	lr
 8000882:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000886:	d105      	bne.n	8000894 <__aeabi_d2iz+0x48>
 8000888:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800088c:	bf08      	it	eq
 800088e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b970 	b.w	8000b94 <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9e08      	ldr	r6, [sp, #32]
 80008d2:	460d      	mov	r5, r1
 80008d4:	4604      	mov	r4, r0
 80008d6:	460f      	mov	r7, r1
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d14a      	bne.n	8000972 <__udivmoddi4+0xa6>
 80008dc:	428a      	cmp	r2, r1
 80008de:	4694      	mov	ip, r2
 80008e0:	d965      	bls.n	80009ae <__udivmoddi4+0xe2>
 80008e2:	fab2 f382 	clz	r3, r2
 80008e6:	b143      	cbz	r3, 80008fa <__udivmoddi4+0x2e>
 80008e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008ec:	f1c3 0220 	rsb	r2, r3, #32
 80008f0:	409f      	lsls	r7, r3
 80008f2:	fa20 f202 	lsr.w	r2, r0, r2
 80008f6:	4317      	orrs	r7, r2
 80008f8:	409c      	lsls	r4, r3
 80008fa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008fe:	fa1f f58c 	uxth.w	r5, ip
 8000902:	fbb7 f1fe 	udiv	r1, r7, lr
 8000906:	0c22      	lsrs	r2, r4, #16
 8000908:	fb0e 7711 	mls	r7, lr, r1, r7
 800090c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000910:	fb01 f005 	mul.w	r0, r1, r5
 8000914:	4290      	cmp	r0, r2
 8000916:	d90a      	bls.n	800092e <__udivmoddi4+0x62>
 8000918:	eb1c 0202 	adds.w	r2, ip, r2
 800091c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000920:	f080 811c 	bcs.w	8000b5c <__udivmoddi4+0x290>
 8000924:	4290      	cmp	r0, r2
 8000926:	f240 8119 	bls.w	8000b5c <__udivmoddi4+0x290>
 800092a:	3902      	subs	r1, #2
 800092c:	4462      	add	r2, ip
 800092e:	1a12      	subs	r2, r2, r0
 8000930:	b2a4      	uxth	r4, r4
 8000932:	fbb2 f0fe 	udiv	r0, r2, lr
 8000936:	fb0e 2210 	mls	r2, lr, r0, r2
 800093a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800093e:	fb00 f505 	mul.w	r5, r0, r5
 8000942:	42a5      	cmp	r5, r4
 8000944:	d90a      	bls.n	800095c <__udivmoddi4+0x90>
 8000946:	eb1c 0404 	adds.w	r4, ip, r4
 800094a:	f100 32ff 	add.w	r2, r0, #4294967295
 800094e:	f080 8107 	bcs.w	8000b60 <__udivmoddi4+0x294>
 8000952:	42a5      	cmp	r5, r4
 8000954:	f240 8104 	bls.w	8000b60 <__udivmoddi4+0x294>
 8000958:	4464      	add	r4, ip
 800095a:	3802      	subs	r0, #2
 800095c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000960:	1b64      	subs	r4, r4, r5
 8000962:	2100      	movs	r1, #0
 8000964:	b11e      	cbz	r6, 800096e <__udivmoddi4+0xa2>
 8000966:	40dc      	lsrs	r4, r3
 8000968:	2300      	movs	r3, #0
 800096a:	e9c6 4300 	strd	r4, r3, [r6]
 800096e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000972:	428b      	cmp	r3, r1
 8000974:	d908      	bls.n	8000988 <__udivmoddi4+0xbc>
 8000976:	2e00      	cmp	r6, #0
 8000978:	f000 80ed 	beq.w	8000b56 <__udivmoddi4+0x28a>
 800097c:	2100      	movs	r1, #0
 800097e:	e9c6 0500 	strd	r0, r5, [r6]
 8000982:	4608      	mov	r0, r1
 8000984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000988:	fab3 f183 	clz	r1, r3
 800098c:	2900      	cmp	r1, #0
 800098e:	d149      	bne.n	8000a24 <__udivmoddi4+0x158>
 8000990:	42ab      	cmp	r3, r5
 8000992:	d302      	bcc.n	800099a <__udivmoddi4+0xce>
 8000994:	4282      	cmp	r2, r0
 8000996:	f200 80f8 	bhi.w	8000b8a <__udivmoddi4+0x2be>
 800099a:	1a84      	subs	r4, r0, r2
 800099c:	eb65 0203 	sbc.w	r2, r5, r3
 80009a0:	2001      	movs	r0, #1
 80009a2:	4617      	mov	r7, r2
 80009a4:	2e00      	cmp	r6, #0
 80009a6:	d0e2      	beq.n	800096e <__udivmoddi4+0xa2>
 80009a8:	e9c6 4700 	strd	r4, r7, [r6]
 80009ac:	e7df      	b.n	800096e <__udivmoddi4+0xa2>
 80009ae:	b902      	cbnz	r2, 80009b2 <__udivmoddi4+0xe6>
 80009b0:	deff      	udf	#255	; 0xff
 80009b2:	fab2 f382 	clz	r3, r2
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	f040 8090 	bne.w	8000adc <__udivmoddi4+0x210>
 80009bc:	1a8a      	subs	r2, r1, r2
 80009be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009c2:	fa1f fe8c 	uxth.w	lr, ip
 80009c6:	2101      	movs	r1, #1
 80009c8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009cc:	fb07 2015 	mls	r0, r7, r5, r2
 80009d0:	0c22      	lsrs	r2, r4, #16
 80009d2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009d6:	fb0e f005 	mul.w	r0, lr, r5
 80009da:	4290      	cmp	r0, r2
 80009dc:	d908      	bls.n	80009f0 <__udivmoddi4+0x124>
 80009de:	eb1c 0202 	adds.w	r2, ip, r2
 80009e2:	f105 38ff 	add.w	r8, r5, #4294967295
 80009e6:	d202      	bcs.n	80009ee <__udivmoddi4+0x122>
 80009e8:	4290      	cmp	r0, r2
 80009ea:	f200 80cb 	bhi.w	8000b84 <__udivmoddi4+0x2b8>
 80009ee:	4645      	mov	r5, r8
 80009f0:	1a12      	subs	r2, r2, r0
 80009f2:	b2a4      	uxth	r4, r4
 80009f4:	fbb2 f0f7 	udiv	r0, r2, r7
 80009f8:	fb07 2210 	mls	r2, r7, r0, r2
 80009fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a00:	fb0e fe00 	mul.w	lr, lr, r0
 8000a04:	45a6      	cmp	lr, r4
 8000a06:	d908      	bls.n	8000a1a <__udivmoddi4+0x14e>
 8000a08:	eb1c 0404 	adds.w	r4, ip, r4
 8000a0c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a10:	d202      	bcs.n	8000a18 <__udivmoddi4+0x14c>
 8000a12:	45a6      	cmp	lr, r4
 8000a14:	f200 80bb 	bhi.w	8000b8e <__udivmoddi4+0x2c2>
 8000a18:	4610      	mov	r0, r2
 8000a1a:	eba4 040e 	sub.w	r4, r4, lr
 8000a1e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a22:	e79f      	b.n	8000964 <__udivmoddi4+0x98>
 8000a24:	f1c1 0720 	rsb	r7, r1, #32
 8000a28:	408b      	lsls	r3, r1
 8000a2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a32:	fa05 f401 	lsl.w	r4, r5, r1
 8000a36:	fa20 f307 	lsr.w	r3, r0, r7
 8000a3a:	40fd      	lsrs	r5, r7
 8000a3c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a40:	4323      	orrs	r3, r4
 8000a42:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a46:	fa1f fe8c 	uxth.w	lr, ip
 8000a4a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a4e:	0c1c      	lsrs	r4, r3, #16
 8000a50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a54:	fb08 f50e 	mul.w	r5, r8, lr
 8000a58:	42a5      	cmp	r5, r4
 8000a5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a5e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a62:	d90b      	bls.n	8000a7c <__udivmoddi4+0x1b0>
 8000a64:	eb1c 0404 	adds.w	r4, ip, r4
 8000a68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a6c:	f080 8088 	bcs.w	8000b80 <__udivmoddi4+0x2b4>
 8000a70:	42a5      	cmp	r5, r4
 8000a72:	f240 8085 	bls.w	8000b80 <__udivmoddi4+0x2b4>
 8000a76:	f1a8 0802 	sub.w	r8, r8, #2
 8000a7a:	4464      	add	r4, ip
 8000a7c:	1b64      	subs	r4, r4, r5
 8000a7e:	b29d      	uxth	r5, r3
 8000a80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a84:	fb09 4413 	mls	r4, r9, r3, r4
 8000a88:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a8c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a90:	45a6      	cmp	lr, r4
 8000a92:	d908      	bls.n	8000aa6 <__udivmoddi4+0x1da>
 8000a94:	eb1c 0404 	adds.w	r4, ip, r4
 8000a98:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a9c:	d26c      	bcs.n	8000b78 <__udivmoddi4+0x2ac>
 8000a9e:	45a6      	cmp	lr, r4
 8000aa0:	d96a      	bls.n	8000b78 <__udivmoddi4+0x2ac>
 8000aa2:	3b02      	subs	r3, #2
 8000aa4:	4464      	add	r4, ip
 8000aa6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aaa:	fba3 9502 	umull	r9, r5, r3, r2
 8000aae:	eba4 040e 	sub.w	r4, r4, lr
 8000ab2:	42ac      	cmp	r4, r5
 8000ab4:	46c8      	mov	r8, r9
 8000ab6:	46ae      	mov	lr, r5
 8000ab8:	d356      	bcc.n	8000b68 <__udivmoddi4+0x29c>
 8000aba:	d053      	beq.n	8000b64 <__udivmoddi4+0x298>
 8000abc:	b156      	cbz	r6, 8000ad4 <__udivmoddi4+0x208>
 8000abe:	ebb0 0208 	subs.w	r2, r0, r8
 8000ac2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ac6:	fa04 f707 	lsl.w	r7, r4, r7
 8000aca:	40ca      	lsrs	r2, r1
 8000acc:	40cc      	lsrs	r4, r1
 8000ace:	4317      	orrs	r7, r2
 8000ad0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000adc:	f1c3 0120 	rsb	r1, r3, #32
 8000ae0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ae4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ae8:	fa25 f101 	lsr.w	r1, r5, r1
 8000aec:	409d      	lsls	r5, r3
 8000aee:	432a      	orrs	r2, r5
 8000af0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af4:	fa1f fe8c 	uxth.w	lr, ip
 8000af8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afc:	fb07 1510 	mls	r5, r7, r0, r1
 8000b00:	0c11      	lsrs	r1, r2, #16
 8000b02:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b06:	fb00 f50e 	mul.w	r5, r0, lr
 8000b0a:	428d      	cmp	r5, r1
 8000b0c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b10:	d908      	bls.n	8000b24 <__udivmoddi4+0x258>
 8000b12:	eb1c 0101 	adds.w	r1, ip, r1
 8000b16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b1a:	d22f      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b1c:	428d      	cmp	r5, r1
 8000b1e:	d92d      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b20:	3802      	subs	r0, #2
 8000b22:	4461      	add	r1, ip
 8000b24:	1b49      	subs	r1, r1, r5
 8000b26:	b292      	uxth	r2, r2
 8000b28:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b2c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b34:	fb05 f10e 	mul.w	r1, r5, lr
 8000b38:	4291      	cmp	r1, r2
 8000b3a:	d908      	bls.n	8000b4e <__udivmoddi4+0x282>
 8000b3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b40:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b44:	d216      	bcs.n	8000b74 <__udivmoddi4+0x2a8>
 8000b46:	4291      	cmp	r1, r2
 8000b48:	d914      	bls.n	8000b74 <__udivmoddi4+0x2a8>
 8000b4a:	3d02      	subs	r5, #2
 8000b4c:	4462      	add	r2, ip
 8000b4e:	1a52      	subs	r2, r2, r1
 8000b50:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b54:	e738      	b.n	80009c8 <__udivmoddi4+0xfc>
 8000b56:	4631      	mov	r1, r6
 8000b58:	4630      	mov	r0, r6
 8000b5a:	e708      	b.n	800096e <__udivmoddi4+0xa2>
 8000b5c:	4639      	mov	r1, r7
 8000b5e:	e6e6      	b.n	800092e <__udivmoddi4+0x62>
 8000b60:	4610      	mov	r0, r2
 8000b62:	e6fb      	b.n	800095c <__udivmoddi4+0x90>
 8000b64:	4548      	cmp	r0, r9
 8000b66:	d2a9      	bcs.n	8000abc <__udivmoddi4+0x1f0>
 8000b68:	ebb9 0802 	subs.w	r8, r9, r2
 8000b6c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b70:	3b01      	subs	r3, #1
 8000b72:	e7a3      	b.n	8000abc <__udivmoddi4+0x1f0>
 8000b74:	4645      	mov	r5, r8
 8000b76:	e7ea      	b.n	8000b4e <__udivmoddi4+0x282>
 8000b78:	462b      	mov	r3, r5
 8000b7a:	e794      	b.n	8000aa6 <__udivmoddi4+0x1da>
 8000b7c:	4640      	mov	r0, r8
 8000b7e:	e7d1      	b.n	8000b24 <__udivmoddi4+0x258>
 8000b80:	46d0      	mov	r8, sl
 8000b82:	e77b      	b.n	8000a7c <__udivmoddi4+0x1b0>
 8000b84:	3d02      	subs	r5, #2
 8000b86:	4462      	add	r2, ip
 8000b88:	e732      	b.n	80009f0 <__udivmoddi4+0x124>
 8000b8a:	4608      	mov	r0, r1
 8000b8c:	e70a      	b.n	80009a4 <__udivmoddi4+0xd8>
 8000b8e:	4464      	add	r4, ip
 8000b90:	3802      	subs	r0, #2
 8000b92:	e742      	b.n	8000a1a <__udivmoddi4+0x14e>

08000b94 <__aeabi_idiv0>:
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <DelayInit>:
 *      Author: kccistc
 */

#include "delayus.h"

void DelayInit(void) {
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <DelayInit+0x4c>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	4a10      	ldr	r2, [pc, #64]	; (8000be4 <DelayInit+0x4c>)
 8000ba2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ba6:	60d3      	str	r3, [r2, #12]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <DelayInit+0x4c>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	4a0d      	ldr	r2, [pc, #52]	; (8000be4 <DelayInit+0x4c>)
 8000bae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bb2:	60d3      	str	r3, [r2, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <DelayInit+0x50>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <DelayInit+0x50>)
 8000bba:	f023 0301 	bic.w	r3, r3, #1
 8000bbe:	6013      	str	r3, [r2, #0]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <DelayInit+0x50>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a08      	ldr	r2, [pc, #32]	; (8000be8 <DelayInit+0x50>)
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	6013      	str	r3, [r2, #0]

	DWT->CYCCNT = 0;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <DelayInit+0x50>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	605a      	str	r2, [r3, #4]

	/* 3 NO OPERATION instructions */
	__ASM volatile ("NOP");
 8000bd2:	bf00      	nop
	__ASM volatile ("NOP");
 8000bd4:	bf00      	nop
	__ASM volatile ("NOP");
 8000bd6:	bf00      	nop
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000edf0 	.word	0xe000edf0
 8000be8:	e0001000 	.word	0xe0001000

08000bec <DelayUS>:

void DelayUS(uint32_t us) {
 8000bec:	b480      	push	{r7}
 8000bee:	b087      	sub	sp, #28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 8000bf4:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <DelayUS+0x44>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <DelayUS+0x48>)
 8000bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfe:	0c9a      	lsrs	r2, r3, #18
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	fb02 f303 	mul.w	r3, r2, r3
 8000c06:	617b      	str	r3, [r7, #20]
	uint32_t start = DWT->CYCCNT;
 8000c08:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <DelayUS+0x4c>)
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	613b      	str	r3, [r7, #16]
	volatile uint32_t cnt;

	do {
		cnt = DWT->CYCCNT - start;
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <DelayUS+0x4c>)
 8000c10:	685a      	ldr	r2, [r3, #4]
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	60fb      	str	r3, [r7, #12]
	} while (cnt < cycles);
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	697a      	ldr	r2, [r7, #20]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d8f6      	bhi.n	8000c0e <DelayUS+0x22>
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	371c      	adds	r7, #28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000000 	.word	0x20000000
 8000c34:	431bde83 	.word	0x431bde83
 8000c38:	e0001000 	.word	0xe0001000

08000c3c <Que_init>:
 *      Author: kccistc
 */
#include "Queue.h"

void Que_init(Que_t *Que)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	Que->head = 0;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2200      	movs	r2, #0
 8000c48:	669a      	str	r2, [r3, #104]	; 0x68
	Que->tail = 0;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	665a      	str	r2, [r3, #100]	; 0x64
	Que->QueCounter = 0;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	66da      	str	r2, [r3, #108]	; 0x6c
	Que->cmpltFlag = 0;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <setQueFlag>:

void setQueFlag(Que_t *Que, int flagState){
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
	Que->cmpltFlag = flagState;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	671a      	str	r2, [r3, #112]	; 0x70
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <getQueFlag>:

int getQueFlag(Que_t *Que){
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	return Que->cmpltFlag;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <QueFull>:


int QueFull(Que_t *Que)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	//if(head == ((tail+1) % BUF_SIZE))
	if(Que->QueCounter == BUF_SIZE)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000ca8:	2b64      	cmp	r3, #100	; 0x64
 8000caa:	d101      	bne.n	8000cb0 <QueFull+0x14>
		return 1;
 8000cac:	2301      	movs	r3, #1
 8000cae:	e000      	b.n	8000cb2 <QueFull+0x16>
	else
		return 0;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <QueEmpty>:
int QueEmpty(Que_t *Que)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
	//if(head == tail)
	if(Que->QueCounter == 0)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d101      	bne.n	8000cd2 <QueEmpty+0x14>
		return 1;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e000      	b.n	8000cd4 <QueEmpty+0x16>
	else
		return 0;
 8000cd2:	2300      	movs	r3, #0
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <enQue>:

void enQue(Que_t *Que, uint8_t data)			// push(write)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	70fb      	strb	r3, [r7, #3]
	if(QueFull(Que)) return;
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff ffd5 	bl	8000c9c <QueFull>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d119      	bne.n	8000d2c <enQue+0x4c>

	Que->QueBuff[Que->tail] = data;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	78f9      	ldrb	r1, [r7, #3]
 8000d00:	54d1      	strb	r1, [r2, r3]
	Que->tail = (Que->tail+1) % BUF_SIZE;			// tail : 0~3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000d06:	1c5a      	adds	r2, r3, #1
 8000d08:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <enQue+0x54>)
 8000d0a:	fb83 1302 	smull	r1, r3, r3, r2
 8000d0e:	1159      	asrs	r1, r3, #5
 8000d10:	17d3      	asrs	r3, r2, #31
 8000d12:	1acb      	subs	r3, r1, r3
 8000d14:	2164      	movs	r1, #100	; 0x64
 8000d16:	fb01 f303 	mul.w	r3, r1, r3
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	6653      	str	r3, [r2, #100]	; 0x64
	Que->QueCounter++;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000d24:	1c5a      	adds	r2, r3, #1
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	66da      	str	r2, [r3, #108]	; 0x6c
 8000d2a:	e000      	b.n	8000d2e <enQue+0x4e>
	if(QueFull(Que)) return;
 8000d2c:	bf00      	nop
}
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	51eb851f 	.word	0x51eb851f

08000d38 <deQue>:

uint8_t deQue(Que_t *Que)			// pop(read)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	if(QueEmpty(Que)) return -1;
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f7ff ffbc 	bl	8000cbe <QueEmpty>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <deQue+0x18>
 8000d4c:	23ff      	movs	r3, #255	; 0xff
 8000d4e:	e019      	b.n	8000d84 <deQue+0x4c>

	uint8_t temp = Que->QueBuff[Que->head];
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	5cd3      	ldrb	r3, [r2, r3]
 8000d58:	73fb      	strb	r3, [r7, #15]
	Que->head = (Que->head+1) % BUF_SIZE;			// head : 0~3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d5e:	1c5a      	adds	r2, r3, #1
 8000d60:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <deQue+0x54>)
 8000d62:	fb83 1302 	smull	r1, r3, r3, r2
 8000d66:	1159      	asrs	r1, r3, #5
 8000d68:	17d3      	asrs	r3, r2, #31
 8000d6a:	1acb      	subs	r3, r1, r3
 8000d6c:	2164      	movs	r1, #100	; 0x64
 8000d6e:	fb01 f303 	mul.w	r3, r1, r3
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	6693      	str	r3, [r2, #104]	; 0x68
	Que->QueCounter--;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000d7c:	1e5a      	subs	r2, r3, #1
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	66da      	str	r2, [r3, #108]	; 0x6c

	return temp;
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	51eb851f 	.word	0x51eb851f

08000d90 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <vApplicationGetIdleTaskMemory+0x2c>)
 8000da0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	4a06      	ldr	r2, [pc, #24]	; (8000dc0 <vApplicationGetIdleTaskMemory+0x30>)
 8000da6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2280      	movs	r2, #128	; 0x80
 8000dac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000dae:	bf00      	nop
 8000db0:	3714      	adds	r7, #20
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000088 	.word	0x20000088
 8000dc0:	20000128 	.word	0x20000128

08000dc4 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t uart1RxData, uart2RxData;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a15      	ldr	r2, [pc, #84]	; (8000e28 <HAL_UART_RxCpltCallback+0x64>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d10f      	bne.n	8000df6 <HAL_UART_RxCpltCallback+0x32>
		Listener_UART_ISR_Process(uart1RxData);
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_UART_RxCpltCallback+0x68>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f001 f906 	bl	8001fec <Listener_UART_ISR_Process>
		HAL_UART_Transmit(&huart2, &uart1RxData, 1, 100);
 8000de0:	2364      	movs	r3, #100	; 0x64
 8000de2:	2201      	movs	r2, #1
 8000de4:	4911      	ldr	r1, [pc, #68]	; (8000e2c <HAL_UART_RxCpltCallback+0x68>)
 8000de6:	4812      	ldr	r0, [pc, #72]	; (8000e30 <HAL_UART_RxCpltCallback+0x6c>)
 8000de8:	f004 fe26 	bl	8005a38 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart1, &uart1RxData, 1);
 8000dec:	2201      	movs	r2, #1
 8000dee:	490f      	ldr	r1, [pc, #60]	; (8000e2c <HAL_UART_RxCpltCallback+0x68>)
 8000df0:	4810      	ldr	r0, [pc, #64]	; (8000e34 <HAL_UART_RxCpltCallback+0x70>)
 8000df2:	f004 feac 	bl	8005b4e <HAL_UART_Receive_IT>
	}
	if (huart->Instance == USART2) {
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a0f      	ldr	r2, [pc, #60]	; (8000e38 <HAL_UART_RxCpltCallback+0x74>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d10f      	bne.n	8000e20 <HAL_UART_RxCpltCallback+0x5c>
		Listener_UART_ISR_Process(uart2RxData);
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <HAL_UART_RxCpltCallback+0x78>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f001 f8f1 	bl	8001fec <Listener_UART_ISR_Process>
		HAL_UART_Transmit(&huart2, &uart2RxData, 1, 100);
 8000e0a:	2364      	movs	r3, #100	; 0x64
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	490b      	ldr	r1, [pc, #44]	; (8000e3c <HAL_UART_RxCpltCallback+0x78>)
 8000e10:	4807      	ldr	r0, [pc, #28]	; (8000e30 <HAL_UART_RxCpltCallback+0x6c>)
 8000e12:	f004 fe11 	bl	8005a38 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &uart2RxData, 1);
 8000e16:	2201      	movs	r2, #1
 8000e18:	4908      	ldr	r1, [pc, #32]	; (8000e3c <HAL_UART_RxCpltCallback+0x78>)
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <HAL_UART_RxCpltCallback+0x6c>)
 8000e1c:	f004 fe97 	bl	8005b4e <HAL_UART_Receive_IT>
	}
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40011000 	.word	0x40011000
 8000e2c:	2000053c 	.word	0x2000053c
 8000e30:	200004e4 	.word	0x200004e4
 8000e34:	2000049c 	.word	0x2000049c
 8000e38:	40004400 	.word	0x40004400
 8000e3c:	2000053d 	.word	0x2000053d

08000e40 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	80fb      	strh	r3, [r7, #6]
	Listener_US_ISR_Process(GPIO_Pin);
 8000e4a:	88fb      	ldrh	r3, [r7, #6]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f001 f8e7 	bl	8002020 <Listener_US_ISR_Process>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <_write>:
int _write(int file, char *ptr, int len)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 1000);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e70:	68b9      	ldr	r1, [r7, #8]
 8000e72:	4804      	ldr	r0, [pc, #16]	; (8000e84 <_write+0x28>)
 8000e74:	f004 fde0 	bl	8005a38 <HAL_UART_Transmit>
  return len;
 8000e78:	687b      	ldr	r3, [r7, #4]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200004e4 	.word	0x200004e4

08000e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e88:	b5b0      	push	{r4, r5, r7, lr}
 8000e8a:	b09c      	sub	sp, #112	; 0x70
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e8e:	f001 ffbb 	bl	8002e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e92:	f000 f885 	bl	8000fa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e96:	f000 fad9 	bl	800144c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e9a:	f000 faad 	bl	80013f8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000e9e:	f000 f8e7 	bl	8001070 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000ea2:	f000 fa7f 	bl	80013a4 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000ea6:	f000 f9ad 	bl	8001204 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000eaa:	f000 f90f 	bl	80010cc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000eae:	f000 f95d 	bl	800116c <MX_TIM2_Init>
  MX_TIM4_Init();
 8000eb2:	f000 fa29 	bl	8001308 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	LCD_init(&hi2c1);
 8000eb6:	482d      	ldr	r0, [pc, #180]	; (8000f6c <main+0xe4>)
 8000eb8:	f001 fc62 	bl	8002780 <LCD_init>
	HAL_UART_Receive_IT(&huart2, &uart2RxData, 1);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	492c      	ldr	r1, [pc, #176]	; (8000f70 <main+0xe8>)
 8000ec0:	482c      	ldr	r0, [pc, #176]	; (8000f74 <main+0xec>)
 8000ec2:	f004 fe44 	bl	8005b4e <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart1, &uart1RxData, 1);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	492b      	ldr	r1, [pc, #172]	; (8000f78 <main+0xf0>)
 8000eca:	482c      	ldr	r0, [pc, #176]	; (8000f7c <main+0xf4>)
 8000ecc:	f004 fe3f 	bl	8005b4e <HAL_UART_Receive_IT>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000ed0:	4b2b      	ldr	r3, [pc, #172]	; (8000f80 <main+0xf8>)
 8000ed2:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000ed6:	461d      	mov	r5, r3
 8000ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000edc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ee0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000ee4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f005 fdc9 	bl	8006a82 <osThreadCreate>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	4a24      	ldr	r2, [pc, #144]	; (8000f84 <main+0xfc>)
 8000ef4:	6013      	str	r3, [r2, #0]

  /* definition and creation of listenerTask */
  osThreadDef(listenerTask, ListenerTask, osPriorityNormal, 0, 128);
 8000ef6:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <main+0x100>)
 8000ef8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000efc:	461d      	mov	r5, r3
 8000efe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  listenerTaskHandle = osThreadCreate(osThread(listenerTask), NULL);
 8000f0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f005 fdb6 	bl	8006a82 <osThreadCreate>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4a1c      	ldr	r2, [pc, #112]	; (8000f8c <main+0x104>)
 8000f1a:	6013      	str	r3, [r2, #0]

  /* definition and creation of controllerTask */
  osThreadDef(controllerTask, ControllerTask, osPriorityNormal, 0, 128);
 8000f1c:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <main+0x108>)
 8000f1e:	f107 041c 	add.w	r4, r7, #28
 8000f22:	461d      	mov	r5, r3
 8000f24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controllerTaskHandle = osThreadCreate(osThread(controllerTask), NULL);
 8000f30:	f107 031c 	add.w	r3, r7, #28
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f005 fda3 	bl	8006a82 <osThreadCreate>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4a15      	ldr	r2, [pc, #84]	; (8000f94 <main+0x10c>)
 8000f40:	6013      	str	r3, [r2, #0]

  /* definition and creation of presenterTask */
  osThreadDef(presenterTask, PresenterTask, osPriorityNormal, 0, 128);
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <main+0x110>)
 8000f44:	463c      	mov	r4, r7
 8000f46:	461d      	mov	r5, r3
 8000f48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  presenterTaskHandle = osThreadCreate(osThread(presenterTask), NULL);
 8000f54:	463b      	mov	r3, r7
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f005 fd92 	bl	8006a82 <osThreadCreate>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4a0e      	ldr	r2, [pc, #56]	; (8000f9c <main+0x114>)
 8000f62:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f64:	f005 fd86 	bl	8006a74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000f68:	e7fe      	b.n	8000f68 <main+0xe0>
 8000f6a:	bf00      	nop
 8000f6c:	20000328 	.word	0x20000328
 8000f70:	2000053d 	.word	0x2000053d
 8000f74:	200004e4 	.word	0x200004e4
 8000f78:	2000053c 	.word	0x2000053c
 8000f7c:	2000049c 	.word	0x2000049c
 8000f80:	0800934c 	.word	0x0800934c
 8000f84:	2000052c 	.word	0x2000052c
 8000f88:	08009378 	.word	0x08009378
 8000f8c:	20000530 	.word	0x20000530
 8000f90:	080093a4 	.word	0x080093a4
 8000f94:	20000534 	.word	0x20000534
 8000f98:	080093d0 	.word	0x080093d0
 8000f9c:	20000538 	.word	0x20000538

08000fa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b094      	sub	sp, #80	; 0x50
 8000fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa6:	f107 0320 	add.w	r3, r7, #32
 8000faa:	2230      	movs	r2, #48	; 0x30
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f007 f98b 	bl	80082ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	4b27      	ldr	r3, [pc, #156]	; (8001068 <SystemClock_Config+0xc8>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	4a26      	ldr	r2, [pc, #152]	; (8001068 <SystemClock_Config+0xc8>)
 8000fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd4:	4b24      	ldr	r3, [pc, #144]	; (8001068 <SystemClock_Config+0xc8>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	4b21      	ldr	r3, [pc, #132]	; (800106c <SystemClock_Config+0xcc>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a20      	ldr	r2, [pc, #128]	; (800106c <SystemClock_Config+0xcc>)
 8000fea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	4b1e      	ldr	r3, [pc, #120]	; (800106c <SystemClock_Config+0xcc>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001000:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001006:	2302      	movs	r3, #2
 8001008:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800100a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800100e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001010:	2304      	movs	r3, #4
 8001012:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001014:	2364      	movs	r3, #100	; 0x64
 8001016:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001018:	2302      	movs	r3, #2
 800101a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800101c:	2304      	movs	r3, #4
 800101e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001020:	f107 0320 	add.w	r3, r7, #32
 8001024:	4618      	mov	r0, r3
 8001026:	f002 ff4f 	bl	8003ec8 <HAL_RCC_OscConfig>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001030:	f000 fb1c 	bl	800166c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001034:	230f      	movs	r3, #15
 8001036:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001038:	2302      	movs	r3, #2
 800103a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001044:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800104a:	f107 030c 	add.w	r3, r7, #12
 800104e:	2103      	movs	r1, #3
 8001050:	4618      	mov	r0, r3
 8001052:	f003 f9b1 	bl	80043b8 <HAL_RCC_ClockConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800105c:	f000 fb06 	bl	800166c <Error_Handler>
  }
}
 8001060:	bf00      	nop
 8001062:	3750      	adds	r7, #80	; 0x50
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40023800 	.word	0x40023800
 800106c:	40007000 	.word	0x40007000

08001070 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <MX_I2C1_Init+0x50>)
 8001076:	4a13      	ldr	r2, [pc, #76]	; (80010c4 <MX_I2C1_Init+0x54>)
 8001078:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <MX_I2C1_Init+0x50>)
 800107c:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <MX_I2C1_Init+0x58>)
 800107e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <MX_I2C1_Init+0x50>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <MX_I2C1_Init+0x50>)
 8001088:	2200      	movs	r2, #0
 800108a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <MX_I2C1_Init+0x50>)
 800108e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001092:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001094:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <MX_I2C1_Init+0x50>)
 8001096:	2200      	movs	r2, #0
 8001098:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MX_I2C1_Init+0x50>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <MX_I2C1_Init+0x50>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <MX_I2C1_Init+0x50>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010ac:	4804      	ldr	r0, [pc, #16]	; (80010c0 <MX_I2C1_Init+0x50>)
 80010ae:	f002 fa6d 	bl	800358c <HAL_I2C_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010b8:	f000 fad8 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000328 	.word	0x20000328
 80010c4:	40005400 	.word	0x40005400
 80010c8:	000186a0 	.word	0x000186a0

080010cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010d2:	f107 0308 	add.w	r3, r7, #8
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e0:	463b      	mov	r3, r7
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010e8:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <MX_TIM1_Init+0x98>)
 80010ea:	4a1f      	ldr	r2, [pc, #124]	; (8001168 <MX_TIM1_Init+0x9c>)
 80010ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 80010ee:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <MX_TIM1_Init+0x98>)
 80010f0:	2263      	movs	r2, #99	; 0x63
 80010f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <MX_TIM1_Init+0x98>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010fa:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <MX_TIM1_Init+0x98>)
 80010fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001100:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001102:	4b18      	ldr	r3, [pc, #96]	; (8001164 <MX_TIM1_Init+0x98>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001108:	4b16      	ldr	r3, [pc, #88]	; (8001164 <MX_TIM1_Init+0x98>)
 800110a:	2200      	movs	r2, #0
 800110c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <MX_TIM1_Init+0x98>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001114:	4813      	ldr	r0, [pc, #76]	; (8001164 <MX_TIM1_Init+0x98>)
 8001116:	f003 fba1 	bl	800485c <HAL_TIM_Base_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001120:	f000 faa4 	bl	800166c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001128:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	4619      	mov	r1, r3
 8001130:	480c      	ldr	r0, [pc, #48]	; (8001164 <MX_TIM1_Init+0x98>)
 8001132:	f003 ffe7 	bl	8005104 <HAL_TIM_ConfigClockSource>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800113c:	f000 fa96 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001148:	463b      	mov	r3, r7
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_TIM1_Init+0x98>)
 800114e:	f004 fba1 	bl	8005894 <HAL_TIMEx_MasterConfigSynchronization>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001158:	f000 fa88 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	2000037c 	.word	0x2000037c
 8001168:	40010000 	.word	0x40010000

0800116c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001172:	f107 0308 	add.w	r3, r7, #8
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001180:	463b      	mov	r3, r7
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001188:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <MX_TIM2_Init+0x94>)
 800118a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800118e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8001190:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <MX_TIM2_Init+0x94>)
 8001192:	2263      	movs	r2, #99	; 0x63
 8001194:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001196:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <MX_TIM2_Init+0x94>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800119c:	4b18      	ldr	r3, [pc, #96]	; (8001200 <MX_TIM2_Init+0x94>)
 800119e:	f04f 32ff 	mov.w	r2, #4294967295
 80011a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a4:	4b16      	ldr	r3, [pc, #88]	; (8001200 <MX_TIM2_Init+0x94>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <MX_TIM2_Init+0x94>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011b0:	4813      	ldr	r0, [pc, #76]	; (8001200 <MX_TIM2_Init+0x94>)
 80011b2:	f003 fb53 	bl	800485c <HAL_TIM_Base_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011bc:	f000 fa56 	bl	800166c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	4619      	mov	r1, r3
 80011cc:	480c      	ldr	r0, [pc, #48]	; (8001200 <MX_TIM2_Init+0x94>)
 80011ce:	f003 ff99 	bl	8005104 <HAL_TIM_ConfigClockSource>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011d8:	f000 fa48 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011dc:	2300      	movs	r3, #0
 80011de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011e4:	463b      	mov	r3, r7
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_TIM2_Init+0x94>)
 80011ea:	f004 fb53 	bl	8005894 <HAL_TIMEx_MasterConfigSynchronization>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011f4:	f000 fa3a 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200003c4 	.word	0x200003c4

08001204 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08e      	sub	sp, #56	; 0x38
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001218:	f107 0320 	add.w	r3, r7, #32
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
 8001230:	615a      	str	r2, [r3, #20]
 8001232:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001234:	4b32      	ldr	r3, [pc, #200]	; (8001300 <MX_TIM3_Init+0xfc>)
 8001236:	4a33      	ldr	r2, [pc, #204]	; (8001304 <MX_TIM3_Init+0x100>)
 8001238:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 800123a:	4b31      	ldr	r3, [pc, #196]	; (8001300 <MX_TIM3_Init+0xfc>)
 800123c:	2263      	movs	r2, #99	; 0x63
 800123e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001240:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <MX_TIM3_Init+0xfc>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001246:	4b2e      	ldr	r3, [pc, #184]	; (8001300 <MX_TIM3_Init+0xfc>)
 8001248:	f240 32e7 	movw	r2, #999	; 0x3e7
 800124c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124e:	4b2c      	ldr	r3, [pc, #176]	; (8001300 <MX_TIM3_Init+0xfc>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001254:	4b2a      	ldr	r3, [pc, #168]	; (8001300 <MX_TIM3_Init+0xfc>)
 8001256:	2200      	movs	r2, #0
 8001258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800125a:	4829      	ldr	r0, [pc, #164]	; (8001300 <MX_TIM3_Init+0xfc>)
 800125c:	f003 fafe 	bl	800485c <HAL_TIM_Base_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001266:	f000 fa01 	bl	800166c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800126a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001270:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001274:	4619      	mov	r1, r3
 8001276:	4822      	ldr	r0, [pc, #136]	; (8001300 <MX_TIM3_Init+0xfc>)
 8001278:	f003 ff44 	bl	8005104 <HAL_TIM_ConfigClockSource>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001282:	f000 f9f3 	bl	800166c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001286:	481e      	ldr	r0, [pc, #120]	; (8001300 <MX_TIM3_Init+0xfc>)
 8001288:	f003 fc1c 	bl	8004ac4 <HAL_TIM_PWM_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001292:	f000 f9eb 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800129e:	f107 0320 	add.w	r3, r7, #32
 80012a2:	4619      	mov	r1, r3
 80012a4:	4816      	ldr	r0, [pc, #88]	; (8001300 <MX_TIM3_Init+0xfc>)
 80012a6:	f004 faf5 	bl	8005894 <HAL_TIMEx_MasterConfigSynchronization>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80012b0:	f000 f9dc 	bl	800166c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b4:	2360      	movs	r3, #96	; 0x60
 80012b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	2200      	movs	r2, #0
 80012c8:	4619      	mov	r1, r3
 80012ca:	480d      	ldr	r0, [pc, #52]	; (8001300 <MX_TIM3_Init+0xfc>)
 80012cc:	f003 fe58 	bl	8004f80 <HAL_TIM_PWM_ConfigChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80012d6:	f000 f9c9 	bl	800166c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2204      	movs	r2, #4
 80012de:	4619      	mov	r1, r3
 80012e0:	4807      	ldr	r0, [pc, #28]	; (8001300 <MX_TIM3_Init+0xfc>)
 80012e2:	f003 fe4d 	bl	8004f80 <HAL_TIM_PWM_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80012ec:	f000 f9be 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012f0:	4803      	ldr	r0, [pc, #12]	; (8001300 <MX_TIM3_Init+0xfc>)
 80012f2:	f000 fa9d 	bl	8001830 <HAL_TIM_MspPostInit>

}
 80012f6:	bf00      	nop
 80012f8:	3738      	adds	r7, #56	; 0x38
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2000040c 	.word	0x2000040c
 8001304:	40000400 	.word	0x40000400

08001308 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	f107 0308 	add.w	r3, r7, #8
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	463b      	mov	r3, r7
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <MX_TIM4_Init+0x94>)
 8001326:	4a1e      	ldr	r2, [pc, #120]	; (80013a0 <MX_TIM4_Init+0x98>)
 8001328:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 800132a:	4b1c      	ldr	r3, [pc, #112]	; (800139c <MX_TIM4_Init+0x94>)
 800132c:	2263      	movs	r2, #99	; 0x63
 800132e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_TIM4_Init+0x94>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <MX_TIM4_Init+0x94>)
 8001338:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800133c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <MX_TIM4_Init+0x94>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001344:	4b15      	ldr	r3, [pc, #84]	; (800139c <MX_TIM4_Init+0x94>)
 8001346:	2200      	movs	r2, #0
 8001348:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800134a:	4814      	ldr	r0, [pc, #80]	; (800139c <MX_TIM4_Init+0x94>)
 800134c:	f003 fa86 	bl	800485c <HAL_TIM_Base_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001356:	f000 f989 	bl	800166c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	4619      	mov	r1, r3
 8001366:	480d      	ldr	r0, [pc, #52]	; (800139c <MX_TIM4_Init+0x94>)
 8001368:	f003 fecc 	bl	8005104 <HAL_TIM_ConfigClockSource>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001372:	f000 f97b 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001376:	2300      	movs	r3, #0
 8001378:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800137e:	463b      	mov	r3, r7
 8001380:	4619      	mov	r1, r3
 8001382:	4806      	ldr	r0, [pc, #24]	; (800139c <MX_TIM4_Init+0x94>)
 8001384:	f004 fa86 	bl	8005894 <HAL_TIMEx_MasterConfigSynchronization>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800138e:	f000 f96d 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000454 	.word	0x20000454
 80013a0:	40000800 	.word	0x40000800

080013a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013aa:	4a12      	ldr	r2, [pc, #72]	; (80013f4 <MX_USART1_UART_Init+0x50>)
 80013ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013c8:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013ca:	220c      	movs	r2, #12
 80013cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ce:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013dc:	f004 fadc 	bl	8005998 <HAL_UART_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013e6:	f000 f941 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	2000049c 	.word	0x2000049c
 80013f4:	40011000 	.word	0x40011000

080013f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 80013fe:	4a12      	ldr	r2, [pc, #72]	; (8001448 <MX_USART2_UART_Init+0x50>)
 8001400:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 8001404:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001408:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 800141e:	220c      	movs	r2, #12
 8001420:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 8001430:	f004 fab2 	bl	8005998 <HAL_UART_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800143a:	f000 f917 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200004e4 	.word	0x200004e4
 8001448:	40004400 	.word	0x40004400

0800144c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
 8001460:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	4b54      	ldr	r3, [pc, #336]	; (80015b8 <MX_GPIO_Init+0x16c>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a53      	ldr	r2, [pc, #332]	; (80015b8 <MX_GPIO_Init+0x16c>)
 800146c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b51      	ldr	r3, [pc, #324]	; (80015b8 <MX_GPIO_Init+0x16c>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b4d      	ldr	r3, [pc, #308]	; (80015b8 <MX_GPIO_Init+0x16c>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a4c      	ldr	r2, [pc, #304]	; (80015b8 <MX_GPIO_Init+0x16c>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b4a      	ldr	r3, [pc, #296]	; (80015b8 <MX_GPIO_Init+0x16c>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	4b46      	ldr	r3, [pc, #280]	; (80015b8 <MX_GPIO_Init+0x16c>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a45      	ldr	r2, [pc, #276]	; (80015b8 <MX_GPIO_Init+0x16c>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b43      	ldr	r3, [pc, #268]	; (80015b8 <MX_GPIO_Init+0x16c>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	4b3f      	ldr	r3, [pc, #252]	; (80015b8 <MX_GPIO_Init+0x16c>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a3e      	ldr	r2, [pc, #248]	; (80015b8 <MX_GPIO_Init+0x16c>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b3c      	ldr	r3, [pc, #240]	; (80015b8 <MX_GPIO_Init+0x16c>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_7, GPIO_PIN_RESET);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2185      	movs	r1, #133	; 0x85
 80014d6:	4839      	ldr	r0, [pc, #228]	; (80015bc <MX_GPIO_Init+0x170>)
 80014d8:	f002 f80c 	bl	80034f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80014dc:	2200      	movs	r2, #0
 80014de:	f44f 7148 	mov.w	r1, #800	; 0x320
 80014e2:	4837      	ldr	r0, [pc, #220]	; (80015c0 <MX_GPIO_Init+0x174>)
 80014e4:	f002 f806 	bl	80034f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_13, GPIO_PIN_RESET);
 80014e8:	2200      	movs	r2, #0
 80014ea:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 80014ee:	4835      	ldr	r0, [pc, #212]	; (80015c4 <MX_GPIO_Init+0x178>)
 80014f0:	f002 f800 	bl	80034f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC2 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_7;
 80014f4:	2385      	movs	r3, #133	; 0x85
 80014f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	482c      	ldr	r0, [pc, #176]	; (80015bc <MX_GPIO_Init+0x170>)
 800150c:	f001 fe56 	bl	80031bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC3 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8001510:	231a      	movs	r3, #26
 8001512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001514:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	4825      	ldr	r0, [pc, #148]	; (80015bc <MX_GPIO_Init+0x170>)
 8001526:	f001 fe49 	bl	80031bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 800152a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800152e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001530:	2301      	movs	r3, #1
 8001532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4619      	mov	r1, r3
 8001542:	481f      	ldr	r0, [pc, #124]	; (80015c0 <MX_GPIO_Init+0x174>)
 8001544:	f001 fe3a 	bl	80031bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13;
 8001548:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800154c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154e:	2301      	movs	r3, #1
 8001550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	2300      	movs	r3, #0
 8001558:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	4619      	mov	r1, r3
 8001560:	4818      	ldr	r0, [pc, #96]	; (80015c4 <MX_GPIO_Init+0x178>)
 8001562:	f001 fe2b 	bl	80031bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001566:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800156a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800156c:	2300      	movs	r3, #0
 800156e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	4619      	mov	r1, r3
 800157a:	4810      	ldr	r0, [pc, #64]	; (80015bc <MX_GPIO_Init+0x170>)
 800157c:	f001 fe1e 	bl	80031bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001580:	2200      	movs	r2, #0
 8001582:	2105      	movs	r1, #5
 8001584:	2007      	movs	r0, #7
 8001586:	f001 fd5d 	bl	8003044 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800158a:	2007      	movs	r0, #7
 800158c:	f001 fd76 	bl	800307c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001590:	2200      	movs	r2, #0
 8001592:	2105      	movs	r1, #5
 8001594:	2009      	movs	r0, #9
 8001596:	f001 fd55 	bl	8003044 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800159a:	2009      	movs	r0, #9
 800159c:	f001 fd6e 	bl	800307c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2105      	movs	r1, #5
 80015a4:	200a      	movs	r0, #10
 80015a6:	f001 fd4d 	bl	8003044 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80015aa:	200a      	movs	r0, #10
 80015ac:	f001 fd66 	bl	800307c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015b0:	bf00      	nop
 80015b2:	3728      	adds	r7, #40	; 0x28
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020800 	.word	0x40020800
 80015c0:	40020000 	.word	0x40020000
 80015c4:	40020400 	.word	0x40020400

080015c8 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80015d0:	2120      	movs	r1, #32
 80015d2:	4804      	ldr	r0, [pc, #16]	; (80015e4 <StartDefaultTask+0x1c>)
 80015d4:	f001 ffa7 	bl	8003526 <HAL_GPIO_TogglePin>
		osDelay(500);
 80015d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015dc:	f005 fa9d 	bl	8006b1a <osDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80015e0:	e7f6      	b.n	80015d0 <StartDefaultTask+0x8>
 80015e2:	bf00      	nop
 80015e4:	40020000 	.word	0x40020000

080015e8 <ListenerTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ListenerTask */
void ListenerTask(void const * argument)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ListenerTask */
	Listner_init(&htim1, &htim2 ,&htim4);
 80015f0:	4a06      	ldr	r2, [pc, #24]	; (800160c <ListenerTask+0x24>)
 80015f2:	4907      	ldr	r1, [pc, #28]	; (8001610 <ListenerTask+0x28>)
 80015f4:	4807      	ldr	r0, [pc, #28]	; (8001614 <ListenerTask+0x2c>)
 80015f6:	f000 fcaf 	bl	8001f58 <Listner_init>
	/* Infinite loop */
	for (;;) {
		Listener_Button();
 80015fa:	f000 fd2f 	bl	800205c <Listener_Button>
		Listener_UltraSonic_Distance();
 80015fe:	f000 fd4d 	bl	800209c <Listener_UltraSonic_Distance>
		osDelay(100);
 8001602:	2064      	movs	r0, #100	; 0x64
 8001604:	f005 fa89 	bl	8006b1a <osDelay>
		Listener_Button();
 8001608:	e7f7      	b.n	80015fa <ListenerTask+0x12>
 800160a:	bf00      	nop
 800160c:	20000454 	.word	0x20000454
 8001610:	200003c4 	.word	0x200003c4
 8001614:	2000037c 	.word	0x2000037c

08001618 <ControllerTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ControllerTask */
void ControllerTask(void const * argument)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ControllerTask */
	Controller_init();
 8001620:	f000 fb6f 	bl	8001d02 <Controller_init>
	/* Infinite loop */
	for (;;) {
		Controller_excuteTask();
 8001624:	f000 fb76 	bl	8001d14 <Controller_excuteTask>
		osDelay(1);
 8001628:	2001      	movs	r0, #1
 800162a:	f005 fa76 	bl	8006b1a <osDelay>
		Controller_excuteTask();
 800162e:	e7f9      	b.n	8001624 <ControllerTask+0xc>

08001630 <PresenterTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_PresenterTask */
void PresenterTask(void const * argument)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PresenterTask */
	Presenter_Init();
 8001638:	f000 fee0 	bl	80023fc <Presenter_Init>
	/* Infinite loop */
	for (;;) {
		Presenter_excuteTask();
 800163c:	f000 ff16 	bl	800246c <Presenter_excuteTask>
		osDelay(1);
 8001640:	2001      	movs	r0, #1
 8001642:	f005 fa6a 	bl	8006b1a <osDelay>
		Presenter_excuteTask();
 8001646:	e7f9      	b.n	800163c <PresenterTask+0xc>

08001648 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a04      	ldr	r2, [pc, #16]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d101      	bne.n	800165e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800165a:	f001 fbf7 	bl	8002e4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40014800 	.word	0x40014800

0800166c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001670:	b672      	cpsid	i
}
 8001672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001674:	e7fe      	b.n	8001674 <Error_Handler+0x8>
	...

08001678 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_MspInit+0x54>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	4a11      	ldr	r2, [pc, #68]	; (80016cc <HAL_MspInit+0x54>)
 8001688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800168c:	6453      	str	r3, [r2, #68]	; 0x44
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <HAL_MspInit+0x54>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	603b      	str	r3, [r7, #0]
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <HAL_MspInit+0x54>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <HAL_MspInit+0x54>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a8:	6413      	str	r3, [r2, #64]	; 0x40
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <HAL_MspInit+0x54>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	210f      	movs	r1, #15
 80016ba:	f06f 0001 	mvn.w	r0, #1
 80016be:	f001 fcc1 	bl	8003044 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800

080016d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a19      	ldr	r2, [pc, #100]	; (8001754 <HAL_I2C_MspInit+0x84>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d12c      	bne.n	800174c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	4b18      	ldr	r3, [pc, #96]	; (8001758 <HAL_I2C_MspInit+0x88>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a17      	ldr	r2, [pc, #92]	; (8001758 <HAL_I2C_MspInit+0x88>)
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <HAL_I2C_MspInit+0x88>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800170e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001714:	2312      	movs	r3, #18
 8001716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001720:	2304      	movs	r3, #4
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4619      	mov	r1, r3
 800172a:	480c      	ldr	r0, [pc, #48]	; (800175c <HAL_I2C_MspInit+0x8c>)
 800172c:	f001 fd46 	bl	80031bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <HAL_I2C_MspInit+0x88>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	4a07      	ldr	r2, [pc, #28]	; (8001758 <HAL_I2C_MspInit+0x88>)
 800173a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800173e:	6413      	str	r3, [r2, #64]	; 0x40
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <HAL_I2C_MspInit+0x88>)
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800174c:	bf00      	nop
 800174e:	3728      	adds	r7, #40	; 0x28
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40005400 	.word	0x40005400
 8001758:	40023800 	.word	0x40023800
 800175c:	40020400 	.word	0x40020400

08001760 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a2c      	ldr	r2, [pc, #176]	; (8001820 <HAL_TIM_Base_MspInit+0xc0>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d116      	bne.n	80017a0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	4b2b      	ldr	r3, [pc, #172]	; (8001824 <HAL_TIM_Base_MspInit+0xc4>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	4a2a      	ldr	r2, [pc, #168]	; (8001824 <HAL_TIM_Base_MspInit+0xc4>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6453      	str	r3, [r2, #68]	; 0x44
 8001782:	4b28      	ldr	r3, [pc, #160]	; (8001824 <HAL_TIM_Base_MspInit+0xc4>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	210f      	movs	r1, #15
 8001792:	201a      	movs	r0, #26
 8001794:	f001 fc56 	bl	8003044 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001798:	201a      	movs	r0, #26
 800179a:	f001 fc6f 	bl	800307c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800179e:	e03a      	b.n	8001816 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a8:	d10e      	bne.n	80017c8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <HAL_TIM_Base_MspInit+0xc4>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <HAL_TIM_Base_MspInit+0xc4>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ba:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <HAL_TIM_Base_MspInit+0xc4>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]
}
 80017c6:	e026      	b.n	8001816 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a16      	ldr	r2, [pc, #88]	; (8001828 <HAL_TIM_Base_MspInit+0xc8>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d10e      	bne.n	80017f0 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	4b13      	ldr	r3, [pc, #76]	; (8001824 <HAL_TIM_Base_MspInit+0xc4>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	4a12      	ldr	r2, [pc, #72]	; (8001824 <HAL_TIM_Base_MspInit+0xc4>)
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	6413      	str	r3, [r2, #64]	; 0x40
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <HAL_TIM_Base_MspInit+0xc4>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
}
 80017ee:	e012      	b.n	8001816 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a0d      	ldr	r2, [pc, #52]	; (800182c <HAL_TIM_Base_MspInit+0xcc>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d10d      	bne.n	8001816 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	4b09      	ldr	r3, [pc, #36]	; (8001824 <HAL_TIM_Base_MspInit+0xc4>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	4a08      	ldr	r2, [pc, #32]	; (8001824 <HAL_TIM_Base_MspInit+0xc4>)
 8001804:	f043 0304 	orr.w	r3, r3, #4
 8001808:	6413      	str	r3, [r2, #64]	; 0x40
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_TIM_Base_MspInit+0xc4>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
}
 8001816:	bf00      	nop
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40010000 	.word	0x40010000
 8001824:	40023800 	.word	0x40023800
 8001828:	40000400 	.word	0x40000400
 800182c:	40000800 	.word	0x40000800

08001830 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a12      	ldr	r2, [pc, #72]	; (8001898 <HAL_TIM_MspPostInit+0x68>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d11d      	bne.n	800188e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <HAL_TIM_MspPostInit+0x6c>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a10      	ldr	r2, [pc, #64]	; (800189c <HAL_TIM_MspPostInit+0x6c>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <HAL_TIM_MspPostInit+0x6c>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800186e:	23c0      	movs	r3, #192	; 0xc0
 8001870:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	2302      	movs	r3, #2
 8001874:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2300      	movs	r3, #0
 800187c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800187e:	2302      	movs	r3, #2
 8001880:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001882:	f107 030c 	add.w	r3, r7, #12
 8001886:	4619      	mov	r1, r3
 8001888:	4805      	ldr	r0, [pc, #20]	; (80018a0 <HAL_TIM_MspPostInit+0x70>)
 800188a:	f001 fc97 	bl	80031bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800188e:	bf00      	nop
 8001890:	3720      	adds	r7, #32
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40000400 	.word	0x40000400
 800189c:	40023800 	.word	0x40023800
 80018a0:	40020000 	.word	0x40020000

080018a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08c      	sub	sp, #48	; 0x30
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a49      	ldr	r2, [pc, #292]	; (80019e8 <HAL_UART_MspInit+0x144>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d153      	bne.n	800196e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	61bb      	str	r3, [r7, #24]
 80018ca:	4b48      	ldr	r3, [pc, #288]	; (80019ec <HAL_UART_MspInit+0x148>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	4a47      	ldr	r2, [pc, #284]	; (80019ec <HAL_UART_MspInit+0x148>)
 80018d0:	f043 0310 	orr.w	r3, r3, #16
 80018d4:	6453      	str	r3, [r2, #68]	; 0x44
 80018d6:	4b45      	ldr	r3, [pc, #276]	; (80019ec <HAL_UART_MspInit+0x148>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	f003 0310 	and.w	r3, r3, #16
 80018de:	61bb      	str	r3, [r7, #24]
 80018e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	4b41      	ldr	r3, [pc, #260]	; (80019ec <HAL_UART_MspInit+0x148>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a40      	ldr	r2, [pc, #256]	; (80019ec <HAL_UART_MspInit+0x148>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b3e      	ldr	r3, [pc, #248]	; (80019ec <HAL_UART_MspInit+0x148>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	4b3a      	ldr	r3, [pc, #232]	; (80019ec <HAL_UART_MspInit+0x148>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a39      	ldr	r2, [pc, #228]	; (80019ec <HAL_UART_MspInit+0x148>)
 8001908:	f043 0302 	orr.w	r3, r3, #2
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b37      	ldr	r3, [pc, #220]	; (80019ec <HAL_UART_MspInit+0x148>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800191a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800191e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001928:	2303      	movs	r3, #3
 800192a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800192c:	2307      	movs	r3, #7
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001930:	f107 031c 	add.w	r3, r7, #28
 8001934:	4619      	mov	r1, r3
 8001936:	482e      	ldr	r0, [pc, #184]	; (80019f0 <HAL_UART_MspInit+0x14c>)
 8001938:	f001 fc40 	bl	80031bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800193c:	2340      	movs	r3, #64	; 0x40
 800193e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001940:	2302      	movs	r3, #2
 8001942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001948:	2303      	movs	r3, #3
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800194c:	2307      	movs	r3, #7
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001950:	f107 031c 	add.w	r3, r7, #28
 8001954:	4619      	mov	r1, r3
 8001956:	4827      	ldr	r0, [pc, #156]	; (80019f4 <HAL_UART_MspInit+0x150>)
 8001958:	f001 fc30 	bl	80031bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800195c:	2200      	movs	r2, #0
 800195e:	2105      	movs	r1, #5
 8001960:	2025      	movs	r0, #37	; 0x25
 8001962:	f001 fb6f 	bl	8003044 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001966:	2025      	movs	r0, #37	; 0x25
 8001968:	f001 fb88 	bl	800307c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800196c:	e038      	b.n	80019e0 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a21      	ldr	r2, [pc, #132]	; (80019f8 <HAL_UART_MspInit+0x154>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d133      	bne.n	80019e0 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <HAL_UART_MspInit+0x148>)
 800197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001980:	4a1a      	ldr	r2, [pc, #104]	; (80019ec <HAL_UART_MspInit+0x148>)
 8001982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001986:	6413      	str	r3, [r2, #64]	; 0x40
 8001988:	4b18      	ldr	r3, [pc, #96]	; (80019ec <HAL_UART_MspInit+0x148>)
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001994:	2300      	movs	r3, #0
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	4b14      	ldr	r3, [pc, #80]	; (80019ec <HAL_UART_MspInit+0x148>)
 800199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199c:	4a13      	ldr	r2, [pc, #76]	; (80019ec <HAL_UART_MspInit+0x148>)
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	6313      	str	r3, [r2, #48]	; 0x30
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <HAL_UART_MspInit+0x148>)
 80019a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019b0:	230c      	movs	r3, #12
 80019b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019c0:	2307      	movs	r3, #7
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c4:	f107 031c 	add.w	r3, r7, #28
 80019c8:	4619      	mov	r1, r3
 80019ca:	4809      	ldr	r0, [pc, #36]	; (80019f0 <HAL_UART_MspInit+0x14c>)
 80019cc:	f001 fbf6 	bl	80031bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2105      	movs	r1, #5
 80019d4:	2026      	movs	r0, #38	; 0x26
 80019d6:	f001 fb35 	bl	8003044 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019da:	2026      	movs	r0, #38	; 0x26
 80019dc:	f001 fb4e 	bl	800307c <HAL_NVIC_EnableIRQ>
}
 80019e0:	bf00      	nop
 80019e2:	3730      	adds	r7, #48	; 0x30
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40011000 	.word	0x40011000
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40020000 	.word	0x40020000
 80019f4:	40020400 	.word	0x40020400
 80019f8:	40004400 	.word	0x40004400

080019fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08c      	sub	sp, #48	; 0x30
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	4b2e      	ldr	r3, [pc, #184]	; (8001acc <HAL_InitTick+0xd0>)
 8001a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a14:	4a2d      	ldr	r2, [pc, #180]	; (8001acc <HAL_InitTick+0xd0>)
 8001a16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a1a:	6453      	str	r3, [r2, #68]	; 0x44
 8001a1c:	4b2b      	ldr	r3, [pc, #172]	; (8001acc <HAL_InitTick+0xd0>)
 8001a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a28:	f107 020c 	add.w	r2, r7, #12
 8001a2c:	f107 0310 	add.w	r3, r7, #16
 8001a30:	4611      	mov	r1, r2
 8001a32:	4618      	mov	r0, r3
 8001a34:	f002 fee0 	bl	80047f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001a38:	f002 feca 	bl	80047d0 <HAL_RCC_GetPCLK2Freq>
 8001a3c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a40:	4a23      	ldr	r2, [pc, #140]	; (8001ad0 <HAL_InitTick+0xd4>)
 8001a42:	fba2 2303 	umull	r2, r3, r2, r3
 8001a46:	0c9b      	lsrs	r3, r3, #18
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001a4c:	4b21      	ldr	r3, [pc, #132]	; (8001ad4 <HAL_InitTick+0xd8>)
 8001a4e:	4a22      	ldr	r2, [pc, #136]	; (8001ad8 <HAL_InitTick+0xdc>)
 8001a50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8001a52:	4b20      	ldr	r3, [pc, #128]	; (8001ad4 <HAL_InitTick+0xd8>)
 8001a54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a58:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8001a5a:	4a1e      	ldr	r2, [pc, #120]	; (8001ad4 <HAL_InitTick+0xd8>)
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001a60:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <HAL_InitTick+0xd8>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a66:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <HAL_InitTick+0xd8>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6c:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <HAL_InitTick+0xd8>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8001a72:	4818      	ldr	r0, [pc, #96]	; (8001ad4 <HAL_InitTick+0xd8>)
 8001a74:	f002 fef2 	bl	800485c <HAL_TIM_Base_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001a7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d11b      	bne.n	8001abe <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8001a86:	4813      	ldr	r0, [pc, #76]	; (8001ad4 <HAL_InitTick+0xd8>)
 8001a88:	f002 ffba 	bl	8004a00 <HAL_TIM_Base_Start_IT>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001a92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d111      	bne.n	8001abe <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001a9a:	201a      	movs	r0, #26
 8001a9c:	f001 faee 	bl	800307c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b0f      	cmp	r3, #15
 8001aa4:	d808      	bhi.n	8001ab8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	201a      	movs	r0, #26
 8001aac:	f001 faca 	bl	8003044 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ab0:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <HAL_InitTick+0xe0>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e002      	b.n	8001abe <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001abe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3730      	adds	r7, #48	; 0x30
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	431bde83 	.word	0x431bde83
 8001ad4:	20000540 	.word	0x20000540
 8001ad8:	40014800 	.word	0x40014800
 8001adc:	20000004 	.word	0x20000004

08001ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <NMI_Handler+0x4>

08001ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aea:	e7fe      	b.n	8001aea <HardFault_Handler+0x4>

08001aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <MemManage_Handler+0x4>

08001af2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af6:	e7fe      	b.n	8001af6 <BusFault_Handler+0x4>

08001af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <UsageFault_Handler+0x4>

08001afe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001b10:	2002      	movs	r0, #2
 8001b12:	f001 fd23 	bl	800355c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001b1e:	2008      	movs	r0, #8
 8001b20:	f001 fd1c 	bl	800355c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001b2c:	2010      	movs	r0, #16
 8001b2e:	f001 fd15 	bl	800355c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b3c:	4803      	ldr	r0, [pc, #12]	; (8001b4c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8001b3e:	f003 f92f 	bl	8004da0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8001b42:	4803      	ldr	r0, [pc, #12]	; (8001b50 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001b44:	f003 f92c 	bl	8004da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	2000037c 	.word	0x2000037c
 8001b50:	20000540 	.word	0x20000540

08001b54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <USART1_IRQHandler+0x10>)
 8001b5a:	f004 f81d 	bl	8005b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	2000049c 	.word	0x2000049c

08001b68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b6c:	4802      	ldr	r0, [pc, #8]	; (8001b78 <USART2_IRQHandler+0x10>)
 8001b6e:	f004 f813 	bl	8005b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200004e4 	.word	0x200004e4

08001b7c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	e00a      	b.n	8001ba4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b8e:	f3af 8000 	nop.w
 8001b92:	4601      	mov	r1, r0
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	60ba      	str	r2, [r7, #8]
 8001b9a:	b2ca      	uxtb	r2, r1
 8001b9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	dbf0      	blt.n	8001b8e <_read+0x12>
  }

  return len;
 8001bac:	687b      	ldr	r3, [r7, #4]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bde:	605a      	str	r2, [r3, #4]
  return 0;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <_isatty>:

int _isatty(int file)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bf6:	2301      	movs	r3, #1
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
	...

08001c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c28:	4a14      	ldr	r2, [pc, #80]	; (8001c7c <_sbrk+0x5c>)
 8001c2a:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <_sbrk+0x60>)
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c34:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <_sbrk+0x64>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d102      	bne.n	8001c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <_sbrk+0x64>)
 8001c3e:	4a12      	ldr	r2, [pc, #72]	; (8001c88 <_sbrk+0x68>)
 8001c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <_sbrk+0x64>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d207      	bcs.n	8001c60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c50:	f006 fbe0 	bl	8008414 <__errno>
 8001c54:	4603      	mov	r3, r0
 8001c56:	220c      	movs	r2, #12
 8001c58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5e:	e009      	b.n	8001c74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c60:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <_sbrk+0x64>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c66:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <_sbrk+0x64>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	4a05      	ldr	r2, [pc, #20]	; (8001c84 <_sbrk+0x64>)
 8001c70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c72:	68fb      	ldr	r3, [r7, #12]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20020000 	.word	0x20020000
 8001c80:	00000400 	.word	0x00000400
 8001c84:	20000588 	.word	0x20000588
 8001c88:	20004578 	.word	0x20004578

08001c8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <SystemInit+0x20>)
 8001c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c96:	4a05      	ldr	r2, [pc, #20]	; (8001cac <SystemInit+0x20>)
 8001c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ce8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cb4:	f7ff ffea 	bl	8001c8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cb8:	480c      	ldr	r0, [pc, #48]	; (8001cec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cba:	490d      	ldr	r1, [pc, #52]	; (8001cf0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cbc:	4a0d      	ldr	r2, [pc, #52]	; (8001cf4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc0:	e002      	b.n	8001cc8 <LoopCopyDataInit>

08001cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cc6:	3304      	adds	r3, #4

08001cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ccc:	d3f9      	bcc.n	8001cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cce:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cd0:	4c0a      	ldr	r4, [pc, #40]	; (8001cfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd4:	e001      	b.n	8001cda <LoopFillZerobss>

08001cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd8:	3204      	adds	r2, #4

08001cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cdc:	d3fb      	bcc.n	8001cd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cde:	f006 fb9f 	bl	8008420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ce2:	f7ff f8d1 	bl	8000e88 <main>
  bx  lr    
 8001ce6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ce8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001cf4:	0800960c 	.word	0x0800960c
  ldr r2, =_sbss
 8001cf8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001cfc:	20004574 	.word	0x20004574

08001d00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d00:	e7fe      	b.n	8001d00 <ADC_IRQHandler>

08001d02 <Controller_init>:
#include <stdlib.h>
#include <stdio.h>

MODE_t CMode;

void Controller_init() {
 8001d02:	b580      	push	{r7, lr}
 8001d04:	af00      	add	r7, sp, #0
	BT_init();
 8001d06:	f000 fa37 	bl	8002178 <BT_init>
	MotorState_init();
 8001d0a:	f000 fab9 	bl	8002280 <MotorState_init>
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <Controller_excuteTask>:

void Controller_excuteTask() {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
	CMode.Modestate = ModeState_get();
 8001d18:	f000 fa8a 	bl	8002230 <ModeState_get>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <Controller_excuteTask+0x24>)
 8001d22:	701a      	strb	r2, [r3, #0]

	Controller_BTData();
 8001d24:	f000 f80a 	bl	8001d3c <Controller_BTData>
	if (CMode.Modestate == AUTO) {
 8001d28:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <Controller_excuteTask+0x24>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d101      	bne.n	8001d34 <Controller_excuteTask+0x20>
		Controller_Auto_DistanceState();
 8001d30:	f000 f8d2 	bl	8001ed8 <Controller_Auto_DistanceState>
	}
}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	2000058c 	.word	0x2000058c

08001d3c <Controller_BTData>:

void Controller_BTData() {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
	int BTflag = BT_getFlag();
 8001d42:	f000 fa4b 	bl	80021dc <BT_getFlag>
 8001d46:	60f8      	str	r0, [r7, #12]
	if (!BTflag) return;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00f      	beq.n	8001d6e <Controller_BTData+0x32>

	uint8_t rxBuff[10];

	Controller_getData(rxBuff); //Uart data rxBuff에 저장
 8001d4e:	463b      	mov	r3, r7
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 f810 	bl	8001d76 <Controller_getData>
	Controller_Mode_parsingData(rxBuff);	//Buff에 저장된 값 판단
 8001d56:	463b      	mov	r3, r7
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 f841 	bl	8001de0 <Controller_Mode_parsingData>
	Controller_Mode_decision(rxBuff);	//모드 결정하여 나머지 파싱 실행
 8001d5e:	463b      	mov	r3, r7
 8001d60:	4618      	mov	r0, r3
 8001d62:	f000 f825 	bl	8001db0 <Controller_Mode_decision>

	BT_setFlag(BTRESET);
 8001d66:	2000      	movs	r0, #0
 8001d68:	f000 fa2a 	bl	80021c0 <BT_setFlag>
 8001d6c:	e000      	b.n	8001d70 <Controller_BTData+0x34>
	if (!BTflag) return;
 8001d6e:	bf00      	nop
}
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <Controller_getData>:
void Controller_getData(uint8_t *Buff) {
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b084      	sub	sp, #16
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
	uint8_t rxData = 1;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	73fb      	strb	r3, [r7, #15]

	for (int i = 0; rxData; i++) {
 8001d82:	2300      	movs	r3, #0
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	e00b      	b.n	8001da0 <Controller_getData+0x2a>
		rxData = BT_deQue();
 8001d88:	f000 fa10 	bl	80021ac <BT_deQue>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	73fb      	strb	r3, [r7, #15]
		Buff[i] = rxData;
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	7bfa      	ldrb	r2, [r7, #15]
 8001d98:	701a      	strb	r2, [r3, #0]
	for (int i = 0; rxData; i++) {
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f0      	bne.n	8001d88 <Controller_getData+0x12>
	}
}
 8001da6:	bf00      	nop
 8001da8:	bf00      	nop
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <Controller_Mode_decision>:

void Controller_Mode_decision(uint8_t *Buff) {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]

	if (CMode.Modestate == MANUAL) {
 8001db8:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <Controller_Mode_decision+0x2c>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d102      	bne.n	8001dc6 <Controller_Mode_decision+0x16>
		Controller_Manual_parsingData(Buff); //Buff에 저장된 값 판단
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f829 	bl	8001e18 <Controller_Manual_parsingData>
	}
	if (CMode.Modestate == AUTO) {
 8001dc6:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <Controller_Mode_decision+0x2c>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d102      	bne.n	8001dd4 <Controller_Mode_decision+0x24>
		//UltraSonic 계산 추가
		Controller_Auto_parsingData(Buff); //Buff에 저장된 값 판단
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f865 	bl	8001e9e <Controller_Auto_parsingData>
	}
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	2000058c 	.word	0x2000058c

08001de0 <Controller_Mode_parsingData>:

void Controller_Mode_parsingData(uint8_t *Buff) {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	if (Buff[0] == 'm') {
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b6d      	cmp	r3, #109	; 0x6d
 8001dee:	d105      	bne.n	8001dfc <Controller_Mode_parsingData+0x1c>
		ModeState_set(MANUAL);
 8001df0:	2000      	movs	r0, #0
 8001df2:	f000 fa0d 	bl	8002210 <ModeState_set>
		ModeState_setFlag(MANUALFlag);
 8001df6:	2001      	movs	r0, #1
 8001df8:	f000 fa26 	bl	8002248 <ModeState_setFlag>
	}
	if (Buff[0] == 'a') {
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b61      	cmp	r3, #97	; 0x61
 8001e02:	d105      	bne.n	8001e10 <Controller_Mode_parsingData+0x30>
		ModeState_set(AUTO);
 8001e04:	2001      	movs	r0, #1
 8001e06:	f000 fa03 	bl	8002210 <ModeState_set>
		ModeState_setFlag(AUTOFlag);
 8001e0a:	2002      	movs	r0, #2
 8001e0c:	f000 fa1c 	bl	8002248 <ModeState_setFlag>
	}
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <Controller_Manual_parsingData>:

void Controller_Manual_parsingData(uint8_t *Buff) {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
	if (Buff[0] == 'g') {	//go
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b67      	cmp	r3, #103	; 0x67
 8001e26:	d103      	bne.n	8001e30 <Controller_Manual_parsingData+0x18>
		MotorManualState_set(GO);
 8001e28:	2002      	movs	r0, #2
 8001e2a:	f000 fa57 	bl	80022dc <MotorManualState_set>
 8001e2e:	e02f      	b.n	8001e90 <Controller_Manual_parsingData+0x78>
	}
	else if (Buff[0] == 'b') {	//back
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b62      	cmp	r3, #98	; 0x62
 8001e36:	d103      	bne.n	8001e40 <Controller_Manual_parsingData+0x28>
		MotorManualState_set(BACK);
 8001e38:	2005      	movs	r0, #5
 8001e3a:	f000 fa4f 	bl	80022dc <MotorManualState_set>
 8001e3e:	e027      	b.n	8001e90 <Controller_Manual_parsingData+0x78>
	}
	else if (Buff[0] == 'l') {	//left
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b6c      	cmp	r3, #108	; 0x6c
 8001e46:	d103      	bne.n	8001e50 <Controller_Manual_parsingData+0x38>
		MotorManualState_set(LEFT);
 8001e48:	2003      	movs	r0, #3
 8001e4a:	f000 fa47 	bl	80022dc <MotorManualState_set>
 8001e4e:	e01f      	b.n	8001e90 <Controller_Manual_parsingData+0x78>
	}
	else if (Buff[0] == 'r') {	//right
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b72      	cmp	r3, #114	; 0x72
 8001e56:	d103      	bne.n	8001e60 <Controller_Manual_parsingData+0x48>
		MotorManualState_set(RIGHT);
 8001e58:	2004      	movs	r0, #4
 8001e5a:	f000 fa3f 	bl	80022dc <MotorManualState_set>
 8001e5e:	e017      	b.n	8001e90 <Controller_Manual_parsingData+0x78>
	}
	else if (Buff[0] == 's') {	//stop
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b73      	cmp	r3, #115	; 0x73
 8001e66:	d103      	bne.n	8001e70 <Controller_Manual_parsingData+0x58>
		MotorManualState_set(STOP);
 8001e68:	2001      	movs	r0, #1
 8001e6a:	f000 fa37 	bl	80022dc <MotorManualState_set>
 8001e6e:	e00f      	b.n	8001e90 <Controller_Manual_parsingData+0x78>
	}
	else if (Buff[0] == 'p') {	//speed p98'0'
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b70      	cmp	r3, #112	; 0x70
 8001e76:	d10b      	bne.n	8001e90 <Controller_Manual_parsingData+0x78>
		MotorManualState_set(SPEED);
 8001e78:	2006      	movs	r0, #6
 8001e7a:	f000 fa2f 	bl	80022dc <MotorManualState_set>
		int speed = atoi(&Buff[1]);	//해당 주소부터 숫자가 아닌 것까지 계산
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3301      	adds	r3, #1
 8001e82:	4618      	mov	r0, r3
 8001e84:	f006 f85a 	bl	8007f3c <atoi>
 8001e88:	60f8      	str	r0, [r7, #12]
		MotorState_setSpeed(speed);
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f000 fa0a 	bl	80022a4 <MotorState_setSpeed>
	}
	MotorState_setFlag(SET);
 8001e90:	2001      	movs	r0, #1
 8001e92:	f000 fa3f 	bl	8002314 <MotorState_setFlag>
}
 8001e96:	bf00      	nop
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <Controller_Auto_parsingData>:

void Controller_Auto_parsingData(uint8_t *Buff) {
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
	if (Buff[0] == 's') {	//응급 상황시 사람이 stop
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b73      	cmp	r3, #115	; 0x73
 8001eac:	d102      	bne.n	8001eb4 <Controller_Auto_parsingData+0x16>
		MotorAutoState_set(STOP);
 8001eae:	2001      	movs	r0, #1
 8001eb0:	f000 fa4c 	bl	800234c <MotorAutoState_set>
	}
	if (Buff[0] == 'n') {	//Auto Run
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b6e      	cmp	r3, #110	; 0x6e
 8001eba:	d106      	bne.n	8001eca <Controller_Auto_parsingData+0x2c>
		MotorState_setSpeed(550);
 8001ebc:	f240 2026 	movw	r0, #550	; 0x226
 8001ec0:	f000 f9f0 	bl	80022a4 <MotorState_setSpeed>
		MotorAutoState_set(NONE);
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f000 fa41 	bl	800234c <MotorAutoState_set>
	}
	MotorState_setFlag(SET);
 8001eca:	2001      	movs	r0, #1
 8001ecc:	f000 fa22 	bl	8002314 <MotorState_setFlag>
}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <Controller_Auto_DistanceState>:

void Controller_Auto_DistanceState() {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
	static int OldautoState;
	int autoState = MotorAutoState_get();
 8001ede:	f000 fa45 	bl	800236c <MotorAutoState_get>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	60fb      	str	r3, [r7, #12]
	USDistance_t USDistance;
	USDistance = USDistance_get();
 8001ee6:	463b      	mov	r3, r7
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 fa75 	bl	80023d8 <USDistance_get>

	if (autoState == STOP) return;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d02b      	beq.n	8001f4c <Controller_Auto_DistanceState+0x74>

	if (USDistance.Distance_Front < 22) {
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	2b15      	cmp	r3, #21
 8001ef8:	dc0b      	bgt.n	8001f12 <Controller_Auto_DistanceState+0x3a>
		if (USDistance.Distance_Left < USDistance.Distance_Right) {
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	da03      	bge.n	8001f0a <Controller_Auto_DistanceState+0x32>
			MotorAutoState_set(RIGHT);
 8001f02:	2004      	movs	r0, #4
 8001f04:	f000 fa22 	bl	800234c <MotorAutoState_set>
 8001f08:	e014      	b.n	8001f34 <Controller_Auto_DistanceState+0x5c>
		}
		else {
			MotorAutoState_set(LEFT);
 8001f0a:	2003      	movs	r0, #3
 8001f0c:	f000 fa1e 	bl	800234c <MotorAutoState_set>
 8001f10:	e010      	b.n	8001f34 <Controller_Auto_DistanceState+0x5c>
		}
	}
	else if (USDistance.Distance_Left < 27) {
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b1a      	cmp	r3, #26
 8001f16:	dc03      	bgt.n	8001f20 <Controller_Auto_DistanceState+0x48>
		MotorAutoState_set(RIGHT);
 8001f18:	2004      	movs	r0, #4
 8001f1a:	f000 fa17 	bl	800234c <MotorAutoState_set>
 8001f1e:	e009      	b.n	8001f34 <Controller_Auto_DistanceState+0x5c>
	}
	else if (USDistance.Distance_Right < 27) {
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2b1a      	cmp	r3, #26
 8001f24:	dc03      	bgt.n	8001f2e <Controller_Auto_DistanceState+0x56>
		MotorAutoState_set(LEFT);
 8001f26:	2003      	movs	r0, #3
 8001f28:	f000 fa10 	bl	800234c <MotorAutoState_set>
 8001f2c:	e002      	b.n	8001f34 <Controller_Auto_DistanceState+0x5c>
	}
	else {
		MotorAutoState_set(GO);
 8001f2e:	2002      	movs	r0, #2
 8001f30:	f000 fa0c 	bl	800234c <MotorAutoState_set>
	}
	if (OldautoState != autoState) {
 8001f34:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <Controller_Auto_DistanceState+0x7c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d007      	beq.n	8001f4e <Controller_Auto_DistanceState+0x76>
		OldautoState = autoState;
 8001f3e:	4a05      	ldr	r2, [pc, #20]	; (8001f54 <Controller_Auto_DistanceState+0x7c>)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6013      	str	r3, [r2, #0]
		MotorState_setFlag(SET);
 8001f44:	2001      	movs	r0, #1
 8001f46:	f000 f9e5 	bl	8002314 <MotorState_setFlag>
 8001f4a:	e000      	b.n	8001f4e <Controller_Auto_DistanceState+0x76>
	if (autoState == STOP) return;
 8001f4c:	bf00      	nop
	}
}
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000590 	.word	0x20000590

08001f58 <Listner_init>:
#include <stdio.h>

button_t ManualButton, AutoButton;
ultraSonic_t ultraSonic_Front,ultraSonic_Left,ultraSonic_Right;

void Listner_init(TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2 ,TIM_HandleTypeDef *htim4) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af02      	add	r7, sp, #8
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
	ModeState_init();
 8001f64:	f000 f944 	bl	80021f0 <ModeState_init>
	DelayInit();
 8001f68:	f7fe fe16 	bl	8000b98 <DelayInit>
	USDistanc_init();
 8001f6c:	f000 fa0a 	bl	8002384 <USDistanc_init>
	UltraSonic_init(&ultraSonic_Front, htim1, FRONT_GPIO_TRIG,
 8001f70:	2302      	movs	r3, #2
 8001f72:	9301      	str	r3, [sp, #4]
 8001f74:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <Listner_init+0x78>)
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	2301      	movs	r3, #1
 8001f7a:	4a15      	ldr	r2, [pc, #84]	; (8001fd0 <Listner_init+0x78>)
 8001f7c:	68f9      	ldr	r1, [r7, #12]
 8001f7e:	4815      	ldr	r0, [pc, #84]	; (8001fd4 <Listner_init+0x7c>)
 8001f80:	f000 fe2f 	bl	8002be2 <UltraSonic_init>
			FRONT_GPIO_TRIG_PIN,FRONT_GPIO_ECHO, FRONT_GPIO_ECHO_PIN);
	UltraSonic_init(&ultraSonic_Left, htim2, LEFT_GPIO_TRIG,
 8001f84:	2308      	movs	r3, #8
 8001f86:	9301      	str	r3, [sp, #4]
 8001f88:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <Listner_init+0x78>)
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	2304      	movs	r3, #4
 8001f8e:	4a10      	ldr	r2, [pc, #64]	; (8001fd0 <Listner_init+0x78>)
 8001f90:	68b9      	ldr	r1, [r7, #8]
 8001f92:	4811      	ldr	r0, [pc, #68]	; (8001fd8 <Listner_init+0x80>)
 8001f94:	f000 fe25 	bl	8002be2 <UltraSonic_init>
			LEFT_GPIO_TRIG_PIN,LEFT_GPIO_ECHO,LEFT_GPIO_ECHO_PIN);
	UltraSonic_init(&ultraSonic_Right, htim4, RIGHT_GPIO_TRIG,
 8001f98:	2310      	movs	r3, #16
 8001f9a:	9301      	str	r3, [sp, #4]
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <Listner_init+0x78>)
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fa4:	4a0d      	ldr	r2, [pc, #52]	; (8001fdc <Listner_init+0x84>)
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	480d      	ldr	r0, [pc, #52]	; (8001fe0 <Listner_init+0x88>)
 8001faa:	f000 fe1a 	bl	8002be2 <UltraSonic_init>
			RIGHT_GPIO_TRIG_PIN,RIGHT_GPIO_ECHO, RIGHT_GPIO_ECHO_PIN);
	button_init(&ManualButton, GPIOC, GPIO_PIN_10);
 8001fae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fb2:	4907      	ldr	r1, [pc, #28]	; (8001fd0 <Listner_init+0x78>)
 8001fb4:	480b      	ldr	r0, [pc, #44]	; (8001fe4 <Listner_init+0x8c>)
 8001fb6:	f000 fb97 	bl	80026e8 <button_init>
	button_init(&AutoButton, GPIOC, GPIO_PIN_11);
 8001fba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fbe:	4904      	ldr	r1, [pc, #16]	; (8001fd0 <Listner_init+0x78>)
 8001fc0:	4809      	ldr	r0, [pc, #36]	; (8001fe8 <Listner_init+0x90>)
 8001fc2:	f000 fb91 	bl	80026e8 <button_init>
}
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40020800 	.word	0x40020800
 8001fd4:	200005ac 	.word	0x200005ac
 8001fd8:	200005c4 	.word	0x200005c4
 8001fdc:	40020400 	.word	0x40020400
 8001fe0:	200005dc 	.word	0x200005dc
 8001fe4:	20000594 	.word	0x20000594
 8001fe8:	200005a0 	.word	0x200005a0

08001fec <Listener_UART_ISR_Process>:

void Listener_UART_ISR_Process(uint8_t rxData) {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
	if (rxData == ';') {
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	2b3b      	cmp	r3, #59	; 0x3b
 8001ffa:	d106      	bne.n	800200a <Listener_UART_ISR_Process+0x1e>
		BT_enQue('\0');
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	f000 f8c5 	bl	800218c <BT_enQue>
		BT_setFlag(BTSET);
 8002002:	2001      	movs	r0, #1
 8002004:	f000 f8dc 	bl	80021c0 <BT_setFlag>
	}
	else {
		BT_enQue(rxData);
		BT_setFlag(BTRESET);
	}
}
 8002008:	e006      	b.n	8002018 <Listener_UART_ISR_Process+0x2c>
		BT_enQue(rxData);
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	4618      	mov	r0, r3
 800200e:	f000 f8bd 	bl	800218c <BT_enQue>
		BT_setFlag(BTRESET);
 8002012:	2000      	movs	r0, #0
 8002014:	f000 f8d4 	bl	80021c0 <BT_setFlag>
}
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <Listener_US_ISR_Process>:

void Listener_US_ISR_Process(uint16_t GPIO_Pin) {
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	80fb      	strh	r3, [r7, #6]
	UltraSonic_ISR_Process(&ultraSonic_Front, GPIO_Pin);
 800202a:	88fb      	ldrh	r3, [r7, #6]
 800202c:	4619      	mov	r1, r3
 800202e:	4808      	ldr	r0, [pc, #32]	; (8002050 <Listener_US_ISR_Process+0x30>)
 8002030:	f000 fe83 	bl	8002d3a <UltraSonic_ISR_Process>
	UltraSonic_ISR_Process(&ultraSonic_Left, GPIO_Pin);
 8002034:	88fb      	ldrh	r3, [r7, #6]
 8002036:	4619      	mov	r1, r3
 8002038:	4806      	ldr	r0, [pc, #24]	; (8002054 <Listener_US_ISR_Process+0x34>)
 800203a:	f000 fe7e 	bl	8002d3a <UltraSonic_ISR_Process>
	UltraSonic_ISR_Process(&ultraSonic_Right, GPIO_Pin);
 800203e:	88fb      	ldrh	r3, [r7, #6]
 8002040:	4619      	mov	r1, r3
 8002042:	4805      	ldr	r0, [pc, #20]	; (8002058 <Listener_US_ISR_Process+0x38>)
 8002044:	f000 fe79 	bl	8002d3a <UltraSonic_ISR_Process>
}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	200005ac 	.word	0x200005ac
 8002054:	200005c4 	.word	0x200005c4
 8002058:	200005dc 	.word	0x200005dc

0800205c <Listener_Button>:

void Listener_Button() {
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
	if (button_getState(&ManualButton) == ACT_RELEASED) {
 8002060:	480c      	ldr	r0, [pc, #48]	; (8002094 <Listener_Button+0x38>)
 8002062:	f000 fb57 	bl	8002714 <button_getState>
 8002066:	4603      	mov	r3, r0
 8002068:	2b04      	cmp	r3, #4
 800206a:	d105      	bne.n	8002078 <Listener_Button+0x1c>
		ModeState_set(MANUAL);
 800206c:	2000      	movs	r0, #0
 800206e:	f000 f8cf 	bl	8002210 <ModeState_set>
		ModeState_setFlag(MANUALFlag);
 8002072:	2001      	movs	r0, #1
 8002074:	f000 f8e8 	bl	8002248 <ModeState_setFlag>
	}
	if (button_getState(&AutoButton) == ACT_RELEASED) {
 8002078:	4807      	ldr	r0, [pc, #28]	; (8002098 <Listener_Button+0x3c>)
 800207a:	f000 fb4b 	bl	8002714 <button_getState>
 800207e:	4603      	mov	r3, r0
 8002080:	2b04      	cmp	r3, #4
 8002082:	d105      	bne.n	8002090 <Listener_Button+0x34>
		ModeState_set(AUTO);
 8002084:	2001      	movs	r0, #1
 8002086:	f000 f8c3 	bl	8002210 <ModeState_set>
		ModeState_setFlag(AUTOFlag);
 800208a:	2002      	movs	r0, #2
 800208c:	f000 f8dc 	bl	8002248 <ModeState_setFlag>
	}
}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20000594 	.word	0x20000594
 8002098:	200005a0 	.word	0x200005a0

0800209c <Listener_UltraSonic_Distance>:

void Listener_UltraSonic_Distance(){
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
	int ModeState_Auto = ModeState_getFlag();
 80020a2:	f000 f8e1 	bl	8002268 <ModeState_getFlag>
 80020a6:	6078      	str	r0, [r7, #4]
		if(ModeState_Auto != AUTOFlag) return;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d149      	bne.n	8002142 <Listener_UltraSonic_Distance+0xa6>
		static int UltraSonicCount;
		static int distance_Front;
		static int distance_Left;
		static int distance_Right;

		switch (UltraSonicCount) {
 80020ae:	4b27      	ldr	r3, [pc, #156]	; (800214c <Listener_UltraSonic_Distance+0xb0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d020      	beq.n	80020f8 <Listener_UltraSonic_Distance+0x5c>
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	dc2b      	bgt.n	8002112 <Listener_UltraSonic_Distance+0x76>
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d002      	beq.n	80020c4 <Listener_UltraSonic_Distance+0x28>
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d00d      	beq.n	80020de <Listener_UltraSonic_Distance+0x42>
 80020c2:	e026      	b.n	8002112 <Listener_UltraSonic_Distance+0x76>
			case 0:
				distance_Front = UltraSonic_getDistance(&ultraSonic_Front);
 80020c4:	4822      	ldr	r0, [pc, #136]	; (8002150 <Listener_UltraSonic_Distance+0xb4>)
 80020c6:	f000 fe67 	bl	8002d98 <UltraSonic_getDistance>
 80020ca:	4603      	mov	r3, r0
 80020cc:	4a21      	ldr	r2, [pc, #132]	; (8002154 <Listener_UltraSonic_Distance+0xb8>)
 80020ce:	6013      	str	r3, [r2, #0]
				printf("F : %d", distance_Front);
 80020d0:	4b20      	ldr	r3, [pc, #128]	; (8002154 <Listener_UltraSonic_Distance+0xb8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4619      	mov	r1, r3
 80020d6:	4820      	ldr	r0, [pc, #128]	; (8002158 <Listener_UltraSonic_Distance+0xbc>)
 80020d8:	f006 f882 	bl	80081e0 <iprintf>
				break;
 80020dc:	e019      	b.n	8002112 <Listener_UltraSonic_Distance+0x76>
			case 1:
				distance_Left = UltraSonic_getDistance(&ultraSonic_Left);
 80020de:	481f      	ldr	r0, [pc, #124]	; (800215c <Listener_UltraSonic_Distance+0xc0>)
 80020e0:	f000 fe5a 	bl	8002d98 <UltraSonic_getDistance>
 80020e4:	4603      	mov	r3, r0
 80020e6:	4a1e      	ldr	r2, [pc, #120]	; (8002160 <Listener_UltraSonic_Distance+0xc4>)
 80020e8:	6013      	str	r3, [r2, #0]
				printf("L : %d", distance_Left);
 80020ea:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <Listener_UltraSonic_Distance+0xc4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4619      	mov	r1, r3
 80020f0:	481c      	ldr	r0, [pc, #112]	; (8002164 <Listener_UltraSonic_Distance+0xc8>)
 80020f2:	f006 f875 	bl	80081e0 <iprintf>
				break;
 80020f6:	e00c      	b.n	8002112 <Listener_UltraSonic_Distance+0x76>
			case 2:
				distance_Right = UltraSonic_getDistance(&ultraSonic_Right);
 80020f8:	481b      	ldr	r0, [pc, #108]	; (8002168 <Listener_UltraSonic_Distance+0xcc>)
 80020fa:	f000 fe4d 	bl	8002d98 <UltraSonic_getDistance>
 80020fe:	4603      	mov	r3, r0
 8002100:	4a1a      	ldr	r2, [pc, #104]	; (800216c <Listener_UltraSonic_Distance+0xd0>)
 8002102:	6013      	str	r3, [r2, #0]
				printf("R : %d\n", distance_Right);
 8002104:	4b19      	ldr	r3, [pc, #100]	; (800216c <Listener_UltraSonic_Distance+0xd0>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4619      	mov	r1, r3
 800210a:	4819      	ldr	r0, [pc, #100]	; (8002170 <Listener_UltraSonic_Distance+0xd4>)
 800210c:	f006 f868 	bl	80081e0 <iprintf>
				break;
 8002110:	bf00      	nop
		}
		UltraSonicCount = (UltraSonicCount+1)%3;
 8002112:	4b0e      	ldr	r3, [pc, #56]	; (800214c <Listener_UltraSonic_Distance+0xb0>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	1c59      	adds	r1, r3, #1
 8002118:	4b16      	ldr	r3, [pc, #88]	; (8002174 <Listener_UltraSonic_Distance+0xd8>)
 800211a:	fb83 3201 	smull	r3, r2, r3, r1
 800211e:	17cb      	asrs	r3, r1, #31
 8002120:	1ad2      	subs	r2, r2, r3
 8002122:	4613      	mov	r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4413      	add	r3, r2
 8002128:	1aca      	subs	r2, r1, r3
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <Listener_UltraSonic_Distance+0xb0>)
 800212c:	601a      	str	r2, [r3, #0]
		//printf("F:%d,L:%d,R:%d",distance_Front, distance_Left, distance_Right);
		USDistance_set(distance_Front, distance_Left, distance_Right);
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <Listener_UltraSonic_Distance+0xb8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a0b      	ldr	r2, [pc, #44]	; (8002160 <Listener_UltraSonic_Distance+0xc4>)
 8002134:	6811      	ldr	r1, [r2, #0]
 8002136:	4a0d      	ldr	r2, [pc, #52]	; (800216c <Listener_UltraSonic_Distance+0xd0>)
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f000 f934 	bl	80023a8 <USDistance_set>
 8002140:	e000      	b.n	8002144 <Listener_UltraSonic_Distance+0xa8>
		if(ModeState_Auto != AUTOFlag) return;
 8002142:	bf00      	nop

}
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	200005f4 	.word	0x200005f4
 8002150:	200005ac 	.word	0x200005ac
 8002154:	200005f8 	.word	0x200005f8
 8002158:	080093ec 	.word	0x080093ec
 800215c:	200005c4 	.word	0x200005c4
 8002160:	200005fc 	.word	0x200005fc
 8002164:	080093f4 	.word	0x080093f4
 8002168:	200005dc 	.word	0x200005dc
 800216c:	20000600 	.word	0x20000600
 8002170:	080093fc 	.word	0x080093fc
 8002174:	55555556 	.word	0x55555556

08002178 <BT_init>:
 */

#include "BT_dataQue.h"
Que_t BTQue;

void BT_init(){
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
	Que_init(&BTQue);
 800217c:	4802      	ldr	r0, [pc, #8]	; (8002188 <BT_init+0x10>)
 800217e:	f7fe fd5d 	bl	8000c3c <Que_init>
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000604 	.word	0x20000604

0800218c <BT_enQue>:

void BT_enQue(uint8_t rxData){
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	71fb      	strb	r3, [r7, #7]
	enQue(&BTQue,rxData);
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	4619      	mov	r1, r3
 800219a:	4803      	ldr	r0, [pc, #12]	; (80021a8 <BT_enQue+0x1c>)
 800219c:	f7fe fda0 	bl	8000ce0 <enQue>
}
 80021a0:	bf00      	nop
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20000604 	.word	0x20000604

080021ac <BT_deQue>:

uint8_t BT_deQue(){
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
	return deQue(&BTQue);
 80021b0:	4802      	ldr	r0, [pc, #8]	; (80021bc <BT_deQue+0x10>)
 80021b2:	f7fe fdc1 	bl	8000d38 <deQue>
 80021b6:	4603      	mov	r3, r0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000604 	.word	0x20000604

080021c0 <BT_setFlag>:
void BT_setFlag(int flagState){
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
	setQueFlag(&BTQue, flagState);
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	4803      	ldr	r0, [pc, #12]	; (80021d8 <BT_setFlag+0x18>)
 80021cc:	f7fe fd4c 	bl	8000c68 <setQueFlag>
}
 80021d0:	bf00      	nop
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20000604 	.word	0x20000604

080021dc <BT_getFlag>:

int BT_getFlag(){
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
	return getQueFlag(&BTQue);
 80021e0:	4802      	ldr	r0, [pc, #8]	; (80021ec <BT_getFlag+0x10>)
 80021e2:	f7fe fd4f 	bl	8000c84 <getQueFlag>
 80021e6:	4603      	mov	r3, r0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000604 	.word	0x20000604

080021f0 <ModeState_init>:

#include "ModeStateModel.h"

MODE_t Mode;

void ModeState_init(){
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
	Mode.Modestate = MANUAL;
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <ModeState_init+0x1c>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]
	Mode.ModeFlag = MODERESET;
 80021fa:	4b04      	ldr	r3, [pc, #16]	; (800220c <ModeState_init+0x1c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	705a      	strb	r2, [r3, #1]
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	20000678 	.word	0x20000678

08002210 <ModeState_set>:

void ModeState_set(int ModeState){
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
	Mode.Modestate = ModeState;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	b2da      	uxtb	r2, r3
 800221c:	4b03      	ldr	r3, [pc, #12]	; (800222c <ModeState_set+0x1c>)
 800221e:	701a      	strb	r2, [r3, #0]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	20000678 	.word	0x20000678

08002230 <ModeState_get>:

int ModeState_get(){
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
	return Mode.Modestate;
 8002234:	4b03      	ldr	r3, [pc, #12]	; (8002244 <ModeState_get+0x14>)
 8002236:	781b      	ldrb	r3, [r3, #0]
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	20000678 	.word	0x20000678

08002248 <ModeState_setFlag>:

void ModeState_setFlag(int flagState){
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
	Mode.ModeFlag = flagState;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	b2da      	uxtb	r2, r3
 8002254:	4b03      	ldr	r3, [pc, #12]	; (8002264 <ModeState_setFlag+0x1c>)
 8002256:	705a      	strb	r2, [r3, #1]
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	20000678 	.word	0x20000678

08002268 <ModeState_getFlag>:

int ModeState_getFlag(){
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
	return Mode.ModeFlag;
 800226c:	4b03      	ldr	r3, [pc, #12]	; (800227c <ModeState_getFlag+0x14>)
 800226e:	785b      	ldrb	r3, [r3, #1]
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	20000678 	.word	0x20000678

08002280 <MotorState_init>:

#include "MotorStateModel.h"

AllMotorState_t MotorState;

void MotorState_init(){
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
	MotorState.ManualState = STOP;
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <MotorState_init+0x20>)
 8002286:	2201      	movs	r2, #1
 8002288:	701a      	strb	r2, [r3, #0]
	MotorState.AutoState = NONE;
 800228a:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <MotorState_init+0x20>)
 800228c:	2200      	movs	r2, #0
 800228e:	705a      	strb	r2, [r3, #1]
	MotorState.speed = 0;
 8002290:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <MotorState_init+0x20>)
 8002292:	2200      	movs	r2, #0
 8002294:	605a      	str	r2, [r3, #4]
}
 8002296:	bf00      	nop
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	2000067c 	.word	0x2000067c

080022a4 <MotorState_setSpeed>:

void MotorState_setSpeed(int speed){
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
	MotorState.speed = speed;
 80022ac:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <MotorState_setSpeed+0x1c>)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6053      	str	r3, [r2, #4]
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	2000067c 	.word	0x2000067c

080022c4 <MotorState_getSpeed>:
int MotorState_getSpeed(){
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
	return MotorState.speed;
 80022c8:	4b03      	ldr	r3, [pc, #12]	; (80022d8 <MotorState_getSpeed+0x14>)
 80022ca:	685b      	ldr	r3, [r3, #4]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	2000067c 	.word	0x2000067c

080022dc <MotorManualState_set>:


void MotorManualState_set(MotorState_t state){
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	71fb      	strb	r3, [r7, #7]
	MotorState.ManualState = state;
 80022e6:	4a04      	ldr	r2, [pc, #16]	; (80022f8 <MotorManualState_set+0x1c>)
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	7013      	strb	r3, [r2, #0]
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	2000067c 	.word	0x2000067c

080022fc <MotorManualState_get>:
uint8_t MotorManualState_get(){
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
	return MotorState.ManualState;
 8002300:	4b03      	ldr	r3, [pc, #12]	; (8002310 <MotorManualState_get+0x14>)
 8002302:	781b      	ldrb	r3, [r3, #0]
}
 8002304:	4618      	mov	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	2000067c 	.word	0x2000067c

08002314 <MotorState_setFlag>:

void MotorState_setFlag(int flagState){
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
	MotorState.MotorFlag = flagState;
 800231c:	4a04      	ldr	r2, [pc, #16]	; (8002330 <MotorState_setFlag+0x1c>)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6093      	str	r3, [r2, #8]
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	2000067c 	.word	0x2000067c

08002334 <MotorState_getFlag>:
int MotorState_getFlag(){
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
	return MotorState.MotorFlag;
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <MotorState_getFlag+0x14>)
 800233a:	689b      	ldr	r3, [r3, #8]
}
 800233c:	4618      	mov	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	2000067c 	.word	0x2000067c

0800234c <MotorAutoState_set>:

void MotorAutoState_set(MotorState_t state){
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	71fb      	strb	r3, [r7, #7]
	MotorState.AutoState = state;
 8002356:	4a04      	ldr	r2, [pc, #16]	; (8002368 <MotorAutoState_set+0x1c>)
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	7053      	strb	r3, [r2, #1]
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	2000067c 	.word	0x2000067c

0800236c <MotorAutoState_get>:
uint8_t MotorAutoState_get(){
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
	return MotorState.AutoState;
 8002370:	4b03      	ldr	r3, [pc, #12]	; (8002380 <MotorAutoState_get+0x14>)
 8002372:	785b      	ldrb	r3, [r3, #1]
}
 8002374:	4618      	mov	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	2000067c 	.word	0x2000067c

08002384 <USDistanc_init>:

#include "USDistanceModel.h"

USDistance_t USDistance;

void USDistanc_init(){
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
	USDistance.Distance_Front = 0;
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <USDistanc_init+0x20>)
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
	USDistance.Distance_Left = 0;
 800238e:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <USDistanc_init+0x20>)
 8002390:	2200      	movs	r2, #0
 8002392:	605a      	str	r2, [r3, #4]
	USDistance.Distance_Right = 0;
 8002394:	4b03      	ldr	r3, [pc, #12]	; (80023a4 <USDistanc_init+0x20>)
 8002396:	2200      	movs	r2, #0
 8002398:	609a      	str	r2, [r3, #8]
}
 800239a:	bf00      	nop
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	20000688 	.word	0x20000688

080023a8 <USDistance_set>:

void USDistance_set(int Front_Distance,int Left_Distance,int Right_Distance){
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
	USDistance.Distance_Front = Front_Distance;
 80023b4:	4a07      	ldr	r2, [pc, #28]	; (80023d4 <USDistance_set+0x2c>)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6013      	str	r3, [r2, #0]
	USDistance.Distance_Left = Left_Distance;
 80023ba:	4a06      	ldr	r2, [pc, #24]	; (80023d4 <USDistance_set+0x2c>)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	6053      	str	r3, [r2, #4]
	USDistance.Distance_Right = Right_Distance;
 80023c0:	4a04      	ldr	r2, [pc, #16]	; (80023d4 <USDistance_set+0x2c>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6093      	str	r3, [r2, #8]
}
 80023c6:	bf00      	nop
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	20000688 	.word	0x20000688

080023d8 <USDistance_get>:

USDistance_t USDistance_get(){
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
	return USDistance;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a05      	ldr	r2, [pc, #20]	; (80023f8 <USDistance_get+0x20>)
 80023e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80023e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	20000688 	.word	0x20000688

080023fc <Presenter_Init>:

#include "Presenter.h"
#include <stdio.h>
Motor_t leftMotor, rightMotor;

void Presenter_Init() {
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af04      	add	r7, sp, #16
	Motor_init(&leftMotor, &htim3, TIM_CHANNEL_1,
 8002402:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002406:	9302      	str	r3, [sp, #8]
 8002408:	4b12      	ldr	r3, [pc, #72]	; (8002454 <Presenter_Init+0x58>)
 800240a:	9301      	str	r3, [sp, #4]
 800240c:	2380      	movs	r3, #128	; 0x80
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	4b11      	ldr	r3, [pc, #68]	; (8002458 <Presenter_Init+0x5c>)
 8002412:	2200      	movs	r2, #0
 8002414:	4911      	ldr	r1, [pc, #68]	; (800245c <Presenter_Init+0x60>)
 8002416:	4812      	ldr	r0, [pc, #72]	; (8002460 <Presenter_Init+0x64>)
 8002418:	f000 fb46 	bl	8002aa8 <Motor_init>
	LEFT_DIR1_GPIO, LEFT_DIR1_GPIO_PIN, LEFT_DIR2_GPIO, LEFT_DIR2_GPIO_PIN);
	Motor_init(&rightMotor, &htim3, TIM_CHANNEL_2,
 800241c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002420:	9302      	str	r3, [sp, #8]
 8002422:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <Presenter_Init+0x58>)
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <Presenter_Init+0x68>)
 800242e:	2204      	movs	r2, #4
 8002430:	490a      	ldr	r1, [pc, #40]	; (800245c <Presenter_Init+0x60>)
 8002432:	480d      	ldr	r0, [pc, #52]	; (8002468 <Presenter_Init+0x6c>)
 8002434:	f000 fb38 	bl	8002aa8 <Motor_init>
	RIGHT_DIR1_GPIO, RIGHT_DIR1_GPIO_PIN, RIGHT_DIR2_GPIO, RIGHT_DIR2_GPIO_PIN);
	//초기 MotorSpeed
	Motor_setSpeed(&leftMotor, 550);
 8002438:	f240 2126 	movw	r1, #550	; 0x226
 800243c:	4808      	ldr	r0, [pc, #32]	; (8002460 <Presenter_Init+0x64>)
 800243e:	f000 fba2 	bl	8002b86 <Motor_setSpeed>
	Motor_setSpeed(&rightMotor, 550);
 8002442:	f240 2126 	movw	r1, #550	; 0x226
 8002446:	4808      	ldr	r0, [pc, #32]	; (8002468 <Presenter_Init+0x6c>)
 8002448:	f000 fb9d 	bl	8002b86 <Motor_setSpeed>
}
 800244c:	bf00      	nop
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40020000 	.word	0x40020000
 8002458:	40020800 	.word	0x40020800
 800245c:	2000040c 	.word	0x2000040c
 8002460:	20000694 	.word	0x20000694
 8002464:	40020400 	.word	0x40020400
 8002468:	200006ac 	.word	0x200006ac

0800246c <Presenter_excuteTask>:

void Presenter_excuteTask() {
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
	int MotorFlag = MotorState_getFlag();
 8002472:	f7ff ff5f 	bl	8002334 <MotorState_getFlag>
 8002476:	6078      	str	r0, [r7, #4]
	static int OldModeFlag = NONE;
	int ModeFlag = ModeState_getFlag();
 8002478:	f7ff fef6 	bl	8002268 <ModeState_getFlag>
 800247c:	6038      	str	r0, [r7, #0]

	if ((OldModeFlag==ModeFlag)&&!MotorFlag) return;	//둘 중 하나가 set되면 실행
 800247e:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <Presenter_excuteTask+0x3c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d102      	bne.n	800248e <Presenter_excuteTask+0x22>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d008      	beq.n	80024a0 <Presenter_excuteTask+0x34>
	OldModeFlag = ModeFlag;
 800248e:	4a06      	ldr	r2, [pc, #24]	; (80024a8 <Presenter_excuteTask+0x3c>)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	6013      	str	r3, [r2, #0]
	Presenter_Mode_setState();
 8002494:	f000 f80a 	bl	80024ac <Presenter_Mode_setState>

	MotorState_setFlag(RESET);
 8002498:	2000      	movs	r0, #0
 800249a:	f7ff ff3b 	bl	8002314 <MotorState_setFlag>
 800249e:	e000      	b.n	80024a2 <Presenter_excuteTask+0x36>
	if ((OldModeFlag==ModeFlag)&&!MotorFlag) return;	//둘 중 하나가 set되면 실행
 80024a0:	bf00      	nop
}
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	200006c4 	.word	0x200006c4

080024ac <Presenter_Mode_setState>:

void Presenter_Mode_setState() {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
	ModeState_t ModeState;
	ModeState = ModeState_get();
 80024b2:	f7ff febd 	bl	8002230 <ModeState_get>
 80024b6:	4603      	mov	r3, r0
 80024b8:	71fb      	strb	r3, [r7, #7]
	switch (ModeState) {
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <Presenter_Mode_setState+0x1a>
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d008      	beq.n	80024d6 <Presenter_Mode_setState+0x2a>
		case AUTO:
			LCD_writeStringXY(0, 0, "Car AUTO!           ");
			Presenter_Auto_setState();
			break;
	}
}
 80024c4:	e00f      	b.n	80024e6 <Presenter_Mode_setState+0x3a>
			LCD_writeStringXY(0, 0, "Car Manual!         ");
 80024c6:	4a0a      	ldr	r2, [pc, #40]	; (80024f0 <Presenter_Mode_setState+0x44>)
 80024c8:	2100      	movs	r1, #0
 80024ca:	2000      	movs	r0, #0
 80024cc:	f000 fad7 	bl	8002a7e <LCD_writeStringXY>
			Presenter_Manual_setState();
 80024d0:	f000 f812 	bl	80024f8 <Presenter_Manual_setState>
			break;
 80024d4:	e007      	b.n	80024e6 <Presenter_Mode_setState+0x3a>
			LCD_writeStringXY(0, 0, "Car AUTO!           ");
 80024d6:	4a07      	ldr	r2, [pc, #28]	; (80024f4 <Presenter_Mode_setState+0x48>)
 80024d8:	2100      	movs	r1, #0
 80024da:	2000      	movs	r0, #0
 80024dc:	f000 facf 	bl	8002a7e <LCD_writeStringXY>
			Presenter_Auto_setState();
 80024e0:	f000 f8d2 	bl	8002688 <Presenter_Auto_setState>
			break;
 80024e4:	bf00      	nop
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	08009404 	.word	0x08009404
 80024f4:	0800941c 	.word	0x0800941c

080024f8 <Presenter_Manual_setState>:

void Presenter_Manual_setState() {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
	uint8_t ManualMotorState = MotorManualState_get();
 80024fe:	f7ff fefd 	bl	80022fc <MotorManualState_get>
 8002502:	4603      	mov	r3, r0
 8002504:	71fb      	strb	r3, [r7, #7]
	switch (ManualMotorState) {
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	3b01      	subs	r3, #1
 800250a:	2b05      	cmp	r3, #5
 800250c:	d820      	bhi.n	8002550 <Presenter_Manual_setState+0x58>
 800250e:	a201      	add	r2, pc, #4	; (adr r2, 8002514 <Presenter_Manual_setState+0x1c>)
 8002510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002514:	08002545 	.word	0x08002545
 8002518:	0800252d 	.word	0x0800252d
 800251c:	08002539 	.word	0x08002539
 8002520:	0800253f 	.word	0x0800253f
 8002524:	08002533 	.word	0x08002533
 8002528:	0800254b 	.word	0x0800254b
		case GO:
			Presenter_CarGo();
 800252c:	f000 f814 	bl	8002558 <Presenter_CarGo>
			break;
 8002530:	e00e      	b.n	8002550 <Presenter_Manual_setState+0x58>
		case BACK:
			Presenter_CarBack();
 8002532:	f000 f869 	bl	8002608 <Presenter_CarBack>
			break;
 8002536:	e00b      	b.n	8002550 <Presenter_Manual_setState+0x58>
		case LEFT:
			Presenter_CarLeft();
 8002538:	f000 f83a 	bl	80025b0 <Presenter_CarLeft>
			break;
 800253c:	e008      	b.n	8002550 <Presenter_Manual_setState+0x58>
		case RIGHT:
			Presenter_CarRight();
 800253e:	f000 f84d 	bl	80025dc <Presenter_CarRight>
			break;
 8002542:	e005      	b.n	8002550 <Presenter_Manual_setState+0x58>
		case STOP:
			Presenter_CarStop();
 8002544:	f000 f81e 	bl	8002584 <Presenter_CarStop>
			break;
 8002548:	e002      	b.n	8002550 <Presenter_Manual_setState+0x58>
		case SPEED:
			Presenter_CarSpeed();
 800254a:	f000 f873 	bl	8002634 <Presenter_CarSpeed>
			break;
 800254e:	bf00      	nop
//		default: //Stop
//			Presenter_CarStop();
//			break;
	}
}
 8002550:	bf00      	nop
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <Presenter_CarGo>:
void Presenter_CarGo() {
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
	LCD_writeStringXY(1, 0, "Car Go!        ");
 800255c:	4a06      	ldr	r2, [pc, #24]	; (8002578 <Presenter_CarGo+0x20>)
 800255e:	2100      	movs	r1, #0
 8002560:	2001      	movs	r0, #1
 8002562:	f000 fa8c 	bl	8002a7e <LCD_writeStringXY>
	Motor_forward(&leftMotor);
 8002566:	4805      	ldr	r0, [pc, #20]	; (800257c <Presenter_CarGo+0x24>)
 8002568:	f000 facd 	bl	8002b06 <Motor_forward>
	Motor_forward(&rightMotor);
 800256c:	4804      	ldr	r0, [pc, #16]	; (8002580 <Presenter_CarGo+0x28>)
 800256e:	f000 faca 	bl	8002b06 <Motor_forward>
}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	08009434 	.word	0x08009434
 800257c:	20000694 	.word	0x20000694
 8002580:	200006ac 	.word	0x200006ac

08002584 <Presenter_CarStop>:
void Presenter_CarStop() {
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
	LCD_writeStringXY(1, 0, "Car Stop!         ");
 8002588:	4a06      	ldr	r2, [pc, #24]	; (80025a4 <Presenter_CarStop+0x20>)
 800258a:	2100      	movs	r1, #0
 800258c:	2001      	movs	r0, #1
 800258e:	f000 fa76 	bl	8002a7e <LCD_writeStringXY>
	Motor_stop(&leftMotor);
 8002592:	4805      	ldr	r0, [pc, #20]	; (80025a8 <Presenter_CarStop+0x24>)
 8002594:	f000 faa7 	bl	8002ae6 <Motor_stop>
	Motor_stop(&rightMotor);
 8002598:	4804      	ldr	r0, [pc, #16]	; (80025ac <Presenter_CarStop+0x28>)
 800259a:	f000 faa4 	bl	8002ae6 <Motor_stop>
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	08009444 	.word	0x08009444
 80025a8:	20000694 	.word	0x20000694
 80025ac:	200006ac 	.word	0x200006ac

080025b0 <Presenter_CarLeft>:
void Presenter_CarLeft() {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
	LCD_writeStringXY(1, 0, "Car Left!        ");
 80025b4:	4a06      	ldr	r2, [pc, #24]	; (80025d0 <Presenter_CarLeft+0x20>)
 80025b6:	2100      	movs	r1, #0
 80025b8:	2001      	movs	r0, #1
 80025ba:	f000 fa60 	bl	8002a7e <LCD_writeStringXY>
	Motor_backward(&leftMotor);
 80025be:	4805      	ldr	r0, [pc, #20]	; (80025d4 <Presenter_CarLeft+0x24>)
 80025c0:	f000 fac1 	bl	8002b46 <Motor_backward>
	Motor_forward(&rightMotor);
 80025c4:	4804      	ldr	r0, [pc, #16]	; (80025d8 <Presenter_CarLeft+0x28>)
 80025c6:	f000 fa9e 	bl	8002b06 <Motor_forward>

}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	08009458 	.word	0x08009458
 80025d4:	20000694 	.word	0x20000694
 80025d8:	200006ac 	.word	0x200006ac

080025dc <Presenter_CarRight>:
void Presenter_CarRight() {
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
	LCD_writeStringXY(1, 0, "Car Right!          ");
 80025e0:	4a06      	ldr	r2, [pc, #24]	; (80025fc <Presenter_CarRight+0x20>)
 80025e2:	2100      	movs	r1, #0
 80025e4:	2001      	movs	r0, #1
 80025e6:	f000 fa4a 	bl	8002a7e <LCD_writeStringXY>
	Motor_backward(&rightMotor);
 80025ea:	4805      	ldr	r0, [pc, #20]	; (8002600 <Presenter_CarRight+0x24>)
 80025ec:	f000 faab 	bl	8002b46 <Motor_backward>
	Motor_forward(&leftMotor);
 80025f0:	4804      	ldr	r0, [pc, #16]	; (8002604 <Presenter_CarRight+0x28>)
 80025f2:	f000 fa88 	bl	8002b06 <Motor_forward>

}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	0800946c 	.word	0x0800946c
 8002600:	200006ac 	.word	0x200006ac
 8002604:	20000694 	.word	0x20000694

08002608 <Presenter_CarBack>:
void Presenter_CarBack() {
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
	LCD_writeStringXY(1, 0, "Car Back!          ");
 800260c:	4a06      	ldr	r2, [pc, #24]	; (8002628 <Presenter_CarBack+0x20>)
 800260e:	2100      	movs	r1, #0
 8002610:	2001      	movs	r0, #1
 8002612:	f000 fa34 	bl	8002a7e <LCD_writeStringXY>
	Motor_backward(&leftMotor);
 8002616:	4805      	ldr	r0, [pc, #20]	; (800262c <Presenter_CarBack+0x24>)
 8002618:	f000 fa95 	bl	8002b46 <Motor_backward>
	Motor_backward(&rightMotor);
 800261c:	4804      	ldr	r0, [pc, #16]	; (8002630 <Presenter_CarBack+0x28>)
 800261e:	f000 fa92 	bl	8002b46 <Motor_backward>

}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	08009484 	.word	0x08009484
 800262c:	20000694 	.word	0x20000694
 8002630:	200006ac 	.word	0x200006ac

08002634 <Presenter_CarSpeed>:
void Presenter_CarSpeed() {
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af00      	add	r7, sp, #0
	char buff[30];
	sprintf(buff, "Car Speed!:%d", MotorState_getSpeed());
 800263a:	f7ff fe43 	bl	80022c4 <MotorState_getSpeed>
 800263e:	4602      	mov	r2, r0
 8002640:	463b      	mov	r3, r7
 8002642:	490e      	ldr	r1, [pc, #56]	; (800267c <Presenter_CarSpeed+0x48>)
 8002644:	4618      	mov	r0, r3
 8002646:	f005 fddd 	bl	8008204 <siprintf>
	LCD_writeStringXY(1, 0, buff);
 800264a:	463b      	mov	r3, r7
 800264c:	461a      	mov	r2, r3
 800264e:	2100      	movs	r1, #0
 8002650:	2001      	movs	r0, #1
 8002652:	f000 fa14 	bl	8002a7e <LCD_writeStringXY>
	Motor_setSpeed(&leftMotor, MotorState_getSpeed());
 8002656:	f7ff fe35 	bl	80022c4 <MotorState_getSpeed>
 800265a:	4603      	mov	r3, r0
 800265c:	4619      	mov	r1, r3
 800265e:	4808      	ldr	r0, [pc, #32]	; (8002680 <Presenter_CarSpeed+0x4c>)
 8002660:	f000 fa91 	bl	8002b86 <Motor_setSpeed>
	Motor_setSpeed(&rightMotor, MotorState_getSpeed());
 8002664:	f7ff fe2e 	bl	80022c4 <MotorState_getSpeed>
 8002668:	4603      	mov	r3, r0
 800266a:	4619      	mov	r1, r3
 800266c:	4805      	ldr	r0, [pc, #20]	; (8002684 <Presenter_CarSpeed+0x50>)
 800266e:	f000 fa8a 	bl	8002b86 <Motor_setSpeed>
}
 8002672:	bf00      	nop
 8002674:	3720      	adds	r7, #32
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	08009498 	.word	0x08009498
 8002680:	20000694 	.word	0x20000694
 8002684:	200006ac 	.word	0x200006ac

08002688 <Presenter_Auto_setState>:

void Presenter_Auto_setState() {
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
	uint8_t AutoMotorState = MotorAutoState_get();
 800268e:	f7ff fe6d 	bl	800236c <MotorAutoState_get>
 8002692:	4603      	mov	r3, r0
 8002694:	71fb      	strb	r3, [r7, #7]
	switch (AutoMotorState) {
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	2b05      	cmp	r3, #5
 800269a:	d821      	bhi.n	80026e0 <Presenter_Auto_setState+0x58>
 800269c:	a201      	add	r2, pc, #4	; (adr r2, 80026a4 <Presenter_Auto_setState+0x1c>)
 800269e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a2:	bf00      	nop
 80026a4:	080026db 	.word	0x080026db
 80026a8:	080026d5 	.word	0x080026d5
 80026ac:	080026bd 	.word	0x080026bd
 80026b0:	080026c9 	.word	0x080026c9
 80026b4:	080026cf 	.word	0x080026cf
 80026b8:	080026c3 	.word	0x080026c3
		case GO:
			Presenter_CarGo();
 80026bc:	f7ff ff4c 	bl	8002558 <Presenter_CarGo>
			break;
 80026c0:	e00e      	b.n	80026e0 <Presenter_Auto_setState+0x58>
		case BACK:
			Presenter_CarBack();
 80026c2:	f7ff ffa1 	bl	8002608 <Presenter_CarBack>
			break;
 80026c6:	e00b      	b.n	80026e0 <Presenter_Auto_setState+0x58>
		case LEFT:
			Presenter_CarLeft();
 80026c8:	f7ff ff72 	bl	80025b0 <Presenter_CarLeft>
			break;
 80026cc:	e008      	b.n	80026e0 <Presenter_Auto_setState+0x58>
		case RIGHT:
			Presenter_CarRight();
 80026ce:	f7ff ff85 	bl	80025dc <Presenter_CarRight>
			break;
 80026d2:	e005      	b.n	80026e0 <Presenter_Auto_setState+0x58>
		case STOP:
			Presenter_CarStop();
 80026d4:	f7ff ff56 	bl	8002584 <Presenter_CarStop>
			break;
 80026d8:	e002      	b.n	80026e0 <Presenter_Auto_setState+0x58>
		case NONE:
			Presenter_CarSpeed();
 80026da:	f7ff ffab 	bl	8002634 <Presenter_CarSpeed>
			break;
 80026de:	bf00      	nop
//		default: //Stop
//			Presenter_CarStop();
//			break;
	}
}
 80026e0:	bf00      	nop
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <button_init>:
 */

#include "Button.h"


void button_init(button_t *button,GPIO_TypeDef* GPIOx,uint16_t GPIO_Pin){
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	4613      	mov	r3, r2
 80026f4:	80fb      	strh	r3, [r7, #6]
	button->GPIOx = GPIOx;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	601a      	str	r2, [r3, #0]
	button->GPIO_Pin = GPIO_Pin;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	88fa      	ldrh	r2, [r7, #6]
 8002700:	809a      	strh	r2, [r3, #4]
	button->prevState =RELEASED;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2201      	movs	r2, #1
 8002706:	609a      	str	r2, [r3, #8]
}
 8002708:	bf00      	nop
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <button_getState>:

button_state_t button_getState(button_t *button){
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
	int curState = HAL_GPIO_ReadPin(button->GPIOx, button->GPIO_Pin);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	889b      	ldrh	r3, [r3, #4]
 8002724:	4619      	mov	r1, r3
 8002726:	4610      	mov	r0, r2
 8002728:	f000 fecc 	bl	80034c4 <HAL_GPIO_ReadPin>
 800272c:	4603      	mov	r3, r0
 800272e:	60fb      	str	r3, [r7, #12]

	if((button->prevState == RELEASED) && (curState == PUSHED)){
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d107      	bne.n	8002748 <button_getState+0x34>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d104      	bne.n	8002748 <button_getState+0x34>
		//HAL_Delay(50);
		button->prevState = PUSHED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	609a      	str	r2, [r3, #8]
		return ACT_PUSHED;
 8002744:	2303      	movs	r3, #3
 8002746:	e00c      	b.n	8002762 <button_getState+0x4e>
	}
	else 	if((button->prevState == PUSHED) && (curState == RELEASED)){
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d107      	bne.n	8002760 <button_getState+0x4c>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d104      	bne.n	8002760 <button_getState+0x4c>
		//HAL_Delay(50);
		button->prevState = RELEASED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	609a      	str	r2, [r3, #8]
		return ACT_RELEASED;
 800275c:	2304      	movs	r3, #4
 800275e:	e000      	b.n	8002762 <button_getState+0x4e>
	}
	return NO_ACT;
 8002760:	2302      	movs	r3, #2
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <LCD_delay>:
#include "LCD.h"

I2C_HandleTypeDef *hLCDI2C;
uint8_t lcdData = 0;

void LCD_delay(uint32_t Delay){
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
	HAL_Delay(Delay);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 fb8a 	bl	8002e8c <HAL_Delay>
}
 8002778:	bf00      	nop
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <LCD_init>:

void LCD_init(I2C_HandleTypeDef *hi2c1){
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
	hLCDI2C = hi2c1;
 8002788:	4a18      	ldr	r2, [pc, #96]	; (80027ec <LCD_init+0x6c>)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6013      	str	r3, [r2, #0]
	LCD_delay(15);
 800278e:	200f      	movs	r0, #15
 8002790:	f7ff ffeb 	bl	800276a <LCD_delay>
	LCD_cmdMode();
 8002794:	f000 f83e 	bl	8002814 <LCD_cmdMode>
	LCD_writeMode();
 8002798:	f000 f85c 	bl	8002854 <LCD_writeMode>
	LCD_sendHighNibble(0x30);
 800279c:	2030      	movs	r0, #48	; 0x30
 800279e:	f000 f8b1 	bl	8002904 <LCD_sendHighNibble>
	LCD_delay(5);
 80027a2:	2005      	movs	r0, #5
 80027a4:	f7ff ffe1 	bl	800276a <LCD_delay>
	LCD_sendHighNibble(0x30);
 80027a8:	2030      	movs	r0, #48	; 0x30
 80027aa:	f000 f8ab 	bl	8002904 <LCD_sendHighNibble>
	LCD_delay(1);
 80027ae:	2001      	movs	r0, #1
 80027b0:	f7ff ffdb 	bl	800276a <LCD_delay>
	LCD_sendHighNibble(0x30);
 80027b4:	2030      	movs	r0, #48	; 0x30
 80027b6:	f000 f8a5 	bl	8002904 <LCD_sendHighNibble>
	LCD_sendHighNibble(0x20);
 80027ba:	2020      	movs	r0, #32
 80027bc:	f000 f8a2 	bl	8002904 <LCD_sendHighNibble>
	LCD_sendByte(LCD_4BIT_FUNCTION_SET);	//Function Set: 4Bit Interface, 2Line, 5x8 Font
 80027c0:	2028      	movs	r0, #40	; 0x28
 80027c2:	f000 f88d 	bl	80028e0 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_OFF); 				//Display Off
 80027c6:	2008      	movs	r0, #8
 80027c8:	f000 f88a 	bl	80028e0 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_CLEAR);			//Display Clear
 80027cc:	2001      	movs	r0, #1
 80027ce:	f000 f887 	bl	80028e0 <LCD_sendByte>
	LCD_sendByte(LCD_ENTRY_MODE_SET);			//Entry Mode Set
 80027d2:	2006      	movs	r0, #6
 80027d4:	f000 f884 	bl	80028e0 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_ON);					//Display On
 80027d8:	200c      	movs	r0, #12
 80027da:	f000 f881 	bl	80028e0 <LCD_sendByte>
	LCD_backLightOn();										//backLightOn
 80027de:	f000 f807 	bl	80027f0 <LCD_backLightOn>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	200006c8 	.word	0x200006c8

080027f0 <LCD_backLightOn>:

void LCD_backLightOn(){
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
	lcdData |=(1<<LCD_BACKLIGHT);
 80027f4:	4b06      	ldr	r3, [pc, #24]	; (8002810 <LCD_backLightOn+0x20>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	f043 0308 	orr.w	r3, r3, #8
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	4b04      	ldr	r3, [pc, #16]	; (8002810 <LCD_backLightOn+0x20>)
 8002800:	701a      	strb	r2, [r3, #0]
	LCD_sendData(lcdData);
 8002802:	4b03      	ldr	r3, [pc, #12]	; (8002810 <LCD_backLightOn+0x20>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f000 f854 	bl	80028b4 <LCD_sendData>
}
 800280c:	bf00      	nop
 800280e:	bd80      	pop	{r7, pc}
 8002810:	200006cc 	.word	0x200006cc

08002814 <LCD_cmdMode>:

void LCD_cmdMode() {
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RS);
 8002818:	4b05      	ldr	r3, [pc, #20]	; (8002830 <LCD_cmdMode+0x1c>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	f023 0301 	bic.w	r3, r3, #1
 8002820:	b2da      	uxtb	r2, r3
 8002822:	4b03      	ldr	r3, [pc, #12]	; (8002830 <LCD_cmdMode+0x1c>)
 8002824:	701a      	strb	r2, [r3, #0]
}
 8002826:	bf00      	nop
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	200006cc 	.word	0x200006cc

08002834 <LCD_charMode>:
void LCD_charMode() {
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_RS);
 8002838:	4b05      	ldr	r3, [pc, #20]	; (8002850 <LCD_charMode+0x1c>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	b2da      	uxtb	r2, r3
 8002842:	4b03      	ldr	r3, [pc, #12]	; (8002850 <LCD_charMode+0x1c>)
 8002844:	701a      	strb	r2, [r3, #0]
}
 8002846:	bf00      	nop
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	200006cc 	.word	0x200006cc

08002854 <LCD_writeMode>:
void LCD_writeMode() {
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RW);
 8002858:	4b05      	ldr	r3, [pc, #20]	; (8002870 <LCD_writeMode+0x1c>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	f023 0302 	bic.w	r3, r3, #2
 8002860:	b2da      	uxtb	r2, r3
 8002862:	4b03      	ldr	r3, [pc, #12]	; (8002870 <LCD_writeMode+0x1c>)
 8002864:	701a      	strb	r2, [r3, #0]
}
 8002866:	bf00      	nop
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	200006cc 	.word	0x200006cc

08002874 <LCD_E_High>:

void LCD_E_High() {
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_E);
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <LCD_E_High+0x1c>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	f043 0304 	orr.w	r3, r3, #4
 8002880:	b2da      	uxtb	r2, r3
 8002882:	4b03      	ldr	r3, [pc, #12]	; (8002890 <LCD_E_High+0x1c>)
 8002884:	701a      	strb	r2, [r3, #0]
}
 8002886:	bf00      	nop
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	200006cc 	.word	0x200006cc

08002894 <LCD_E_Low>:
void LCD_E_Low() {
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_E);
 8002898:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <LCD_E_Low+0x1c>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	f023 0304 	bic.w	r3, r3, #4
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <LCD_E_Low+0x1c>)
 80028a4:	701a      	strb	r2, [r3, #0]
}
 80028a6:	bf00      	nop
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	200006cc 	.word	0x200006cc

080028b4 <LCD_sendData>:

void LCD_sendData(uint8_t data) {
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af02      	add	r7, sp, #8
 80028ba:	4603      	mov	r3, r0
 80028bc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hLCDI2C, lcdDevAddr_w, &data, 1, 1000);
 80028be:	4b07      	ldr	r3, [pc, #28]	; (80028dc <LCD_sendData+0x28>)
 80028c0:	6818      	ldr	r0, [r3, #0]
 80028c2:	1dfa      	adds	r2, r7, #7
 80028c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	2301      	movs	r3, #1
 80028cc:	214e      	movs	r1, #78	; 0x4e
 80028ce:	f000 ffa1 	bl	8003814 <HAL_I2C_Master_Transmit>
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	200006c8 	.word	0x200006c8

080028e0 <LCD_sendByte>:

void LCD_sendByte(uint8_t data) {
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	71fb      	strb	r3, [r7, #7]
	LCD_sendHighNibble(data); //상위 4bit 전송
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 f809 	bl	8002904 <LCD_sendHighNibble>
	LCD_sendLowNibble(data); //하위 4bit 전송
 80028f2:	79fb      	ldrb	r3, [r7, #7]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f000 f835 	bl	8002964 <LCD_sendLowNibble>
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <LCD_sendHighNibble>:

void LCD_sendHighNibble(uint8_t data) {
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	4603      	mov	r3, r0
 800290c:	71fb      	strb	r3, [r7, #7]
	LCD_E_High();
 800290e:	f7ff ffb1 	bl	8002874 <LCD_E_High>
	lcdData = (lcdData & 0x0f) | (data & 0xf0);	//상위 4bit data
 8002912:	4b13      	ldr	r3, [pc, #76]	; (8002960 <LCD_sendHighNibble+0x5c>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	b25b      	sxtb	r3, r3
 8002918:	f003 030f 	and.w	r3, r3, #15
 800291c:	b25a      	sxtb	r2, r3
 800291e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002922:	f023 030f 	bic.w	r3, r3, #15
 8002926:	b25b      	sxtb	r3, r3
 8002928:	4313      	orrs	r3, r2
 800292a:	b25b      	sxtb	r3, r3
 800292c:	b2da      	uxtb	r2, r3
 800292e:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <LCD_sendHighNibble+0x5c>)
 8002930:	701a      	strb	r2, [r3, #0]
	LCD_sendData(lcdData); //MCU send to LCD
 8002932:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <LCD_sendHighNibble+0x5c>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff ffbc 	bl	80028b4 <LCD_sendData>
	HAL_Delay(1);
 800293c:	2001      	movs	r0, #1
 800293e:	f000 faa5 	bl	8002e8c <HAL_Delay>
	LCD_E_Low();
 8002942:	f7ff ffa7 	bl	8002894 <LCD_E_Low>
	LCD_sendData(lcdData); //MCU send to LCD
 8002946:	4b06      	ldr	r3, [pc, #24]	; (8002960 <LCD_sendHighNibble+0x5c>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff ffb2 	bl	80028b4 <LCD_sendData>
	HAL_Delay(1);
 8002950:	2001      	movs	r0, #1
 8002952:	f000 fa9b 	bl	8002e8c <HAL_Delay>
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	200006cc 	.word	0x200006cc

08002964 <LCD_sendLowNibble>:

void LCD_sendLowNibble(uint8_t data) {
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	71fb      	strb	r3, [r7, #7]
	LCD_E_High();
 800296e:	f7ff ff81 	bl	8002874 <LCD_E_High>
	lcdData = (lcdData & 0x0f) | ((data & 0x0f)<<4);	//하위 4bit data
 8002972:	4b12      	ldr	r3, [pc, #72]	; (80029bc <LCD_sendLowNibble+0x58>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	b25b      	sxtb	r3, r3
 8002978:	f003 030f 	and.w	r3, r3, #15
 800297c:	b25a      	sxtb	r2, r3
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	b25b      	sxtb	r3, r3
 8002984:	4313      	orrs	r3, r2
 8002986:	b25b      	sxtb	r3, r3
 8002988:	b2da      	uxtb	r2, r3
 800298a:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <LCD_sendLowNibble+0x58>)
 800298c:	701a      	strb	r2, [r3, #0]
	LCD_sendData(lcdData); //MCU send to LCD
 800298e:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <LCD_sendLowNibble+0x58>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff ff8e 	bl	80028b4 <LCD_sendData>
	HAL_Delay(1);
 8002998:	2001      	movs	r0, #1
 800299a:	f000 fa77 	bl	8002e8c <HAL_Delay>
	LCD_E_Low();
 800299e:	f7ff ff79 	bl	8002894 <LCD_E_Low>
	LCD_sendData(lcdData); //MCU send to LCD
 80029a2:	4b06      	ldr	r3, [pc, #24]	; (80029bc <LCD_sendLowNibble+0x58>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff ff84 	bl	80028b4 <LCD_sendData>
	HAL_Delay(1);
 80029ac:	2001      	movs	r0, #1
 80029ae:	f000 fa6d 	bl	8002e8c <HAL_Delay>
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	200006cc 	.word	0x200006cc

080029c0 <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data) {
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	71fb      	strb	r3, [r7, #7]
	LCD_cmdMode();
 80029ca:	f7ff ff23 	bl	8002814 <LCD_cmdMode>
	LCD_writeMode();
 80029ce:	f7ff ff41 	bl	8002854 <LCD_writeMode>
	LCD_sendByte(data);
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff ff83 	bl	80028e0 <LCD_sendByte>
}
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data) {
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	4603      	mov	r3, r0
 80029ea:	71fb      	strb	r3, [r7, #7]
	LCD_charMode();
 80029ec:	f7ff ff22 	bl	8002834 <LCD_charMode>
	LCD_writeMode();
 80029f0:	f7ff ff30 	bl	8002854 <LCD_writeMode>
	LCD_sendByte(data);
 80029f4:	79fb      	ldrb	r3, [r7, #7]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff ff72 	bl	80028e0 <LCD_sendByte>
}
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col){
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	460a      	mov	r2, r1
 8002a0e:	71fb      	strb	r3, [r7, #7]
 8002a10:	4613      	mov	r3, r2
 8002a12:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 8002a14:	79bb      	ldrb	r3, [r7, #6]
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	71bb      	strb	r3, [r7, #6]
	row %=2;
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = (0x40 * row) +col;
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	019b      	lsls	r3, r3, #6
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	79bb      	ldrb	r3, [r7, #6]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	73fb      	strb	r3, [r7, #15]
	uint8_t command = 0x80 + lcdRegAddr;
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
 8002a32:	3b80      	subs	r3, #128	; 0x80
 8002a34:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 8002a36:	7bbb      	ldrb	r3, [r7, #14]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff ffc1 	bl	80029c0 <LCD_writeCmdData>
}
 8002a3e:	bf00      	nop
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <LCD_writeString>:

void LCD_writeString(char *str){
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b084      	sub	sp, #16
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
	for(int i=0; str[i]; i++){ //str[i] == 0 for문 탈출
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	e009      	b.n	8002a68 <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	4413      	add	r3, r2
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff ffc0 	bl	80029e2 <LCD_writeCharData>
	for(int i=0; str[i]; i++){ //str[i] == 0 for문 탈출
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	3301      	adds	r3, #1
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1ef      	bne.n	8002a54 <LCD_writeString+0xe>
	}
}
 8002a74:	bf00      	nop
 8002a76:	bf00      	nop
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col,char *str){
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	4603      	mov	r3, r0
 8002a86:	603a      	str	r2, [r7, #0]
 8002a88:	71fb      	strb	r3, [r7, #7]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 8002a8e:	79ba      	ldrb	r2, [r7, #6]
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	4611      	mov	r1, r2
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ffb5 	bl	8002a04 <LCD_gotoXY>
	LCD_writeString(str);
 8002a9a:	6838      	ldr	r0, [r7, #0]
 8002a9c:	f7ff ffd3 	bl	8002a46 <LCD_writeString>
}
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <Motor_init>:
#include "Motor.h"


void Motor_init(Motor_t *Motor, TIM_HandleTypeDef *htim, uint32_t Channel,
		GPIO_TypeDef *dir1_GPIO, uint16_t dir1_GPIO_Pin, GPIO_TypeDef *dir2_GPIO,
		uint16_t dir2_GPIO_Pin) {
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	603b      	str	r3, [r7, #0]
	Motor-> htim = htim;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	601a      	str	r2, [r3, #0]
	Motor-> Channel = Channel;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	605a      	str	r2, [r3, #4]
	Motor-> dir1_GPIO = dir1_GPIO;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	609a      	str	r2, [r3, #8]
	Motor-> dir1_GPIO_Pin = dir1_GPIO_Pin;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8b3a      	ldrh	r2, [r7, #24]
 8002acc:	819a      	strh	r2, [r3, #12]
	Motor-> dir2_GPIO = dir2_GPIO;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	69fa      	ldr	r2, [r7, #28]
 8002ad2:	611a      	str	r2, [r3, #16]
	Motor-> dir2_GPIO_Pin = dir2_GPIO_Pin;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8c3a      	ldrh	r2, [r7, #32]
 8002ad8:	829a      	strh	r2, [r3, #20]
}
 8002ada:	bf00      	nop
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <Motor_stop>:

void Motor_stop(Motor_t *Motor) {
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b082      	sub	sp, #8
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(Motor->htim, Motor->Channel);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	4619      	mov	r1, r3
 8002af8:	4610      	mov	r0, r2
 8002afa:	f002 f8ed 	bl	8004cd8 <HAL_TIM_PWM_Stop>
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <Motor_forward>:

void Motor_forward(Motor_t *Motor) {
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Motor->dir1_GPIO, Motor->dir1_GPIO_Pin, RESET);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6898      	ldr	r0, [r3, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	899b      	ldrh	r3, [r3, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	4619      	mov	r1, r3
 8002b1a:	f000 fceb 	bl	80034f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor->dir2_GPIO, Motor->dir2_GPIO_Pin, SET);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6918      	ldr	r0, [r3, #16]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	8a9b      	ldrh	r3, [r3, #20]
 8002b26:	2201      	movs	r2, #1
 8002b28:	4619      	mov	r1, r3
 8002b2a:	f000 fce3 	bl	80034f4 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(Motor->htim, Motor->Channel);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	4619      	mov	r1, r3
 8002b38:	4610      	mov	r0, r2
 8002b3a:	f002 f81d 	bl	8004b78 <HAL_TIM_PWM_Start>
}
 8002b3e:	bf00      	nop
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <Motor_backward>:
void Motor_backward(Motor_t *Motor) {
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Motor->dir1_GPIO, Motor->dir1_GPIO_Pin, SET);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6898      	ldr	r0, [r3, #8]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	899b      	ldrh	r3, [r3, #12]
 8002b56:	2201      	movs	r2, #1
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f000 fccb 	bl	80034f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor->dir2_GPIO, Motor->dir2_GPIO_Pin, RESET);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6918      	ldr	r0, [r3, #16]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	8a9b      	ldrh	r3, [r3, #20]
 8002b66:	2200      	movs	r2, #0
 8002b68:	4619      	mov	r1, r3
 8002b6a:	f000 fcc3 	bl	80034f4 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(Motor->htim, Motor->Channel);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	4619      	mov	r1, r3
 8002b78:	4610      	mov	r0, r2
 8002b7a:	f001 fffd 	bl	8004b78 <HAL_TIM_PWM_Start>

}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <Motor_setSpeed>:
void Motor_setSpeed(Motor_t *Motor,int speedVal) {
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
 8002b8e:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, speedVal);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d105      	bne.n	8002ba4 <Motor_setSpeed+0x1e>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002ba2:	e018      	b.n	8002bd6 <Motor_setSpeed+0x50>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, speedVal);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d105      	bne.n	8002bb8 <Motor_setSpeed+0x32>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002bb6:	e00e      	b.n	8002bd6 <Motor_setSpeed+0x50>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, speedVal);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d105      	bne.n	8002bcc <Motor_setSpeed+0x46>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002bca:	e004      	b.n	8002bd6 <Motor_setSpeed+0x50>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, speedVal);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <UltraSonic_init>:
#include "../Common/Delayus/delayus.h"

//Trig Port, Trig Pin, Echo Port, Echo Pin, Timer, Flag
void UltraSonic_init(ultraSonic_t *ultraSonic, TIM_HandleTypeDef *hTim,
		GPIO_TypeDef *GPIO_Trig, uint16_t GPIO_TrigPin, GPIO_TypeDef *GPIO_Echo,
		uint16_t GPIO_EchoPin) {
 8002be2:	b480      	push	{r7}
 8002be4:	b085      	sub	sp, #20
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
 8002bee:	807b      	strh	r3, [r7, #2]
	ultraSonic->hTim = hTim;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	601a      	str	r2, [r3, #0]
	ultraSonic->GPIO_Trig = GPIO_Trig;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	605a      	str	r2, [r3, #4]
	ultraSonic->GPIO_TrigPin = GPIO_TrigPin;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	887a      	ldrh	r2, [r7, #2]
 8002c00:	811a      	strh	r2, [r3, #8]
	ultraSonic->GPIO_Echo = GPIO_Echo;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	60da      	str	r2, [r3, #12]
	ultraSonic->GPIO_EchoPin = GPIO_EchoPin;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8bba      	ldrh	r2, [r7, #28]
 8002c0c:	821a      	strh	r2, [r3, #16]
	ultraSonic->timCounter = 0;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	825a      	strh	r2, [r3, #18]
	ultraSonic->echoFlag = 0;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	615a      	str	r2, [r3, #20]
}
 8002c1a:	bf00      	nop
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <UltraSonic_isCmpltRecvEcho>:

int UltraSonic_isCmpltRecvEcho(ultraSonic_t *ultraSonic) {
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
	return ultraSonic->echoFlag;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695b      	ldr	r3, [r3, #20]
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <UltraSonic_clearEchoFlag>:
void UltraSonic_clearEchoFlag(ultraSonic_t *ultraSonic) {
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
	ultraSonic->echoFlag = 0;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	615a      	str	r2, [r3, #20]
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <UltraSonic_setEchoFlag>:
void UltraSonic_setEchoFlag(ultraSonic_t *ultraSonic) {
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
	ultraSonic->echoFlag = 1;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	615a      	str	r2, [r3, #20]
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <UltraSonic_getEchopinState>:
int UltraSonic_getEchopinState(ultraSonic_t *ultraSonic) {
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(ultraSonic->GPIO_Echo, ultraSonic->GPIO_EchoPin);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	8a1b      	ldrh	r3, [r3, #16]
 8002c82:	4619      	mov	r1, r3
 8002c84:	4610      	mov	r0, r2
 8002c86:	f000 fc1d 	bl	80034c4 <HAL_GPIO_ReadPin>
 8002c8a:	4603      	mov	r3, r0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <UltraSonic_clearTimer>:
void UltraSonic_clearTimer(ultraSonic_t *ultraSonic) {
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(ultraSonic->hTim, 0);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <UltraSonic_startTimer>:
void UltraSonic_startTimer(ultraSonic_t *ultraSonic) {
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(ultraSonic->hTim);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f001 fe1c 	bl	80048fc <HAL_TIM_Base_Start>
}
 8002cc4:	bf00      	nop
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <UltraSonic_stopTimer>:
void UltraSonic_stopTimer(ultraSonic_t *ultraSonic) {
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop(ultraSonic->hTim);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f001 fe69 	bl	80049b0 <HAL_TIM_Base_Stop>
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <UltraSonic_getTimerCounter>:
uint16_t UltraSonic_getTimerCounter(ultraSonic_t *ultraSonic) {
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
	return __HAL_TIM_GET_COUNTER(ultraSonic->hTim);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	b29b      	uxth	r3, r3
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <UltraSonic_startTrig>:

void UltraSonic_startTrig(ultraSonic_t *ultraSonic) {
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ultraSonic->GPIO_Trig, ultraSonic->GPIO_TrigPin, SET);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6858      	ldr	r0, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	891b      	ldrh	r3, [r3, #8]
 8002d14:	2201      	movs	r2, #1
 8002d16:	4619      	mov	r1, r3
 8002d18:	f000 fbec 	bl	80034f4 <HAL_GPIO_WritePin>
	DelayUS(15);
 8002d1c:	200f      	movs	r0, #15
 8002d1e:	f7fd ff65 	bl	8000bec <DelayUS>
	HAL_GPIO_WritePin(ultraSonic->GPIO_Trig, ultraSonic->GPIO_TrigPin, RESET);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6858      	ldr	r0, [r3, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	891b      	ldrh	r3, [r3, #8]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	f000 fbe1 	bl	80034f4 <HAL_GPIO_WritePin>
}
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <UltraSonic_ISR_Process>:

void UltraSonic_ISR_Process(ultraSonic_t *ultraSonic, uint16_t GPIO_Pin) {
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
 8002d42:	460b      	mov	r3, r1
 8002d44:	807b      	strh	r3, [r7, #2]
	if (GPIO_Pin == ultraSonic->GPIO_EchoPin) {
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	8a1b      	ldrh	r3, [r3, #16]
 8002d4a:	887a      	ldrh	r2, [r7, #2]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d11c      	bne.n	8002d8a <UltraSonic_ISR_Process+0x50>
		// Echo Pin High 유지 시간 측정
		if (UltraSonic_getEchopinState(ultraSonic)) { 	//Rising Edge
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7ff ff8e 	bl	8002c72 <UltraSonic_getEchopinState>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d009      	beq.n	8002d70 <UltraSonic_ISR_Process+0x36>
			UltraSonic_clearTimer(ultraSonic);					//CNT 0 Setting
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7ff ff99 	bl	8002c94 <UltraSonic_clearTimer>
			UltraSonic_startTimer(ultraSonic);					//Timer Start
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff ffa5 	bl	8002cb2 <UltraSonic_startTimer>
			UltraSonic_clearEchoFlag(ultraSonic);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff ff68 	bl	8002c3e <UltraSonic_clearEchoFlag>
			UltraSonic_stopTimer(ultraSonic);
			ultraSonic->timCounter = UltraSonic_getTimerCounter(ultraSonic);
			UltraSonic_setEchoFlag(ultraSonic);
		}
	}
}
 8002d6e:	e00c      	b.n	8002d8a <UltraSonic_ISR_Process+0x50>
			UltraSonic_stopTimer(ultraSonic);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff ffab 	bl	8002ccc <UltraSonic_stopTimer>
			ultraSonic->timCounter = UltraSonic_getTimerCounter(ultraSonic);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7ff ffb5 	bl	8002ce6 <UltraSonic_getTimerCounter>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	461a      	mov	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	825a      	strh	r2, [r3, #18]
			UltraSonic_setEchoFlag(ultraSonic);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff ff67 	bl	8002c58 <UltraSonic_setEchoFlag>
}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	0000      	movs	r0, r0
 8002d94:	0000      	movs	r0, r0
	...

08002d98 <UltraSonic_getDistance>:

int UltraSonic_getDistance(ultraSonic_t *ultraSonic) {
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
	int timeout = 0;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60fb      	str	r3, [r7, #12]
	UltraSonic_startTrig(ultraSonic);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7ff ffad 	bl	8002d04 <UltraSonic_startTrig>
	while (!UltraSonic_isCmpltRecvEcho(ultraSonic)) {
 8002daa:	e00a      	b.n	8002dc2 <UltraSonic_getDistance+0x2a>
		timeout++;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	3301      	adds	r3, #1
 8002db0:	60fb      	str	r3, [r7, #12]
		if (timeout > 20) return 0;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2b14      	cmp	r3, #20
 8002db6:	dd01      	ble.n	8002dbc <UltraSonic_getDistance+0x24>
 8002db8:	2300      	movs	r3, #0
 8002dba:	e01c      	b.n	8002df6 <UltraSonic_getDistance+0x5e>
		HAL_Delay(1);
 8002dbc:	2001      	movs	r0, #1
 8002dbe:	f000 f865 	bl	8002e8c <HAL_Delay>
	while (!UltraSonic_isCmpltRecvEcho(ultraSonic)) {
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff ff2f 	bl	8002c26 <UltraSonic_isCmpltRecvEcho>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0ee      	beq.n	8002dac <UltraSonic_getDistance+0x14>
	}
	UltraSonic_clearEchoFlag(ultraSonic);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7ff ff35 	bl	8002c3e <UltraSonic_clearEchoFlag>
	return ultraSonic->timCounter * 0.017;	//cm Distance
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	8a5b      	ldrh	r3, [r3, #18]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fd fccd 	bl	8000778 <__aeabi_i2d>
 8002dde:	a308      	add	r3, pc, #32	; (adr r3, 8002e00 <UltraSonic_getDistance+0x68>)
 8002de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de4:	f7fd fa4c 	bl	8000280 <__aeabi_dmul>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	4610      	mov	r0, r2
 8002dee:	4619      	mov	r1, r3
 8002df0:	f7fd fd2c 	bl	800084c <__aeabi_d2iz>
 8002df4:	4603      	mov	r3, r0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	b020c49c 	.word	0xb020c49c
 8002e04:	3f916872 	.word	0x3f916872

08002e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e0c:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <HAL_Init+0x40>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a0d      	ldr	r2, [pc, #52]	; (8002e48 <HAL_Init+0x40>)
 8002e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e18:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <HAL_Init+0x40>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a0a      	ldr	r2, [pc, #40]	; (8002e48 <HAL_Init+0x40>)
 8002e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e24:	4b08      	ldr	r3, [pc, #32]	; (8002e48 <HAL_Init+0x40>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a07      	ldr	r2, [pc, #28]	; (8002e48 <HAL_Init+0x40>)
 8002e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e30:	2003      	movs	r0, #3
 8002e32:	f000 f8fc 	bl	800302e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e36:	200f      	movs	r0, #15
 8002e38:	f7fe fde0 	bl	80019fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e3c:	f7fe fc1c 	bl	8001678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40023c00 	.word	0x40023c00

08002e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e50:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <HAL_IncTick+0x20>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	461a      	mov	r2, r3
 8002e56:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <HAL_IncTick+0x24>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	4a04      	ldr	r2, [pc, #16]	; (8002e70 <HAL_IncTick+0x24>)
 8002e5e:	6013      	str	r3, [r2, #0]
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	20000008 	.word	0x20000008
 8002e70:	200006d0 	.word	0x200006d0

08002e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  return uwTick;
 8002e78:	4b03      	ldr	r3, [pc, #12]	; (8002e88 <HAL_GetTick+0x14>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	200006d0 	.word	0x200006d0

08002e8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e94:	f7ff ffee 	bl	8002e74 <HAL_GetTick>
 8002e98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea4:	d005      	beq.n	8002eb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ea6:	4b0a      	ldr	r3, [pc, #40]	; (8002ed0 <HAL_Delay+0x44>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4413      	add	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002eb2:	bf00      	nop
 8002eb4:	f7ff ffde 	bl	8002e74 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d8f7      	bhi.n	8002eb4 <HAL_Delay+0x28>
  {
  }
}
 8002ec4:	bf00      	nop
 8002ec6:	bf00      	nop
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20000008 	.word	0x20000008

08002ed4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ee4:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <__NVIC_SetPriorityGrouping+0x44>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002efc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f06:	4a04      	ldr	r2, [pc, #16]	; (8002f18 <__NVIC_SetPriorityGrouping+0x44>)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	60d3      	str	r3, [r2, #12]
}
 8002f0c:	bf00      	nop
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	e000ed00 	.word	0xe000ed00

08002f1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f20:	4b04      	ldr	r3, [pc, #16]	; (8002f34 <__NVIC_GetPriorityGrouping+0x18>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	0a1b      	lsrs	r3, r3, #8
 8002f26:	f003 0307 	and.w	r3, r3, #7
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	e000ed00 	.word	0xe000ed00

08002f38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	db0b      	blt.n	8002f62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f4a:	79fb      	ldrb	r3, [r7, #7]
 8002f4c:	f003 021f 	and.w	r2, r3, #31
 8002f50:	4907      	ldr	r1, [pc, #28]	; (8002f70 <__NVIC_EnableIRQ+0x38>)
 8002f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f56:	095b      	lsrs	r3, r3, #5
 8002f58:	2001      	movs	r0, #1
 8002f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	e000e100 	.word	0xe000e100

08002f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	6039      	str	r1, [r7, #0]
 8002f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	db0a      	blt.n	8002f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	b2da      	uxtb	r2, r3
 8002f8c:	490c      	ldr	r1, [pc, #48]	; (8002fc0 <__NVIC_SetPriority+0x4c>)
 8002f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f92:	0112      	lsls	r2, r2, #4
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	440b      	add	r3, r1
 8002f98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f9c:	e00a      	b.n	8002fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	4908      	ldr	r1, [pc, #32]	; (8002fc4 <__NVIC_SetPriority+0x50>)
 8002fa4:	79fb      	ldrb	r3, [r7, #7]
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	3b04      	subs	r3, #4
 8002fac:	0112      	lsls	r2, r2, #4
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	761a      	strb	r2, [r3, #24]
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	e000e100 	.word	0xe000e100
 8002fc4:	e000ed00 	.word	0xe000ed00

08002fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b089      	sub	sp, #36	; 0x24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f1c3 0307 	rsb	r3, r3, #7
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	bf28      	it	cs
 8002fe6:	2304      	movcs	r3, #4
 8002fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	3304      	adds	r3, #4
 8002fee:	2b06      	cmp	r3, #6
 8002ff0:	d902      	bls.n	8002ff8 <NVIC_EncodePriority+0x30>
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	3b03      	subs	r3, #3
 8002ff6:	e000      	b.n	8002ffa <NVIC_EncodePriority+0x32>
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43da      	mvns	r2, r3
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	401a      	ands	r2, r3
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003010:	f04f 31ff 	mov.w	r1, #4294967295
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	fa01 f303 	lsl.w	r3, r1, r3
 800301a:	43d9      	mvns	r1, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003020:	4313      	orrs	r3, r2
         );
}
 8003022:	4618      	mov	r0, r3
 8003024:	3724      	adds	r7, #36	; 0x24
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b082      	sub	sp, #8
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7ff ff4c 	bl	8002ed4 <__NVIC_SetPriorityGrouping>
}
 800303c:	bf00      	nop
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
 8003050:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003052:	2300      	movs	r3, #0
 8003054:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003056:	f7ff ff61 	bl	8002f1c <__NVIC_GetPriorityGrouping>
 800305a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	68b9      	ldr	r1, [r7, #8]
 8003060:	6978      	ldr	r0, [r7, #20]
 8003062:	f7ff ffb1 	bl	8002fc8 <NVIC_EncodePriority>
 8003066:	4602      	mov	r2, r0
 8003068:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800306c:	4611      	mov	r1, r2
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff ff80 	bl	8002f74 <__NVIC_SetPriority>
}
 8003074:	bf00      	nop
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff ff54 	bl	8002f38 <__NVIC_EnableIRQ>
}
 8003090:	bf00      	nop
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030a6:	f7ff fee5 	bl	8002e74 <HAL_GetTick>
 80030aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d008      	beq.n	80030ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2280      	movs	r2, #128	; 0x80
 80030bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e052      	b.n	8003170 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0216 	bic.w	r2, r2, #22
 80030d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	695a      	ldr	r2, [r3, #20]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d103      	bne.n	80030fa <HAL_DMA_Abort+0x62>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d007      	beq.n	800310a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0208 	bic.w	r2, r2, #8
 8003108:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0201 	bic.w	r2, r2, #1
 8003118:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800311a:	e013      	b.n	8003144 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800311c:	f7ff feaa 	bl	8002e74 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b05      	cmp	r3, #5
 8003128:	d90c      	bls.n	8003144 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2220      	movs	r2, #32
 800312e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2203      	movs	r2, #3
 8003134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e015      	b.n	8003170 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1e4      	bne.n	800311c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003156:	223f      	movs	r2, #63	; 0x3f
 8003158:	409a      	lsls	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d004      	beq.n	8003196 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2280      	movs	r2, #128	; 0x80
 8003190:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e00c      	b.n	80031b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2205      	movs	r2, #5
 800319a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0201 	bic.w	r2, r2, #1
 80031ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031bc:	b480      	push	{r7}
 80031be:	b089      	sub	sp, #36	; 0x24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031d2:	2300      	movs	r3, #0
 80031d4:	61fb      	str	r3, [r7, #28]
 80031d6:	e159      	b.n	800348c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031d8:	2201      	movs	r2, #1
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	4013      	ands	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	f040 8148 	bne.w	8003486 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d005      	beq.n	800320e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800320a:	2b02      	cmp	r3, #2
 800320c:	d130      	bne.n	8003270 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	2203      	movs	r2, #3
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	43db      	mvns	r3, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4013      	ands	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4313      	orrs	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003244:	2201      	movs	r2, #1
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	43db      	mvns	r3, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4013      	ands	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	091b      	lsrs	r3, r3, #4
 800325a:	f003 0201 	and.w	r2, r3, #1
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4313      	orrs	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 0303 	and.w	r3, r3, #3
 8003278:	2b03      	cmp	r3, #3
 800327a:	d017      	beq.n	80032ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	2203      	movs	r2, #3
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4013      	ands	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f003 0303 	and.w	r3, r3, #3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d123      	bne.n	8003300 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	08da      	lsrs	r2, r3, #3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3208      	adds	r2, #8
 80032c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	220f      	movs	r2, #15
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4013      	ands	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	08da      	lsrs	r2, r3, #3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3208      	adds	r2, #8
 80032fa:	69b9      	ldr	r1, [r7, #24]
 80032fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	2203      	movs	r2, #3
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4013      	ands	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f003 0203 	and.w	r2, r3, #3
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 80a2 	beq.w	8003486 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	4b57      	ldr	r3, [pc, #348]	; (80034a4 <HAL_GPIO_Init+0x2e8>)
 8003348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334a:	4a56      	ldr	r2, [pc, #344]	; (80034a4 <HAL_GPIO_Init+0x2e8>)
 800334c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003350:	6453      	str	r3, [r2, #68]	; 0x44
 8003352:	4b54      	ldr	r3, [pc, #336]	; (80034a4 <HAL_GPIO_Init+0x2e8>)
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800335e:	4a52      	ldr	r2, [pc, #328]	; (80034a8 <HAL_GPIO_Init+0x2ec>)
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	089b      	lsrs	r3, r3, #2
 8003364:	3302      	adds	r3, #2
 8003366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800336a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	220f      	movs	r2, #15
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43db      	mvns	r3, r3
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	4013      	ands	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a49      	ldr	r2, [pc, #292]	; (80034ac <HAL_GPIO_Init+0x2f0>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d019      	beq.n	80033be <HAL_GPIO_Init+0x202>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a48      	ldr	r2, [pc, #288]	; (80034b0 <HAL_GPIO_Init+0x2f4>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d013      	beq.n	80033ba <HAL_GPIO_Init+0x1fe>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a47      	ldr	r2, [pc, #284]	; (80034b4 <HAL_GPIO_Init+0x2f8>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00d      	beq.n	80033b6 <HAL_GPIO_Init+0x1fa>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a46      	ldr	r2, [pc, #280]	; (80034b8 <HAL_GPIO_Init+0x2fc>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d007      	beq.n	80033b2 <HAL_GPIO_Init+0x1f6>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a45      	ldr	r2, [pc, #276]	; (80034bc <HAL_GPIO_Init+0x300>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d101      	bne.n	80033ae <HAL_GPIO_Init+0x1f2>
 80033aa:	2304      	movs	r3, #4
 80033ac:	e008      	b.n	80033c0 <HAL_GPIO_Init+0x204>
 80033ae:	2307      	movs	r3, #7
 80033b0:	e006      	b.n	80033c0 <HAL_GPIO_Init+0x204>
 80033b2:	2303      	movs	r3, #3
 80033b4:	e004      	b.n	80033c0 <HAL_GPIO_Init+0x204>
 80033b6:	2302      	movs	r3, #2
 80033b8:	e002      	b.n	80033c0 <HAL_GPIO_Init+0x204>
 80033ba:	2301      	movs	r3, #1
 80033bc:	e000      	b.n	80033c0 <HAL_GPIO_Init+0x204>
 80033be:	2300      	movs	r3, #0
 80033c0:	69fa      	ldr	r2, [r7, #28]
 80033c2:	f002 0203 	and.w	r2, r2, #3
 80033c6:	0092      	lsls	r2, r2, #2
 80033c8:	4093      	lsls	r3, r2
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033d0:	4935      	ldr	r1, [pc, #212]	; (80034a8 <HAL_GPIO_Init+0x2ec>)
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	089b      	lsrs	r3, r3, #2
 80033d6:	3302      	adds	r3, #2
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033de:	4b38      	ldr	r3, [pc, #224]	; (80034c0 <HAL_GPIO_Init+0x304>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	43db      	mvns	r3, r3
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	4013      	ands	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	4313      	orrs	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003402:	4a2f      	ldr	r2, [pc, #188]	; (80034c0 <HAL_GPIO_Init+0x304>)
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003408:	4b2d      	ldr	r3, [pc, #180]	; (80034c0 <HAL_GPIO_Init+0x304>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	43db      	mvns	r3, r3
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4013      	ands	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800342c:	4a24      	ldr	r2, [pc, #144]	; (80034c0 <HAL_GPIO_Init+0x304>)
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003432:	4b23      	ldr	r3, [pc, #140]	; (80034c0 <HAL_GPIO_Init+0x304>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	43db      	mvns	r3, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4013      	ands	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	4313      	orrs	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003456:	4a1a      	ldr	r2, [pc, #104]	; (80034c0 <HAL_GPIO_Init+0x304>)
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800345c:	4b18      	ldr	r3, [pc, #96]	; (80034c0 <HAL_GPIO_Init+0x304>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	43db      	mvns	r3, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4013      	ands	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	4313      	orrs	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003480:	4a0f      	ldr	r2, [pc, #60]	; (80034c0 <HAL_GPIO_Init+0x304>)
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	3301      	adds	r3, #1
 800348a:	61fb      	str	r3, [r7, #28]
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	2b0f      	cmp	r3, #15
 8003490:	f67f aea2 	bls.w	80031d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003494:	bf00      	nop
 8003496:	bf00      	nop
 8003498:	3724      	adds	r7, #36	; 0x24
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	40023800 	.word	0x40023800
 80034a8:	40013800 	.word	0x40013800
 80034ac:	40020000 	.word	0x40020000
 80034b0:	40020400 	.word	0x40020400
 80034b4:	40020800 	.word	0x40020800
 80034b8:	40020c00 	.word	0x40020c00
 80034bc:	40021000 	.word	0x40021000
 80034c0:	40013c00 	.word	0x40013c00

080034c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	887b      	ldrh	r3, [r7, #2]
 80034d6:	4013      	ands	r3, r2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034dc:	2301      	movs	r3, #1
 80034de:	73fb      	strb	r3, [r7, #15]
 80034e0:	e001      	b.n	80034e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034e2:	2300      	movs	r3, #0
 80034e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	460b      	mov	r3, r1
 80034fe:	807b      	strh	r3, [r7, #2]
 8003500:	4613      	mov	r3, r2
 8003502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003504:	787b      	ldrb	r3, [r7, #1]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800350a:	887a      	ldrh	r2, [r7, #2]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003510:	e003      	b.n	800351a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003512:	887b      	ldrh	r3, [r7, #2]
 8003514:	041a      	lsls	r2, r3, #16
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	619a      	str	r2, [r3, #24]
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003526:	b480      	push	{r7}
 8003528:	b085      	sub	sp, #20
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
 800352e:	460b      	mov	r3, r1
 8003530:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003538:	887a      	ldrh	r2, [r7, #2]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	4013      	ands	r3, r2
 800353e:	041a      	lsls	r2, r3, #16
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	43d9      	mvns	r1, r3
 8003544:	887b      	ldrh	r3, [r7, #2]
 8003546:	400b      	ands	r3, r1
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	619a      	str	r2, [r3, #24]
}
 800354e:	bf00      	nop
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
	...

0800355c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003566:	4b08      	ldr	r3, [pc, #32]	; (8003588 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003568:	695a      	ldr	r2, [r3, #20]
 800356a:	88fb      	ldrh	r3, [r7, #6]
 800356c:	4013      	ands	r3, r2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d006      	beq.n	8003580 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003572:	4a05      	ldr	r2, [pc, #20]	; (8003588 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003574:	88fb      	ldrh	r3, [r7, #6]
 8003576:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003578:	88fb      	ldrh	r3, [r7, #6]
 800357a:	4618      	mov	r0, r3
 800357c:	f7fd fc60 	bl	8000e40 <HAL_GPIO_EXTI_Callback>
  }
}
 8003580:	bf00      	nop
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40013c00 	.word	0x40013c00

0800358c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e12b      	b.n	80037f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7fe f88c 	bl	80016d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2224      	movs	r2, #36	; 0x24
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0201 	bic.w	r2, r2, #1
 80035ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035f0:	f001 f8da 	bl	80047a8 <HAL_RCC_GetPCLK1Freq>
 80035f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	4a81      	ldr	r2, [pc, #516]	; (8003800 <HAL_I2C_Init+0x274>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d807      	bhi.n	8003610 <HAL_I2C_Init+0x84>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4a80      	ldr	r2, [pc, #512]	; (8003804 <HAL_I2C_Init+0x278>)
 8003604:	4293      	cmp	r3, r2
 8003606:	bf94      	ite	ls
 8003608:	2301      	movls	r3, #1
 800360a:	2300      	movhi	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	e006      	b.n	800361e <HAL_I2C_Init+0x92>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4a7d      	ldr	r2, [pc, #500]	; (8003808 <HAL_I2C_Init+0x27c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	bf94      	ite	ls
 8003618:	2301      	movls	r3, #1
 800361a:	2300      	movhi	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e0e7      	b.n	80037f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	4a78      	ldr	r2, [pc, #480]	; (800380c <HAL_I2C_Init+0x280>)
 800362a:	fba2 2303 	umull	r2, r3, r2, r3
 800362e:	0c9b      	lsrs	r3, r3, #18
 8003630:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	430a      	orrs	r2, r1
 8003644:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	4a6a      	ldr	r2, [pc, #424]	; (8003800 <HAL_I2C_Init+0x274>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d802      	bhi.n	8003660 <HAL_I2C_Init+0xd4>
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	3301      	adds	r3, #1
 800365e:	e009      	b.n	8003674 <HAL_I2C_Init+0xe8>
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003666:	fb02 f303 	mul.w	r3, r2, r3
 800366a:	4a69      	ldr	r2, [pc, #420]	; (8003810 <HAL_I2C_Init+0x284>)
 800366c:	fba2 2303 	umull	r2, r3, r2, r3
 8003670:	099b      	lsrs	r3, r3, #6
 8003672:	3301      	adds	r3, #1
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6812      	ldr	r2, [r2, #0]
 8003678:	430b      	orrs	r3, r1
 800367a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003686:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	495c      	ldr	r1, [pc, #368]	; (8003800 <HAL_I2C_Init+0x274>)
 8003690:	428b      	cmp	r3, r1
 8003692:	d819      	bhi.n	80036c8 <HAL_I2C_Init+0x13c>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	1e59      	subs	r1, r3, #1
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	fbb1 f3f3 	udiv	r3, r1, r3
 80036a2:	1c59      	adds	r1, r3, #1
 80036a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036a8:	400b      	ands	r3, r1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00a      	beq.n	80036c4 <HAL_I2C_Init+0x138>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	1e59      	subs	r1, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80036bc:	3301      	adds	r3, #1
 80036be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c2:	e051      	b.n	8003768 <HAL_I2C_Init+0x1dc>
 80036c4:	2304      	movs	r3, #4
 80036c6:	e04f      	b.n	8003768 <HAL_I2C_Init+0x1dc>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d111      	bne.n	80036f4 <HAL_I2C_Init+0x168>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	1e58      	subs	r0, r3, #1
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6859      	ldr	r1, [r3, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	440b      	add	r3, r1
 80036de:	fbb0 f3f3 	udiv	r3, r0, r3
 80036e2:	3301      	adds	r3, #1
 80036e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	bf0c      	ite	eq
 80036ec:	2301      	moveq	r3, #1
 80036ee:	2300      	movne	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	e012      	b.n	800371a <HAL_I2C_Init+0x18e>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	1e58      	subs	r0, r3, #1
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6859      	ldr	r1, [r3, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	0099      	lsls	r1, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	fbb0 f3f3 	udiv	r3, r0, r3
 800370a:	3301      	adds	r3, #1
 800370c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003710:	2b00      	cmp	r3, #0
 8003712:	bf0c      	ite	eq
 8003714:	2301      	moveq	r3, #1
 8003716:	2300      	movne	r3, #0
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <HAL_I2C_Init+0x196>
 800371e:	2301      	movs	r3, #1
 8003720:	e022      	b.n	8003768 <HAL_I2C_Init+0x1dc>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10e      	bne.n	8003748 <HAL_I2C_Init+0x1bc>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	1e58      	subs	r0, r3, #1
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6859      	ldr	r1, [r3, #4]
 8003732:	460b      	mov	r3, r1
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	440b      	add	r3, r1
 8003738:	fbb0 f3f3 	udiv	r3, r0, r3
 800373c:	3301      	adds	r3, #1
 800373e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003746:	e00f      	b.n	8003768 <HAL_I2C_Init+0x1dc>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	1e58      	subs	r0, r3, #1
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6859      	ldr	r1, [r3, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	0099      	lsls	r1, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	fbb0 f3f3 	udiv	r3, r0, r3
 800375e:	3301      	adds	r3, #1
 8003760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003764:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	6809      	ldr	r1, [r1, #0]
 800376c:	4313      	orrs	r3, r2
 800376e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69da      	ldr	r2, [r3, #28]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003796:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6911      	ldr	r1, [r2, #16]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	68d2      	ldr	r2, [r2, #12]
 80037a2:	4311      	orrs	r1, r2
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	6812      	ldr	r2, [r2, #0]
 80037a8:	430b      	orrs	r3, r1
 80037aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	695a      	ldr	r2, [r3, #20]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0201 	orr.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2220      	movs	r2, #32
 80037e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	000186a0 	.word	0x000186a0
 8003804:	001e847f 	.word	0x001e847f
 8003808:	003d08ff 	.word	0x003d08ff
 800380c:	431bde83 	.word	0x431bde83
 8003810:	10624dd3 	.word	0x10624dd3

08003814 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af02      	add	r7, sp, #8
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	607a      	str	r2, [r7, #4]
 800381e:	461a      	mov	r2, r3
 8003820:	460b      	mov	r3, r1
 8003822:	817b      	strh	r3, [r7, #10]
 8003824:	4613      	mov	r3, r2
 8003826:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003828:	f7ff fb24 	bl	8002e74 <HAL_GetTick>
 800382c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b20      	cmp	r3, #32
 8003838:	f040 80e0 	bne.w	80039fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	2319      	movs	r3, #25
 8003842:	2201      	movs	r2, #1
 8003844:	4970      	ldr	r1, [pc, #448]	; (8003a08 <HAL_I2C_Master_Transmit+0x1f4>)
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 f964 	bl	8003b14 <I2C_WaitOnFlagUntilTimeout>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003852:	2302      	movs	r3, #2
 8003854:	e0d3      	b.n	80039fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_I2C_Master_Transmit+0x50>
 8003860:	2302      	movs	r3, #2
 8003862:	e0cc      	b.n	80039fe <HAL_I2C_Master_Transmit+0x1ea>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b01      	cmp	r3, #1
 8003878:	d007      	beq.n	800388a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f042 0201 	orr.w	r2, r2, #1
 8003888:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003898:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2221      	movs	r2, #33	; 0x21
 800389e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2210      	movs	r2, #16
 80038a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	893a      	ldrh	r2, [r7, #8]
 80038ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4a50      	ldr	r2, [pc, #320]	; (8003a0c <HAL_I2C_Master_Transmit+0x1f8>)
 80038ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038cc:	8979      	ldrh	r1, [r7, #10]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	6a3a      	ldr	r2, [r7, #32]
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 f89c 	bl	8003a10 <I2C_MasterRequestWrite>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e08d      	b.n	80039fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038e2:	2300      	movs	r3, #0
 80038e4:	613b      	str	r3, [r7, #16]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	613b      	str	r3, [r7, #16]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80038f8:	e066      	b.n	80039c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	6a39      	ldr	r1, [r7, #32]
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 fa22 	bl	8003d48 <I2C_WaitOnTXEFlagUntilTimeout>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00d      	beq.n	8003926 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	2b04      	cmp	r3, #4
 8003910:	d107      	bne.n	8003922 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003920:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e06b      	b.n	80039fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	781a      	ldrb	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	1c5a      	adds	r2, r3, #1
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003940:	b29b      	uxth	r3, r3
 8003942:	3b01      	subs	r3, #1
 8003944:	b29a      	uxth	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394e:	3b01      	subs	r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b04      	cmp	r3, #4
 8003962:	d11b      	bne.n	800399c <HAL_I2C_Master_Transmit+0x188>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003968:	2b00      	cmp	r3, #0
 800396a:	d017      	beq.n	800399c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	781a      	ldrb	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003986:	b29b      	uxth	r3, r3
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	6a39      	ldr	r1, [r7, #32]
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 fa19 	bl	8003dd8 <I2C_WaitOnBTFFlagUntilTimeout>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00d      	beq.n	80039c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d107      	bne.n	80039c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e01a      	b.n	80039fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d194      	bne.n	80038fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2220      	movs	r2, #32
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039f8:	2300      	movs	r3, #0
 80039fa:	e000      	b.n	80039fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80039fc:	2302      	movs	r3, #2
  }
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	00100002 	.word	0x00100002
 8003a0c:	ffff0000 	.word	0xffff0000

08003a10 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af02      	add	r7, sp, #8
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	607a      	str	r2, [r7, #4]
 8003a1a:	603b      	str	r3, [r7, #0]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a24:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d006      	beq.n	8003a3a <I2C_MasterRequestWrite+0x2a>
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d003      	beq.n	8003a3a <I2C_MasterRequestWrite+0x2a>
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a38:	d108      	bne.n	8003a4c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	e00b      	b.n	8003a64 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a50:	2b12      	cmp	r3, #18
 8003a52:	d107      	bne.n	8003a64 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 f84f 	bl	8003b14 <I2C_WaitOnFlagUntilTimeout>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00d      	beq.n	8003a98 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a8a:	d103      	bne.n	8003a94 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e035      	b.n	8003b04 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003aa0:	d108      	bne.n	8003ab4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003aa2:	897b      	ldrh	r3, [r7, #10]
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ab0:	611a      	str	r2, [r3, #16]
 8003ab2:	e01b      	b.n	8003aec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ab4:	897b      	ldrh	r3, [r7, #10]
 8003ab6:	11db      	asrs	r3, r3, #7
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	f003 0306 	and.w	r3, r3, #6
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	f063 030f 	orn	r3, r3, #15
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	490e      	ldr	r1, [pc, #56]	; (8003b0c <I2C_MasterRequestWrite+0xfc>)
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 f898 	bl	8003c08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e010      	b.n	8003b04 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ae2:	897b      	ldrh	r3, [r7, #10]
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	4907      	ldr	r1, [pc, #28]	; (8003b10 <I2C_MasterRequestWrite+0x100>)
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 f888 	bl	8003c08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e000      	b.n	8003b04 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	00010008 	.word	0x00010008
 8003b10:	00010002 	.word	0x00010002

08003b14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	603b      	str	r3, [r7, #0]
 8003b20:	4613      	mov	r3, r2
 8003b22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b24:	e048      	b.n	8003bb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2c:	d044      	beq.n	8003bb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b2e:	f7ff f9a1 	bl	8002e74 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d302      	bcc.n	8003b44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d139      	bne.n	8003bb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	0c1b      	lsrs	r3, r3, #16
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d10d      	bne.n	8003b6a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	43da      	mvns	r2, r3
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	bf0c      	ite	eq
 8003b60:	2301      	moveq	r3, #1
 8003b62:	2300      	movne	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	461a      	mov	r2, r3
 8003b68:	e00c      	b.n	8003b84 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	43da      	mvns	r2, r3
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	4013      	ands	r3, r2
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	bf0c      	ite	eq
 8003b7c:	2301      	moveq	r3, #1
 8003b7e:	2300      	movne	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	461a      	mov	r2, r3
 8003b84:	79fb      	ldrb	r3, [r7, #7]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d116      	bne.n	8003bb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba4:	f043 0220 	orr.w	r2, r3, #32
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e023      	b.n	8003c00 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	0c1b      	lsrs	r3, r3, #16
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d10d      	bne.n	8003bde <I2C_WaitOnFlagUntilTimeout+0xca>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	43da      	mvns	r2, r3
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	bf0c      	ite	eq
 8003bd4:	2301      	moveq	r3, #1
 8003bd6:	2300      	movne	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	461a      	mov	r2, r3
 8003bdc:	e00c      	b.n	8003bf8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	43da      	mvns	r2, r3
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	4013      	ands	r3, r2
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	bf0c      	ite	eq
 8003bf0:	2301      	moveq	r3, #1
 8003bf2:	2300      	movne	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	79fb      	ldrb	r3, [r7, #7]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d093      	beq.n	8003b26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
 8003c14:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c16:	e071      	b.n	8003cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c26:	d123      	bne.n	8003c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c36:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	f043 0204 	orr.w	r2, r3, #4
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e067      	b.n	8003d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c76:	d041      	beq.n	8003cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c78:	f7ff f8fc 	bl	8002e74 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d302      	bcc.n	8003c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d136      	bne.n	8003cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	0c1b      	lsrs	r3, r3, #16
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d10c      	bne.n	8003cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	43da      	mvns	r2, r3
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	bf14      	ite	ne
 8003caa:	2301      	movne	r3, #1
 8003cac:	2300      	moveq	r3, #0
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	e00b      	b.n	8003cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	43da      	mvns	r2, r3
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	bf14      	ite	ne
 8003cc4:	2301      	movne	r3, #1
 8003cc6:	2300      	moveq	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d016      	beq.n	8003cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	f043 0220 	orr.w	r2, r3, #32
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e021      	b.n	8003d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	0c1b      	lsrs	r3, r3, #16
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d10c      	bne.n	8003d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	43da      	mvns	r2, r3
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	4013      	ands	r3, r2
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	bf14      	ite	ne
 8003d18:	2301      	movne	r3, #1
 8003d1a:	2300      	moveq	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	e00b      	b.n	8003d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	43da      	mvns	r2, r3
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	bf14      	ite	ne
 8003d32:	2301      	movne	r3, #1
 8003d34:	2300      	moveq	r3, #0
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f47f af6d 	bne.w	8003c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d54:	e034      	b.n	8003dc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 f886 	bl	8003e68 <I2C_IsAcknowledgeFailed>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e034      	b.n	8003dd0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6c:	d028      	beq.n	8003dc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d6e:	f7ff f881 	bl	8002e74 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d302      	bcc.n	8003d84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d11d      	bne.n	8003dc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8e:	2b80      	cmp	r3, #128	; 0x80
 8003d90:	d016      	beq.n	8003dc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	f043 0220 	orr.w	r2, r3, #32
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e007      	b.n	8003dd0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dca:	2b80      	cmp	r3, #128	; 0x80
 8003dcc:	d1c3      	bne.n	8003d56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003de4:	e034      	b.n	8003e50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 f83e 	bl	8003e68 <I2C_IsAcknowledgeFailed>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e034      	b.n	8003e60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfc:	d028      	beq.n	8003e50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dfe:	f7ff f839 	bl	8002e74 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d302      	bcc.n	8003e14 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d11d      	bne.n	8003e50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	f003 0304 	and.w	r3, r3, #4
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	d016      	beq.n	8003e50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3c:	f043 0220 	orr.w	r2, r3, #32
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e007      	b.n	8003e60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	f003 0304 	and.w	r3, r3, #4
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	d1c3      	bne.n	8003de6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e7e:	d11b      	bne.n	8003eb8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	f043 0204 	orr.w	r2, r3, #4
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e000      	b.n	8003eba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
	...

08003ec8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e267      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d075      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ee6:	4b88      	ldr	r3, [pc, #544]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 030c 	and.w	r3, r3, #12
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d00c      	beq.n	8003f0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ef2:	4b85      	ldr	r3, [pc, #532]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d112      	bne.n	8003f24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003efe:	4b82      	ldr	r3, [pc, #520]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f0a:	d10b      	bne.n	8003f24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f0c:	4b7e      	ldr	r3, [pc, #504]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d05b      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x108>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d157      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e242      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f2c:	d106      	bne.n	8003f3c <HAL_RCC_OscConfig+0x74>
 8003f2e:	4b76      	ldr	r3, [pc, #472]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a75      	ldr	r2, [pc, #468]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	e01d      	b.n	8003f78 <HAL_RCC_OscConfig+0xb0>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f44:	d10c      	bne.n	8003f60 <HAL_RCC_OscConfig+0x98>
 8003f46:	4b70      	ldr	r3, [pc, #448]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a6f      	ldr	r2, [pc, #444]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	4b6d      	ldr	r3, [pc, #436]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a6c      	ldr	r2, [pc, #432]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	e00b      	b.n	8003f78 <HAL_RCC_OscConfig+0xb0>
 8003f60:	4b69      	ldr	r3, [pc, #420]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a68      	ldr	r2, [pc, #416]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f6a:	6013      	str	r3, [r2, #0]
 8003f6c:	4b66      	ldr	r3, [pc, #408]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a65      	ldr	r2, [pc, #404]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d013      	beq.n	8003fa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f80:	f7fe ff78 	bl	8002e74 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f88:	f7fe ff74 	bl	8002e74 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b64      	cmp	r3, #100	; 0x64
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e207      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9a:	4b5b      	ldr	r3, [pc, #364]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0f0      	beq.n	8003f88 <HAL_RCC_OscConfig+0xc0>
 8003fa6:	e014      	b.n	8003fd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa8:	f7fe ff64 	bl	8002e74 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fb0:	f7fe ff60 	bl	8002e74 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b64      	cmp	r3, #100	; 0x64
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e1f3      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fc2:	4b51      	ldr	r3, [pc, #324]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1f0      	bne.n	8003fb0 <HAL_RCC_OscConfig+0xe8>
 8003fce:	e000      	b.n	8003fd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d063      	beq.n	80040a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fde:	4b4a      	ldr	r3, [pc, #296]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 030c 	and.w	r3, r3, #12
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00b      	beq.n	8004002 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fea:	4b47      	ldr	r3, [pc, #284]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ff2:	2b08      	cmp	r3, #8
 8003ff4:	d11c      	bne.n	8004030 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ff6:	4b44      	ldr	r3, [pc, #272]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d116      	bne.n	8004030 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004002:	4b41      	ldr	r3, [pc, #260]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d005      	beq.n	800401a <HAL_RCC_OscConfig+0x152>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d001      	beq.n	800401a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e1c7      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800401a:	4b3b      	ldr	r3, [pc, #236]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	4937      	ldr	r1, [pc, #220]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 800402a:	4313      	orrs	r3, r2
 800402c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800402e:	e03a      	b.n	80040a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d020      	beq.n	800407a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004038:	4b34      	ldr	r3, [pc, #208]	; (800410c <HAL_RCC_OscConfig+0x244>)
 800403a:	2201      	movs	r2, #1
 800403c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403e:	f7fe ff19 	bl	8002e74 <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004046:	f7fe ff15 	bl	8002e74 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e1a8      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004058:	4b2b      	ldr	r3, [pc, #172]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0f0      	beq.n	8004046 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004064:	4b28      	ldr	r3, [pc, #160]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	4925      	ldr	r1, [pc, #148]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8004074:	4313      	orrs	r3, r2
 8004076:	600b      	str	r3, [r1, #0]
 8004078:	e015      	b.n	80040a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800407a:	4b24      	ldr	r3, [pc, #144]	; (800410c <HAL_RCC_OscConfig+0x244>)
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004080:	f7fe fef8 	bl	8002e74 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004088:	f7fe fef4 	bl	8002e74 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e187      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800409a:	4b1b      	ldr	r3, [pc, #108]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1f0      	bne.n	8004088 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0308 	and.w	r3, r3, #8
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d036      	beq.n	8004120 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d016      	beq.n	80040e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ba:	4b15      	ldr	r3, [pc, #84]	; (8004110 <HAL_RCC_OscConfig+0x248>)
 80040bc:	2201      	movs	r2, #1
 80040be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c0:	f7fe fed8 	bl	8002e74 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040c8:	f7fe fed4 	bl	8002e74 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e167      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040da:	4b0b      	ldr	r3, [pc, #44]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 80040dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0f0      	beq.n	80040c8 <HAL_RCC_OscConfig+0x200>
 80040e6:	e01b      	b.n	8004120 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040e8:	4b09      	ldr	r3, [pc, #36]	; (8004110 <HAL_RCC_OscConfig+0x248>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ee:	f7fe fec1 	bl	8002e74 <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040f4:	e00e      	b.n	8004114 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040f6:	f7fe febd 	bl	8002e74 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d907      	bls.n	8004114 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e150      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
 8004108:	40023800 	.word	0x40023800
 800410c:	42470000 	.word	0x42470000
 8004110:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004114:	4b88      	ldr	r3, [pc, #544]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 8004116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1ea      	bne.n	80040f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 8097 	beq.w	800425c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800412e:	2300      	movs	r3, #0
 8004130:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004132:	4b81      	ldr	r3, [pc, #516]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10f      	bne.n	800415e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800413e:	2300      	movs	r3, #0
 8004140:	60bb      	str	r3, [r7, #8]
 8004142:	4b7d      	ldr	r3, [pc, #500]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	4a7c      	ldr	r2, [pc, #496]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 8004148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800414c:	6413      	str	r3, [r2, #64]	; 0x40
 800414e:	4b7a      	ldr	r3, [pc, #488]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004156:	60bb      	str	r3, [r7, #8]
 8004158:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800415a:	2301      	movs	r3, #1
 800415c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800415e:	4b77      	ldr	r3, [pc, #476]	; (800433c <HAL_RCC_OscConfig+0x474>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004166:	2b00      	cmp	r3, #0
 8004168:	d118      	bne.n	800419c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800416a:	4b74      	ldr	r3, [pc, #464]	; (800433c <HAL_RCC_OscConfig+0x474>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a73      	ldr	r2, [pc, #460]	; (800433c <HAL_RCC_OscConfig+0x474>)
 8004170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004174:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004176:	f7fe fe7d 	bl	8002e74 <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800417c:	e008      	b.n	8004190 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800417e:	f7fe fe79 	bl	8002e74 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e10c      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004190:	4b6a      	ldr	r3, [pc, #424]	; (800433c <HAL_RCC_OscConfig+0x474>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0f0      	beq.n	800417e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d106      	bne.n	80041b2 <HAL_RCC_OscConfig+0x2ea>
 80041a4:	4b64      	ldr	r3, [pc, #400]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 80041a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a8:	4a63      	ldr	r2, [pc, #396]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 80041aa:	f043 0301 	orr.w	r3, r3, #1
 80041ae:	6713      	str	r3, [r2, #112]	; 0x70
 80041b0:	e01c      	b.n	80041ec <HAL_RCC_OscConfig+0x324>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	2b05      	cmp	r3, #5
 80041b8:	d10c      	bne.n	80041d4 <HAL_RCC_OscConfig+0x30c>
 80041ba:	4b5f      	ldr	r3, [pc, #380]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 80041bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041be:	4a5e      	ldr	r2, [pc, #376]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 80041c0:	f043 0304 	orr.w	r3, r3, #4
 80041c4:	6713      	str	r3, [r2, #112]	; 0x70
 80041c6:	4b5c      	ldr	r3, [pc, #368]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 80041c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ca:	4a5b      	ldr	r2, [pc, #364]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 80041cc:	f043 0301 	orr.w	r3, r3, #1
 80041d0:	6713      	str	r3, [r2, #112]	; 0x70
 80041d2:	e00b      	b.n	80041ec <HAL_RCC_OscConfig+0x324>
 80041d4:	4b58      	ldr	r3, [pc, #352]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 80041d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d8:	4a57      	ldr	r2, [pc, #348]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 80041da:	f023 0301 	bic.w	r3, r3, #1
 80041de:	6713      	str	r3, [r2, #112]	; 0x70
 80041e0:	4b55      	ldr	r3, [pc, #340]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 80041e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e4:	4a54      	ldr	r2, [pc, #336]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 80041e6:	f023 0304 	bic.w	r3, r3, #4
 80041ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d015      	beq.n	8004220 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f4:	f7fe fe3e 	bl	8002e74 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041fa:	e00a      	b.n	8004212 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041fc:	f7fe fe3a 	bl	8002e74 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	f241 3288 	movw	r2, #5000	; 0x1388
 800420a:	4293      	cmp	r3, r2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e0cb      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004212:	4b49      	ldr	r3, [pc, #292]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 8004214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0ee      	beq.n	80041fc <HAL_RCC_OscConfig+0x334>
 800421e:	e014      	b.n	800424a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004220:	f7fe fe28 	bl	8002e74 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004226:	e00a      	b.n	800423e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004228:	f7fe fe24 	bl	8002e74 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	f241 3288 	movw	r2, #5000	; 0x1388
 8004236:	4293      	cmp	r3, r2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e0b5      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800423e:	4b3e      	ldr	r3, [pc, #248]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 8004240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1ee      	bne.n	8004228 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800424a:	7dfb      	ldrb	r3, [r7, #23]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d105      	bne.n	800425c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004250:	4b39      	ldr	r3, [pc, #228]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 8004252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004254:	4a38      	ldr	r2, [pc, #224]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 8004256:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800425a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 80a1 	beq.w	80043a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004266:	4b34      	ldr	r3, [pc, #208]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 030c 	and.w	r3, r3, #12
 800426e:	2b08      	cmp	r3, #8
 8004270:	d05c      	beq.n	800432c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d141      	bne.n	80042fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800427a:	4b31      	ldr	r3, [pc, #196]	; (8004340 <HAL_RCC_OscConfig+0x478>)
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004280:	f7fe fdf8 	bl	8002e74 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004288:	f7fe fdf4 	bl	8002e74 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e087      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800429a:	4b27      	ldr	r3, [pc, #156]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	69da      	ldr	r2, [r3, #28]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	019b      	lsls	r3, r3, #6
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042bc:	085b      	lsrs	r3, r3, #1
 80042be:	3b01      	subs	r3, #1
 80042c0:	041b      	lsls	r3, r3, #16
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c8:	061b      	lsls	r3, r3, #24
 80042ca:	491b      	ldr	r1, [pc, #108]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042d0:	4b1b      	ldr	r3, [pc, #108]	; (8004340 <HAL_RCC_OscConfig+0x478>)
 80042d2:	2201      	movs	r2, #1
 80042d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d6:	f7fe fdcd 	bl	8002e74 <HAL_GetTick>
 80042da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042dc:	e008      	b.n	80042f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042de:	f7fe fdc9 	bl	8002e74 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d901      	bls.n	80042f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e05c      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f0:	4b11      	ldr	r3, [pc, #68]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d0f0      	beq.n	80042de <HAL_RCC_OscConfig+0x416>
 80042fc:	e054      	b.n	80043a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042fe:	4b10      	ldr	r3, [pc, #64]	; (8004340 <HAL_RCC_OscConfig+0x478>)
 8004300:	2200      	movs	r2, #0
 8004302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004304:	f7fe fdb6 	bl	8002e74 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800430c:	f7fe fdb2 	bl	8002e74 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e045      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800431e:	4b06      	ldr	r3, [pc, #24]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1f0      	bne.n	800430c <HAL_RCC_OscConfig+0x444>
 800432a:	e03d      	b.n	80043a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d107      	bne.n	8004344 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e038      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
 8004338:	40023800 	.word	0x40023800
 800433c:	40007000 	.word	0x40007000
 8004340:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004344:	4b1b      	ldr	r3, [pc, #108]	; (80043b4 <HAL_RCC_OscConfig+0x4ec>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d028      	beq.n	80043a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800435c:	429a      	cmp	r2, r3
 800435e:	d121      	bne.n	80043a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800436a:	429a      	cmp	r2, r3
 800436c:	d11a      	bne.n	80043a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004374:	4013      	ands	r3, r2
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800437a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800437c:	4293      	cmp	r3, r2
 800437e:	d111      	bne.n	80043a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438a:	085b      	lsrs	r3, r3, #1
 800438c:	3b01      	subs	r3, #1
 800438e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004390:	429a      	cmp	r2, r3
 8004392:	d107      	bne.n	80043a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d001      	beq.n	80043a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e000      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	40023800 	.word	0x40023800

080043b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e0cc      	b.n	8004566 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043cc:	4b68      	ldr	r3, [pc, #416]	; (8004570 <HAL_RCC_ClockConfig+0x1b8>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0307 	and.w	r3, r3, #7
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d90c      	bls.n	80043f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043da:	4b65      	ldr	r3, [pc, #404]	; (8004570 <HAL_RCC_ClockConfig+0x1b8>)
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	b2d2      	uxtb	r2, r2
 80043e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e2:	4b63      	ldr	r3, [pc, #396]	; (8004570 <HAL_RCC_ClockConfig+0x1b8>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d001      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e0b8      	b.n	8004566 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d020      	beq.n	8004442 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	d005      	beq.n	8004418 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800440c:	4b59      	ldr	r3, [pc, #356]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	4a58      	ldr	r2, [pc, #352]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 8004412:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004416:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b00      	cmp	r3, #0
 8004422:	d005      	beq.n	8004430 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004424:	4b53      	ldr	r3, [pc, #332]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	4a52      	ldr	r2, [pc, #328]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 800442a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800442e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004430:	4b50      	ldr	r3, [pc, #320]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	494d      	ldr	r1, [pc, #308]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 800443e:	4313      	orrs	r3, r2
 8004440:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d044      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d107      	bne.n	8004466 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004456:	4b47      	ldr	r3, [pc, #284]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d119      	bne.n	8004496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e07f      	b.n	8004566 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b02      	cmp	r3, #2
 800446c:	d003      	beq.n	8004476 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004472:	2b03      	cmp	r3, #3
 8004474:	d107      	bne.n	8004486 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004476:	4b3f      	ldr	r3, [pc, #252]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d109      	bne.n	8004496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e06f      	b.n	8004566 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004486:	4b3b      	ldr	r3, [pc, #236]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e067      	b.n	8004566 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004496:	4b37      	ldr	r3, [pc, #220]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f023 0203 	bic.w	r2, r3, #3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	4934      	ldr	r1, [pc, #208]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044a8:	f7fe fce4 	bl	8002e74 <HAL_GetTick>
 80044ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ae:	e00a      	b.n	80044c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044b0:	f7fe fce0 	bl	8002e74 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80044be:	4293      	cmp	r3, r2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e04f      	b.n	8004566 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c6:	4b2b      	ldr	r3, [pc, #172]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 020c 	and.w	r2, r3, #12
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d1eb      	bne.n	80044b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044d8:	4b25      	ldr	r3, [pc, #148]	; (8004570 <HAL_RCC_ClockConfig+0x1b8>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d20c      	bcs.n	8004500 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e6:	4b22      	ldr	r3, [pc, #136]	; (8004570 <HAL_RCC_ClockConfig+0x1b8>)
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	b2d2      	uxtb	r2, r2
 80044ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ee:	4b20      	ldr	r3, [pc, #128]	; (8004570 <HAL_RCC_ClockConfig+0x1b8>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d001      	beq.n	8004500 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e032      	b.n	8004566 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b00      	cmp	r3, #0
 800450a:	d008      	beq.n	800451e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800450c:	4b19      	ldr	r3, [pc, #100]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	4916      	ldr	r1, [pc, #88]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 800451a:	4313      	orrs	r3, r2
 800451c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d009      	beq.n	800453e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800452a:	4b12      	ldr	r3, [pc, #72]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	490e      	ldr	r1, [pc, #56]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 800453a:	4313      	orrs	r3, r2
 800453c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800453e:	f000 f821 	bl	8004584 <HAL_RCC_GetSysClockFreq>
 8004542:	4602      	mov	r2, r0
 8004544:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	091b      	lsrs	r3, r3, #4
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	490a      	ldr	r1, [pc, #40]	; (8004578 <HAL_RCC_ClockConfig+0x1c0>)
 8004550:	5ccb      	ldrb	r3, [r1, r3]
 8004552:	fa22 f303 	lsr.w	r3, r2, r3
 8004556:	4a09      	ldr	r2, [pc, #36]	; (800457c <HAL_RCC_ClockConfig+0x1c4>)
 8004558:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800455a:	4b09      	ldr	r3, [pc, #36]	; (8004580 <HAL_RCC_ClockConfig+0x1c8>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4618      	mov	r0, r3
 8004560:	f7fd fa4c 	bl	80019fc <HAL_InitTick>

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40023c00 	.word	0x40023c00
 8004574:	40023800 	.word	0x40023800
 8004578:	080094b0 	.word	0x080094b0
 800457c:	20000000 	.word	0x20000000
 8004580:	20000004 	.word	0x20000004

08004584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004588:	b094      	sub	sp, #80	; 0x50
 800458a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	647b      	str	r3, [r7, #68]	; 0x44
 8004590:	2300      	movs	r3, #0
 8004592:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004594:	2300      	movs	r3, #0
 8004596:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800459c:	4b79      	ldr	r3, [pc, #484]	; (8004784 <HAL_RCC_GetSysClockFreq+0x200>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 030c 	and.w	r3, r3, #12
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d00d      	beq.n	80045c4 <HAL_RCC_GetSysClockFreq+0x40>
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	f200 80e1 	bhi.w	8004770 <HAL_RCC_GetSysClockFreq+0x1ec>
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <HAL_RCC_GetSysClockFreq+0x34>
 80045b2:	2b04      	cmp	r3, #4
 80045b4:	d003      	beq.n	80045be <HAL_RCC_GetSysClockFreq+0x3a>
 80045b6:	e0db      	b.n	8004770 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045b8:	4b73      	ldr	r3, [pc, #460]	; (8004788 <HAL_RCC_GetSysClockFreq+0x204>)
 80045ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80045bc:	e0db      	b.n	8004776 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045be:	4b73      	ldr	r3, [pc, #460]	; (800478c <HAL_RCC_GetSysClockFreq+0x208>)
 80045c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045c2:	e0d8      	b.n	8004776 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045c4:	4b6f      	ldr	r3, [pc, #444]	; (8004784 <HAL_RCC_GetSysClockFreq+0x200>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045ce:	4b6d      	ldr	r3, [pc, #436]	; (8004784 <HAL_RCC_GetSysClockFreq+0x200>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d063      	beq.n	80046a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045da:	4b6a      	ldr	r3, [pc, #424]	; (8004784 <HAL_RCC_GetSysClockFreq+0x200>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	099b      	lsrs	r3, r3, #6
 80045e0:	2200      	movs	r2, #0
 80045e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80045e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80045e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ec:	633b      	str	r3, [r7, #48]	; 0x30
 80045ee:	2300      	movs	r3, #0
 80045f0:	637b      	str	r3, [r7, #52]	; 0x34
 80045f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80045f6:	4622      	mov	r2, r4
 80045f8:	462b      	mov	r3, r5
 80045fa:	f04f 0000 	mov.w	r0, #0
 80045fe:	f04f 0100 	mov.w	r1, #0
 8004602:	0159      	lsls	r1, r3, #5
 8004604:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004608:	0150      	lsls	r0, r2, #5
 800460a:	4602      	mov	r2, r0
 800460c:	460b      	mov	r3, r1
 800460e:	4621      	mov	r1, r4
 8004610:	1a51      	subs	r1, r2, r1
 8004612:	6139      	str	r1, [r7, #16]
 8004614:	4629      	mov	r1, r5
 8004616:	eb63 0301 	sbc.w	r3, r3, r1
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	f04f 0300 	mov.w	r3, #0
 8004624:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004628:	4659      	mov	r1, fp
 800462a:	018b      	lsls	r3, r1, #6
 800462c:	4651      	mov	r1, sl
 800462e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004632:	4651      	mov	r1, sl
 8004634:	018a      	lsls	r2, r1, #6
 8004636:	4651      	mov	r1, sl
 8004638:	ebb2 0801 	subs.w	r8, r2, r1
 800463c:	4659      	mov	r1, fp
 800463e:	eb63 0901 	sbc.w	r9, r3, r1
 8004642:	f04f 0200 	mov.w	r2, #0
 8004646:	f04f 0300 	mov.w	r3, #0
 800464a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800464e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004652:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004656:	4690      	mov	r8, r2
 8004658:	4699      	mov	r9, r3
 800465a:	4623      	mov	r3, r4
 800465c:	eb18 0303 	adds.w	r3, r8, r3
 8004660:	60bb      	str	r3, [r7, #8]
 8004662:	462b      	mov	r3, r5
 8004664:	eb49 0303 	adc.w	r3, r9, r3
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	f04f 0200 	mov.w	r2, #0
 800466e:	f04f 0300 	mov.w	r3, #0
 8004672:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004676:	4629      	mov	r1, r5
 8004678:	024b      	lsls	r3, r1, #9
 800467a:	4621      	mov	r1, r4
 800467c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004680:	4621      	mov	r1, r4
 8004682:	024a      	lsls	r2, r1, #9
 8004684:	4610      	mov	r0, r2
 8004686:	4619      	mov	r1, r3
 8004688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800468a:	2200      	movs	r2, #0
 800468c:	62bb      	str	r3, [r7, #40]	; 0x28
 800468e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004690:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004694:	f7fc f902 	bl	800089c <__aeabi_uldivmod>
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	4613      	mov	r3, r2
 800469e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046a0:	e058      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046a2:	4b38      	ldr	r3, [pc, #224]	; (8004784 <HAL_RCC_GetSysClockFreq+0x200>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	099b      	lsrs	r3, r3, #6
 80046a8:	2200      	movs	r2, #0
 80046aa:	4618      	mov	r0, r3
 80046ac:	4611      	mov	r1, r2
 80046ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046b2:	623b      	str	r3, [r7, #32]
 80046b4:	2300      	movs	r3, #0
 80046b6:	627b      	str	r3, [r7, #36]	; 0x24
 80046b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046bc:	4642      	mov	r2, r8
 80046be:	464b      	mov	r3, r9
 80046c0:	f04f 0000 	mov.w	r0, #0
 80046c4:	f04f 0100 	mov.w	r1, #0
 80046c8:	0159      	lsls	r1, r3, #5
 80046ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046ce:	0150      	lsls	r0, r2, #5
 80046d0:	4602      	mov	r2, r0
 80046d2:	460b      	mov	r3, r1
 80046d4:	4641      	mov	r1, r8
 80046d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80046da:	4649      	mov	r1, r9
 80046dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80046e0:	f04f 0200 	mov.w	r2, #0
 80046e4:	f04f 0300 	mov.w	r3, #0
 80046e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80046ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80046f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80046f4:	ebb2 040a 	subs.w	r4, r2, sl
 80046f8:	eb63 050b 	sbc.w	r5, r3, fp
 80046fc:	f04f 0200 	mov.w	r2, #0
 8004700:	f04f 0300 	mov.w	r3, #0
 8004704:	00eb      	lsls	r3, r5, #3
 8004706:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800470a:	00e2      	lsls	r2, r4, #3
 800470c:	4614      	mov	r4, r2
 800470e:	461d      	mov	r5, r3
 8004710:	4643      	mov	r3, r8
 8004712:	18e3      	adds	r3, r4, r3
 8004714:	603b      	str	r3, [r7, #0]
 8004716:	464b      	mov	r3, r9
 8004718:	eb45 0303 	adc.w	r3, r5, r3
 800471c:	607b      	str	r3, [r7, #4]
 800471e:	f04f 0200 	mov.w	r2, #0
 8004722:	f04f 0300 	mov.w	r3, #0
 8004726:	e9d7 4500 	ldrd	r4, r5, [r7]
 800472a:	4629      	mov	r1, r5
 800472c:	028b      	lsls	r3, r1, #10
 800472e:	4621      	mov	r1, r4
 8004730:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004734:	4621      	mov	r1, r4
 8004736:	028a      	lsls	r2, r1, #10
 8004738:	4610      	mov	r0, r2
 800473a:	4619      	mov	r1, r3
 800473c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800473e:	2200      	movs	r2, #0
 8004740:	61bb      	str	r3, [r7, #24]
 8004742:	61fa      	str	r2, [r7, #28]
 8004744:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004748:	f7fc f8a8 	bl	800089c <__aeabi_uldivmod>
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	4613      	mov	r3, r2
 8004752:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004754:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <HAL_RCC_GetSysClockFreq+0x200>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	0c1b      	lsrs	r3, r3, #16
 800475a:	f003 0303 	and.w	r3, r3, #3
 800475e:	3301      	adds	r3, #1
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004764:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004768:	fbb2 f3f3 	udiv	r3, r2, r3
 800476c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800476e:	e002      	b.n	8004776 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004770:	4b05      	ldr	r3, [pc, #20]	; (8004788 <HAL_RCC_GetSysClockFreq+0x204>)
 8004772:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004774:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004778:	4618      	mov	r0, r3
 800477a:	3750      	adds	r7, #80	; 0x50
 800477c:	46bd      	mov	sp, r7
 800477e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004782:	bf00      	nop
 8004784:	40023800 	.word	0x40023800
 8004788:	00f42400 	.word	0x00f42400
 800478c:	007a1200 	.word	0x007a1200

08004790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004794:	4b03      	ldr	r3, [pc, #12]	; (80047a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004796:	681b      	ldr	r3, [r3, #0]
}
 8004798:	4618      	mov	r0, r3
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	20000000 	.word	0x20000000

080047a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047ac:	f7ff fff0 	bl	8004790 <HAL_RCC_GetHCLKFreq>
 80047b0:	4602      	mov	r2, r0
 80047b2:	4b05      	ldr	r3, [pc, #20]	; (80047c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	0a9b      	lsrs	r3, r3, #10
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	4903      	ldr	r1, [pc, #12]	; (80047cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80047be:	5ccb      	ldrb	r3, [r1, r3]
 80047c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40023800 	.word	0x40023800
 80047cc:	080094c0 	.word	0x080094c0

080047d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047d4:	f7ff ffdc 	bl	8004790 <HAL_RCC_GetHCLKFreq>
 80047d8:	4602      	mov	r2, r0
 80047da:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	0b5b      	lsrs	r3, r3, #13
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	4903      	ldr	r1, [pc, #12]	; (80047f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047e6:	5ccb      	ldrb	r3, [r1, r3]
 80047e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40023800 	.word	0x40023800
 80047f4:	080094c0 	.word	0x080094c0

080047f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	220f      	movs	r2, #15
 8004806:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004808:	4b12      	ldr	r3, [pc, #72]	; (8004854 <HAL_RCC_GetClockConfig+0x5c>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f003 0203 	and.w	r2, r3, #3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004814:	4b0f      	ldr	r3, [pc, #60]	; (8004854 <HAL_RCC_GetClockConfig+0x5c>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004820:	4b0c      	ldr	r3, [pc, #48]	; (8004854 <HAL_RCC_GetClockConfig+0x5c>)
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800482c:	4b09      	ldr	r3, [pc, #36]	; (8004854 <HAL_RCC_GetClockConfig+0x5c>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	08db      	lsrs	r3, r3, #3
 8004832:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800483a:	4b07      	ldr	r3, [pc, #28]	; (8004858 <HAL_RCC_GetClockConfig+0x60>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0207 	and.w	r2, r3, #7
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	601a      	str	r2, [r3, #0]
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	40023800 	.word	0x40023800
 8004858:	40023c00 	.word	0x40023c00

0800485c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e041      	b.n	80048f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d106      	bne.n	8004888 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7fc ff6c 	bl	8001760 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	3304      	adds	r3, #4
 8004898:	4619      	mov	r1, r3
 800489a:	4610      	mov	r0, r2
 800489c:	f000 fd22 	bl	80052e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3708      	adds	r7, #8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
	...

080048fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b01      	cmp	r3, #1
 800490e:	d001      	beq.n	8004914 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e03c      	b.n	800498e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a1e      	ldr	r2, [pc, #120]	; (800499c <HAL_TIM_Base_Start+0xa0>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d018      	beq.n	8004958 <HAL_TIM_Base_Start+0x5c>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800492e:	d013      	beq.n	8004958 <HAL_TIM_Base_Start+0x5c>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a1a      	ldr	r2, [pc, #104]	; (80049a0 <HAL_TIM_Base_Start+0xa4>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d00e      	beq.n	8004958 <HAL_TIM_Base_Start+0x5c>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a19      	ldr	r2, [pc, #100]	; (80049a4 <HAL_TIM_Base_Start+0xa8>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d009      	beq.n	8004958 <HAL_TIM_Base_Start+0x5c>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a17      	ldr	r2, [pc, #92]	; (80049a8 <HAL_TIM_Base_Start+0xac>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d004      	beq.n	8004958 <HAL_TIM_Base_Start+0x5c>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a16      	ldr	r2, [pc, #88]	; (80049ac <HAL_TIM_Base_Start+0xb0>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d111      	bne.n	800497c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b06      	cmp	r3, #6
 8004968:	d010      	beq.n	800498c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f042 0201 	orr.w	r2, r2, #1
 8004978:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800497a:	e007      	b.n	800498c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0201 	orr.w	r2, r2, #1
 800498a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	40010000 	.word	0x40010000
 80049a0:	40000400 	.word	0x40000400
 80049a4:	40000800 	.word	0x40000800
 80049a8:	40000c00 	.word	0x40000c00
 80049ac:	40014000 	.word	0x40014000

080049b0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6a1a      	ldr	r2, [r3, #32]
 80049be:	f241 1311 	movw	r3, #4369	; 0x1111
 80049c2:	4013      	ands	r3, r2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10f      	bne.n	80049e8 <HAL_TIM_Base_Stop+0x38>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6a1a      	ldr	r2, [r3, #32]
 80049ce:	f240 4344 	movw	r3, #1092	; 0x444
 80049d2:	4013      	ands	r3, r2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d107      	bne.n	80049e8 <HAL_TIM_Base_Stop+0x38>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0201 	bic.w	r2, r2, #1
 80049e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
	...

08004a00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d001      	beq.n	8004a18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e044      	b.n	8004aa2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68da      	ldr	r2, [r3, #12]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0201 	orr.w	r2, r2, #1
 8004a2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a1e      	ldr	r2, [pc, #120]	; (8004ab0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d018      	beq.n	8004a6c <HAL_TIM_Base_Start_IT+0x6c>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a42:	d013      	beq.n	8004a6c <HAL_TIM_Base_Start_IT+0x6c>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a1a      	ldr	r2, [pc, #104]	; (8004ab4 <HAL_TIM_Base_Start_IT+0xb4>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d00e      	beq.n	8004a6c <HAL_TIM_Base_Start_IT+0x6c>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a19      	ldr	r2, [pc, #100]	; (8004ab8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d009      	beq.n	8004a6c <HAL_TIM_Base_Start_IT+0x6c>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a17      	ldr	r2, [pc, #92]	; (8004abc <HAL_TIM_Base_Start_IT+0xbc>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d004      	beq.n	8004a6c <HAL_TIM_Base_Start_IT+0x6c>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a16      	ldr	r2, [pc, #88]	; (8004ac0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d111      	bne.n	8004a90 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2b06      	cmp	r3, #6
 8004a7c:	d010      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f042 0201 	orr.w	r2, r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a8e:	e007      	b.n	8004aa0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0201 	orr.w	r2, r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	40010000 	.word	0x40010000
 8004ab4:	40000400 	.word	0x40000400
 8004ab8:	40000800 	.word	0x40000800
 8004abc:	40000c00 	.word	0x40000c00
 8004ac0:	40014000 	.word	0x40014000

08004ac4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e041      	b.n	8004b5a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d106      	bne.n	8004af0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f839 	bl	8004b62 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	3304      	adds	r3, #4
 8004b00:	4619      	mov	r1, r3
 8004b02:	4610      	mov	r0, r2
 8004b04:	f000 fbee 	bl	80052e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b083      	sub	sp, #12
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b6a:	bf00      	nop
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
	...

08004b78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d109      	bne.n	8004b9c <HAL_TIM_PWM_Start+0x24>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	bf14      	ite	ne
 8004b94:	2301      	movne	r3, #1
 8004b96:	2300      	moveq	r3, #0
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	e022      	b.n	8004be2 <HAL_TIM_PWM_Start+0x6a>
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	d109      	bne.n	8004bb6 <HAL_TIM_PWM_Start+0x3e>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	bf14      	ite	ne
 8004bae:	2301      	movne	r3, #1
 8004bb0:	2300      	moveq	r3, #0
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	e015      	b.n	8004be2 <HAL_TIM_PWM_Start+0x6a>
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d109      	bne.n	8004bd0 <HAL_TIM_PWM_Start+0x58>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	bf14      	ite	ne
 8004bc8:	2301      	movne	r3, #1
 8004bca:	2300      	moveq	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	e008      	b.n	8004be2 <HAL_TIM_PWM_Start+0x6a>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	bf14      	ite	ne
 8004bdc:	2301      	movne	r3, #1
 8004bde:	2300      	moveq	r3, #0
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e068      	b.n	8004cbc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d104      	bne.n	8004bfa <HAL_TIM_PWM_Start+0x82>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bf8:	e013      	b.n	8004c22 <HAL_TIM_PWM_Start+0xaa>
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	d104      	bne.n	8004c0a <HAL_TIM_PWM_Start+0x92>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c08:	e00b      	b.n	8004c22 <HAL_TIM_PWM_Start+0xaa>
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b08      	cmp	r3, #8
 8004c0e:	d104      	bne.n	8004c1a <HAL_TIM_PWM_Start+0xa2>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c18:	e003      	b.n	8004c22 <HAL_TIM_PWM_Start+0xaa>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2201      	movs	r2, #1
 8004c28:	6839      	ldr	r1, [r7, #0]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 fe0c 	bl	8005848 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a23      	ldr	r2, [pc, #140]	; (8004cc4 <HAL_TIM_PWM_Start+0x14c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d107      	bne.n	8004c4a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a1d      	ldr	r2, [pc, #116]	; (8004cc4 <HAL_TIM_PWM_Start+0x14c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d018      	beq.n	8004c86 <HAL_TIM_PWM_Start+0x10e>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c5c:	d013      	beq.n	8004c86 <HAL_TIM_PWM_Start+0x10e>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a19      	ldr	r2, [pc, #100]	; (8004cc8 <HAL_TIM_PWM_Start+0x150>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d00e      	beq.n	8004c86 <HAL_TIM_PWM_Start+0x10e>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a17      	ldr	r2, [pc, #92]	; (8004ccc <HAL_TIM_PWM_Start+0x154>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d009      	beq.n	8004c86 <HAL_TIM_PWM_Start+0x10e>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a16      	ldr	r2, [pc, #88]	; (8004cd0 <HAL_TIM_PWM_Start+0x158>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d004      	beq.n	8004c86 <HAL_TIM_PWM_Start+0x10e>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a14      	ldr	r2, [pc, #80]	; (8004cd4 <HAL_TIM_PWM_Start+0x15c>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d111      	bne.n	8004caa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2b06      	cmp	r3, #6
 8004c96:	d010      	beq.n	8004cba <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f042 0201 	orr.w	r2, r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca8:	e007      	b.n	8004cba <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f042 0201 	orr.w	r2, r2, #1
 8004cb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	40010000 	.word	0x40010000
 8004cc8:	40000400 	.word	0x40000400
 8004ccc:	40000800 	.word	0x40000800
 8004cd0:	40000c00 	.word	0x40000c00
 8004cd4:	40014000 	.word	0x40014000

08004cd8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	6839      	ldr	r1, [r7, #0]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 fdac 	bl	8005848 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a29      	ldr	r2, [pc, #164]	; (8004d9c <HAL_TIM_PWM_Stop+0xc4>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d117      	bne.n	8004d2a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6a1a      	ldr	r2, [r3, #32]
 8004d00:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d04:	4013      	ands	r3, r2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10f      	bne.n	8004d2a <HAL_TIM_PWM_Stop+0x52>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6a1a      	ldr	r2, [r3, #32]
 8004d10:	f240 4344 	movw	r3, #1092	; 0x444
 8004d14:	4013      	ands	r3, r2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d107      	bne.n	8004d2a <HAL_TIM_PWM_Stop+0x52>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6a1a      	ldr	r2, [r3, #32]
 8004d30:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d34:	4013      	ands	r3, r2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10f      	bne.n	8004d5a <HAL_TIM_PWM_Stop+0x82>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6a1a      	ldr	r2, [r3, #32]
 8004d40:	f240 4344 	movw	r3, #1092	; 0x444
 8004d44:	4013      	ands	r3, r2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d107      	bne.n	8004d5a <HAL_TIM_PWM_Stop+0x82>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 0201 	bic.w	r2, r2, #1
 8004d58:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d104      	bne.n	8004d6a <HAL_TIM_PWM_Stop+0x92>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d68:	e013      	b.n	8004d92 <HAL_TIM_PWM_Stop+0xba>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b04      	cmp	r3, #4
 8004d6e:	d104      	bne.n	8004d7a <HAL_TIM_PWM_Stop+0xa2>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d78:	e00b      	b.n	8004d92 <HAL_TIM_PWM_Stop+0xba>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d104      	bne.n	8004d8a <HAL_TIM_PWM_Stop+0xb2>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d88:	e003      	b.n	8004d92 <HAL_TIM_PWM_Stop+0xba>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	40010000 	.word	0x40010000

08004da0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d020      	beq.n	8004e04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d01b      	beq.n	8004e04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f06f 0202 	mvn.w	r2, #2
 8004dd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	f003 0303 	and.w	r3, r3, #3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 fa5b 	bl	80052a6 <HAL_TIM_IC_CaptureCallback>
 8004df0:	e005      	b.n	8004dfe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fa4d 	bl	8005292 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 fa5e 	bl	80052ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f003 0304 	and.w	r3, r3, #4
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d020      	beq.n	8004e50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d01b      	beq.n	8004e50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f06f 0204 	mvn.w	r2, #4
 8004e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2202      	movs	r2, #2
 8004e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d003      	beq.n	8004e3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 fa35 	bl	80052a6 <HAL_TIM_IC_CaptureCallback>
 8004e3c:	e005      	b.n	8004e4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 fa27 	bl	8005292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 fa38 	bl	80052ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	f003 0308 	and.w	r3, r3, #8
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d020      	beq.n	8004e9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f003 0308 	and.w	r3, r3, #8
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d01b      	beq.n	8004e9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f06f 0208 	mvn.w	r2, #8
 8004e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2204      	movs	r2, #4
 8004e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 fa0f 	bl	80052a6 <HAL_TIM_IC_CaptureCallback>
 8004e88:	e005      	b.n	8004e96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 fa01 	bl	8005292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 fa12 	bl	80052ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	f003 0310 	and.w	r3, r3, #16
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d020      	beq.n	8004ee8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f003 0310 	and.w	r3, r3, #16
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d01b      	beq.n	8004ee8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f06f 0210 	mvn.w	r2, #16
 8004eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2208      	movs	r2, #8
 8004ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 f9e9 	bl	80052a6 <HAL_TIM_IC_CaptureCallback>
 8004ed4:	e005      	b.n	8004ee2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f9db 	bl	8005292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f9ec 	bl	80052ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00c      	beq.n	8004f0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f003 0301 	and.w	r3, r3, #1
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d007      	beq.n	8004f0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f06f 0201 	mvn.w	r2, #1
 8004f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7fc fb9e 	bl	8001648 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00c      	beq.n	8004f30 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d007      	beq.n	8004f30 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 fd2a 	bl	8005984 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00c      	beq.n	8004f54 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d007      	beq.n	8004f54 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f9bd 	bl	80052ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	f003 0320 	and.w	r3, r3, #32
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00c      	beq.n	8004f78 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f003 0320 	and.w	r3, r3, #32
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d007      	beq.n	8004f78 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f06f 0220 	mvn.w	r2, #32
 8004f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 fcfc 	bl	8005970 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f78:	bf00      	nop
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d101      	bne.n	8004f9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f9a:	2302      	movs	r3, #2
 8004f9c:	e0ae      	b.n	80050fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b0c      	cmp	r3, #12
 8004faa:	f200 809f 	bhi.w	80050ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004fae:	a201      	add	r2, pc, #4	; (adr r2, 8004fb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb4:	08004fe9 	.word	0x08004fe9
 8004fb8:	080050ed 	.word	0x080050ed
 8004fbc:	080050ed 	.word	0x080050ed
 8004fc0:	080050ed 	.word	0x080050ed
 8004fc4:	08005029 	.word	0x08005029
 8004fc8:	080050ed 	.word	0x080050ed
 8004fcc:	080050ed 	.word	0x080050ed
 8004fd0:	080050ed 	.word	0x080050ed
 8004fd4:	0800506b 	.word	0x0800506b
 8004fd8:	080050ed 	.word	0x080050ed
 8004fdc:	080050ed 	.word	0x080050ed
 8004fe0:	080050ed 	.word	0x080050ed
 8004fe4:	080050ab 	.word	0x080050ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68b9      	ldr	r1, [r7, #8]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 fa04 	bl	80053fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	699a      	ldr	r2, [r3, #24]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f042 0208 	orr.w	r2, r2, #8
 8005002:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	699a      	ldr	r2, [r3, #24]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0204 	bic.w	r2, r2, #4
 8005012:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6999      	ldr	r1, [r3, #24]
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	691a      	ldr	r2, [r3, #16]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	619a      	str	r2, [r3, #24]
      break;
 8005026:	e064      	b.n	80050f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68b9      	ldr	r1, [r7, #8]
 800502e:	4618      	mov	r0, r3
 8005030:	f000 fa4a 	bl	80054c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	699a      	ldr	r2, [r3, #24]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005042:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	699a      	ldr	r2, [r3, #24]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005052:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6999      	ldr	r1, [r3, #24]
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	021a      	lsls	r2, r3, #8
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	430a      	orrs	r2, r1
 8005066:	619a      	str	r2, [r3, #24]
      break;
 8005068:	e043      	b.n	80050f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68b9      	ldr	r1, [r7, #8]
 8005070:	4618      	mov	r0, r3
 8005072:	f000 fa95 	bl	80055a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69da      	ldr	r2, [r3, #28]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f042 0208 	orr.w	r2, r2, #8
 8005084:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	69da      	ldr	r2, [r3, #28]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 0204 	bic.w	r2, r2, #4
 8005094:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	69d9      	ldr	r1, [r3, #28]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	691a      	ldr	r2, [r3, #16]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	61da      	str	r2, [r3, #28]
      break;
 80050a8:	e023      	b.n	80050f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68b9      	ldr	r1, [r7, #8]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f000 fadf 	bl	8005674 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	69da      	ldr	r2, [r3, #28]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	69da      	ldr	r2, [r3, #28]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	69d9      	ldr	r1, [r3, #28]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	021a      	lsls	r2, r3, #8
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	61da      	str	r2, [r3, #28]
      break;
 80050ea:	e002      	b.n	80050f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	75fb      	strb	r3, [r7, #23]
      break;
 80050f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005118:	2b01      	cmp	r3, #1
 800511a:	d101      	bne.n	8005120 <HAL_TIM_ConfigClockSource+0x1c>
 800511c:	2302      	movs	r3, #2
 800511e:	e0b4      	b.n	800528a <HAL_TIM_ConfigClockSource+0x186>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800513e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005146:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005158:	d03e      	beq.n	80051d8 <HAL_TIM_ConfigClockSource+0xd4>
 800515a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800515e:	f200 8087 	bhi.w	8005270 <HAL_TIM_ConfigClockSource+0x16c>
 8005162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005166:	f000 8086 	beq.w	8005276 <HAL_TIM_ConfigClockSource+0x172>
 800516a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800516e:	d87f      	bhi.n	8005270 <HAL_TIM_ConfigClockSource+0x16c>
 8005170:	2b70      	cmp	r3, #112	; 0x70
 8005172:	d01a      	beq.n	80051aa <HAL_TIM_ConfigClockSource+0xa6>
 8005174:	2b70      	cmp	r3, #112	; 0x70
 8005176:	d87b      	bhi.n	8005270 <HAL_TIM_ConfigClockSource+0x16c>
 8005178:	2b60      	cmp	r3, #96	; 0x60
 800517a:	d050      	beq.n	800521e <HAL_TIM_ConfigClockSource+0x11a>
 800517c:	2b60      	cmp	r3, #96	; 0x60
 800517e:	d877      	bhi.n	8005270 <HAL_TIM_ConfigClockSource+0x16c>
 8005180:	2b50      	cmp	r3, #80	; 0x50
 8005182:	d03c      	beq.n	80051fe <HAL_TIM_ConfigClockSource+0xfa>
 8005184:	2b50      	cmp	r3, #80	; 0x50
 8005186:	d873      	bhi.n	8005270 <HAL_TIM_ConfigClockSource+0x16c>
 8005188:	2b40      	cmp	r3, #64	; 0x40
 800518a:	d058      	beq.n	800523e <HAL_TIM_ConfigClockSource+0x13a>
 800518c:	2b40      	cmp	r3, #64	; 0x40
 800518e:	d86f      	bhi.n	8005270 <HAL_TIM_ConfigClockSource+0x16c>
 8005190:	2b30      	cmp	r3, #48	; 0x30
 8005192:	d064      	beq.n	800525e <HAL_TIM_ConfigClockSource+0x15a>
 8005194:	2b30      	cmp	r3, #48	; 0x30
 8005196:	d86b      	bhi.n	8005270 <HAL_TIM_ConfigClockSource+0x16c>
 8005198:	2b20      	cmp	r3, #32
 800519a:	d060      	beq.n	800525e <HAL_TIM_ConfigClockSource+0x15a>
 800519c:	2b20      	cmp	r3, #32
 800519e:	d867      	bhi.n	8005270 <HAL_TIM_ConfigClockSource+0x16c>
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d05c      	beq.n	800525e <HAL_TIM_ConfigClockSource+0x15a>
 80051a4:	2b10      	cmp	r3, #16
 80051a6:	d05a      	beq.n	800525e <HAL_TIM_ConfigClockSource+0x15a>
 80051a8:	e062      	b.n	8005270 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051ba:	f000 fb25 	bl	8005808 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	609a      	str	r2, [r3, #8]
      break;
 80051d6:	e04f      	b.n	8005278 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051e8:	f000 fb0e 	bl	8005808 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689a      	ldr	r2, [r3, #8]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051fa:	609a      	str	r2, [r3, #8]
      break;
 80051fc:	e03c      	b.n	8005278 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800520a:	461a      	mov	r2, r3
 800520c:	f000 fa82 	bl	8005714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2150      	movs	r1, #80	; 0x50
 8005216:	4618      	mov	r0, r3
 8005218:	f000 fadb 	bl	80057d2 <TIM_ITRx_SetConfig>
      break;
 800521c:	e02c      	b.n	8005278 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800522a:	461a      	mov	r2, r3
 800522c:	f000 faa1 	bl	8005772 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2160      	movs	r1, #96	; 0x60
 8005236:	4618      	mov	r0, r3
 8005238:	f000 facb 	bl	80057d2 <TIM_ITRx_SetConfig>
      break;
 800523c:	e01c      	b.n	8005278 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800524a:	461a      	mov	r2, r3
 800524c:	f000 fa62 	bl	8005714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2140      	movs	r1, #64	; 0x40
 8005256:	4618      	mov	r0, r3
 8005258:	f000 fabb 	bl	80057d2 <TIM_ITRx_SetConfig>
      break;
 800525c:	e00c      	b.n	8005278 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4619      	mov	r1, r3
 8005268:	4610      	mov	r0, r2
 800526a:	f000 fab2 	bl	80057d2 <TIM_ITRx_SetConfig>
      break;
 800526e:	e003      	b.n	8005278 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	73fb      	strb	r3, [r7, #15]
      break;
 8005274:	e000      	b.n	8005278 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005276:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005288:	7bfb      	ldrb	r3, [r7, #15]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005292:	b480      	push	{r7}
 8005294:	b083      	sub	sp, #12
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800529a:	bf00      	nop
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052ae:	bf00      	nop
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b083      	sub	sp, #12
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052c2:	bf00      	nop
 80052c4:	370c      	adds	r7, #12
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b083      	sub	sp, #12
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052d6:	bf00      	nop
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
	...

080052e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a3a      	ldr	r2, [pc, #232]	; (80053e0 <TIM_Base_SetConfig+0xfc>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d00f      	beq.n	800531c <TIM_Base_SetConfig+0x38>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005302:	d00b      	beq.n	800531c <TIM_Base_SetConfig+0x38>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a37      	ldr	r2, [pc, #220]	; (80053e4 <TIM_Base_SetConfig+0x100>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d007      	beq.n	800531c <TIM_Base_SetConfig+0x38>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a36      	ldr	r2, [pc, #216]	; (80053e8 <TIM_Base_SetConfig+0x104>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d003      	beq.n	800531c <TIM_Base_SetConfig+0x38>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a35      	ldr	r2, [pc, #212]	; (80053ec <TIM_Base_SetConfig+0x108>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d108      	bne.n	800532e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005322:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	4313      	orrs	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a2b      	ldr	r2, [pc, #172]	; (80053e0 <TIM_Base_SetConfig+0xfc>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d01b      	beq.n	800536e <TIM_Base_SetConfig+0x8a>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800533c:	d017      	beq.n	800536e <TIM_Base_SetConfig+0x8a>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a28      	ldr	r2, [pc, #160]	; (80053e4 <TIM_Base_SetConfig+0x100>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d013      	beq.n	800536e <TIM_Base_SetConfig+0x8a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a27      	ldr	r2, [pc, #156]	; (80053e8 <TIM_Base_SetConfig+0x104>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d00f      	beq.n	800536e <TIM_Base_SetConfig+0x8a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a26      	ldr	r2, [pc, #152]	; (80053ec <TIM_Base_SetConfig+0x108>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d00b      	beq.n	800536e <TIM_Base_SetConfig+0x8a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a25      	ldr	r2, [pc, #148]	; (80053f0 <TIM_Base_SetConfig+0x10c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d007      	beq.n	800536e <TIM_Base_SetConfig+0x8a>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a24      	ldr	r2, [pc, #144]	; (80053f4 <TIM_Base_SetConfig+0x110>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d003      	beq.n	800536e <TIM_Base_SetConfig+0x8a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a23      	ldr	r2, [pc, #140]	; (80053f8 <TIM_Base_SetConfig+0x114>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d108      	bne.n	8005380 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	4313      	orrs	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a0e      	ldr	r2, [pc, #56]	; (80053e0 <TIM_Base_SetConfig+0xfc>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d103      	bne.n	80053b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	691a      	ldr	r2, [r3, #16]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d105      	bne.n	80053d2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	f023 0201 	bic.w	r2, r3, #1
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	611a      	str	r2, [r3, #16]
  }
}
 80053d2:	bf00      	nop
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	40010000 	.word	0x40010000
 80053e4:	40000400 	.word	0x40000400
 80053e8:	40000800 	.word	0x40000800
 80053ec:	40000c00 	.word	0x40000c00
 80053f0:	40014000 	.word	0x40014000
 80053f4:	40014400 	.word	0x40014400
 80053f8:	40014800 	.word	0x40014800

080053fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b087      	sub	sp, #28
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	f023 0201 	bic.w	r2, r3, #1
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800542a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 0303 	bic.w	r3, r3, #3
 8005432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	4313      	orrs	r3, r2
 800543c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f023 0302 	bic.w	r3, r3, #2
 8005444:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	4313      	orrs	r3, r2
 800544e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a1c      	ldr	r2, [pc, #112]	; (80054c4 <TIM_OC1_SetConfig+0xc8>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d10c      	bne.n	8005472 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	f023 0308 	bic.w	r3, r3, #8
 800545e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	4313      	orrs	r3, r2
 8005468:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f023 0304 	bic.w	r3, r3, #4
 8005470:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a13      	ldr	r2, [pc, #76]	; (80054c4 <TIM_OC1_SetConfig+0xc8>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d111      	bne.n	800549e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005480:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005488:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	4313      	orrs	r3, r2
 8005492:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	4313      	orrs	r3, r2
 800549c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	621a      	str	r2, [r3, #32]
}
 80054b8:	bf00      	nop
 80054ba:	371c      	adds	r7, #28
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	40010000 	.word	0x40010000

080054c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b087      	sub	sp, #28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	f023 0210 	bic.w	r2, r3, #16
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	021b      	lsls	r3, r3, #8
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	4313      	orrs	r3, r2
 800550a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f023 0320 	bic.w	r3, r3, #32
 8005512:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	011b      	lsls	r3, r3, #4
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	4313      	orrs	r3, r2
 800551e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a1e      	ldr	r2, [pc, #120]	; (800559c <TIM_OC2_SetConfig+0xd4>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d10d      	bne.n	8005544 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800552e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	011b      	lsls	r3, r3, #4
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	4313      	orrs	r3, r2
 800553a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005542:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a15      	ldr	r2, [pc, #84]	; (800559c <TIM_OC2_SetConfig+0xd4>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d113      	bne.n	8005574 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005552:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800555a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	4313      	orrs	r3, r2
 8005566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	4313      	orrs	r3, r2
 8005572:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	621a      	str	r2, [r3, #32]
}
 800558e:	bf00      	nop
 8005590:	371c      	adds	r7, #28
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	40010000 	.word	0x40010000

080055a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b087      	sub	sp, #28
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a1b      	ldr	r3, [r3, #32]
 80055b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f023 0303 	bic.w	r3, r3, #3
 80055d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	4313      	orrs	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	021b      	lsls	r3, r3, #8
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a1d      	ldr	r2, [pc, #116]	; (8005670 <TIM_OC3_SetConfig+0xd0>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d10d      	bne.n	800561a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005604:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	021b      	lsls	r3, r3, #8
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	4313      	orrs	r3, r2
 8005610:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005618:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a14      	ldr	r2, [pc, #80]	; (8005670 <TIM_OC3_SetConfig+0xd0>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d113      	bne.n	800564a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005628:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005630:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	011b      	lsls	r3, r3, #4
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	4313      	orrs	r3, r2
 800563c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	011b      	lsls	r3, r3, #4
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	4313      	orrs	r3, r2
 8005648:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	621a      	str	r2, [r3, #32]
}
 8005664:	bf00      	nop
 8005666:	371c      	adds	r7, #28
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	40010000 	.word	0x40010000

08005674 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005674:	b480      	push	{r7}
 8005676:	b087      	sub	sp, #28
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	021b      	lsls	r3, r3, #8
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	031b      	lsls	r3, r3, #12
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a10      	ldr	r2, [pc, #64]	; (8005710 <TIM_OC4_SetConfig+0x9c>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d109      	bne.n	80056e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	019b      	lsls	r3, r3, #6
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	621a      	str	r2, [r3, #32]
}
 8005702:	bf00      	nop
 8005704:	371c      	adds	r7, #28
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	40010000 	.word	0x40010000

08005714 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005714:	b480      	push	{r7}
 8005716:	b087      	sub	sp, #28
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	f023 0201 	bic.w	r2, r3, #1
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800573e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	4313      	orrs	r3, r2
 8005748:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f023 030a 	bic.w	r3, r3, #10
 8005750:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	4313      	orrs	r3, r2
 8005758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	621a      	str	r2, [r3, #32]
}
 8005766:	bf00      	nop
 8005768:	371c      	adds	r7, #28
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005772:	b480      	push	{r7}
 8005774:	b087      	sub	sp, #28
 8005776:	af00      	add	r7, sp, #0
 8005778:	60f8      	str	r0, [r7, #12]
 800577a:	60b9      	str	r1, [r7, #8]
 800577c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	f023 0210 	bic.w	r2, r3, #16
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800579c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	031b      	lsls	r3, r3, #12
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	011b      	lsls	r3, r3, #4
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	621a      	str	r2, [r3, #32]
}
 80057c6:	bf00      	nop
 80057c8:	371c      	adds	r7, #28
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b085      	sub	sp, #20
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
 80057da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	f043 0307 	orr.w	r3, r3, #7
 80057f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	609a      	str	r2, [r3, #8]
}
 80057fc:	bf00      	nop
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005808:	b480      	push	{r7}
 800580a:	b087      	sub	sp, #28
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
 8005814:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005822:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	021a      	lsls	r2, r3, #8
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	431a      	orrs	r2, r3
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	4313      	orrs	r3, r2
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	4313      	orrs	r3, r2
 8005834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	609a      	str	r2, [r3, #8]
}
 800583c:	bf00      	nop
 800583e:	371c      	adds	r7, #28
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005848:	b480      	push	{r7}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	f003 031f 	and.w	r3, r3, #31
 800585a:	2201      	movs	r2, #1
 800585c:	fa02 f303 	lsl.w	r3, r2, r3
 8005860:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6a1a      	ldr	r2, [r3, #32]
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	43db      	mvns	r3, r3
 800586a:	401a      	ands	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6a1a      	ldr	r2, [r3, #32]
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f003 031f 	and.w	r3, r3, #31
 800587a:	6879      	ldr	r1, [r7, #4]
 800587c:	fa01 f303 	lsl.w	r3, r1, r3
 8005880:	431a      	orrs	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	621a      	str	r2, [r3, #32]
}
 8005886:	bf00      	nop
 8005888:	371c      	adds	r7, #28
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
	...

08005894 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d101      	bne.n	80058ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058a8:	2302      	movs	r3, #2
 80058aa:	e050      	b.n	800594e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a1c      	ldr	r2, [pc, #112]	; (800595c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d018      	beq.n	8005922 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f8:	d013      	beq.n	8005922 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a18      	ldr	r2, [pc, #96]	; (8005960 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d00e      	beq.n	8005922 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a16      	ldr	r2, [pc, #88]	; (8005964 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d009      	beq.n	8005922 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a15      	ldr	r2, [pc, #84]	; (8005968 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d004      	beq.n	8005922 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a13      	ldr	r2, [pc, #76]	; (800596c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d10c      	bne.n	800593c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005928:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	4313      	orrs	r3, r2
 8005932:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	40010000 	.word	0x40010000
 8005960:	40000400 	.word	0x40000400
 8005964:	40000800 	.word	0x40000800
 8005968:	40000c00 	.word	0x40000c00
 800596c:	40014000 	.word	0x40014000

08005970 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e042      	b.n	8005a30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d106      	bne.n	80059c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7fb ff70 	bl	80018a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2224      	movs	r2, #36	; 0x24
 80059c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68da      	ldr	r2, [r3, #12]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 fdbd 	bl	800655c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	691a      	ldr	r2, [r3, #16]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	695a      	ldr	r2, [r3, #20]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68da      	ldr	r2, [r3, #12]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2220      	movs	r2, #32
 8005a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3708      	adds	r7, #8
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b08a      	sub	sp, #40	; 0x28
 8005a3c:	af02      	add	r7, sp, #8
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	603b      	str	r3, [r7, #0]
 8005a44:	4613      	mov	r3, r2
 8005a46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b20      	cmp	r3, #32
 8005a56:	d175      	bne.n	8005b44 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d002      	beq.n	8005a64 <HAL_UART_Transmit+0x2c>
 8005a5e:	88fb      	ldrh	r3, [r7, #6]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e06e      	b.n	8005b46 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2221      	movs	r2, #33	; 0x21
 8005a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a76:	f7fd f9fd 	bl	8002e74 <HAL_GetTick>
 8005a7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	88fa      	ldrh	r2, [r7, #6]
 8005a80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	88fa      	ldrh	r2, [r7, #6]
 8005a86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a90:	d108      	bne.n	8005aa4 <HAL_UART_Transmit+0x6c>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d104      	bne.n	8005aa4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	61bb      	str	r3, [r7, #24]
 8005aa2:	e003      	b.n	8005aac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005aac:	e02e      	b.n	8005b0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	2180      	movs	r1, #128	; 0x80
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f000 fb1f 	bl	80060fc <UART_WaitOnFlagUntilTimeout>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d005      	beq.n	8005ad0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e03a      	b.n	8005b46 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10b      	bne.n	8005aee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	461a      	mov	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ae4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	3302      	adds	r3, #2
 8005aea:	61bb      	str	r3, [r7, #24]
 8005aec:	e007      	b.n	8005afe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	781a      	ldrb	r2, [r3, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	3301      	adds	r3, #1
 8005afc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	3b01      	subs	r3, #1
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1cb      	bne.n	8005aae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	2140      	movs	r1, #64	; 0x40
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 faeb 	bl	80060fc <UART_WaitOnFlagUntilTimeout>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d005      	beq.n	8005b38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2220      	movs	r2, #32
 8005b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e006      	b.n	8005b46 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005b40:	2300      	movs	r3, #0
 8005b42:	e000      	b.n	8005b46 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005b44:	2302      	movs	r3, #2
  }
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3720      	adds	r7, #32
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b084      	sub	sp, #16
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	60f8      	str	r0, [r7, #12]
 8005b56:	60b9      	str	r1, [r7, #8]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b20      	cmp	r3, #32
 8005b66:	d112      	bne.n	8005b8e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <HAL_UART_Receive_IT+0x26>
 8005b6e:	88fb      	ldrh	r3, [r7, #6]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e00b      	b.n	8005b90 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005b7e:	88fb      	ldrh	r3, [r7, #6]
 8005b80:	461a      	mov	r2, r3
 8005b82:	68b9      	ldr	r1, [r7, #8]
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f000 fb12 	bl	80061ae <UART_Start_Receive_IT>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	e000      	b.n	8005b90 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005b8e:	2302      	movs	r3, #2
  }
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b0ba      	sub	sp, #232	; 0xe8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bce:	f003 030f 	and.w	r3, r3, #15
 8005bd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005bd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10f      	bne.n	8005bfe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be2:	f003 0320 	and.w	r3, r3, #32
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d009      	beq.n	8005bfe <HAL_UART_IRQHandler+0x66>
 8005bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bee:	f003 0320 	and.w	r3, r3, #32
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fbf2 	bl	80063e0 <UART_Receive_IT>
      return;
 8005bfc:	e25b      	b.n	80060b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005bfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f000 80de 	beq.w	8005dc4 <HAL_UART_IRQHandler+0x22c>
 8005c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c0c:	f003 0301 	and.w	r3, r3, #1
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d106      	bne.n	8005c22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f000 80d1 	beq.w	8005dc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00b      	beq.n	8005c46 <HAL_UART_IRQHandler+0xae>
 8005c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d005      	beq.n	8005c46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c3e:	f043 0201 	orr.w	r2, r3, #1
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c4a:	f003 0304 	and.w	r3, r3, #4
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00b      	beq.n	8005c6a <HAL_UART_IRQHandler+0xd2>
 8005c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d005      	beq.n	8005c6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c62:	f043 0202 	orr.w	r2, r3, #2
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00b      	beq.n	8005c8e <HAL_UART_IRQHandler+0xf6>
 8005c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d005      	beq.n	8005c8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c86:	f043 0204 	orr.w	r2, r3, #4
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c92:	f003 0308 	and.w	r3, r3, #8
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d011      	beq.n	8005cbe <HAL_UART_IRQHandler+0x126>
 8005c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c9e:	f003 0320 	and.w	r3, r3, #32
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d105      	bne.n	8005cb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d005      	beq.n	8005cbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb6:	f043 0208 	orr.w	r2, r3, #8
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f000 81f2 	beq.w	80060ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ccc:	f003 0320 	and.w	r3, r3, #32
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d008      	beq.n	8005ce6 <HAL_UART_IRQHandler+0x14e>
 8005cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cd8:	f003 0320 	and.w	r3, r3, #32
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 fb7d 	bl	80063e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf0:	2b40      	cmp	r3, #64	; 0x40
 8005cf2:	bf0c      	ite	eq
 8005cf4:	2301      	moveq	r3, #1
 8005cf6:	2300      	movne	r3, #0
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d02:	f003 0308 	and.w	r3, r3, #8
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d103      	bne.n	8005d12 <HAL_UART_IRQHandler+0x17a>
 8005d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d04f      	beq.n	8005db2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fa85 	bl	8006222 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d22:	2b40      	cmp	r3, #64	; 0x40
 8005d24:	d141      	bne.n	8005daa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	3314      	adds	r3, #20
 8005d2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d34:	e853 3f00 	ldrex	r3, [r3]
 8005d38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3314      	adds	r3, #20
 8005d4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d62:	e841 2300 	strex	r3, r2, [r1]
 8005d66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1d9      	bne.n	8005d26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d013      	beq.n	8005da2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d7e:	4a7e      	ldr	r2, [pc, #504]	; (8005f78 <HAL_UART_IRQHandler+0x3e0>)
 8005d80:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fd f9f6 	bl	8003178 <HAL_DMA_Abort_IT>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d016      	beq.n	8005dc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da0:	e00e      	b.n	8005dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f994 	bl	80060d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da8:	e00a      	b.n	8005dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f990 	bl	80060d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005db0:	e006      	b.n	8005dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f98c 	bl	80060d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005dbe:	e175      	b.n	80060ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dc0:	bf00      	nop
    return;
 8005dc2:	e173      	b.n	80060ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	f040 814f 	bne.w	800606c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dd2:	f003 0310 	and.w	r3, r3, #16
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f000 8148 	beq.w	800606c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005de0:	f003 0310 	and.w	r3, r3, #16
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f000 8141 	beq.w	800606c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005dea:	2300      	movs	r3, #0
 8005dec:	60bb      	str	r3, [r7, #8]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	60bb      	str	r3, [r7, #8]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	60bb      	str	r3, [r7, #8]
 8005dfe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0a:	2b40      	cmp	r3, #64	; 0x40
 8005e0c:	f040 80b6 	bne.w	8005f7c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 8145 	beq.w	80060b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	f080 813e 	bcs.w	80060b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e3a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e46:	f000 8088 	beq.w	8005f5a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	330c      	adds	r3, #12
 8005e50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e58:	e853 3f00 	ldrex	r3, [r3]
 8005e5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	330c      	adds	r3, #12
 8005e72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005e76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e86:	e841 2300 	strex	r3, r2, [r1]
 8005e8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1d9      	bne.n	8005e4a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3314      	adds	r3, #20
 8005e9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ea0:	e853 3f00 	ldrex	r3, [r3]
 8005ea4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005ea6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ea8:	f023 0301 	bic.w	r3, r3, #1
 8005eac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	3314      	adds	r3, #20
 8005eb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005eba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005ebe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005ec2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005ec6:	e841 2300 	strex	r3, r2, [r1]
 8005eca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ecc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1e1      	bne.n	8005e96 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	3314      	adds	r3, #20
 8005ed8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005edc:	e853 3f00 	ldrex	r3, [r3]
 8005ee0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005ee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	3314      	adds	r3, #20
 8005ef2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ef6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ef8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005efc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005efe:	e841 2300 	strex	r3, r2, [r1]
 8005f02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1e3      	bne.n	8005ed2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2220      	movs	r2, #32
 8005f0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	330c      	adds	r3, #12
 8005f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f22:	e853 3f00 	ldrex	r3, [r3]
 8005f26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f2a:	f023 0310 	bic.w	r3, r3, #16
 8005f2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	330c      	adds	r3, #12
 8005f38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005f3c:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f3e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f44:	e841 2300 	strex	r3, r2, [r1]
 8005f48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1e3      	bne.n	8005f18 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7fd f89f 	bl	8003098 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2202      	movs	r2, #2
 8005f5e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	4619      	mov	r1, r3
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 f8b7 	bl	80060e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f76:	e09b      	b.n	80060b0 <HAL_UART_IRQHandler+0x518>
 8005f78:	080062e9 	.word	0x080062e9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 808e 	beq.w	80060b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005f98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 8089 	beq.w	80060b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	330c      	adds	r3, #12
 8005fa8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fac:	e853 3f00 	ldrex	r3, [r3]
 8005fb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	330c      	adds	r3, #12
 8005fc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005fc6:	647a      	str	r2, [r7, #68]	; 0x44
 8005fc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fce:	e841 2300 	strex	r3, r2, [r1]
 8005fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1e3      	bne.n	8005fa2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	3314      	adds	r3, #20
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe4:	e853 3f00 	ldrex	r3, [r3]
 8005fe8:	623b      	str	r3, [r7, #32]
   return(result);
 8005fea:	6a3b      	ldr	r3, [r7, #32]
 8005fec:	f023 0301 	bic.w	r3, r3, #1
 8005ff0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	3314      	adds	r3, #20
 8005ffa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005ffe:	633a      	str	r2, [r7, #48]	; 0x30
 8006000:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006002:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006006:	e841 2300 	strex	r3, r2, [r1]
 800600a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800600c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1e3      	bne.n	8005fda <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2220      	movs	r2, #32
 8006016:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	330c      	adds	r3, #12
 8006026:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	e853 3f00 	ldrex	r3, [r3]
 800602e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f023 0310 	bic.w	r3, r3, #16
 8006036:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	330c      	adds	r3, #12
 8006040:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006044:	61fa      	str	r2, [r7, #28]
 8006046:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006048:	69b9      	ldr	r1, [r7, #24]
 800604a:	69fa      	ldr	r2, [r7, #28]
 800604c:	e841 2300 	strex	r3, r2, [r1]
 8006050:	617b      	str	r3, [r7, #20]
   return(result);
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1e3      	bne.n	8006020 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2202      	movs	r2, #2
 800605c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800605e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006062:	4619      	mov	r1, r3
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 f83d 	bl	80060e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800606a:	e023      	b.n	80060b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800606c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006074:	2b00      	cmp	r3, #0
 8006076:	d009      	beq.n	800608c <HAL_UART_IRQHandler+0x4f4>
 8006078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800607c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006080:	2b00      	cmp	r3, #0
 8006082:	d003      	beq.n	800608c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 f943 	bl	8006310 <UART_Transmit_IT>
    return;
 800608a:	e014      	b.n	80060b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800608c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00e      	beq.n	80060b6 <HAL_UART_IRQHandler+0x51e>
 8006098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800609c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d008      	beq.n	80060b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f983 	bl	80063b0 <UART_EndTransmit_IT>
    return;
 80060aa:	e004      	b.n	80060b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80060ac:	bf00      	nop
 80060ae:	e002      	b.n	80060b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80060b0:	bf00      	nop
 80060b2:	e000      	b.n	80060b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80060b4:	bf00      	nop
  }
}
 80060b6:	37e8      	adds	r7, #232	; 0xe8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	460b      	mov	r3, r1
 80060ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	603b      	str	r3, [r7, #0]
 8006108:	4613      	mov	r3, r2
 800610a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800610c:	e03b      	b.n	8006186 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800610e:	6a3b      	ldr	r3, [r7, #32]
 8006110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006114:	d037      	beq.n	8006186 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006116:	f7fc fead 	bl	8002e74 <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	6a3a      	ldr	r2, [r7, #32]
 8006122:	429a      	cmp	r2, r3
 8006124:	d302      	bcc.n	800612c <UART_WaitOnFlagUntilTimeout+0x30>
 8006126:	6a3b      	ldr	r3, [r7, #32]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d101      	bne.n	8006130 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e03a      	b.n	80061a6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	f003 0304 	and.w	r3, r3, #4
 800613a:	2b00      	cmp	r3, #0
 800613c:	d023      	beq.n	8006186 <UART_WaitOnFlagUntilTimeout+0x8a>
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	2b80      	cmp	r3, #128	; 0x80
 8006142:	d020      	beq.n	8006186 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	2b40      	cmp	r3, #64	; 0x40
 8006148:	d01d      	beq.n	8006186 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0308 	and.w	r3, r3, #8
 8006154:	2b08      	cmp	r3, #8
 8006156:	d116      	bne.n	8006186 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006158:	2300      	movs	r3, #0
 800615a:	617b      	str	r3, [r7, #20]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	617b      	str	r3, [r7, #20]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	617b      	str	r3, [r7, #20]
 800616c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f000 f857 	bl	8006222 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2208      	movs	r2, #8
 8006178:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e00f      	b.n	80061a6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	4013      	ands	r3, r2
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	429a      	cmp	r2, r3
 8006194:	bf0c      	ite	eq
 8006196:	2301      	moveq	r3, #1
 8006198:	2300      	movne	r3, #0
 800619a:	b2db      	uxtb	r3, r3
 800619c:	461a      	mov	r2, r3
 800619e:	79fb      	ldrb	r3, [r7, #7]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d0b4      	beq.n	800610e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3718      	adds	r7, #24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b085      	sub	sp, #20
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	60f8      	str	r0, [r7, #12]
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	4613      	mov	r3, r2
 80061ba:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	88fa      	ldrh	r2, [r7, #6]
 80061c6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	88fa      	ldrh	r2, [r7, #6]
 80061cc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2222      	movs	r2, #34	; 0x22
 80061d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d007      	beq.n	80061f4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68da      	ldr	r2, [r3, #12]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061f2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	695a      	ldr	r2, [r3, #20]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0201 	orr.w	r2, r2, #1
 8006202:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68da      	ldr	r2, [r3, #12]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f042 0220 	orr.w	r2, r2, #32
 8006212:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006222:	b480      	push	{r7}
 8006224:	b095      	sub	sp, #84	; 0x54
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	330c      	adds	r3, #12
 8006230:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006234:	e853 3f00 	ldrex	r3, [r3]
 8006238:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800623a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006240:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	330c      	adds	r3, #12
 8006248:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800624a:	643a      	str	r2, [r7, #64]	; 0x40
 800624c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006250:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006252:	e841 2300 	strex	r3, r2, [r1]
 8006256:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1e5      	bne.n	800622a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	3314      	adds	r3, #20
 8006264:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006266:	6a3b      	ldr	r3, [r7, #32]
 8006268:	e853 3f00 	ldrex	r3, [r3]
 800626c:	61fb      	str	r3, [r7, #28]
   return(result);
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	f023 0301 	bic.w	r3, r3, #1
 8006274:	64bb      	str	r3, [r7, #72]	; 0x48
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	3314      	adds	r3, #20
 800627c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800627e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006280:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006282:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006286:	e841 2300 	strex	r3, r2, [r1]
 800628a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1e5      	bne.n	800625e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006296:	2b01      	cmp	r3, #1
 8006298:	d119      	bne.n	80062ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	330c      	adds	r3, #12
 80062a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	e853 3f00 	ldrex	r3, [r3]
 80062a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	f023 0310 	bic.w	r3, r3, #16
 80062b0:	647b      	str	r3, [r7, #68]	; 0x44
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	330c      	adds	r3, #12
 80062b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062ba:	61ba      	str	r2, [r7, #24]
 80062bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062be:	6979      	ldr	r1, [r7, #20]
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	e841 2300 	strex	r3, r2, [r1]
 80062c6:	613b      	str	r3, [r7, #16]
   return(result);
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1e5      	bne.n	800629a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2220      	movs	r2, #32
 80062d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	631a      	str	r2, [r3, #48]	; 0x30
}
 80062dc:	bf00      	nop
 80062de:	3754      	adds	r7, #84	; 0x54
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f7ff fee4 	bl	80060d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006308:	bf00      	nop
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b21      	cmp	r3, #33	; 0x21
 8006322:	d13e      	bne.n	80063a2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800632c:	d114      	bne.n	8006358 <UART_Transmit_IT+0x48>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d110      	bne.n	8006358 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	881b      	ldrh	r3, [r3, #0]
 8006340:	461a      	mov	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800634a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a1b      	ldr	r3, [r3, #32]
 8006350:	1c9a      	adds	r2, r3, #2
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	621a      	str	r2, [r3, #32]
 8006356:	e008      	b.n	800636a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	1c59      	adds	r1, r3, #1
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	6211      	str	r1, [r2, #32]
 8006362:	781a      	ldrb	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800636e:	b29b      	uxth	r3, r3
 8006370:	3b01      	subs	r3, #1
 8006372:	b29b      	uxth	r3, r3
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	4619      	mov	r1, r3
 8006378:	84d1      	strh	r1, [r2, #38]	; 0x26
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10f      	bne.n	800639e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68da      	ldr	r2, [r3, #12]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800638c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68da      	ldr	r2, [r3, #12]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800639c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	e000      	b.n	80063a4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063a2:	2302      	movs	r3, #2
  }
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3714      	adds	r7, #20
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68da      	ldr	r2, [r3, #12]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2220      	movs	r2, #32
 80063cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7ff fe73 	bl	80060bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b08c      	sub	sp, #48	; 0x30
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	2b22      	cmp	r3, #34	; 0x22
 80063f2:	f040 80ae 	bne.w	8006552 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063fe:	d117      	bne.n	8006430 <UART_Receive_IT+0x50>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d113      	bne.n	8006430 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006408:	2300      	movs	r3, #0
 800640a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006410:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	b29b      	uxth	r3, r3
 800641a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800641e:	b29a      	uxth	r2, r3
 8006420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006422:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006428:	1c9a      	adds	r2, r3, #2
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	629a      	str	r2, [r3, #40]	; 0x28
 800642e:	e026      	b.n	800647e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006434:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006436:	2300      	movs	r3, #0
 8006438:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006442:	d007      	beq.n	8006454 <UART_Receive_IT+0x74>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10a      	bne.n	8006462 <UART_Receive_IT+0x82>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d106      	bne.n	8006462 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	b2da      	uxtb	r2, r3
 800645c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645e:	701a      	strb	r2, [r3, #0]
 8006460:	e008      	b.n	8006474 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	b2db      	uxtb	r3, r3
 800646a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800646e:	b2da      	uxtb	r2, r3
 8006470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006472:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006478:	1c5a      	adds	r2, r3, #1
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006482:	b29b      	uxth	r3, r3
 8006484:	3b01      	subs	r3, #1
 8006486:	b29b      	uxth	r3, r3
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	4619      	mov	r1, r3
 800648c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800648e:	2b00      	cmp	r3, #0
 8006490:	d15d      	bne.n	800654e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68da      	ldr	r2, [r3, #12]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 0220 	bic.w	r2, r2, #32
 80064a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68da      	ldr	r2, [r3, #12]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	695a      	ldr	r2, [r3, #20]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f022 0201 	bic.w	r2, r2, #1
 80064c0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2220      	movs	r2, #32
 80064c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d135      	bne.n	8006544 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	330c      	adds	r3, #12
 80064e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	e853 3f00 	ldrex	r3, [r3]
 80064ec:	613b      	str	r3, [r7, #16]
   return(result);
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	f023 0310 	bic.w	r3, r3, #16
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	330c      	adds	r3, #12
 80064fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064fe:	623a      	str	r2, [r7, #32]
 8006500:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006502:	69f9      	ldr	r1, [r7, #28]
 8006504:	6a3a      	ldr	r2, [r7, #32]
 8006506:	e841 2300 	strex	r3, r2, [r1]
 800650a:	61bb      	str	r3, [r7, #24]
   return(result);
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1e5      	bne.n	80064de <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0310 	and.w	r3, r3, #16
 800651c:	2b10      	cmp	r3, #16
 800651e:	d10a      	bne.n	8006536 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006520:	2300      	movs	r3, #0
 8006522:	60fb      	str	r3, [r7, #12]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	60fb      	str	r3, [r7, #12]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	60fb      	str	r3, [r7, #12]
 8006534:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800653a:	4619      	mov	r1, r3
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f7ff fdd1 	bl	80060e4 <HAL_UARTEx_RxEventCallback>
 8006542:	e002      	b.n	800654a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7fa fc3d 	bl	8000dc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800654a:	2300      	movs	r3, #0
 800654c:	e002      	b.n	8006554 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800654e:	2300      	movs	r3, #0
 8006550:	e000      	b.n	8006554 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006552:	2302      	movs	r3, #2
  }
}
 8006554:	4618      	mov	r0, r3
 8006556:	3730      	adds	r7, #48	; 0x30
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800655c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006560:	b0c0      	sub	sp, #256	; 0x100
 8006562:	af00      	add	r7, sp, #0
 8006564:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006578:	68d9      	ldr	r1, [r3, #12]
 800657a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	ea40 0301 	orr.w	r3, r0, r1
 8006584:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800658a:	689a      	ldr	r2, [r3, #8]
 800658c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	431a      	orrs	r2, r3
 8006594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	431a      	orrs	r2, r3
 800659c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a0:	69db      	ldr	r3, [r3, #28]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80065a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80065b4:	f021 010c 	bic.w	r1, r1, #12
 80065b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065c2:	430b      	orrs	r3, r1
 80065c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80065d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d6:	6999      	ldr	r1, [r3, #24]
 80065d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	ea40 0301 	orr.w	r3, r0, r1
 80065e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	4b8f      	ldr	r3, [pc, #572]	; (8006828 <UART_SetConfig+0x2cc>)
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d005      	beq.n	80065fc <UART_SetConfig+0xa0>
 80065f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	4b8d      	ldr	r3, [pc, #564]	; (800682c <UART_SetConfig+0x2d0>)
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d104      	bne.n	8006606 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065fc:	f7fe f8e8 	bl	80047d0 <HAL_RCC_GetPCLK2Freq>
 8006600:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006604:	e003      	b.n	800660e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006606:	f7fe f8cf 	bl	80047a8 <HAL_RCC_GetPCLK1Freq>
 800660a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800660e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006618:	f040 810c 	bne.w	8006834 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800661c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006620:	2200      	movs	r2, #0
 8006622:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006626:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800662a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800662e:	4622      	mov	r2, r4
 8006630:	462b      	mov	r3, r5
 8006632:	1891      	adds	r1, r2, r2
 8006634:	65b9      	str	r1, [r7, #88]	; 0x58
 8006636:	415b      	adcs	r3, r3
 8006638:	65fb      	str	r3, [r7, #92]	; 0x5c
 800663a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800663e:	4621      	mov	r1, r4
 8006640:	eb12 0801 	adds.w	r8, r2, r1
 8006644:	4629      	mov	r1, r5
 8006646:	eb43 0901 	adc.w	r9, r3, r1
 800664a:	f04f 0200 	mov.w	r2, #0
 800664e:	f04f 0300 	mov.w	r3, #0
 8006652:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006656:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800665a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800665e:	4690      	mov	r8, r2
 8006660:	4699      	mov	r9, r3
 8006662:	4623      	mov	r3, r4
 8006664:	eb18 0303 	adds.w	r3, r8, r3
 8006668:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800666c:	462b      	mov	r3, r5
 800666e:	eb49 0303 	adc.w	r3, r9, r3
 8006672:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006682:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006686:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800668a:	460b      	mov	r3, r1
 800668c:	18db      	adds	r3, r3, r3
 800668e:	653b      	str	r3, [r7, #80]	; 0x50
 8006690:	4613      	mov	r3, r2
 8006692:	eb42 0303 	adc.w	r3, r2, r3
 8006696:	657b      	str	r3, [r7, #84]	; 0x54
 8006698:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800669c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80066a0:	f7fa f8fc 	bl	800089c <__aeabi_uldivmod>
 80066a4:	4602      	mov	r2, r0
 80066a6:	460b      	mov	r3, r1
 80066a8:	4b61      	ldr	r3, [pc, #388]	; (8006830 <UART_SetConfig+0x2d4>)
 80066aa:	fba3 2302 	umull	r2, r3, r3, r2
 80066ae:	095b      	lsrs	r3, r3, #5
 80066b0:	011c      	lsls	r4, r3, #4
 80066b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066b6:	2200      	movs	r2, #0
 80066b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80066c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80066c4:	4642      	mov	r2, r8
 80066c6:	464b      	mov	r3, r9
 80066c8:	1891      	adds	r1, r2, r2
 80066ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80066cc:	415b      	adcs	r3, r3
 80066ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80066d4:	4641      	mov	r1, r8
 80066d6:	eb12 0a01 	adds.w	sl, r2, r1
 80066da:	4649      	mov	r1, r9
 80066dc:	eb43 0b01 	adc.w	fp, r3, r1
 80066e0:	f04f 0200 	mov.w	r2, #0
 80066e4:	f04f 0300 	mov.w	r3, #0
 80066e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066f4:	4692      	mov	sl, r2
 80066f6:	469b      	mov	fp, r3
 80066f8:	4643      	mov	r3, r8
 80066fa:	eb1a 0303 	adds.w	r3, sl, r3
 80066fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006702:	464b      	mov	r3, r9
 8006704:	eb4b 0303 	adc.w	r3, fp, r3
 8006708:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800670c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006718:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800671c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006720:	460b      	mov	r3, r1
 8006722:	18db      	adds	r3, r3, r3
 8006724:	643b      	str	r3, [r7, #64]	; 0x40
 8006726:	4613      	mov	r3, r2
 8006728:	eb42 0303 	adc.w	r3, r2, r3
 800672c:	647b      	str	r3, [r7, #68]	; 0x44
 800672e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006732:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006736:	f7fa f8b1 	bl	800089c <__aeabi_uldivmod>
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	4611      	mov	r1, r2
 8006740:	4b3b      	ldr	r3, [pc, #236]	; (8006830 <UART_SetConfig+0x2d4>)
 8006742:	fba3 2301 	umull	r2, r3, r3, r1
 8006746:	095b      	lsrs	r3, r3, #5
 8006748:	2264      	movs	r2, #100	; 0x64
 800674a:	fb02 f303 	mul.w	r3, r2, r3
 800674e:	1acb      	subs	r3, r1, r3
 8006750:	00db      	lsls	r3, r3, #3
 8006752:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006756:	4b36      	ldr	r3, [pc, #216]	; (8006830 <UART_SetConfig+0x2d4>)
 8006758:	fba3 2302 	umull	r2, r3, r3, r2
 800675c:	095b      	lsrs	r3, r3, #5
 800675e:	005b      	lsls	r3, r3, #1
 8006760:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006764:	441c      	add	r4, r3
 8006766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800676a:	2200      	movs	r2, #0
 800676c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006770:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006774:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006778:	4642      	mov	r2, r8
 800677a:	464b      	mov	r3, r9
 800677c:	1891      	adds	r1, r2, r2
 800677e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006780:	415b      	adcs	r3, r3
 8006782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006784:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006788:	4641      	mov	r1, r8
 800678a:	1851      	adds	r1, r2, r1
 800678c:	6339      	str	r1, [r7, #48]	; 0x30
 800678e:	4649      	mov	r1, r9
 8006790:	414b      	adcs	r3, r1
 8006792:	637b      	str	r3, [r7, #52]	; 0x34
 8006794:	f04f 0200 	mov.w	r2, #0
 8006798:	f04f 0300 	mov.w	r3, #0
 800679c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80067a0:	4659      	mov	r1, fp
 80067a2:	00cb      	lsls	r3, r1, #3
 80067a4:	4651      	mov	r1, sl
 80067a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067aa:	4651      	mov	r1, sl
 80067ac:	00ca      	lsls	r2, r1, #3
 80067ae:	4610      	mov	r0, r2
 80067b0:	4619      	mov	r1, r3
 80067b2:	4603      	mov	r3, r0
 80067b4:	4642      	mov	r2, r8
 80067b6:	189b      	adds	r3, r3, r2
 80067b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067bc:	464b      	mov	r3, r9
 80067be:	460a      	mov	r2, r1
 80067c0:	eb42 0303 	adc.w	r3, r2, r3
 80067c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80067d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80067d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80067dc:	460b      	mov	r3, r1
 80067de:	18db      	adds	r3, r3, r3
 80067e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80067e2:	4613      	mov	r3, r2
 80067e4:	eb42 0303 	adc.w	r3, r2, r3
 80067e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80067f2:	f7fa f853 	bl	800089c <__aeabi_uldivmod>
 80067f6:	4602      	mov	r2, r0
 80067f8:	460b      	mov	r3, r1
 80067fa:	4b0d      	ldr	r3, [pc, #52]	; (8006830 <UART_SetConfig+0x2d4>)
 80067fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006800:	095b      	lsrs	r3, r3, #5
 8006802:	2164      	movs	r1, #100	; 0x64
 8006804:	fb01 f303 	mul.w	r3, r1, r3
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	00db      	lsls	r3, r3, #3
 800680c:	3332      	adds	r3, #50	; 0x32
 800680e:	4a08      	ldr	r2, [pc, #32]	; (8006830 <UART_SetConfig+0x2d4>)
 8006810:	fba2 2303 	umull	r2, r3, r2, r3
 8006814:	095b      	lsrs	r3, r3, #5
 8006816:	f003 0207 	and.w	r2, r3, #7
 800681a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4422      	add	r2, r4
 8006822:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006824:	e106      	b.n	8006a34 <UART_SetConfig+0x4d8>
 8006826:	bf00      	nop
 8006828:	40011000 	.word	0x40011000
 800682c:	40011400 	.word	0x40011400
 8006830:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006834:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006838:	2200      	movs	r2, #0
 800683a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800683e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006842:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006846:	4642      	mov	r2, r8
 8006848:	464b      	mov	r3, r9
 800684a:	1891      	adds	r1, r2, r2
 800684c:	6239      	str	r1, [r7, #32]
 800684e:	415b      	adcs	r3, r3
 8006850:	627b      	str	r3, [r7, #36]	; 0x24
 8006852:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006856:	4641      	mov	r1, r8
 8006858:	1854      	adds	r4, r2, r1
 800685a:	4649      	mov	r1, r9
 800685c:	eb43 0501 	adc.w	r5, r3, r1
 8006860:	f04f 0200 	mov.w	r2, #0
 8006864:	f04f 0300 	mov.w	r3, #0
 8006868:	00eb      	lsls	r3, r5, #3
 800686a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800686e:	00e2      	lsls	r2, r4, #3
 8006870:	4614      	mov	r4, r2
 8006872:	461d      	mov	r5, r3
 8006874:	4643      	mov	r3, r8
 8006876:	18e3      	adds	r3, r4, r3
 8006878:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800687c:	464b      	mov	r3, r9
 800687e:	eb45 0303 	adc.w	r3, r5, r3
 8006882:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006892:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006896:	f04f 0200 	mov.w	r2, #0
 800689a:	f04f 0300 	mov.w	r3, #0
 800689e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80068a2:	4629      	mov	r1, r5
 80068a4:	008b      	lsls	r3, r1, #2
 80068a6:	4621      	mov	r1, r4
 80068a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068ac:	4621      	mov	r1, r4
 80068ae:	008a      	lsls	r2, r1, #2
 80068b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80068b4:	f7f9 fff2 	bl	800089c <__aeabi_uldivmod>
 80068b8:	4602      	mov	r2, r0
 80068ba:	460b      	mov	r3, r1
 80068bc:	4b60      	ldr	r3, [pc, #384]	; (8006a40 <UART_SetConfig+0x4e4>)
 80068be:	fba3 2302 	umull	r2, r3, r3, r2
 80068c2:	095b      	lsrs	r3, r3, #5
 80068c4:	011c      	lsls	r4, r3, #4
 80068c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068ca:	2200      	movs	r2, #0
 80068cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80068d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80068d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80068d8:	4642      	mov	r2, r8
 80068da:	464b      	mov	r3, r9
 80068dc:	1891      	adds	r1, r2, r2
 80068de:	61b9      	str	r1, [r7, #24]
 80068e0:	415b      	adcs	r3, r3
 80068e2:	61fb      	str	r3, [r7, #28]
 80068e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068e8:	4641      	mov	r1, r8
 80068ea:	1851      	adds	r1, r2, r1
 80068ec:	6139      	str	r1, [r7, #16]
 80068ee:	4649      	mov	r1, r9
 80068f0:	414b      	adcs	r3, r1
 80068f2:	617b      	str	r3, [r7, #20]
 80068f4:	f04f 0200 	mov.w	r2, #0
 80068f8:	f04f 0300 	mov.w	r3, #0
 80068fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006900:	4659      	mov	r1, fp
 8006902:	00cb      	lsls	r3, r1, #3
 8006904:	4651      	mov	r1, sl
 8006906:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800690a:	4651      	mov	r1, sl
 800690c:	00ca      	lsls	r2, r1, #3
 800690e:	4610      	mov	r0, r2
 8006910:	4619      	mov	r1, r3
 8006912:	4603      	mov	r3, r0
 8006914:	4642      	mov	r2, r8
 8006916:	189b      	adds	r3, r3, r2
 8006918:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800691c:	464b      	mov	r3, r9
 800691e:	460a      	mov	r2, r1
 8006920:	eb42 0303 	adc.w	r3, r2, r3
 8006924:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	67bb      	str	r3, [r7, #120]	; 0x78
 8006932:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006934:	f04f 0200 	mov.w	r2, #0
 8006938:	f04f 0300 	mov.w	r3, #0
 800693c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006940:	4649      	mov	r1, r9
 8006942:	008b      	lsls	r3, r1, #2
 8006944:	4641      	mov	r1, r8
 8006946:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800694a:	4641      	mov	r1, r8
 800694c:	008a      	lsls	r2, r1, #2
 800694e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006952:	f7f9 ffa3 	bl	800089c <__aeabi_uldivmod>
 8006956:	4602      	mov	r2, r0
 8006958:	460b      	mov	r3, r1
 800695a:	4611      	mov	r1, r2
 800695c:	4b38      	ldr	r3, [pc, #224]	; (8006a40 <UART_SetConfig+0x4e4>)
 800695e:	fba3 2301 	umull	r2, r3, r3, r1
 8006962:	095b      	lsrs	r3, r3, #5
 8006964:	2264      	movs	r2, #100	; 0x64
 8006966:	fb02 f303 	mul.w	r3, r2, r3
 800696a:	1acb      	subs	r3, r1, r3
 800696c:	011b      	lsls	r3, r3, #4
 800696e:	3332      	adds	r3, #50	; 0x32
 8006970:	4a33      	ldr	r2, [pc, #204]	; (8006a40 <UART_SetConfig+0x4e4>)
 8006972:	fba2 2303 	umull	r2, r3, r2, r3
 8006976:	095b      	lsrs	r3, r3, #5
 8006978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800697c:	441c      	add	r4, r3
 800697e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006982:	2200      	movs	r2, #0
 8006984:	673b      	str	r3, [r7, #112]	; 0x70
 8006986:	677a      	str	r2, [r7, #116]	; 0x74
 8006988:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800698c:	4642      	mov	r2, r8
 800698e:	464b      	mov	r3, r9
 8006990:	1891      	adds	r1, r2, r2
 8006992:	60b9      	str	r1, [r7, #8]
 8006994:	415b      	adcs	r3, r3
 8006996:	60fb      	str	r3, [r7, #12]
 8006998:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800699c:	4641      	mov	r1, r8
 800699e:	1851      	adds	r1, r2, r1
 80069a0:	6039      	str	r1, [r7, #0]
 80069a2:	4649      	mov	r1, r9
 80069a4:	414b      	adcs	r3, r1
 80069a6:	607b      	str	r3, [r7, #4]
 80069a8:	f04f 0200 	mov.w	r2, #0
 80069ac:	f04f 0300 	mov.w	r3, #0
 80069b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80069b4:	4659      	mov	r1, fp
 80069b6:	00cb      	lsls	r3, r1, #3
 80069b8:	4651      	mov	r1, sl
 80069ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069be:	4651      	mov	r1, sl
 80069c0:	00ca      	lsls	r2, r1, #3
 80069c2:	4610      	mov	r0, r2
 80069c4:	4619      	mov	r1, r3
 80069c6:	4603      	mov	r3, r0
 80069c8:	4642      	mov	r2, r8
 80069ca:	189b      	adds	r3, r3, r2
 80069cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80069ce:	464b      	mov	r3, r9
 80069d0:	460a      	mov	r2, r1
 80069d2:	eb42 0303 	adc.w	r3, r2, r3
 80069d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	663b      	str	r3, [r7, #96]	; 0x60
 80069e2:	667a      	str	r2, [r7, #100]	; 0x64
 80069e4:	f04f 0200 	mov.w	r2, #0
 80069e8:	f04f 0300 	mov.w	r3, #0
 80069ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80069f0:	4649      	mov	r1, r9
 80069f2:	008b      	lsls	r3, r1, #2
 80069f4:	4641      	mov	r1, r8
 80069f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069fa:	4641      	mov	r1, r8
 80069fc:	008a      	lsls	r2, r1, #2
 80069fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006a02:	f7f9 ff4b 	bl	800089c <__aeabi_uldivmod>
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	4b0d      	ldr	r3, [pc, #52]	; (8006a40 <UART_SetConfig+0x4e4>)
 8006a0c:	fba3 1302 	umull	r1, r3, r3, r2
 8006a10:	095b      	lsrs	r3, r3, #5
 8006a12:	2164      	movs	r1, #100	; 0x64
 8006a14:	fb01 f303 	mul.w	r3, r1, r3
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	011b      	lsls	r3, r3, #4
 8006a1c:	3332      	adds	r3, #50	; 0x32
 8006a1e:	4a08      	ldr	r2, [pc, #32]	; (8006a40 <UART_SetConfig+0x4e4>)
 8006a20:	fba2 2303 	umull	r2, r3, r2, r3
 8006a24:	095b      	lsrs	r3, r3, #5
 8006a26:	f003 020f 	and.w	r2, r3, #15
 8006a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4422      	add	r2, r4
 8006a32:	609a      	str	r2, [r3, #8]
}
 8006a34:	bf00      	nop
 8006a36:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a40:	51eb851f 	.word	0x51eb851f

08006a44 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006a52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a56:	2b84      	cmp	r3, #132	; 0x84
 8006a58:	d005      	beq.n	8006a66 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006a5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	4413      	add	r3, r2
 8006a62:	3303      	adds	r3, #3
 8006a64:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006a66:	68fb      	ldr	r3, [r7, #12]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3714      	adds	r7, #20
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006a78:	f000 faf6 	bl	8007068 <vTaskStartScheduler>
  
  return osOK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006a82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a84:	b089      	sub	sp, #36	; 0x24
 8006a86:	af04      	add	r7, sp, #16
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	695b      	ldr	r3, [r3, #20]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d020      	beq.n	8006ad6 <osThreadCreate+0x54>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d01c      	beq.n	8006ad6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685c      	ldr	r4, [r3, #4]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	691e      	ldr	r6, [r3, #16]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7ff ffc8 	bl	8006a44 <makeFreeRtosPriority>
 8006ab4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006abe:	9202      	str	r2, [sp, #8]
 8006ac0:	9301      	str	r3, [sp, #4]
 8006ac2:	9100      	str	r1, [sp, #0]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	4632      	mov	r2, r6
 8006ac8:	4629      	mov	r1, r5
 8006aca:	4620      	mov	r0, r4
 8006acc:	f000 f8ed 	bl	8006caa <xTaskCreateStatic>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	60fb      	str	r3, [r7, #12]
 8006ad4:	e01c      	b.n	8006b10 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	685c      	ldr	r4, [r3, #4]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ae2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7ff ffaa 	bl	8006a44 <makeFreeRtosPriority>
 8006af0:	4602      	mov	r2, r0
 8006af2:	f107 030c 	add.w	r3, r7, #12
 8006af6:	9301      	str	r3, [sp, #4]
 8006af8:	9200      	str	r2, [sp, #0]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	4632      	mov	r2, r6
 8006afe:	4629      	mov	r1, r5
 8006b00:	4620      	mov	r0, r4
 8006b02:	f000 f92f 	bl	8006d64 <xTaskCreate>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d001      	beq.n	8006b10 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	e000      	b.n	8006b12 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006b10:	68fb      	ldr	r3, [r7, #12]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3714      	adds	r7, #20
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006b1a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b084      	sub	sp, #16
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <osDelay+0x16>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	e000      	b.n	8006b32 <osDelay+0x18>
 8006b30:	2301      	movs	r3, #1
 8006b32:	4618      	mov	r0, r3
 8006b34:	f000 fa64 	bl	8007000 <vTaskDelay>
  
  return osOK;
 8006b38:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006b42:	b480      	push	{r7}
 8006b44:	b083      	sub	sp, #12
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f103 0208 	add.w	r2, r3, #8
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f04f 32ff 	mov.w	r2, #4294967295
 8006b5a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f103 0208 	add.w	r2, r3, #8
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f103 0208 	add.w	r2, r3, #8
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006b76:	bf00      	nop
 8006b78:	370c      	adds	r7, #12
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006b82:	b480      	push	{r7}
 8006b84:	b083      	sub	sp, #12
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	689a      	ldr	r2, [r3, #8]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	683a      	ldr	r2, [r7, #0]
 8006bc0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	683a      	ldr	r2, [r7, #0]
 8006bc6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	1c5a      	adds	r2, r3, #1
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	601a      	str	r2, [r3, #0]
}
 8006bd8:	bf00      	nop
 8006bda:	3714      	adds	r7, #20
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bfa:	d103      	bne.n	8006c04 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	60fb      	str	r3, [r7, #12]
 8006c02:	e00c      	b.n	8006c1e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	3308      	adds	r3, #8
 8006c08:	60fb      	str	r3, [r7, #12]
 8006c0a:	e002      	b.n	8006c12 <vListInsert+0x2e>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	60fb      	str	r3, [r7, #12]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68ba      	ldr	r2, [r7, #8]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d2f6      	bcs.n	8006c0c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	685a      	ldr	r2, [r3, #4]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	683a      	ldr	r2, [r7, #0]
 8006c38:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	1c5a      	adds	r2, r3, #1
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	601a      	str	r2, [r3, #0]
}
 8006c4a:	bf00      	nop
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006c56:	b480      	push	{r7}
 8006c58:	b085      	sub	sp, #20
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	6892      	ldr	r2, [r2, #8]
 8006c6c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	6852      	ldr	r2, [r2, #4]
 8006c76:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d103      	bne.n	8006c8a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	689a      	ldr	r2, [r3, #8]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	1e5a      	subs	r2, r3, #1
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3714      	adds	r7, #20
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b08e      	sub	sp, #56	; 0x38
 8006cae:	af04      	add	r7, sp, #16
 8006cb0:	60f8      	str	r0, [r7, #12]
 8006cb2:	60b9      	str	r1, [r7, #8]
 8006cb4:	607a      	str	r2, [r7, #4]
 8006cb6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10a      	bne.n	8006cd4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006cd0:	bf00      	nop
 8006cd2:	e7fe      	b.n	8006cd2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d10a      	bne.n	8006cf0 <xTaskCreateStatic+0x46>
	__asm volatile
 8006cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cde:	f383 8811 	msr	BASEPRI, r3
 8006ce2:	f3bf 8f6f 	isb	sy
 8006ce6:	f3bf 8f4f 	dsb	sy
 8006cea:	61fb      	str	r3, [r7, #28]
}
 8006cec:	bf00      	nop
 8006cee:	e7fe      	b.n	8006cee <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006cf0:	23a0      	movs	r3, #160	; 0xa0
 8006cf2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	2ba0      	cmp	r3, #160	; 0xa0
 8006cf8:	d00a      	beq.n	8006d10 <xTaskCreateStatic+0x66>
	__asm volatile
 8006cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfe:	f383 8811 	msr	BASEPRI, r3
 8006d02:	f3bf 8f6f 	isb	sy
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	61bb      	str	r3, [r7, #24]
}
 8006d0c:	bf00      	nop
 8006d0e:	e7fe      	b.n	8006d0e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006d10:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d01e      	beq.n	8006d56 <xTaskCreateStatic+0xac>
 8006d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d01b      	beq.n	8006d56 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d20:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d26:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2a:	2202      	movs	r2, #2
 8006d2c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006d30:	2300      	movs	r3, #0
 8006d32:	9303      	str	r3, [sp, #12]
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	9302      	str	r3, [sp, #8]
 8006d38:	f107 0314 	add.w	r3, r7, #20
 8006d3c:	9301      	str	r3, [sp, #4]
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d40:	9300      	str	r3, [sp, #0]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	68b9      	ldr	r1, [r7, #8]
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f000 f851 	bl	8006df0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d50:	f000 f8ec 	bl	8006f2c <prvAddNewTaskToReadyList>
 8006d54:	e001      	b.n	8006d5a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006d56:	2300      	movs	r3, #0
 8006d58:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006d5a:	697b      	ldr	r3, [r7, #20]
	}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3728      	adds	r7, #40	; 0x28
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b08c      	sub	sp, #48	; 0x30
 8006d68:	af04      	add	r7, sp, #16
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	603b      	str	r3, [r7, #0]
 8006d70:	4613      	mov	r3, r2
 8006d72:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006d74:	88fb      	ldrh	r3, [r7, #6]
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f000 fef5 	bl	8007b68 <pvPortMalloc>
 8006d7e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00e      	beq.n	8006da4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006d86:	20a0      	movs	r0, #160	; 0xa0
 8006d88:	f000 feee 	bl	8007b68 <pvPortMalloc>
 8006d8c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d003      	beq.n	8006d9c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	631a      	str	r2, [r3, #48]	; 0x30
 8006d9a:	e005      	b.n	8006da8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006d9c:	6978      	ldr	r0, [r7, #20]
 8006d9e:	f000 ffaf 	bl	8007d00 <vPortFree>
 8006da2:	e001      	b.n	8006da8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006da4:	2300      	movs	r3, #0
 8006da6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d017      	beq.n	8006dde <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006db6:	88fa      	ldrh	r2, [r7, #6]
 8006db8:	2300      	movs	r3, #0
 8006dba:	9303      	str	r3, [sp, #12]
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	9302      	str	r3, [sp, #8]
 8006dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc2:	9301      	str	r3, [sp, #4]
 8006dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	68b9      	ldr	r1, [r7, #8]
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f000 f80f 	bl	8006df0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006dd2:	69f8      	ldr	r0, [r7, #28]
 8006dd4:	f000 f8aa 	bl	8006f2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	61bb      	str	r3, [r7, #24]
 8006ddc:	e002      	b.n	8006de4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006dde:	f04f 33ff 	mov.w	r3, #4294967295
 8006de2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006de4:	69bb      	ldr	r3, [r7, #24]
	}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3720      	adds	r7, #32
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
	...

08006df0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b088      	sub	sp, #32
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]
 8006dfc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	f023 0307 	bic.w	r3, r3, #7
 8006e16:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	f003 0307 	and.w	r3, r3, #7
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00a      	beq.n	8006e38 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	617b      	str	r3, [r7, #20]
}
 8006e34:	bf00      	nop
 8006e36:	e7fe      	b.n	8006e36 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d01f      	beq.n	8006e7e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e3e:	2300      	movs	r3, #0
 8006e40:	61fb      	str	r3, [r7, #28]
 8006e42:	e012      	b.n	8006e6a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	4413      	add	r3, r2
 8006e4a:	7819      	ldrb	r1, [r3, #0]
 8006e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	4413      	add	r3, r2
 8006e52:	3334      	adds	r3, #52	; 0x34
 8006e54:	460a      	mov	r2, r1
 8006e56:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006e58:	68ba      	ldr	r2, [r7, #8]
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d006      	beq.n	8006e72 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	3301      	adds	r3, #1
 8006e68:	61fb      	str	r3, [r7, #28]
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	2b0f      	cmp	r3, #15
 8006e6e:	d9e9      	bls.n	8006e44 <prvInitialiseNewTask+0x54>
 8006e70:	e000      	b.n	8006e74 <prvInitialiseNewTask+0x84>
			{
				break;
 8006e72:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e7c:	e003      	b.n	8006e86 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e88:	2b06      	cmp	r3, #6
 8006e8a:	d901      	bls.n	8006e90 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006e8c:	2306      	movs	r3, #6
 8006e8e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e94:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e9a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea4:	3304      	adds	r3, #4
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7ff fe6b 	bl	8006b82 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eae:	3318      	adds	r3, #24
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7ff fe66 	bl	8006b82 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebe:	f1c3 0207 	rsb	r2, r3, #7
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ede:	334c      	adds	r3, #76	; 0x4c
 8006ee0:	224c      	movs	r2, #76	; 0x4c
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f001 f9f0 	bl	80082ca <memset>
 8006eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eec:	4a0c      	ldr	r2, [pc, #48]	; (8006f20 <prvInitialiseNewTask+0x130>)
 8006eee:	651a      	str	r2, [r3, #80]	; 0x50
 8006ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef2:	4a0c      	ldr	r2, [pc, #48]	; (8006f24 <prvInitialiseNewTask+0x134>)
 8006ef4:	655a      	str	r2, [r3, #84]	; 0x54
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef8:	4a0b      	ldr	r2, [pc, #44]	; (8006f28 <prvInitialiseNewTask+0x138>)
 8006efa:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006efc:	683a      	ldr	r2, [r7, #0]
 8006efe:	68f9      	ldr	r1, [r7, #12]
 8006f00:	69b8      	ldr	r0, [r7, #24]
 8006f02:	f000 fc1f 	bl	8007744 <pxPortInitialiseStack>
 8006f06:	4602      	mov	r2, r0
 8006f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d002      	beq.n	8006f18 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f16:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f18:	bf00      	nop
 8006f1a:	3720      	adds	r7, #32
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	20004428 	.word	0x20004428
 8006f24:	20004490 	.word	0x20004490
 8006f28:	200044f8 	.word	0x200044f8

08006f2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006f34:	f000 fd36 	bl	80079a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006f38:	4b2a      	ldr	r3, [pc, #168]	; (8006fe4 <prvAddNewTaskToReadyList+0xb8>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	4a29      	ldr	r2, [pc, #164]	; (8006fe4 <prvAddNewTaskToReadyList+0xb8>)
 8006f40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006f42:	4b29      	ldr	r3, [pc, #164]	; (8006fe8 <prvAddNewTaskToReadyList+0xbc>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d109      	bne.n	8006f5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006f4a:	4a27      	ldr	r2, [pc, #156]	; (8006fe8 <prvAddNewTaskToReadyList+0xbc>)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006f50:	4b24      	ldr	r3, [pc, #144]	; (8006fe4 <prvAddNewTaskToReadyList+0xb8>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d110      	bne.n	8006f7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006f58:	f000 facc 	bl	80074f4 <prvInitialiseTaskLists>
 8006f5c:	e00d      	b.n	8006f7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006f5e:	4b23      	ldr	r3, [pc, #140]	; (8006fec <prvAddNewTaskToReadyList+0xc0>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d109      	bne.n	8006f7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006f66:	4b20      	ldr	r3, [pc, #128]	; (8006fe8 <prvAddNewTaskToReadyList+0xbc>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d802      	bhi.n	8006f7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006f74:	4a1c      	ldr	r2, [pc, #112]	; (8006fe8 <prvAddNewTaskToReadyList+0xbc>)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006f7a:	4b1d      	ldr	r3, [pc, #116]	; (8006ff0 <prvAddNewTaskToReadyList+0xc4>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	4a1b      	ldr	r2, [pc, #108]	; (8006ff0 <prvAddNewTaskToReadyList+0xc4>)
 8006f82:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f88:	2201      	movs	r2, #1
 8006f8a:	409a      	lsls	r2, r3
 8006f8c:	4b19      	ldr	r3, [pc, #100]	; (8006ff4 <prvAddNewTaskToReadyList+0xc8>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	4a18      	ldr	r2, [pc, #96]	; (8006ff4 <prvAddNewTaskToReadyList+0xc8>)
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4413      	add	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4a15      	ldr	r2, [pc, #84]	; (8006ff8 <prvAddNewTaskToReadyList+0xcc>)
 8006fa4:	441a      	add	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	3304      	adds	r3, #4
 8006faa:	4619      	mov	r1, r3
 8006fac:	4610      	mov	r0, r2
 8006fae:	f7ff fdf5 	bl	8006b9c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006fb2:	f000 fd27 	bl	8007a04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006fb6:	4b0d      	ldr	r3, [pc, #52]	; (8006fec <prvAddNewTaskToReadyList+0xc0>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00e      	beq.n	8006fdc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006fbe:	4b0a      	ldr	r3, [pc, #40]	; (8006fe8 <prvAddNewTaskToReadyList+0xbc>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d207      	bcs.n	8006fdc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006fcc:	4b0b      	ldr	r3, [pc, #44]	; (8006ffc <prvAddNewTaskToReadyList+0xd0>)
 8006fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fdc:	bf00      	nop
 8006fde:	3708      	adds	r7, #8
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	200007d4 	.word	0x200007d4
 8006fe8:	200006d4 	.word	0x200006d4
 8006fec:	200007e0 	.word	0x200007e0
 8006ff0:	200007f0 	.word	0x200007f0
 8006ff4:	200007dc 	.word	0x200007dc
 8006ff8:	200006d8 	.word	0x200006d8
 8006ffc:	e000ed04 	.word	0xe000ed04

08007000 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007008:	2300      	movs	r3, #0
 800700a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d017      	beq.n	8007042 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007012:	4b13      	ldr	r3, [pc, #76]	; (8007060 <vTaskDelay+0x60>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00a      	beq.n	8007030 <vTaskDelay+0x30>
	__asm volatile
 800701a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701e:	f383 8811 	msr	BASEPRI, r3
 8007022:	f3bf 8f6f 	isb	sy
 8007026:	f3bf 8f4f 	dsb	sy
 800702a:	60bb      	str	r3, [r7, #8]
}
 800702c:	bf00      	nop
 800702e:	e7fe      	b.n	800702e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007030:	f000 f884 	bl	800713c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007034:	2100      	movs	r1, #0
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fb1e 	bl	8007678 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800703c:	f000 f88c 	bl	8007158 <xTaskResumeAll>
 8007040:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d107      	bne.n	8007058 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007048:	4b06      	ldr	r3, [pc, #24]	; (8007064 <vTaskDelay+0x64>)
 800704a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800704e:	601a      	str	r2, [r3, #0]
 8007050:	f3bf 8f4f 	dsb	sy
 8007054:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007058:	bf00      	nop
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	200007fc 	.word	0x200007fc
 8007064:	e000ed04 	.word	0xe000ed04

08007068 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b08a      	sub	sp, #40	; 0x28
 800706c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800706e:	2300      	movs	r3, #0
 8007070:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007072:	2300      	movs	r3, #0
 8007074:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007076:	463a      	mov	r2, r7
 8007078:	1d39      	adds	r1, r7, #4
 800707a:	f107 0308 	add.w	r3, r7, #8
 800707e:	4618      	mov	r0, r3
 8007080:	f7f9 fe86 	bl	8000d90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007084:	6839      	ldr	r1, [r7, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	9202      	str	r2, [sp, #8]
 800708c:	9301      	str	r3, [sp, #4]
 800708e:	2300      	movs	r3, #0
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	2300      	movs	r3, #0
 8007094:	460a      	mov	r2, r1
 8007096:	4921      	ldr	r1, [pc, #132]	; (800711c <vTaskStartScheduler+0xb4>)
 8007098:	4821      	ldr	r0, [pc, #132]	; (8007120 <vTaskStartScheduler+0xb8>)
 800709a:	f7ff fe06 	bl	8006caa <xTaskCreateStatic>
 800709e:	4603      	mov	r3, r0
 80070a0:	4a20      	ldr	r2, [pc, #128]	; (8007124 <vTaskStartScheduler+0xbc>)
 80070a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80070a4:	4b1f      	ldr	r3, [pc, #124]	; (8007124 <vTaskStartScheduler+0xbc>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d002      	beq.n	80070b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80070ac:	2301      	movs	r3, #1
 80070ae:	617b      	str	r3, [r7, #20]
 80070b0:	e001      	b.n	80070b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80070b2:	2300      	movs	r3, #0
 80070b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d11b      	bne.n	80070f4 <vTaskStartScheduler+0x8c>
	__asm volatile
 80070bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c0:	f383 8811 	msr	BASEPRI, r3
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	613b      	str	r3, [r7, #16]
}
 80070ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80070d0:	4b15      	ldr	r3, [pc, #84]	; (8007128 <vTaskStartScheduler+0xc0>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	334c      	adds	r3, #76	; 0x4c
 80070d6:	4a15      	ldr	r2, [pc, #84]	; (800712c <vTaskStartScheduler+0xc4>)
 80070d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80070da:	4b15      	ldr	r3, [pc, #84]	; (8007130 <vTaskStartScheduler+0xc8>)
 80070dc:	f04f 32ff 	mov.w	r2, #4294967295
 80070e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80070e2:	4b14      	ldr	r3, [pc, #80]	; (8007134 <vTaskStartScheduler+0xcc>)
 80070e4:	2201      	movs	r2, #1
 80070e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80070e8:	4b13      	ldr	r3, [pc, #76]	; (8007138 <vTaskStartScheduler+0xd0>)
 80070ea:	2200      	movs	r2, #0
 80070ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80070ee:	f000 fbb7 	bl	8007860 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80070f2:	e00e      	b.n	8007112 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070fa:	d10a      	bne.n	8007112 <vTaskStartScheduler+0xaa>
	__asm volatile
 80070fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	60fb      	str	r3, [r7, #12]
}
 800710e:	bf00      	nop
 8007110:	e7fe      	b.n	8007110 <vTaskStartScheduler+0xa8>
}
 8007112:	bf00      	nop
 8007114:	3718      	adds	r7, #24
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	080094a8 	.word	0x080094a8
 8007120:	080074c5 	.word	0x080074c5
 8007124:	200007f8 	.word	0x200007f8
 8007128:	200006d4 	.word	0x200006d4
 800712c:	20000068 	.word	0x20000068
 8007130:	200007f4 	.word	0x200007f4
 8007134:	200007e0 	.word	0x200007e0
 8007138:	200007d8 	.word	0x200007d8

0800713c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800713c:	b480      	push	{r7}
 800713e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007140:	4b04      	ldr	r3, [pc, #16]	; (8007154 <vTaskSuspendAll+0x18>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	3301      	adds	r3, #1
 8007146:	4a03      	ldr	r2, [pc, #12]	; (8007154 <vTaskSuspendAll+0x18>)
 8007148:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800714a:	bf00      	nop
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	200007fc 	.word	0x200007fc

08007158 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800715e:	2300      	movs	r3, #0
 8007160:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007162:	2300      	movs	r3, #0
 8007164:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007166:	4b41      	ldr	r3, [pc, #260]	; (800726c <xTaskResumeAll+0x114>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10a      	bne.n	8007184 <xTaskResumeAll+0x2c>
	__asm volatile
 800716e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007172:	f383 8811 	msr	BASEPRI, r3
 8007176:	f3bf 8f6f 	isb	sy
 800717a:	f3bf 8f4f 	dsb	sy
 800717e:	603b      	str	r3, [r7, #0]
}
 8007180:	bf00      	nop
 8007182:	e7fe      	b.n	8007182 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007184:	f000 fc0e 	bl	80079a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007188:	4b38      	ldr	r3, [pc, #224]	; (800726c <xTaskResumeAll+0x114>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	3b01      	subs	r3, #1
 800718e:	4a37      	ldr	r2, [pc, #220]	; (800726c <xTaskResumeAll+0x114>)
 8007190:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007192:	4b36      	ldr	r3, [pc, #216]	; (800726c <xTaskResumeAll+0x114>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d161      	bne.n	800725e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800719a:	4b35      	ldr	r3, [pc, #212]	; (8007270 <xTaskResumeAll+0x118>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d05d      	beq.n	800725e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071a2:	e02e      	b.n	8007202 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071a4:	4b33      	ldr	r3, [pc, #204]	; (8007274 <xTaskResumeAll+0x11c>)
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	3318      	adds	r3, #24
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7ff fd50 	bl	8006c56 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	3304      	adds	r3, #4
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7ff fd4b 	bl	8006c56 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c4:	2201      	movs	r2, #1
 80071c6:	409a      	lsls	r2, r3
 80071c8:	4b2b      	ldr	r3, [pc, #172]	; (8007278 <xTaskResumeAll+0x120>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	4a2a      	ldr	r2, [pc, #168]	; (8007278 <xTaskResumeAll+0x120>)
 80071d0:	6013      	str	r3, [r2, #0]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d6:	4613      	mov	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4a27      	ldr	r2, [pc, #156]	; (800727c <xTaskResumeAll+0x124>)
 80071e0:	441a      	add	r2, r3
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	3304      	adds	r3, #4
 80071e6:	4619      	mov	r1, r3
 80071e8:	4610      	mov	r0, r2
 80071ea:	f7ff fcd7 	bl	8006b9c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f2:	4b23      	ldr	r3, [pc, #140]	; (8007280 <xTaskResumeAll+0x128>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d302      	bcc.n	8007202 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80071fc:	4b21      	ldr	r3, [pc, #132]	; (8007284 <xTaskResumeAll+0x12c>)
 80071fe:	2201      	movs	r2, #1
 8007200:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007202:	4b1c      	ldr	r3, [pc, #112]	; (8007274 <xTaskResumeAll+0x11c>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1cc      	bne.n	80071a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d001      	beq.n	8007214 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007210:	f000 fa12 	bl	8007638 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007214:	4b1c      	ldr	r3, [pc, #112]	; (8007288 <xTaskResumeAll+0x130>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d010      	beq.n	8007242 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007220:	f000 f836 	bl	8007290 <xTaskIncrementTick>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d002      	beq.n	8007230 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800722a:	4b16      	ldr	r3, [pc, #88]	; (8007284 <xTaskResumeAll+0x12c>)
 800722c:	2201      	movs	r2, #1
 800722e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	3b01      	subs	r3, #1
 8007234:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d1f1      	bne.n	8007220 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800723c:	4b12      	ldr	r3, [pc, #72]	; (8007288 <xTaskResumeAll+0x130>)
 800723e:	2200      	movs	r2, #0
 8007240:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007242:	4b10      	ldr	r3, [pc, #64]	; (8007284 <xTaskResumeAll+0x12c>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d009      	beq.n	800725e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800724a:	2301      	movs	r3, #1
 800724c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800724e:	4b0f      	ldr	r3, [pc, #60]	; (800728c <xTaskResumeAll+0x134>)
 8007250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007254:	601a      	str	r2, [r3, #0]
 8007256:	f3bf 8f4f 	dsb	sy
 800725a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800725e:	f000 fbd1 	bl	8007a04 <vPortExitCritical>

	return xAlreadyYielded;
 8007262:	68bb      	ldr	r3, [r7, #8]
}
 8007264:	4618      	mov	r0, r3
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	200007fc 	.word	0x200007fc
 8007270:	200007d4 	.word	0x200007d4
 8007274:	20000794 	.word	0x20000794
 8007278:	200007dc 	.word	0x200007dc
 800727c:	200006d8 	.word	0x200006d8
 8007280:	200006d4 	.word	0x200006d4
 8007284:	200007e8 	.word	0x200007e8
 8007288:	200007e4 	.word	0x200007e4
 800728c:	e000ed04 	.word	0xe000ed04

08007290 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b086      	sub	sp, #24
 8007294:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007296:	2300      	movs	r3, #0
 8007298:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800729a:	4b4e      	ldr	r3, [pc, #312]	; (80073d4 <xTaskIncrementTick+0x144>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f040 808e 	bne.w	80073c0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80072a4:	4b4c      	ldr	r3, [pc, #304]	; (80073d8 <xTaskIncrementTick+0x148>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	3301      	adds	r3, #1
 80072aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80072ac:	4a4a      	ldr	r2, [pc, #296]	; (80073d8 <xTaskIncrementTick+0x148>)
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d120      	bne.n	80072fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80072b8:	4b48      	ldr	r3, [pc, #288]	; (80073dc <xTaskIncrementTick+0x14c>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00a      	beq.n	80072d8 <xTaskIncrementTick+0x48>
	__asm volatile
 80072c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c6:	f383 8811 	msr	BASEPRI, r3
 80072ca:	f3bf 8f6f 	isb	sy
 80072ce:	f3bf 8f4f 	dsb	sy
 80072d2:	603b      	str	r3, [r7, #0]
}
 80072d4:	bf00      	nop
 80072d6:	e7fe      	b.n	80072d6 <xTaskIncrementTick+0x46>
 80072d8:	4b40      	ldr	r3, [pc, #256]	; (80073dc <xTaskIncrementTick+0x14c>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	60fb      	str	r3, [r7, #12]
 80072de:	4b40      	ldr	r3, [pc, #256]	; (80073e0 <xTaskIncrementTick+0x150>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a3e      	ldr	r2, [pc, #248]	; (80073dc <xTaskIncrementTick+0x14c>)
 80072e4:	6013      	str	r3, [r2, #0]
 80072e6:	4a3e      	ldr	r2, [pc, #248]	; (80073e0 <xTaskIncrementTick+0x150>)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6013      	str	r3, [r2, #0]
 80072ec:	4b3d      	ldr	r3, [pc, #244]	; (80073e4 <xTaskIncrementTick+0x154>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	3301      	adds	r3, #1
 80072f2:	4a3c      	ldr	r2, [pc, #240]	; (80073e4 <xTaskIncrementTick+0x154>)
 80072f4:	6013      	str	r3, [r2, #0]
 80072f6:	f000 f99f 	bl	8007638 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80072fa:	4b3b      	ldr	r3, [pc, #236]	; (80073e8 <xTaskIncrementTick+0x158>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	693a      	ldr	r2, [r7, #16]
 8007300:	429a      	cmp	r2, r3
 8007302:	d348      	bcc.n	8007396 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007304:	4b35      	ldr	r3, [pc, #212]	; (80073dc <xTaskIncrementTick+0x14c>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d104      	bne.n	8007318 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800730e:	4b36      	ldr	r3, [pc, #216]	; (80073e8 <xTaskIncrementTick+0x158>)
 8007310:	f04f 32ff 	mov.w	r2, #4294967295
 8007314:	601a      	str	r2, [r3, #0]
					break;
 8007316:	e03e      	b.n	8007396 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007318:	4b30      	ldr	r3, [pc, #192]	; (80073dc <xTaskIncrementTick+0x14c>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007328:	693a      	ldr	r2, [r7, #16]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	429a      	cmp	r2, r3
 800732e:	d203      	bcs.n	8007338 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007330:	4a2d      	ldr	r2, [pc, #180]	; (80073e8 <xTaskIncrementTick+0x158>)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007336:	e02e      	b.n	8007396 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	3304      	adds	r3, #4
 800733c:	4618      	mov	r0, r3
 800733e:	f7ff fc8a 	bl	8006c56 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007346:	2b00      	cmp	r3, #0
 8007348:	d004      	beq.n	8007354 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	3318      	adds	r3, #24
 800734e:	4618      	mov	r0, r3
 8007350:	f7ff fc81 	bl	8006c56 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007358:	2201      	movs	r2, #1
 800735a:	409a      	lsls	r2, r3
 800735c:	4b23      	ldr	r3, [pc, #140]	; (80073ec <xTaskIncrementTick+0x15c>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4313      	orrs	r3, r2
 8007362:	4a22      	ldr	r2, [pc, #136]	; (80073ec <xTaskIncrementTick+0x15c>)
 8007364:	6013      	str	r3, [r2, #0]
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800736a:	4613      	mov	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	4413      	add	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	4a1f      	ldr	r2, [pc, #124]	; (80073f0 <xTaskIncrementTick+0x160>)
 8007374:	441a      	add	r2, r3
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	3304      	adds	r3, #4
 800737a:	4619      	mov	r1, r3
 800737c:	4610      	mov	r0, r2
 800737e:	f7ff fc0d 	bl	8006b9c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007386:	4b1b      	ldr	r3, [pc, #108]	; (80073f4 <xTaskIncrementTick+0x164>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738c:	429a      	cmp	r2, r3
 800738e:	d3b9      	bcc.n	8007304 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007390:	2301      	movs	r3, #1
 8007392:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007394:	e7b6      	b.n	8007304 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007396:	4b17      	ldr	r3, [pc, #92]	; (80073f4 <xTaskIncrementTick+0x164>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800739c:	4914      	ldr	r1, [pc, #80]	; (80073f0 <xTaskIncrementTick+0x160>)
 800739e:	4613      	mov	r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	4413      	add	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	440b      	add	r3, r1
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d901      	bls.n	80073b2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80073ae:	2301      	movs	r3, #1
 80073b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80073b2:	4b11      	ldr	r3, [pc, #68]	; (80073f8 <xTaskIncrementTick+0x168>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d007      	beq.n	80073ca <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80073ba:	2301      	movs	r3, #1
 80073bc:	617b      	str	r3, [r7, #20]
 80073be:	e004      	b.n	80073ca <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80073c0:	4b0e      	ldr	r3, [pc, #56]	; (80073fc <xTaskIncrementTick+0x16c>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	3301      	adds	r3, #1
 80073c6:	4a0d      	ldr	r2, [pc, #52]	; (80073fc <xTaskIncrementTick+0x16c>)
 80073c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80073ca:	697b      	ldr	r3, [r7, #20]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3718      	adds	r7, #24
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	200007fc 	.word	0x200007fc
 80073d8:	200007d8 	.word	0x200007d8
 80073dc:	2000078c 	.word	0x2000078c
 80073e0:	20000790 	.word	0x20000790
 80073e4:	200007ec 	.word	0x200007ec
 80073e8:	200007f4 	.word	0x200007f4
 80073ec:	200007dc 	.word	0x200007dc
 80073f0:	200006d8 	.word	0x200006d8
 80073f4:	200006d4 	.word	0x200006d4
 80073f8:	200007e8 	.word	0x200007e8
 80073fc:	200007e4 	.word	0x200007e4

08007400 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007400:	b480      	push	{r7}
 8007402:	b087      	sub	sp, #28
 8007404:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007406:	4b29      	ldr	r3, [pc, #164]	; (80074ac <vTaskSwitchContext+0xac>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800740e:	4b28      	ldr	r3, [pc, #160]	; (80074b0 <vTaskSwitchContext+0xb0>)
 8007410:	2201      	movs	r2, #1
 8007412:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007414:	e044      	b.n	80074a0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007416:	4b26      	ldr	r3, [pc, #152]	; (80074b0 <vTaskSwitchContext+0xb0>)
 8007418:	2200      	movs	r2, #0
 800741a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800741c:	4b25      	ldr	r3, [pc, #148]	; (80074b4 <vTaskSwitchContext+0xb4>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	fab3 f383 	clz	r3, r3
 8007428:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800742a:	7afb      	ldrb	r3, [r7, #11]
 800742c:	f1c3 031f 	rsb	r3, r3, #31
 8007430:	617b      	str	r3, [r7, #20]
 8007432:	4921      	ldr	r1, [pc, #132]	; (80074b8 <vTaskSwitchContext+0xb8>)
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	4613      	mov	r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	4413      	add	r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	440b      	add	r3, r1
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10a      	bne.n	800745c <vTaskSwitchContext+0x5c>
	__asm volatile
 8007446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744a:	f383 8811 	msr	BASEPRI, r3
 800744e:	f3bf 8f6f 	isb	sy
 8007452:	f3bf 8f4f 	dsb	sy
 8007456:	607b      	str	r3, [r7, #4]
}
 8007458:	bf00      	nop
 800745a:	e7fe      	b.n	800745a <vTaskSwitchContext+0x5a>
 800745c:	697a      	ldr	r2, [r7, #20]
 800745e:	4613      	mov	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4413      	add	r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4a14      	ldr	r2, [pc, #80]	; (80074b8 <vTaskSwitchContext+0xb8>)
 8007468:	4413      	add	r3, r2
 800746a:	613b      	str	r3, [r7, #16]
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	685a      	ldr	r2, [r3, #4]
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	605a      	str	r2, [r3, #4]
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	3308      	adds	r3, #8
 800747e:	429a      	cmp	r2, r3
 8007480:	d104      	bne.n	800748c <vTaskSwitchContext+0x8c>
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	685a      	ldr	r2, [r3, #4]
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	605a      	str	r2, [r3, #4]
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	4a0a      	ldr	r2, [pc, #40]	; (80074bc <vTaskSwitchContext+0xbc>)
 8007494:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007496:	4b09      	ldr	r3, [pc, #36]	; (80074bc <vTaskSwitchContext+0xbc>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	334c      	adds	r3, #76	; 0x4c
 800749c:	4a08      	ldr	r2, [pc, #32]	; (80074c0 <vTaskSwitchContext+0xc0>)
 800749e:	6013      	str	r3, [r2, #0]
}
 80074a0:	bf00      	nop
 80074a2:	371c      	adds	r7, #28
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr
 80074ac:	200007fc 	.word	0x200007fc
 80074b0:	200007e8 	.word	0x200007e8
 80074b4:	200007dc 	.word	0x200007dc
 80074b8:	200006d8 	.word	0x200006d8
 80074bc:	200006d4 	.word	0x200006d4
 80074c0:	20000068 	.word	0x20000068

080074c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074cc:	f000 f852 	bl	8007574 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074d0:	4b06      	ldr	r3, [pc, #24]	; (80074ec <prvIdleTask+0x28>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d9f9      	bls.n	80074cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80074d8:	4b05      	ldr	r3, [pc, #20]	; (80074f0 <prvIdleTask+0x2c>)
 80074da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074de:	601a      	str	r2, [r3, #0]
 80074e0:	f3bf 8f4f 	dsb	sy
 80074e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80074e8:	e7f0      	b.n	80074cc <prvIdleTask+0x8>
 80074ea:	bf00      	nop
 80074ec:	200006d8 	.word	0x200006d8
 80074f0:	e000ed04 	.word	0xe000ed04

080074f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074fa:	2300      	movs	r3, #0
 80074fc:	607b      	str	r3, [r7, #4]
 80074fe:	e00c      	b.n	800751a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	4613      	mov	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4a12      	ldr	r2, [pc, #72]	; (8007554 <prvInitialiseTaskLists+0x60>)
 800750c:	4413      	add	r3, r2
 800750e:	4618      	mov	r0, r3
 8007510:	f7ff fb17 	bl	8006b42 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	3301      	adds	r3, #1
 8007518:	607b      	str	r3, [r7, #4]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2b06      	cmp	r3, #6
 800751e:	d9ef      	bls.n	8007500 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007520:	480d      	ldr	r0, [pc, #52]	; (8007558 <prvInitialiseTaskLists+0x64>)
 8007522:	f7ff fb0e 	bl	8006b42 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007526:	480d      	ldr	r0, [pc, #52]	; (800755c <prvInitialiseTaskLists+0x68>)
 8007528:	f7ff fb0b 	bl	8006b42 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800752c:	480c      	ldr	r0, [pc, #48]	; (8007560 <prvInitialiseTaskLists+0x6c>)
 800752e:	f7ff fb08 	bl	8006b42 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007532:	480c      	ldr	r0, [pc, #48]	; (8007564 <prvInitialiseTaskLists+0x70>)
 8007534:	f7ff fb05 	bl	8006b42 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007538:	480b      	ldr	r0, [pc, #44]	; (8007568 <prvInitialiseTaskLists+0x74>)
 800753a:	f7ff fb02 	bl	8006b42 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800753e:	4b0b      	ldr	r3, [pc, #44]	; (800756c <prvInitialiseTaskLists+0x78>)
 8007540:	4a05      	ldr	r2, [pc, #20]	; (8007558 <prvInitialiseTaskLists+0x64>)
 8007542:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007544:	4b0a      	ldr	r3, [pc, #40]	; (8007570 <prvInitialiseTaskLists+0x7c>)
 8007546:	4a05      	ldr	r2, [pc, #20]	; (800755c <prvInitialiseTaskLists+0x68>)
 8007548:	601a      	str	r2, [r3, #0]
}
 800754a:	bf00      	nop
 800754c:	3708      	adds	r7, #8
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	200006d8 	.word	0x200006d8
 8007558:	20000764 	.word	0x20000764
 800755c:	20000778 	.word	0x20000778
 8007560:	20000794 	.word	0x20000794
 8007564:	200007a8 	.word	0x200007a8
 8007568:	200007c0 	.word	0x200007c0
 800756c:	2000078c 	.word	0x2000078c
 8007570:	20000790 	.word	0x20000790

08007574 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800757a:	e019      	b.n	80075b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800757c:	f000 fa12 	bl	80079a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007580:	4b10      	ldr	r3, [pc, #64]	; (80075c4 <prvCheckTasksWaitingTermination+0x50>)
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	3304      	adds	r3, #4
 800758c:	4618      	mov	r0, r3
 800758e:	f7ff fb62 	bl	8006c56 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007592:	4b0d      	ldr	r3, [pc, #52]	; (80075c8 <prvCheckTasksWaitingTermination+0x54>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	3b01      	subs	r3, #1
 8007598:	4a0b      	ldr	r2, [pc, #44]	; (80075c8 <prvCheckTasksWaitingTermination+0x54>)
 800759a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800759c:	4b0b      	ldr	r3, [pc, #44]	; (80075cc <prvCheckTasksWaitingTermination+0x58>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	3b01      	subs	r3, #1
 80075a2:	4a0a      	ldr	r2, [pc, #40]	; (80075cc <prvCheckTasksWaitingTermination+0x58>)
 80075a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80075a6:	f000 fa2d 	bl	8007a04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f810 	bl	80075d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075b0:	4b06      	ldr	r3, [pc, #24]	; (80075cc <prvCheckTasksWaitingTermination+0x58>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d1e1      	bne.n	800757c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80075b8:	bf00      	nop
 80075ba:	bf00      	nop
 80075bc:	3708      	adds	r7, #8
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	200007a8 	.word	0x200007a8
 80075c8:	200007d4 	.word	0x200007d4
 80075cc:	200007bc 	.word	0x200007bc

080075d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	334c      	adds	r3, #76	; 0x4c
 80075dc:	4618      	mov	r0, r3
 80075de:	f000 fe8d 	bl	80082fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d108      	bne.n	80075fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f0:	4618      	mov	r0, r3
 80075f2:	f000 fb85 	bl	8007d00 <vPortFree>
				vPortFree( pxTCB );
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fb82 	bl	8007d00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80075fc:	e018      	b.n	8007630 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007604:	2b01      	cmp	r3, #1
 8007606:	d103      	bne.n	8007610 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 fb79 	bl	8007d00 <vPortFree>
	}
 800760e:	e00f      	b.n	8007630 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007616:	2b02      	cmp	r3, #2
 8007618:	d00a      	beq.n	8007630 <prvDeleteTCB+0x60>
	__asm volatile
 800761a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761e:	f383 8811 	msr	BASEPRI, r3
 8007622:	f3bf 8f6f 	isb	sy
 8007626:	f3bf 8f4f 	dsb	sy
 800762a:	60fb      	str	r3, [r7, #12]
}
 800762c:	bf00      	nop
 800762e:	e7fe      	b.n	800762e <prvDeleteTCB+0x5e>
	}
 8007630:	bf00      	nop
 8007632:	3710      	adds	r7, #16
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800763e:	4b0c      	ldr	r3, [pc, #48]	; (8007670 <prvResetNextTaskUnblockTime+0x38>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d104      	bne.n	8007652 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007648:	4b0a      	ldr	r3, [pc, #40]	; (8007674 <prvResetNextTaskUnblockTime+0x3c>)
 800764a:	f04f 32ff 	mov.w	r2, #4294967295
 800764e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007650:	e008      	b.n	8007664 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007652:	4b07      	ldr	r3, [pc, #28]	; (8007670 <prvResetNextTaskUnblockTime+0x38>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	4a04      	ldr	r2, [pc, #16]	; (8007674 <prvResetNextTaskUnblockTime+0x3c>)
 8007662:	6013      	str	r3, [r2, #0]
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr
 8007670:	2000078c 	.word	0x2000078c
 8007674:	200007f4 	.word	0x200007f4

08007678 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007682:	4b29      	ldr	r3, [pc, #164]	; (8007728 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007688:	4b28      	ldr	r3, [pc, #160]	; (800772c <prvAddCurrentTaskToDelayedList+0xb4>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	3304      	adds	r3, #4
 800768e:	4618      	mov	r0, r3
 8007690:	f7ff fae1 	bl	8006c56 <uxListRemove>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10b      	bne.n	80076b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800769a:	4b24      	ldr	r3, [pc, #144]	; (800772c <prvAddCurrentTaskToDelayedList+0xb4>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a0:	2201      	movs	r2, #1
 80076a2:	fa02 f303 	lsl.w	r3, r2, r3
 80076a6:	43da      	mvns	r2, r3
 80076a8:	4b21      	ldr	r3, [pc, #132]	; (8007730 <prvAddCurrentTaskToDelayedList+0xb8>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4013      	ands	r3, r2
 80076ae:	4a20      	ldr	r2, [pc, #128]	; (8007730 <prvAddCurrentTaskToDelayedList+0xb8>)
 80076b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b8:	d10a      	bne.n	80076d0 <prvAddCurrentTaskToDelayedList+0x58>
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d007      	beq.n	80076d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076c0:	4b1a      	ldr	r3, [pc, #104]	; (800772c <prvAddCurrentTaskToDelayedList+0xb4>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	3304      	adds	r3, #4
 80076c6:	4619      	mov	r1, r3
 80076c8:	481a      	ldr	r0, [pc, #104]	; (8007734 <prvAddCurrentTaskToDelayedList+0xbc>)
 80076ca:	f7ff fa67 	bl	8006b9c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80076ce:	e026      	b.n	800771e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4413      	add	r3, r2
 80076d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80076d8:	4b14      	ldr	r3, [pc, #80]	; (800772c <prvAddCurrentTaskToDelayedList+0xb4>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	68ba      	ldr	r2, [r7, #8]
 80076de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d209      	bcs.n	80076fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076e8:	4b13      	ldr	r3, [pc, #76]	; (8007738 <prvAddCurrentTaskToDelayedList+0xc0>)
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	4b0f      	ldr	r3, [pc, #60]	; (800772c <prvAddCurrentTaskToDelayedList+0xb4>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	3304      	adds	r3, #4
 80076f2:	4619      	mov	r1, r3
 80076f4:	4610      	mov	r0, r2
 80076f6:	f7ff fa75 	bl	8006be4 <vListInsert>
}
 80076fa:	e010      	b.n	800771e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076fc:	4b0f      	ldr	r3, [pc, #60]	; (800773c <prvAddCurrentTaskToDelayedList+0xc4>)
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	4b0a      	ldr	r3, [pc, #40]	; (800772c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	3304      	adds	r3, #4
 8007706:	4619      	mov	r1, r3
 8007708:	4610      	mov	r0, r2
 800770a:	f7ff fa6b 	bl	8006be4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800770e:	4b0c      	ldr	r3, [pc, #48]	; (8007740 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68ba      	ldr	r2, [r7, #8]
 8007714:	429a      	cmp	r2, r3
 8007716:	d202      	bcs.n	800771e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007718:	4a09      	ldr	r2, [pc, #36]	; (8007740 <prvAddCurrentTaskToDelayedList+0xc8>)
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	6013      	str	r3, [r2, #0]
}
 800771e:	bf00      	nop
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	200007d8 	.word	0x200007d8
 800772c:	200006d4 	.word	0x200006d4
 8007730:	200007dc 	.word	0x200007dc
 8007734:	200007c0 	.word	0x200007c0
 8007738:	20000790 	.word	0x20000790
 800773c:	2000078c 	.word	0x2000078c
 8007740:	200007f4 	.word	0x200007f4

08007744 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	3b04      	subs	r3, #4
 8007754:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800775c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	3b04      	subs	r3, #4
 8007762:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	f023 0201 	bic.w	r2, r3, #1
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	3b04      	subs	r3, #4
 8007772:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007774:	4a0c      	ldr	r2, [pc, #48]	; (80077a8 <pxPortInitialiseStack+0x64>)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3b14      	subs	r3, #20
 800777e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	3b04      	subs	r3, #4
 800778a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f06f 0202 	mvn.w	r2, #2
 8007792:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	3b20      	subs	r3, #32
 8007798:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800779a:	68fb      	ldr	r3, [r7, #12]
}
 800779c:	4618      	mov	r0, r3
 800779e:	3714      	adds	r7, #20
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr
 80077a8:	080077ad 	.word	0x080077ad

080077ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80077b2:	2300      	movs	r3, #0
 80077b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80077b6:	4b12      	ldr	r3, [pc, #72]	; (8007800 <prvTaskExitError+0x54>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077be:	d00a      	beq.n	80077d6 <prvTaskExitError+0x2a>
	__asm volatile
 80077c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c4:	f383 8811 	msr	BASEPRI, r3
 80077c8:	f3bf 8f6f 	isb	sy
 80077cc:	f3bf 8f4f 	dsb	sy
 80077d0:	60fb      	str	r3, [r7, #12]
}
 80077d2:	bf00      	nop
 80077d4:	e7fe      	b.n	80077d4 <prvTaskExitError+0x28>
	__asm volatile
 80077d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077da:	f383 8811 	msr	BASEPRI, r3
 80077de:	f3bf 8f6f 	isb	sy
 80077e2:	f3bf 8f4f 	dsb	sy
 80077e6:	60bb      	str	r3, [r7, #8]
}
 80077e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80077ea:	bf00      	nop
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d0fc      	beq.n	80077ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80077f2:	bf00      	nop
 80077f4:	bf00      	nop
 80077f6:	3714      	adds	r7, #20
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr
 8007800:	2000000c 	.word	0x2000000c
	...

08007810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007810:	4b07      	ldr	r3, [pc, #28]	; (8007830 <pxCurrentTCBConst2>)
 8007812:	6819      	ldr	r1, [r3, #0]
 8007814:	6808      	ldr	r0, [r1, #0]
 8007816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800781a:	f380 8809 	msr	PSP, r0
 800781e:	f3bf 8f6f 	isb	sy
 8007822:	f04f 0000 	mov.w	r0, #0
 8007826:	f380 8811 	msr	BASEPRI, r0
 800782a:	4770      	bx	lr
 800782c:	f3af 8000 	nop.w

08007830 <pxCurrentTCBConst2>:
 8007830:	200006d4 	.word	0x200006d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007834:	bf00      	nop
 8007836:	bf00      	nop

08007838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007838:	4808      	ldr	r0, [pc, #32]	; (800785c <prvPortStartFirstTask+0x24>)
 800783a:	6800      	ldr	r0, [r0, #0]
 800783c:	6800      	ldr	r0, [r0, #0]
 800783e:	f380 8808 	msr	MSP, r0
 8007842:	f04f 0000 	mov.w	r0, #0
 8007846:	f380 8814 	msr	CONTROL, r0
 800784a:	b662      	cpsie	i
 800784c:	b661      	cpsie	f
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	f3bf 8f6f 	isb	sy
 8007856:	df00      	svc	0
 8007858:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800785a:	bf00      	nop
 800785c:	e000ed08 	.word	0xe000ed08

08007860 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007866:	4b46      	ldr	r3, [pc, #280]	; (8007980 <xPortStartScheduler+0x120>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a46      	ldr	r2, [pc, #280]	; (8007984 <xPortStartScheduler+0x124>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d10a      	bne.n	8007886 <xPortStartScheduler+0x26>
	__asm volatile
 8007870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	613b      	str	r3, [r7, #16]
}
 8007882:	bf00      	nop
 8007884:	e7fe      	b.n	8007884 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007886:	4b3e      	ldr	r3, [pc, #248]	; (8007980 <xPortStartScheduler+0x120>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a3f      	ldr	r2, [pc, #252]	; (8007988 <xPortStartScheduler+0x128>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d10a      	bne.n	80078a6 <xPortStartScheduler+0x46>
	__asm volatile
 8007890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007894:	f383 8811 	msr	BASEPRI, r3
 8007898:	f3bf 8f6f 	isb	sy
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	60fb      	str	r3, [r7, #12]
}
 80078a2:	bf00      	nop
 80078a4:	e7fe      	b.n	80078a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80078a6:	4b39      	ldr	r3, [pc, #228]	; (800798c <xPortStartScheduler+0x12c>)
 80078a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	22ff      	movs	r2, #255	; 0xff
 80078b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80078c0:	78fb      	ldrb	r3, [r7, #3]
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80078c8:	b2da      	uxtb	r2, r3
 80078ca:	4b31      	ldr	r3, [pc, #196]	; (8007990 <xPortStartScheduler+0x130>)
 80078cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80078ce:	4b31      	ldr	r3, [pc, #196]	; (8007994 <xPortStartScheduler+0x134>)
 80078d0:	2207      	movs	r2, #7
 80078d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078d4:	e009      	b.n	80078ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80078d6:	4b2f      	ldr	r3, [pc, #188]	; (8007994 <xPortStartScheduler+0x134>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3b01      	subs	r3, #1
 80078dc:	4a2d      	ldr	r2, [pc, #180]	; (8007994 <xPortStartScheduler+0x134>)
 80078de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80078e0:	78fb      	ldrb	r3, [r7, #3]
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	005b      	lsls	r3, r3, #1
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078ea:	78fb      	ldrb	r3, [r7, #3]
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078f2:	2b80      	cmp	r3, #128	; 0x80
 80078f4:	d0ef      	beq.n	80078d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80078f6:	4b27      	ldr	r3, [pc, #156]	; (8007994 <xPortStartScheduler+0x134>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f1c3 0307 	rsb	r3, r3, #7
 80078fe:	2b04      	cmp	r3, #4
 8007900:	d00a      	beq.n	8007918 <xPortStartScheduler+0xb8>
	__asm volatile
 8007902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007906:	f383 8811 	msr	BASEPRI, r3
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	60bb      	str	r3, [r7, #8]
}
 8007914:	bf00      	nop
 8007916:	e7fe      	b.n	8007916 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007918:	4b1e      	ldr	r3, [pc, #120]	; (8007994 <xPortStartScheduler+0x134>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	021b      	lsls	r3, r3, #8
 800791e:	4a1d      	ldr	r2, [pc, #116]	; (8007994 <xPortStartScheduler+0x134>)
 8007920:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007922:	4b1c      	ldr	r3, [pc, #112]	; (8007994 <xPortStartScheduler+0x134>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800792a:	4a1a      	ldr	r2, [pc, #104]	; (8007994 <xPortStartScheduler+0x134>)
 800792c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	b2da      	uxtb	r2, r3
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007936:	4b18      	ldr	r3, [pc, #96]	; (8007998 <xPortStartScheduler+0x138>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a17      	ldr	r2, [pc, #92]	; (8007998 <xPortStartScheduler+0x138>)
 800793c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007940:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007942:	4b15      	ldr	r3, [pc, #84]	; (8007998 <xPortStartScheduler+0x138>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a14      	ldr	r2, [pc, #80]	; (8007998 <xPortStartScheduler+0x138>)
 8007948:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800794c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800794e:	f000 f8dd 	bl	8007b0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007952:	4b12      	ldr	r3, [pc, #72]	; (800799c <xPortStartScheduler+0x13c>)
 8007954:	2200      	movs	r2, #0
 8007956:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007958:	f000 f8fc 	bl	8007b54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800795c:	4b10      	ldr	r3, [pc, #64]	; (80079a0 <xPortStartScheduler+0x140>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a0f      	ldr	r2, [pc, #60]	; (80079a0 <xPortStartScheduler+0x140>)
 8007962:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007966:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007968:	f7ff ff66 	bl	8007838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800796c:	f7ff fd48 	bl	8007400 <vTaskSwitchContext>
	prvTaskExitError();
 8007970:	f7ff ff1c 	bl	80077ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3718      	adds	r7, #24
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	e000ed00 	.word	0xe000ed00
 8007984:	410fc271 	.word	0x410fc271
 8007988:	410fc270 	.word	0x410fc270
 800798c:	e000e400 	.word	0xe000e400
 8007990:	20000800 	.word	0x20000800
 8007994:	20000804 	.word	0x20000804
 8007998:	e000ed20 	.word	0xe000ed20
 800799c:	2000000c 	.word	0x2000000c
 80079a0:	e000ef34 	.word	0xe000ef34

080079a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
	__asm volatile
 80079aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ae:	f383 8811 	msr	BASEPRI, r3
 80079b2:	f3bf 8f6f 	isb	sy
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	607b      	str	r3, [r7, #4]
}
 80079bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80079be:	4b0f      	ldr	r3, [pc, #60]	; (80079fc <vPortEnterCritical+0x58>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	3301      	adds	r3, #1
 80079c4:	4a0d      	ldr	r2, [pc, #52]	; (80079fc <vPortEnterCritical+0x58>)
 80079c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80079c8:	4b0c      	ldr	r3, [pc, #48]	; (80079fc <vPortEnterCritical+0x58>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d10f      	bne.n	80079f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80079d0:	4b0b      	ldr	r3, [pc, #44]	; (8007a00 <vPortEnterCritical+0x5c>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00a      	beq.n	80079f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80079da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079de:	f383 8811 	msr	BASEPRI, r3
 80079e2:	f3bf 8f6f 	isb	sy
 80079e6:	f3bf 8f4f 	dsb	sy
 80079ea:	603b      	str	r3, [r7, #0]
}
 80079ec:	bf00      	nop
 80079ee:	e7fe      	b.n	80079ee <vPortEnterCritical+0x4a>
	}
}
 80079f0:	bf00      	nop
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	2000000c 	.word	0x2000000c
 8007a00:	e000ed04 	.word	0xe000ed04

08007a04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a0a:	4b12      	ldr	r3, [pc, #72]	; (8007a54 <vPortExitCritical+0x50>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10a      	bne.n	8007a28 <vPortExitCritical+0x24>
	__asm volatile
 8007a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	607b      	str	r3, [r7, #4]
}
 8007a24:	bf00      	nop
 8007a26:	e7fe      	b.n	8007a26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007a28:	4b0a      	ldr	r3, [pc, #40]	; (8007a54 <vPortExitCritical+0x50>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	4a09      	ldr	r2, [pc, #36]	; (8007a54 <vPortExitCritical+0x50>)
 8007a30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a32:	4b08      	ldr	r3, [pc, #32]	; (8007a54 <vPortExitCritical+0x50>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d105      	bne.n	8007a46 <vPortExitCritical+0x42>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007a44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a46:	bf00      	nop
 8007a48:	370c      	adds	r7, #12
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	2000000c 	.word	0x2000000c
	...

08007a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a60:	f3ef 8009 	mrs	r0, PSP
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	4b15      	ldr	r3, [pc, #84]	; (8007ac0 <pxCurrentTCBConst>)
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	f01e 0f10 	tst.w	lr, #16
 8007a70:	bf08      	it	eq
 8007a72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a7a:	6010      	str	r0, [r2, #0]
 8007a7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007a84:	f380 8811 	msr	BASEPRI, r0
 8007a88:	f3bf 8f4f 	dsb	sy
 8007a8c:	f3bf 8f6f 	isb	sy
 8007a90:	f7ff fcb6 	bl	8007400 <vTaskSwitchContext>
 8007a94:	f04f 0000 	mov.w	r0, #0
 8007a98:	f380 8811 	msr	BASEPRI, r0
 8007a9c:	bc09      	pop	{r0, r3}
 8007a9e:	6819      	ldr	r1, [r3, #0]
 8007aa0:	6808      	ldr	r0, [r1, #0]
 8007aa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa6:	f01e 0f10 	tst.w	lr, #16
 8007aaa:	bf08      	it	eq
 8007aac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ab0:	f380 8809 	msr	PSP, r0
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	f3af 8000 	nop.w

08007ac0 <pxCurrentTCBConst>:
 8007ac0:	200006d4 	.word	0x200006d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ac4:	bf00      	nop
 8007ac6:	bf00      	nop

08007ac8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
	__asm volatile
 8007ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad2:	f383 8811 	msr	BASEPRI, r3
 8007ad6:	f3bf 8f6f 	isb	sy
 8007ada:	f3bf 8f4f 	dsb	sy
 8007ade:	607b      	str	r3, [r7, #4]
}
 8007ae0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ae2:	f7ff fbd5 	bl	8007290 <xTaskIncrementTick>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d003      	beq.n	8007af4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007aec:	4b06      	ldr	r3, [pc, #24]	; (8007b08 <SysTick_Handler+0x40>)
 8007aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007af2:	601a      	str	r2, [r3, #0]
 8007af4:	2300      	movs	r3, #0
 8007af6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	f383 8811 	msr	BASEPRI, r3
}
 8007afe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b00:	bf00      	nop
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	e000ed04 	.word	0xe000ed04

08007b0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b10:	4b0b      	ldr	r3, [pc, #44]	; (8007b40 <vPortSetupTimerInterrupt+0x34>)
 8007b12:	2200      	movs	r2, #0
 8007b14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b16:	4b0b      	ldr	r3, [pc, #44]	; (8007b44 <vPortSetupTimerInterrupt+0x38>)
 8007b18:	2200      	movs	r2, #0
 8007b1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b1c:	4b0a      	ldr	r3, [pc, #40]	; (8007b48 <vPortSetupTimerInterrupt+0x3c>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a0a      	ldr	r2, [pc, #40]	; (8007b4c <vPortSetupTimerInterrupt+0x40>)
 8007b22:	fba2 2303 	umull	r2, r3, r2, r3
 8007b26:	099b      	lsrs	r3, r3, #6
 8007b28:	4a09      	ldr	r2, [pc, #36]	; (8007b50 <vPortSetupTimerInterrupt+0x44>)
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b2e:	4b04      	ldr	r3, [pc, #16]	; (8007b40 <vPortSetupTimerInterrupt+0x34>)
 8007b30:	2207      	movs	r2, #7
 8007b32:	601a      	str	r2, [r3, #0]
}
 8007b34:	bf00      	nop
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	e000e010 	.word	0xe000e010
 8007b44:	e000e018 	.word	0xe000e018
 8007b48:	20000000 	.word	0x20000000
 8007b4c:	10624dd3 	.word	0x10624dd3
 8007b50:	e000e014 	.word	0xe000e014

08007b54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007b54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007b64 <vPortEnableVFP+0x10>
 8007b58:	6801      	ldr	r1, [r0, #0]
 8007b5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007b5e:	6001      	str	r1, [r0, #0]
 8007b60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b62:	bf00      	nop
 8007b64:	e000ed88 	.word	0xe000ed88

08007b68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b08a      	sub	sp, #40	; 0x28
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b70:	2300      	movs	r3, #0
 8007b72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b74:	f7ff fae2 	bl	800713c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b78:	4b5b      	ldr	r3, [pc, #364]	; (8007ce8 <pvPortMalloc+0x180>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d101      	bne.n	8007b84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b80:	f000 f920 	bl	8007dc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b84:	4b59      	ldr	r3, [pc, #356]	; (8007cec <pvPortMalloc+0x184>)
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f040 8093 	bne.w	8007cb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d01d      	beq.n	8007bd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007b98:	2208      	movs	r2, #8
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f003 0307 	and.w	r3, r3, #7
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d014      	beq.n	8007bd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f023 0307 	bic.w	r3, r3, #7
 8007bb0:	3308      	adds	r3, #8
 8007bb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f003 0307 	and.w	r3, r3, #7
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00a      	beq.n	8007bd4 <pvPortMalloc+0x6c>
	__asm volatile
 8007bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc2:	f383 8811 	msr	BASEPRI, r3
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	617b      	str	r3, [r7, #20]
}
 8007bd0:	bf00      	nop
 8007bd2:	e7fe      	b.n	8007bd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d06e      	beq.n	8007cb8 <pvPortMalloc+0x150>
 8007bda:	4b45      	ldr	r3, [pc, #276]	; (8007cf0 <pvPortMalloc+0x188>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d869      	bhi.n	8007cb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007be4:	4b43      	ldr	r3, [pc, #268]	; (8007cf4 <pvPortMalloc+0x18c>)
 8007be6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007be8:	4b42      	ldr	r3, [pc, #264]	; (8007cf4 <pvPortMalloc+0x18c>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bee:	e004      	b.n	8007bfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d903      	bls.n	8007c0c <pvPortMalloc+0xa4>
 8007c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1f1      	bne.n	8007bf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c0c:	4b36      	ldr	r3, [pc, #216]	; (8007ce8 <pvPortMalloc+0x180>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d050      	beq.n	8007cb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c16:	6a3b      	ldr	r3, [r7, #32]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2208      	movs	r2, #8
 8007c1c:	4413      	add	r3, r2
 8007c1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	6a3b      	ldr	r3, [r7, #32]
 8007c26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2a:	685a      	ldr	r2, [r3, #4]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	1ad2      	subs	r2, r2, r3
 8007c30:	2308      	movs	r3, #8
 8007c32:	005b      	lsls	r3, r3, #1
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d91f      	bls.n	8007c78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	f003 0307 	and.w	r3, r3, #7
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00a      	beq.n	8007c60 <pvPortMalloc+0xf8>
	__asm volatile
 8007c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4e:	f383 8811 	msr	BASEPRI, r3
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	f3bf 8f4f 	dsb	sy
 8007c5a:	613b      	str	r3, [r7, #16]
}
 8007c5c:	bf00      	nop
 8007c5e:	e7fe      	b.n	8007c5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c62:	685a      	ldr	r2, [r3, #4]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	1ad2      	subs	r2, r2, r3
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c72:	69b8      	ldr	r0, [r7, #24]
 8007c74:	f000 f908 	bl	8007e88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c78:	4b1d      	ldr	r3, [pc, #116]	; (8007cf0 <pvPortMalloc+0x188>)
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	1ad3      	subs	r3, r2, r3
 8007c82:	4a1b      	ldr	r2, [pc, #108]	; (8007cf0 <pvPortMalloc+0x188>)
 8007c84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c86:	4b1a      	ldr	r3, [pc, #104]	; (8007cf0 <pvPortMalloc+0x188>)
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	4b1b      	ldr	r3, [pc, #108]	; (8007cf8 <pvPortMalloc+0x190>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d203      	bcs.n	8007c9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c92:	4b17      	ldr	r3, [pc, #92]	; (8007cf0 <pvPortMalloc+0x188>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a18      	ldr	r2, [pc, #96]	; (8007cf8 <pvPortMalloc+0x190>)
 8007c98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9c:	685a      	ldr	r2, [r3, #4]
 8007c9e:	4b13      	ldr	r3, [pc, #76]	; (8007cec <pvPortMalloc+0x184>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	431a      	orrs	r2, r3
 8007ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007caa:	2200      	movs	r2, #0
 8007cac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007cae:	4b13      	ldr	r3, [pc, #76]	; (8007cfc <pvPortMalloc+0x194>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	4a11      	ldr	r2, [pc, #68]	; (8007cfc <pvPortMalloc+0x194>)
 8007cb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007cb8:	f7ff fa4e 	bl	8007158 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	f003 0307 	and.w	r3, r3, #7
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00a      	beq.n	8007cdc <pvPortMalloc+0x174>
	__asm volatile
 8007cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cca:	f383 8811 	msr	BASEPRI, r3
 8007cce:	f3bf 8f6f 	isb	sy
 8007cd2:	f3bf 8f4f 	dsb	sy
 8007cd6:	60fb      	str	r3, [r7, #12]
}
 8007cd8:	bf00      	nop
 8007cda:	e7fe      	b.n	8007cda <pvPortMalloc+0x172>
	return pvReturn;
 8007cdc:	69fb      	ldr	r3, [r7, #28]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3728      	adds	r7, #40	; 0x28
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	20004410 	.word	0x20004410
 8007cec:	20004424 	.word	0x20004424
 8007cf0:	20004414 	.word	0x20004414
 8007cf4:	20004408 	.word	0x20004408
 8007cf8:	20004418 	.word	0x20004418
 8007cfc:	2000441c 	.word	0x2000441c

08007d00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d04d      	beq.n	8007dae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d12:	2308      	movs	r3, #8
 8007d14:	425b      	negs	r3, r3
 8007d16:	697a      	ldr	r2, [r7, #20]
 8007d18:	4413      	add	r3, r2
 8007d1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	685a      	ldr	r2, [r3, #4]
 8007d24:	4b24      	ldr	r3, [pc, #144]	; (8007db8 <vPortFree+0xb8>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4013      	ands	r3, r2
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10a      	bne.n	8007d44 <vPortFree+0x44>
	__asm volatile
 8007d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d32:	f383 8811 	msr	BASEPRI, r3
 8007d36:	f3bf 8f6f 	isb	sy
 8007d3a:	f3bf 8f4f 	dsb	sy
 8007d3e:	60fb      	str	r3, [r7, #12]
}
 8007d40:	bf00      	nop
 8007d42:	e7fe      	b.n	8007d42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00a      	beq.n	8007d62 <vPortFree+0x62>
	__asm volatile
 8007d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d50:	f383 8811 	msr	BASEPRI, r3
 8007d54:	f3bf 8f6f 	isb	sy
 8007d58:	f3bf 8f4f 	dsb	sy
 8007d5c:	60bb      	str	r3, [r7, #8]
}
 8007d5e:	bf00      	nop
 8007d60:	e7fe      	b.n	8007d60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	685a      	ldr	r2, [r3, #4]
 8007d66:	4b14      	ldr	r3, [pc, #80]	; (8007db8 <vPortFree+0xb8>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d01e      	beq.n	8007dae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d11a      	bne.n	8007dae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	685a      	ldr	r2, [r3, #4]
 8007d7c:	4b0e      	ldr	r3, [pc, #56]	; (8007db8 <vPortFree+0xb8>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	43db      	mvns	r3, r3
 8007d82:	401a      	ands	r2, r3
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d88:	f7ff f9d8 	bl	800713c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	685a      	ldr	r2, [r3, #4]
 8007d90:	4b0a      	ldr	r3, [pc, #40]	; (8007dbc <vPortFree+0xbc>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4413      	add	r3, r2
 8007d96:	4a09      	ldr	r2, [pc, #36]	; (8007dbc <vPortFree+0xbc>)
 8007d98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d9a:	6938      	ldr	r0, [r7, #16]
 8007d9c:	f000 f874 	bl	8007e88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007da0:	4b07      	ldr	r3, [pc, #28]	; (8007dc0 <vPortFree+0xc0>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	3301      	adds	r3, #1
 8007da6:	4a06      	ldr	r2, [pc, #24]	; (8007dc0 <vPortFree+0xc0>)
 8007da8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007daa:	f7ff f9d5 	bl	8007158 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007dae:	bf00      	nop
 8007db0:	3718      	adds	r7, #24
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	20004424 	.word	0x20004424
 8007dbc:	20004414 	.word	0x20004414
 8007dc0:	20004420 	.word	0x20004420

08007dc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007dca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007dce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007dd0:	4b27      	ldr	r3, [pc, #156]	; (8007e70 <prvHeapInit+0xac>)
 8007dd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f003 0307 	and.w	r3, r3, #7
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00c      	beq.n	8007df8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	3307      	adds	r3, #7
 8007de2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f023 0307 	bic.w	r3, r3, #7
 8007dea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007dec:	68ba      	ldr	r2, [r7, #8]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	4a1f      	ldr	r2, [pc, #124]	; (8007e70 <prvHeapInit+0xac>)
 8007df4:	4413      	add	r3, r2
 8007df6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007dfc:	4a1d      	ldr	r2, [pc, #116]	; (8007e74 <prvHeapInit+0xb0>)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e02:	4b1c      	ldr	r3, [pc, #112]	; (8007e74 <prvHeapInit+0xb0>)
 8007e04:	2200      	movs	r2, #0
 8007e06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e10:	2208      	movs	r2, #8
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	1a9b      	subs	r3, r3, r2
 8007e16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f023 0307 	bic.w	r3, r3, #7
 8007e1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	4a15      	ldr	r2, [pc, #84]	; (8007e78 <prvHeapInit+0xb4>)
 8007e24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e26:	4b14      	ldr	r3, [pc, #80]	; (8007e78 <prvHeapInit+0xb4>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e2e:	4b12      	ldr	r3, [pc, #72]	; (8007e78 <prvHeapInit+0xb4>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2200      	movs	r2, #0
 8007e34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	1ad2      	subs	r2, r2, r3
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e44:	4b0c      	ldr	r3, [pc, #48]	; (8007e78 <prvHeapInit+0xb4>)
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	4a0a      	ldr	r2, [pc, #40]	; (8007e7c <prvHeapInit+0xb8>)
 8007e52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	4a09      	ldr	r2, [pc, #36]	; (8007e80 <prvHeapInit+0xbc>)
 8007e5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e5c:	4b09      	ldr	r3, [pc, #36]	; (8007e84 <prvHeapInit+0xc0>)
 8007e5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e62:	601a      	str	r2, [r3, #0]
}
 8007e64:	bf00      	nop
 8007e66:	3714      	adds	r7, #20
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr
 8007e70:	20000808 	.word	0x20000808
 8007e74:	20004408 	.word	0x20004408
 8007e78:	20004410 	.word	0x20004410
 8007e7c:	20004418 	.word	0x20004418
 8007e80:	20004414 	.word	0x20004414
 8007e84:	20004424 	.word	0x20004424

08007e88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e90:	4b28      	ldr	r3, [pc, #160]	; (8007f34 <prvInsertBlockIntoFreeList+0xac>)
 8007e92:	60fb      	str	r3, [r7, #12]
 8007e94:	e002      	b.n	8007e9c <prvInsertBlockIntoFreeList+0x14>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	60fb      	str	r3, [r7, #12]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d8f7      	bhi.n	8007e96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	68ba      	ldr	r2, [r7, #8]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d108      	bne.n	8007eca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	685a      	ldr	r2, [r3, #4]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	441a      	add	r2, r3
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	68ba      	ldr	r2, [r7, #8]
 8007ed4:	441a      	add	r2, r3
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d118      	bne.n	8007f10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	4b15      	ldr	r3, [pc, #84]	; (8007f38 <prvInsertBlockIntoFreeList+0xb0>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d00d      	beq.n	8007f06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	685a      	ldr	r2, [r3, #4]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	441a      	add	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	601a      	str	r2, [r3, #0]
 8007f04:	e008      	b.n	8007f18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f06:	4b0c      	ldr	r3, [pc, #48]	; (8007f38 <prvInsertBlockIntoFreeList+0xb0>)
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	601a      	str	r2, [r3, #0]
 8007f0e:	e003      	b.n	8007f18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d002      	beq.n	8007f26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f26:	bf00      	nop
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	20004408 	.word	0x20004408
 8007f38:	20004410 	.word	0x20004410

08007f3c <atoi>:
 8007f3c:	220a      	movs	r2, #10
 8007f3e:	2100      	movs	r1, #0
 8007f40:	f000 b882 	b.w	8008048 <strtol>

08007f44 <_strtol_l.constprop.0>:
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f4a:	d001      	beq.n	8007f50 <_strtol_l.constprop.0+0xc>
 8007f4c:	2b24      	cmp	r3, #36	; 0x24
 8007f4e:	d906      	bls.n	8007f5e <_strtol_l.constprop.0+0x1a>
 8007f50:	f000 fa60 	bl	8008414 <__errno>
 8007f54:	2316      	movs	r3, #22
 8007f56:	6003      	str	r3, [r0, #0]
 8007f58:	2000      	movs	r0, #0
 8007f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f5e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008044 <_strtol_l.constprop.0+0x100>
 8007f62:	460d      	mov	r5, r1
 8007f64:	462e      	mov	r6, r5
 8007f66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f6a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007f6e:	f017 0708 	ands.w	r7, r7, #8
 8007f72:	d1f7      	bne.n	8007f64 <_strtol_l.constprop.0+0x20>
 8007f74:	2c2d      	cmp	r4, #45	; 0x2d
 8007f76:	d132      	bne.n	8007fde <_strtol_l.constprop.0+0x9a>
 8007f78:	782c      	ldrb	r4, [r5, #0]
 8007f7a:	2701      	movs	r7, #1
 8007f7c:	1cb5      	adds	r5, r6, #2
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d05b      	beq.n	800803a <_strtol_l.constprop.0+0xf6>
 8007f82:	2b10      	cmp	r3, #16
 8007f84:	d109      	bne.n	8007f9a <_strtol_l.constprop.0+0x56>
 8007f86:	2c30      	cmp	r4, #48	; 0x30
 8007f88:	d107      	bne.n	8007f9a <_strtol_l.constprop.0+0x56>
 8007f8a:	782c      	ldrb	r4, [r5, #0]
 8007f8c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007f90:	2c58      	cmp	r4, #88	; 0x58
 8007f92:	d14d      	bne.n	8008030 <_strtol_l.constprop.0+0xec>
 8007f94:	786c      	ldrb	r4, [r5, #1]
 8007f96:	2310      	movs	r3, #16
 8007f98:	3502      	adds	r5, #2
 8007f9a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007f9e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007fa2:	f04f 0e00 	mov.w	lr, #0
 8007fa6:	fbb8 f9f3 	udiv	r9, r8, r3
 8007faa:	4676      	mov	r6, lr
 8007fac:	fb03 8a19 	mls	sl, r3, r9, r8
 8007fb0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007fb4:	f1bc 0f09 	cmp.w	ip, #9
 8007fb8:	d816      	bhi.n	8007fe8 <_strtol_l.constprop.0+0xa4>
 8007fba:	4664      	mov	r4, ip
 8007fbc:	42a3      	cmp	r3, r4
 8007fbe:	dd24      	ble.n	800800a <_strtol_l.constprop.0+0xc6>
 8007fc0:	f1be 3fff 	cmp.w	lr, #4294967295
 8007fc4:	d008      	beq.n	8007fd8 <_strtol_l.constprop.0+0x94>
 8007fc6:	45b1      	cmp	r9, r6
 8007fc8:	d31c      	bcc.n	8008004 <_strtol_l.constprop.0+0xc0>
 8007fca:	d101      	bne.n	8007fd0 <_strtol_l.constprop.0+0x8c>
 8007fcc:	45a2      	cmp	sl, r4
 8007fce:	db19      	blt.n	8008004 <_strtol_l.constprop.0+0xc0>
 8007fd0:	fb06 4603 	mla	r6, r6, r3, r4
 8007fd4:	f04f 0e01 	mov.w	lr, #1
 8007fd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007fdc:	e7e8      	b.n	8007fb0 <_strtol_l.constprop.0+0x6c>
 8007fde:	2c2b      	cmp	r4, #43	; 0x2b
 8007fe0:	bf04      	itt	eq
 8007fe2:	782c      	ldrbeq	r4, [r5, #0]
 8007fe4:	1cb5      	addeq	r5, r6, #2
 8007fe6:	e7ca      	b.n	8007f7e <_strtol_l.constprop.0+0x3a>
 8007fe8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007fec:	f1bc 0f19 	cmp.w	ip, #25
 8007ff0:	d801      	bhi.n	8007ff6 <_strtol_l.constprop.0+0xb2>
 8007ff2:	3c37      	subs	r4, #55	; 0x37
 8007ff4:	e7e2      	b.n	8007fbc <_strtol_l.constprop.0+0x78>
 8007ff6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007ffa:	f1bc 0f19 	cmp.w	ip, #25
 8007ffe:	d804      	bhi.n	800800a <_strtol_l.constprop.0+0xc6>
 8008000:	3c57      	subs	r4, #87	; 0x57
 8008002:	e7db      	b.n	8007fbc <_strtol_l.constprop.0+0x78>
 8008004:	f04f 3eff 	mov.w	lr, #4294967295
 8008008:	e7e6      	b.n	8007fd8 <_strtol_l.constprop.0+0x94>
 800800a:	f1be 3fff 	cmp.w	lr, #4294967295
 800800e:	d105      	bne.n	800801c <_strtol_l.constprop.0+0xd8>
 8008010:	2322      	movs	r3, #34	; 0x22
 8008012:	6003      	str	r3, [r0, #0]
 8008014:	4646      	mov	r6, r8
 8008016:	b942      	cbnz	r2, 800802a <_strtol_l.constprop.0+0xe6>
 8008018:	4630      	mov	r0, r6
 800801a:	e79e      	b.n	8007f5a <_strtol_l.constprop.0+0x16>
 800801c:	b107      	cbz	r7, 8008020 <_strtol_l.constprop.0+0xdc>
 800801e:	4276      	negs	r6, r6
 8008020:	2a00      	cmp	r2, #0
 8008022:	d0f9      	beq.n	8008018 <_strtol_l.constprop.0+0xd4>
 8008024:	f1be 0f00 	cmp.w	lr, #0
 8008028:	d000      	beq.n	800802c <_strtol_l.constprop.0+0xe8>
 800802a:	1e69      	subs	r1, r5, #1
 800802c:	6011      	str	r1, [r2, #0]
 800802e:	e7f3      	b.n	8008018 <_strtol_l.constprop.0+0xd4>
 8008030:	2430      	movs	r4, #48	; 0x30
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1b1      	bne.n	8007f9a <_strtol_l.constprop.0+0x56>
 8008036:	2308      	movs	r3, #8
 8008038:	e7af      	b.n	8007f9a <_strtol_l.constprop.0+0x56>
 800803a:	2c30      	cmp	r4, #48	; 0x30
 800803c:	d0a5      	beq.n	8007f8a <_strtol_l.constprop.0+0x46>
 800803e:	230a      	movs	r3, #10
 8008040:	e7ab      	b.n	8007f9a <_strtol_l.constprop.0+0x56>
 8008042:	bf00      	nop
 8008044:	080094c9 	.word	0x080094c9

08008048 <strtol>:
 8008048:	4613      	mov	r3, r2
 800804a:	460a      	mov	r2, r1
 800804c:	4601      	mov	r1, r0
 800804e:	4802      	ldr	r0, [pc, #8]	; (8008058 <strtol+0x10>)
 8008050:	6800      	ldr	r0, [r0, #0]
 8008052:	f7ff bf77 	b.w	8007f44 <_strtol_l.constprop.0>
 8008056:	bf00      	nop
 8008058:	20000068 	.word	0x20000068

0800805c <std>:
 800805c:	2300      	movs	r3, #0
 800805e:	b510      	push	{r4, lr}
 8008060:	4604      	mov	r4, r0
 8008062:	e9c0 3300 	strd	r3, r3, [r0]
 8008066:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800806a:	6083      	str	r3, [r0, #8]
 800806c:	8181      	strh	r1, [r0, #12]
 800806e:	6643      	str	r3, [r0, #100]	; 0x64
 8008070:	81c2      	strh	r2, [r0, #14]
 8008072:	6183      	str	r3, [r0, #24]
 8008074:	4619      	mov	r1, r3
 8008076:	2208      	movs	r2, #8
 8008078:	305c      	adds	r0, #92	; 0x5c
 800807a:	f000 f926 	bl	80082ca <memset>
 800807e:	4b0d      	ldr	r3, [pc, #52]	; (80080b4 <std+0x58>)
 8008080:	6263      	str	r3, [r4, #36]	; 0x24
 8008082:	4b0d      	ldr	r3, [pc, #52]	; (80080b8 <std+0x5c>)
 8008084:	62a3      	str	r3, [r4, #40]	; 0x28
 8008086:	4b0d      	ldr	r3, [pc, #52]	; (80080bc <std+0x60>)
 8008088:	62e3      	str	r3, [r4, #44]	; 0x2c
 800808a:	4b0d      	ldr	r3, [pc, #52]	; (80080c0 <std+0x64>)
 800808c:	6323      	str	r3, [r4, #48]	; 0x30
 800808e:	4b0d      	ldr	r3, [pc, #52]	; (80080c4 <std+0x68>)
 8008090:	6224      	str	r4, [r4, #32]
 8008092:	429c      	cmp	r4, r3
 8008094:	d006      	beq.n	80080a4 <std+0x48>
 8008096:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800809a:	4294      	cmp	r4, r2
 800809c:	d002      	beq.n	80080a4 <std+0x48>
 800809e:	33d0      	adds	r3, #208	; 0xd0
 80080a0:	429c      	cmp	r4, r3
 80080a2:	d105      	bne.n	80080b0 <std+0x54>
 80080a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080ac:	f000 b9dc 	b.w	8008468 <__retarget_lock_init_recursive>
 80080b0:	bd10      	pop	{r4, pc}
 80080b2:	bf00      	nop
 80080b4:	08008245 	.word	0x08008245
 80080b8:	08008267 	.word	0x08008267
 80080bc:	0800829f 	.word	0x0800829f
 80080c0:	080082c3 	.word	0x080082c3
 80080c4:	20004428 	.word	0x20004428

080080c8 <stdio_exit_handler>:
 80080c8:	4a02      	ldr	r2, [pc, #8]	; (80080d4 <stdio_exit_handler+0xc>)
 80080ca:	4903      	ldr	r1, [pc, #12]	; (80080d8 <stdio_exit_handler+0x10>)
 80080cc:	4803      	ldr	r0, [pc, #12]	; (80080dc <stdio_exit_handler+0x14>)
 80080ce:	f000 b869 	b.w	80081a4 <_fwalk_sglue>
 80080d2:	bf00      	nop
 80080d4:	20000010 	.word	0x20000010
 80080d8:	08008fe1 	.word	0x08008fe1
 80080dc:	2000001c 	.word	0x2000001c

080080e0 <cleanup_stdio>:
 80080e0:	6841      	ldr	r1, [r0, #4]
 80080e2:	4b0c      	ldr	r3, [pc, #48]	; (8008114 <cleanup_stdio+0x34>)
 80080e4:	4299      	cmp	r1, r3
 80080e6:	b510      	push	{r4, lr}
 80080e8:	4604      	mov	r4, r0
 80080ea:	d001      	beq.n	80080f0 <cleanup_stdio+0x10>
 80080ec:	f000 ff78 	bl	8008fe0 <_fflush_r>
 80080f0:	68a1      	ldr	r1, [r4, #8]
 80080f2:	4b09      	ldr	r3, [pc, #36]	; (8008118 <cleanup_stdio+0x38>)
 80080f4:	4299      	cmp	r1, r3
 80080f6:	d002      	beq.n	80080fe <cleanup_stdio+0x1e>
 80080f8:	4620      	mov	r0, r4
 80080fa:	f000 ff71 	bl	8008fe0 <_fflush_r>
 80080fe:	68e1      	ldr	r1, [r4, #12]
 8008100:	4b06      	ldr	r3, [pc, #24]	; (800811c <cleanup_stdio+0x3c>)
 8008102:	4299      	cmp	r1, r3
 8008104:	d004      	beq.n	8008110 <cleanup_stdio+0x30>
 8008106:	4620      	mov	r0, r4
 8008108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800810c:	f000 bf68 	b.w	8008fe0 <_fflush_r>
 8008110:	bd10      	pop	{r4, pc}
 8008112:	bf00      	nop
 8008114:	20004428 	.word	0x20004428
 8008118:	20004490 	.word	0x20004490
 800811c:	200044f8 	.word	0x200044f8

08008120 <global_stdio_init.part.0>:
 8008120:	b510      	push	{r4, lr}
 8008122:	4b0b      	ldr	r3, [pc, #44]	; (8008150 <global_stdio_init.part.0+0x30>)
 8008124:	4c0b      	ldr	r4, [pc, #44]	; (8008154 <global_stdio_init.part.0+0x34>)
 8008126:	4a0c      	ldr	r2, [pc, #48]	; (8008158 <global_stdio_init.part.0+0x38>)
 8008128:	601a      	str	r2, [r3, #0]
 800812a:	4620      	mov	r0, r4
 800812c:	2200      	movs	r2, #0
 800812e:	2104      	movs	r1, #4
 8008130:	f7ff ff94 	bl	800805c <std>
 8008134:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008138:	2201      	movs	r2, #1
 800813a:	2109      	movs	r1, #9
 800813c:	f7ff ff8e 	bl	800805c <std>
 8008140:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008144:	2202      	movs	r2, #2
 8008146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800814a:	2112      	movs	r1, #18
 800814c:	f7ff bf86 	b.w	800805c <std>
 8008150:	20004560 	.word	0x20004560
 8008154:	20004428 	.word	0x20004428
 8008158:	080080c9 	.word	0x080080c9

0800815c <__sfp_lock_acquire>:
 800815c:	4801      	ldr	r0, [pc, #4]	; (8008164 <__sfp_lock_acquire+0x8>)
 800815e:	f000 b984 	b.w	800846a <__retarget_lock_acquire_recursive>
 8008162:	bf00      	nop
 8008164:	20004569 	.word	0x20004569

08008168 <__sfp_lock_release>:
 8008168:	4801      	ldr	r0, [pc, #4]	; (8008170 <__sfp_lock_release+0x8>)
 800816a:	f000 b97f 	b.w	800846c <__retarget_lock_release_recursive>
 800816e:	bf00      	nop
 8008170:	20004569 	.word	0x20004569

08008174 <__sinit>:
 8008174:	b510      	push	{r4, lr}
 8008176:	4604      	mov	r4, r0
 8008178:	f7ff fff0 	bl	800815c <__sfp_lock_acquire>
 800817c:	6a23      	ldr	r3, [r4, #32]
 800817e:	b11b      	cbz	r3, 8008188 <__sinit+0x14>
 8008180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008184:	f7ff bff0 	b.w	8008168 <__sfp_lock_release>
 8008188:	4b04      	ldr	r3, [pc, #16]	; (800819c <__sinit+0x28>)
 800818a:	6223      	str	r3, [r4, #32]
 800818c:	4b04      	ldr	r3, [pc, #16]	; (80081a0 <__sinit+0x2c>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d1f5      	bne.n	8008180 <__sinit+0xc>
 8008194:	f7ff ffc4 	bl	8008120 <global_stdio_init.part.0>
 8008198:	e7f2      	b.n	8008180 <__sinit+0xc>
 800819a:	bf00      	nop
 800819c:	080080e1 	.word	0x080080e1
 80081a0:	20004560 	.word	0x20004560

080081a4 <_fwalk_sglue>:
 80081a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081a8:	4607      	mov	r7, r0
 80081aa:	4688      	mov	r8, r1
 80081ac:	4614      	mov	r4, r2
 80081ae:	2600      	movs	r6, #0
 80081b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081b4:	f1b9 0901 	subs.w	r9, r9, #1
 80081b8:	d505      	bpl.n	80081c6 <_fwalk_sglue+0x22>
 80081ba:	6824      	ldr	r4, [r4, #0]
 80081bc:	2c00      	cmp	r4, #0
 80081be:	d1f7      	bne.n	80081b0 <_fwalk_sglue+0xc>
 80081c0:	4630      	mov	r0, r6
 80081c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081c6:	89ab      	ldrh	r3, [r5, #12]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d907      	bls.n	80081dc <_fwalk_sglue+0x38>
 80081cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081d0:	3301      	adds	r3, #1
 80081d2:	d003      	beq.n	80081dc <_fwalk_sglue+0x38>
 80081d4:	4629      	mov	r1, r5
 80081d6:	4638      	mov	r0, r7
 80081d8:	47c0      	blx	r8
 80081da:	4306      	orrs	r6, r0
 80081dc:	3568      	adds	r5, #104	; 0x68
 80081de:	e7e9      	b.n	80081b4 <_fwalk_sglue+0x10>

080081e0 <iprintf>:
 80081e0:	b40f      	push	{r0, r1, r2, r3}
 80081e2:	b507      	push	{r0, r1, r2, lr}
 80081e4:	4906      	ldr	r1, [pc, #24]	; (8008200 <iprintf+0x20>)
 80081e6:	ab04      	add	r3, sp, #16
 80081e8:	6808      	ldr	r0, [r1, #0]
 80081ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80081ee:	6881      	ldr	r1, [r0, #8]
 80081f0:	9301      	str	r3, [sp, #4]
 80081f2:	f000 fbc5 	bl	8008980 <_vfiprintf_r>
 80081f6:	b003      	add	sp, #12
 80081f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80081fc:	b004      	add	sp, #16
 80081fe:	4770      	bx	lr
 8008200:	20000068 	.word	0x20000068

08008204 <siprintf>:
 8008204:	b40e      	push	{r1, r2, r3}
 8008206:	b500      	push	{lr}
 8008208:	b09c      	sub	sp, #112	; 0x70
 800820a:	ab1d      	add	r3, sp, #116	; 0x74
 800820c:	9002      	str	r0, [sp, #8]
 800820e:	9006      	str	r0, [sp, #24]
 8008210:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008214:	4809      	ldr	r0, [pc, #36]	; (800823c <siprintf+0x38>)
 8008216:	9107      	str	r1, [sp, #28]
 8008218:	9104      	str	r1, [sp, #16]
 800821a:	4909      	ldr	r1, [pc, #36]	; (8008240 <siprintf+0x3c>)
 800821c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008220:	9105      	str	r1, [sp, #20]
 8008222:	6800      	ldr	r0, [r0, #0]
 8008224:	9301      	str	r3, [sp, #4]
 8008226:	a902      	add	r1, sp, #8
 8008228:	f000 fa82 	bl	8008730 <_svfiprintf_r>
 800822c:	9b02      	ldr	r3, [sp, #8]
 800822e:	2200      	movs	r2, #0
 8008230:	701a      	strb	r2, [r3, #0]
 8008232:	b01c      	add	sp, #112	; 0x70
 8008234:	f85d eb04 	ldr.w	lr, [sp], #4
 8008238:	b003      	add	sp, #12
 800823a:	4770      	bx	lr
 800823c:	20000068 	.word	0x20000068
 8008240:	ffff0208 	.word	0xffff0208

08008244 <__sread>:
 8008244:	b510      	push	{r4, lr}
 8008246:	460c      	mov	r4, r1
 8008248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800824c:	f000 f8be 	bl	80083cc <_read_r>
 8008250:	2800      	cmp	r0, #0
 8008252:	bfab      	itete	ge
 8008254:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008256:	89a3      	ldrhlt	r3, [r4, #12]
 8008258:	181b      	addge	r3, r3, r0
 800825a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800825e:	bfac      	ite	ge
 8008260:	6563      	strge	r3, [r4, #84]	; 0x54
 8008262:	81a3      	strhlt	r3, [r4, #12]
 8008264:	bd10      	pop	{r4, pc}

08008266 <__swrite>:
 8008266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800826a:	461f      	mov	r7, r3
 800826c:	898b      	ldrh	r3, [r1, #12]
 800826e:	05db      	lsls	r3, r3, #23
 8008270:	4605      	mov	r5, r0
 8008272:	460c      	mov	r4, r1
 8008274:	4616      	mov	r6, r2
 8008276:	d505      	bpl.n	8008284 <__swrite+0x1e>
 8008278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800827c:	2302      	movs	r3, #2
 800827e:	2200      	movs	r2, #0
 8008280:	f000 f892 	bl	80083a8 <_lseek_r>
 8008284:	89a3      	ldrh	r3, [r4, #12]
 8008286:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800828a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800828e:	81a3      	strh	r3, [r4, #12]
 8008290:	4632      	mov	r2, r6
 8008292:	463b      	mov	r3, r7
 8008294:	4628      	mov	r0, r5
 8008296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800829a:	f000 b8a9 	b.w	80083f0 <_write_r>

0800829e <__sseek>:
 800829e:	b510      	push	{r4, lr}
 80082a0:	460c      	mov	r4, r1
 80082a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a6:	f000 f87f 	bl	80083a8 <_lseek_r>
 80082aa:	1c43      	adds	r3, r0, #1
 80082ac:	89a3      	ldrh	r3, [r4, #12]
 80082ae:	bf15      	itete	ne
 80082b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80082b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80082b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80082ba:	81a3      	strheq	r3, [r4, #12]
 80082bc:	bf18      	it	ne
 80082be:	81a3      	strhne	r3, [r4, #12]
 80082c0:	bd10      	pop	{r4, pc}

080082c2 <__sclose>:
 80082c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082c6:	f000 b809 	b.w	80082dc <_close_r>

080082ca <memset>:
 80082ca:	4402      	add	r2, r0
 80082cc:	4603      	mov	r3, r0
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d100      	bne.n	80082d4 <memset+0xa>
 80082d2:	4770      	bx	lr
 80082d4:	f803 1b01 	strb.w	r1, [r3], #1
 80082d8:	e7f9      	b.n	80082ce <memset+0x4>
	...

080082dc <_close_r>:
 80082dc:	b538      	push	{r3, r4, r5, lr}
 80082de:	4d06      	ldr	r5, [pc, #24]	; (80082f8 <_close_r+0x1c>)
 80082e0:	2300      	movs	r3, #0
 80082e2:	4604      	mov	r4, r0
 80082e4:	4608      	mov	r0, r1
 80082e6:	602b      	str	r3, [r5, #0]
 80082e8:	f7f9 fc65 	bl	8001bb6 <_close>
 80082ec:	1c43      	adds	r3, r0, #1
 80082ee:	d102      	bne.n	80082f6 <_close_r+0x1a>
 80082f0:	682b      	ldr	r3, [r5, #0]
 80082f2:	b103      	cbz	r3, 80082f6 <_close_r+0x1a>
 80082f4:	6023      	str	r3, [r4, #0]
 80082f6:	bd38      	pop	{r3, r4, r5, pc}
 80082f8:	20004564 	.word	0x20004564

080082fc <_reclaim_reent>:
 80082fc:	4b29      	ldr	r3, [pc, #164]	; (80083a4 <_reclaim_reent+0xa8>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4283      	cmp	r3, r0
 8008302:	b570      	push	{r4, r5, r6, lr}
 8008304:	4604      	mov	r4, r0
 8008306:	d04b      	beq.n	80083a0 <_reclaim_reent+0xa4>
 8008308:	69c3      	ldr	r3, [r0, #28]
 800830a:	b143      	cbz	r3, 800831e <_reclaim_reent+0x22>
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d144      	bne.n	800839c <_reclaim_reent+0xa0>
 8008312:	69e3      	ldr	r3, [r4, #28]
 8008314:	6819      	ldr	r1, [r3, #0]
 8008316:	b111      	cbz	r1, 800831e <_reclaim_reent+0x22>
 8008318:	4620      	mov	r0, r4
 800831a:	f000 f8b7 	bl	800848c <_free_r>
 800831e:	6961      	ldr	r1, [r4, #20]
 8008320:	b111      	cbz	r1, 8008328 <_reclaim_reent+0x2c>
 8008322:	4620      	mov	r0, r4
 8008324:	f000 f8b2 	bl	800848c <_free_r>
 8008328:	69e1      	ldr	r1, [r4, #28]
 800832a:	b111      	cbz	r1, 8008332 <_reclaim_reent+0x36>
 800832c:	4620      	mov	r0, r4
 800832e:	f000 f8ad 	bl	800848c <_free_r>
 8008332:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008334:	b111      	cbz	r1, 800833c <_reclaim_reent+0x40>
 8008336:	4620      	mov	r0, r4
 8008338:	f000 f8a8 	bl	800848c <_free_r>
 800833c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800833e:	b111      	cbz	r1, 8008346 <_reclaim_reent+0x4a>
 8008340:	4620      	mov	r0, r4
 8008342:	f000 f8a3 	bl	800848c <_free_r>
 8008346:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008348:	b111      	cbz	r1, 8008350 <_reclaim_reent+0x54>
 800834a:	4620      	mov	r0, r4
 800834c:	f000 f89e 	bl	800848c <_free_r>
 8008350:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008352:	b111      	cbz	r1, 800835a <_reclaim_reent+0x5e>
 8008354:	4620      	mov	r0, r4
 8008356:	f000 f899 	bl	800848c <_free_r>
 800835a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800835c:	b111      	cbz	r1, 8008364 <_reclaim_reent+0x68>
 800835e:	4620      	mov	r0, r4
 8008360:	f000 f894 	bl	800848c <_free_r>
 8008364:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008366:	b111      	cbz	r1, 800836e <_reclaim_reent+0x72>
 8008368:	4620      	mov	r0, r4
 800836a:	f000 f88f 	bl	800848c <_free_r>
 800836e:	6a23      	ldr	r3, [r4, #32]
 8008370:	b1b3      	cbz	r3, 80083a0 <_reclaim_reent+0xa4>
 8008372:	4620      	mov	r0, r4
 8008374:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008378:	4718      	bx	r3
 800837a:	5949      	ldr	r1, [r1, r5]
 800837c:	b941      	cbnz	r1, 8008390 <_reclaim_reent+0x94>
 800837e:	3504      	adds	r5, #4
 8008380:	69e3      	ldr	r3, [r4, #28]
 8008382:	2d80      	cmp	r5, #128	; 0x80
 8008384:	68d9      	ldr	r1, [r3, #12]
 8008386:	d1f8      	bne.n	800837a <_reclaim_reent+0x7e>
 8008388:	4620      	mov	r0, r4
 800838a:	f000 f87f 	bl	800848c <_free_r>
 800838e:	e7c0      	b.n	8008312 <_reclaim_reent+0x16>
 8008390:	680e      	ldr	r6, [r1, #0]
 8008392:	4620      	mov	r0, r4
 8008394:	f000 f87a 	bl	800848c <_free_r>
 8008398:	4631      	mov	r1, r6
 800839a:	e7ef      	b.n	800837c <_reclaim_reent+0x80>
 800839c:	2500      	movs	r5, #0
 800839e:	e7ef      	b.n	8008380 <_reclaim_reent+0x84>
 80083a0:	bd70      	pop	{r4, r5, r6, pc}
 80083a2:	bf00      	nop
 80083a4:	20000068 	.word	0x20000068

080083a8 <_lseek_r>:
 80083a8:	b538      	push	{r3, r4, r5, lr}
 80083aa:	4d07      	ldr	r5, [pc, #28]	; (80083c8 <_lseek_r+0x20>)
 80083ac:	4604      	mov	r4, r0
 80083ae:	4608      	mov	r0, r1
 80083b0:	4611      	mov	r1, r2
 80083b2:	2200      	movs	r2, #0
 80083b4:	602a      	str	r2, [r5, #0]
 80083b6:	461a      	mov	r2, r3
 80083b8:	f7f9 fc24 	bl	8001c04 <_lseek>
 80083bc:	1c43      	adds	r3, r0, #1
 80083be:	d102      	bne.n	80083c6 <_lseek_r+0x1e>
 80083c0:	682b      	ldr	r3, [r5, #0]
 80083c2:	b103      	cbz	r3, 80083c6 <_lseek_r+0x1e>
 80083c4:	6023      	str	r3, [r4, #0]
 80083c6:	bd38      	pop	{r3, r4, r5, pc}
 80083c8:	20004564 	.word	0x20004564

080083cc <_read_r>:
 80083cc:	b538      	push	{r3, r4, r5, lr}
 80083ce:	4d07      	ldr	r5, [pc, #28]	; (80083ec <_read_r+0x20>)
 80083d0:	4604      	mov	r4, r0
 80083d2:	4608      	mov	r0, r1
 80083d4:	4611      	mov	r1, r2
 80083d6:	2200      	movs	r2, #0
 80083d8:	602a      	str	r2, [r5, #0]
 80083da:	461a      	mov	r2, r3
 80083dc:	f7f9 fbce 	bl	8001b7c <_read>
 80083e0:	1c43      	adds	r3, r0, #1
 80083e2:	d102      	bne.n	80083ea <_read_r+0x1e>
 80083e4:	682b      	ldr	r3, [r5, #0]
 80083e6:	b103      	cbz	r3, 80083ea <_read_r+0x1e>
 80083e8:	6023      	str	r3, [r4, #0]
 80083ea:	bd38      	pop	{r3, r4, r5, pc}
 80083ec:	20004564 	.word	0x20004564

080083f0 <_write_r>:
 80083f0:	b538      	push	{r3, r4, r5, lr}
 80083f2:	4d07      	ldr	r5, [pc, #28]	; (8008410 <_write_r+0x20>)
 80083f4:	4604      	mov	r4, r0
 80083f6:	4608      	mov	r0, r1
 80083f8:	4611      	mov	r1, r2
 80083fa:	2200      	movs	r2, #0
 80083fc:	602a      	str	r2, [r5, #0]
 80083fe:	461a      	mov	r2, r3
 8008400:	f7f8 fd2c 	bl	8000e5c <_write>
 8008404:	1c43      	adds	r3, r0, #1
 8008406:	d102      	bne.n	800840e <_write_r+0x1e>
 8008408:	682b      	ldr	r3, [r5, #0]
 800840a:	b103      	cbz	r3, 800840e <_write_r+0x1e>
 800840c:	6023      	str	r3, [r4, #0]
 800840e:	bd38      	pop	{r3, r4, r5, pc}
 8008410:	20004564 	.word	0x20004564

08008414 <__errno>:
 8008414:	4b01      	ldr	r3, [pc, #4]	; (800841c <__errno+0x8>)
 8008416:	6818      	ldr	r0, [r3, #0]
 8008418:	4770      	bx	lr
 800841a:	bf00      	nop
 800841c:	20000068 	.word	0x20000068

08008420 <__libc_init_array>:
 8008420:	b570      	push	{r4, r5, r6, lr}
 8008422:	4d0d      	ldr	r5, [pc, #52]	; (8008458 <__libc_init_array+0x38>)
 8008424:	4c0d      	ldr	r4, [pc, #52]	; (800845c <__libc_init_array+0x3c>)
 8008426:	1b64      	subs	r4, r4, r5
 8008428:	10a4      	asrs	r4, r4, #2
 800842a:	2600      	movs	r6, #0
 800842c:	42a6      	cmp	r6, r4
 800842e:	d109      	bne.n	8008444 <__libc_init_array+0x24>
 8008430:	4d0b      	ldr	r5, [pc, #44]	; (8008460 <__libc_init_array+0x40>)
 8008432:	4c0c      	ldr	r4, [pc, #48]	; (8008464 <__libc_init_array+0x44>)
 8008434:	f000 ff78 	bl	8009328 <_init>
 8008438:	1b64      	subs	r4, r4, r5
 800843a:	10a4      	asrs	r4, r4, #2
 800843c:	2600      	movs	r6, #0
 800843e:	42a6      	cmp	r6, r4
 8008440:	d105      	bne.n	800844e <__libc_init_array+0x2e>
 8008442:	bd70      	pop	{r4, r5, r6, pc}
 8008444:	f855 3b04 	ldr.w	r3, [r5], #4
 8008448:	4798      	blx	r3
 800844a:	3601      	adds	r6, #1
 800844c:	e7ee      	b.n	800842c <__libc_init_array+0xc>
 800844e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008452:	4798      	blx	r3
 8008454:	3601      	adds	r6, #1
 8008456:	e7f2      	b.n	800843e <__libc_init_array+0x1e>
 8008458:	08009604 	.word	0x08009604
 800845c:	08009604 	.word	0x08009604
 8008460:	08009604 	.word	0x08009604
 8008464:	08009608 	.word	0x08009608

08008468 <__retarget_lock_init_recursive>:
 8008468:	4770      	bx	lr

0800846a <__retarget_lock_acquire_recursive>:
 800846a:	4770      	bx	lr

0800846c <__retarget_lock_release_recursive>:
 800846c:	4770      	bx	lr

0800846e <memcpy>:
 800846e:	440a      	add	r2, r1
 8008470:	4291      	cmp	r1, r2
 8008472:	f100 33ff 	add.w	r3, r0, #4294967295
 8008476:	d100      	bne.n	800847a <memcpy+0xc>
 8008478:	4770      	bx	lr
 800847a:	b510      	push	{r4, lr}
 800847c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008480:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008484:	4291      	cmp	r1, r2
 8008486:	d1f9      	bne.n	800847c <memcpy+0xe>
 8008488:	bd10      	pop	{r4, pc}
	...

0800848c <_free_r>:
 800848c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800848e:	2900      	cmp	r1, #0
 8008490:	d044      	beq.n	800851c <_free_r+0x90>
 8008492:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008496:	9001      	str	r0, [sp, #4]
 8008498:	2b00      	cmp	r3, #0
 800849a:	f1a1 0404 	sub.w	r4, r1, #4
 800849e:	bfb8      	it	lt
 80084a0:	18e4      	addlt	r4, r4, r3
 80084a2:	f000 f8df 	bl	8008664 <__malloc_lock>
 80084a6:	4a1e      	ldr	r2, [pc, #120]	; (8008520 <_free_r+0x94>)
 80084a8:	9801      	ldr	r0, [sp, #4]
 80084aa:	6813      	ldr	r3, [r2, #0]
 80084ac:	b933      	cbnz	r3, 80084bc <_free_r+0x30>
 80084ae:	6063      	str	r3, [r4, #4]
 80084b0:	6014      	str	r4, [r2, #0]
 80084b2:	b003      	add	sp, #12
 80084b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084b8:	f000 b8da 	b.w	8008670 <__malloc_unlock>
 80084bc:	42a3      	cmp	r3, r4
 80084be:	d908      	bls.n	80084d2 <_free_r+0x46>
 80084c0:	6825      	ldr	r5, [r4, #0]
 80084c2:	1961      	adds	r1, r4, r5
 80084c4:	428b      	cmp	r3, r1
 80084c6:	bf01      	itttt	eq
 80084c8:	6819      	ldreq	r1, [r3, #0]
 80084ca:	685b      	ldreq	r3, [r3, #4]
 80084cc:	1949      	addeq	r1, r1, r5
 80084ce:	6021      	streq	r1, [r4, #0]
 80084d0:	e7ed      	b.n	80084ae <_free_r+0x22>
 80084d2:	461a      	mov	r2, r3
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	b10b      	cbz	r3, 80084dc <_free_r+0x50>
 80084d8:	42a3      	cmp	r3, r4
 80084da:	d9fa      	bls.n	80084d2 <_free_r+0x46>
 80084dc:	6811      	ldr	r1, [r2, #0]
 80084de:	1855      	adds	r5, r2, r1
 80084e0:	42a5      	cmp	r5, r4
 80084e2:	d10b      	bne.n	80084fc <_free_r+0x70>
 80084e4:	6824      	ldr	r4, [r4, #0]
 80084e6:	4421      	add	r1, r4
 80084e8:	1854      	adds	r4, r2, r1
 80084ea:	42a3      	cmp	r3, r4
 80084ec:	6011      	str	r1, [r2, #0]
 80084ee:	d1e0      	bne.n	80084b2 <_free_r+0x26>
 80084f0:	681c      	ldr	r4, [r3, #0]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	6053      	str	r3, [r2, #4]
 80084f6:	440c      	add	r4, r1
 80084f8:	6014      	str	r4, [r2, #0]
 80084fa:	e7da      	b.n	80084b2 <_free_r+0x26>
 80084fc:	d902      	bls.n	8008504 <_free_r+0x78>
 80084fe:	230c      	movs	r3, #12
 8008500:	6003      	str	r3, [r0, #0]
 8008502:	e7d6      	b.n	80084b2 <_free_r+0x26>
 8008504:	6825      	ldr	r5, [r4, #0]
 8008506:	1961      	adds	r1, r4, r5
 8008508:	428b      	cmp	r3, r1
 800850a:	bf04      	itt	eq
 800850c:	6819      	ldreq	r1, [r3, #0]
 800850e:	685b      	ldreq	r3, [r3, #4]
 8008510:	6063      	str	r3, [r4, #4]
 8008512:	bf04      	itt	eq
 8008514:	1949      	addeq	r1, r1, r5
 8008516:	6021      	streq	r1, [r4, #0]
 8008518:	6054      	str	r4, [r2, #4]
 800851a:	e7ca      	b.n	80084b2 <_free_r+0x26>
 800851c:	b003      	add	sp, #12
 800851e:	bd30      	pop	{r4, r5, pc}
 8008520:	2000456c 	.word	0x2000456c

08008524 <sbrk_aligned>:
 8008524:	b570      	push	{r4, r5, r6, lr}
 8008526:	4e0e      	ldr	r6, [pc, #56]	; (8008560 <sbrk_aligned+0x3c>)
 8008528:	460c      	mov	r4, r1
 800852a:	6831      	ldr	r1, [r6, #0]
 800852c:	4605      	mov	r5, r0
 800852e:	b911      	cbnz	r1, 8008536 <sbrk_aligned+0x12>
 8008530:	f000 fe2e 	bl	8009190 <_sbrk_r>
 8008534:	6030      	str	r0, [r6, #0]
 8008536:	4621      	mov	r1, r4
 8008538:	4628      	mov	r0, r5
 800853a:	f000 fe29 	bl	8009190 <_sbrk_r>
 800853e:	1c43      	adds	r3, r0, #1
 8008540:	d00a      	beq.n	8008558 <sbrk_aligned+0x34>
 8008542:	1cc4      	adds	r4, r0, #3
 8008544:	f024 0403 	bic.w	r4, r4, #3
 8008548:	42a0      	cmp	r0, r4
 800854a:	d007      	beq.n	800855c <sbrk_aligned+0x38>
 800854c:	1a21      	subs	r1, r4, r0
 800854e:	4628      	mov	r0, r5
 8008550:	f000 fe1e 	bl	8009190 <_sbrk_r>
 8008554:	3001      	adds	r0, #1
 8008556:	d101      	bne.n	800855c <sbrk_aligned+0x38>
 8008558:	f04f 34ff 	mov.w	r4, #4294967295
 800855c:	4620      	mov	r0, r4
 800855e:	bd70      	pop	{r4, r5, r6, pc}
 8008560:	20004570 	.word	0x20004570

08008564 <_malloc_r>:
 8008564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008568:	1ccd      	adds	r5, r1, #3
 800856a:	f025 0503 	bic.w	r5, r5, #3
 800856e:	3508      	adds	r5, #8
 8008570:	2d0c      	cmp	r5, #12
 8008572:	bf38      	it	cc
 8008574:	250c      	movcc	r5, #12
 8008576:	2d00      	cmp	r5, #0
 8008578:	4607      	mov	r7, r0
 800857a:	db01      	blt.n	8008580 <_malloc_r+0x1c>
 800857c:	42a9      	cmp	r1, r5
 800857e:	d905      	bls.n	800858c <_malloc_r+0x28>
 8008580:	230c      	movs	r3, #12
 8008582:	603b      	str	r3, [r7, #0]
 8008584:	2600      	movs	r6, #0
 8008586:	4630      	mov	r0, r6
 8008588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800858c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008660 <_malloc_r+0xfc>
 8008590:	f000 f868 	bl	8008664 <__malloc_lock>
 8008594:	f8d8 3000 	ldr.w	r3, [r8]
 8008598:	461c      	mov	r4, r3
 800859a:	bb5c      	cbnz	r4, 80085f4 <_malloc_r+0x90>
 800859c:	4629      	mov	r1, r5
 800859e:	4638      	mov	r0, r7
 80085a0:	f7ff ffc0 	bl	8008524 <sbrk_aligned>
 80085a4:	1c43      	adds	r3, r0, #1
 80085a6:	4604      	mov	r4, r0
 80085a8:	d155      	bne.n	8008656 <_malloc_r+0xf2>
 80085aa:	f8d8 4000 	ldr.w	r4, [r8]
 80085ae:	4626      	mov	r6, r4
 80085b0:	2e00      	cmp	r6, #0
 80085b2:	d145      	bne.n	8008640 <_malloc_r+0xdc>
 80085b4:	2c00      	cmp	r4, #0
 80085b6:	d048      	beq.n	800864a <_malloc_r+0xe6>
 80085b8:	6823      	ldr	r3, [r4, #0]
 80085ba:	4631      	mov	r1, r6
 80085bc:	4638      	mov	r0, r7
 80085be:	eb04 0903 	add.w	r9, r4, r3
 80085c2:	f000 fde5 	bl	8009190 <_sbrk_r>
 80085c6:	4581      	cmp	r9, r0
 80085c8:	d13f      	bne.n	800864a <_malloc_r+0xe6>
 80085ca:	6821      	ldr	r1, [r4, #0]
 80085cc:	1a6d      	subs	r5, r5, r1
 80085ce:	4629      	mov	r1, r5
 80085d0:	4638      	mov	r0, r7
 80085d2:	f7ff ffa7 	bl	8008524 <sbrk_aligned>
 80085d6:	3001      	adds	r0, #1
 80085d8:	d037      	beq.n	800864a <_malloc_r+0xe6>
 80085da:	6823      	ldr	r3, [r4, #0]
 80085dc:	442b      	add	r3, r5
 80085de:	6023      	str	r3, [r4, #0]
 80085e0:	f8d8 3000 	ldr.w	r3, [r8]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d038      	beq.n	800865a <_malloc_r+0xf6>
 80085e8:	685a      	ldr	r2, [r3, #4]
 80085ea:	42a2      	cmp	r2, r4
 80085ec:	d12b      	bne.n	8008646 <_malloc_r+0xe2>
 80085ee:	2200      	movs	r2, #0
 80085f0:	605a      	str	r2, [r3, #4]
 80085f2:	e00f      	b.n	8008614 <_malloc_r+0xb0>
 80085f4:	6822      	ldr	r2, [r4, #0]
 80085f6:	1b52      	subs	r2, r2, r5
 80085f8:	d41f      	bmi.n	800863a <_malloc_r+0xd6>
 80085fa:	2a0b      	cmp	r2, #11
 80085fc:	d917      	bls.n	800862e <_malloc_r+0xca>
 80085fe:	1961      	adds	r1, r4, r5
 8008600:	42a3      	cmp	r3, r4
 8008602:	6025      	str	r5, [r4, #0]
 8008604:	bf18      	it	ne
 8008606:	6059      	strne	r1, [r3, #4]
 8008608:	6863      	ldr	r3, [r4, #4]
 800860a:	bf08      	it	eq
 800860c:	f8c8 1000 	streq.w	r1, [r8]
 8008610:	5162      	str	r2, [r4, r5]
 8008612:	604b      	str	r3, [r1, #4]
 8008614:	4638      	mov	r0, r7
 8008616:	f104 060b 	add.w	r6, r4, #11
 800861a:	f000 f829 	bl	8008670 <__malloc_unlock>
 800861e:	f026 0607 	bic.w	r6, r6, #7
 8008622:	1d23      	adds	r3, r4, #4
 8008624:	1af2      	subs	r2, r6, r3
 8008626:	d0ae      	beq.n	8008586 <_malloc_r+0x22>
 8008628:	1b9b      	subs	r3, r3, r6
 800862a:	50a3      	str	r3, [r4, r2]
 800862c:	e7ab      	b.n	8008586 <_malloc_r+0x22>
 800862e:	42a3      	cmp	r3, r4
 8008630:	6862      	ldr	r2, [r4, #4]
 8008632:	d1dd      	bne.n	80085f0 <_malloc_r+0x8c>
 8008634:	f8c8 2000 	str.w	r2, [r8]
 8008638:	e7ec      	b.n	8008614 <_malloc_r+0xb0>
 800863a:	4623      	mov	r3, r4
 800863c:	6864      	ldr	r4, [r4, #4]
 800863e:	e7ac      	b.n	800859a <_malloc_r+0x36>
 8008640:	4634      	mov	r4, r6
 8008642:	6876      	ldr	r6, [r6, #4]
 8008644:	e7b4      	b.n	80085b0 <_malloc_r+0x4c>
 8008646:	4613      	mov	r3, r2
 8008648:	e7cc      	b.n	80085e4 <_malloc_r+0x80>
 800864a:	230c      	movs	r3, #12
 800864c:	603b      	str	r3, [r7, #0]
 800864e:	4638      	mov	r0, r7
 8008650:	f000 f80e 	bl	8008670 <__malloc_unlock>
 8008654:	e797      	b.n	8008586 <_malloc_r+0x22>
 8008656:	6025      	str	r5, [r4, #0]
 8008658:	e7dc      	b.n	8008614 <_malloc_r+0xb0>
 800865a:	605b      	str	r3, [r3, #4]
 800865c:	deff      	udf	#255	; 0xff
 800865e:	bf00      	nop
 8008660:	2000456c 	.word	0x2000456c

08008664 <__malloc_lock>:
 8008664:	4801      	ldr	r0, [pc, #4]	; (800866c <__malloc_lock+0x8>)
 8008666:	f7ff bf00 	b.w	800846a <__retarget_lock_acquire_recursive>
 800866a:	bf00      	nop
 800866c:	20004568 	.word	0x20004568

08008670 <__malloc_unlock>:
 8008670:	4801      	ldr	r0, [pc, #4]	; (8008678 <__malloc_unlock+0x8>)
 8008672:	f7ff befb 	b.w	800846c <__retarget_lock_release_recursive>
 8008676:	bf00      	nop
 8008678:	20004568 	.word	0x20004568

0800867c <__ssputs_r>:
 800867c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008680:	688e      	ldr	r6, [r1, #8]
 8008682:	461f      	mov	r7, r3
 8008684:	42be      	cmp	r6, r7
 8008686:	680b      	ldr	r3, [r1, #0]
 8008688:	4682      	mov	sl, r0
 800868a:	460c      	mov	r4, r1
 800868c:	4690      	mov	r8, r2
 800868e:	d82c      	bhi.n	80086ea <__ssputs_r+0x6e>
 8008690:	898a      	ldrh	r2, [r1, #12]
 8008692:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008696:	d026      	beq.n	80086e6 <__ssputs_r+0x6a>
 8008698:	6965      	ldr	r5, [r4, #20]
 800869a:	6909      	ldr	r1, [r1, #16]
 800869c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086a0:	eba3 0901 	sub.w	r9, r3, r1
 80086a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086a8:	1c7b      	adds	r3, r7, #1
 80086aa:	444b      	add	r3, r9
 80086ac:	106d      	asrs	r5, r5, #1
 80086ae:	429d      	cmp	r5, r3
 80086b0:	bf38      	it	cc
 80086b2:	461d      	movcc	r5, r3
 80086b4:	0553      	lsls	r3, r2, #21
 80086b6:	d527      	bpl.n	8008708 <__ssputs_r+0x8c>
 80086b8:	4629      	mov	r1, r5
 80086ba:	f7ff ff53 	bl	8008564 <_malloc_r>
 80086be:	4606      	mov	r6, r0
 80086c0:	b360      	cbz	r0, 800871c <__ssputs_r+0xa0>
 80086c2:	6921      	ldr	r1, [r4, #16]
 80086c4:	464a      	mov	r2, r9
 80086c6:	f7ff fed2 	bl	800846e <memcpy>
 80086ca:	89a3      	ldrh	r3, [r4, #12]
 80086cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80086d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086d4:	81a3      	strh	r3, [r4, #12]
 80086d6:	6126      	str	r6, [r4, #16]
 80086d8:	6165      	str	r5, [r4, #20]
 80086da:	444e      	add	r6, r9
 80086dc:	eba5 0509 	sub.w	r5, r5, r9
 80086e0:	6026      	str	r6, [r4, #0]
 80086e2:	60a5      	str	r5, [r4, #8]
 80086e4:	463e      	mov	r6, r7
 80086e6:	42be      	cmp	r6, r7
 80086e8:	d900      	bls.n	80086ec <__ssputs_r+0x70>
 80086ea:	463e      	mov	r6, r7
 80086ec:	6820      	ldr	r0, [r4, #0]
 80086ee:	4632      	mov	r2, r6
 80086f0:	4641      	mov	r1, r8
 80086f2:	f000 fd33 	bl	800915c <memmove>
 80086f6:	68a3      	ldr	r3, [r4, #8]
 80086f8:	1b9b      	subs	r3, r3, r6
 80086fa:	60a3      	str	r3, [r4, #8]
 80086fc:	6823      	ldr	r3, [r4, #0]
 80086fe:	4433      	add	r3, r6
 8008700:	6023      	str	r3, [r4, #0]
 8008702:	2000      	movs	r0, #0
 8008704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008708:	462a      	mov	r2, r5
 800870a:	f000 fd51 	bl	80091b0 <_realloc_r>
 800870e:	4606      	mov	r6, r0
 8008710:	2800      	cmp	r0, #0
 8008712:	d1e0      	bne.n	80086d6 <__ssputs_r+0x5a>
 8008714:	6921      	ldr	r1, [r4, #16]
 8008716:	4650      	mov	r0, sl
 8008718:	f7ff feb8 	bl	800848c <_free_r>
 800871c:	230c      	movs	r3, #12
 800871e:	f8ca 3000 	str.w	r3, [sl]
 8008722:	89a3      	ldrh	r3, [r4, #12]
 8008724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008728:	81a3      	strh	r3, [r4, #12]
 800872a:	f04f 30ff 	mov.w	r0, #4294967295
 800872e:	e7e9      	b.n	8008704 <__ssputs_r+0x88>

08008730 <_svfiprintf_r>:
 8008730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008734:	4698      	mov	r8, r3
 8008736:	898b      	ldrh	r3, [r1, #12]
 8008738:	061b      	lsls	r3, r3, #24
 800873a:	b09d      	sub	sp, #116	; 0x74
 800873c:	4607      	mov	r7, r0
 800873e:	460d      	mov	r5, r1
 8008740:	4614      	mov	r4, r2
 8008742:	d50e      	bpl.n	8008762 <_svfiprintf_r+0x32>
 8008744:	690b      	ldr	r3, [r1, #16]
 8008746:	b963      	cbnz	r3, 8008762 <_svfiprintf_r+0x32>
 8008748:	2140      	movs	r1, #64	; 0x40
 800874a:	f7ff ff0b 	bl	8008564 <_malloc_r>
 800874e:	6028      	str	r0, [r5, #0]
 8008750:	6128      	str	r0, [r5, #16]
 8008752:	b920      	cbnz	r0, 800875e <_svfiprintf_r+0x2e>
 8008754:	230c      	movs	r3, #12
 8008756:	603b      	str	r3, [r7, #0]
 8008758:	f04f 30ff 	mov.w	r0, #4294967295
 800875c:	e0d0      	b.n	8008900 <_svfiprintf_r+0x1d0>
 800875e:	2340      	movs	r3, #64	; 0x40
 8008760:	616b      	str	r3, [r5, #20]
 8008762:	2300      	movs	r3, #0
 8008764:	9309      	str	r3, [sp, #36]	; 0x24
 8008766:	2320      	movs	r3, #32
 8008768:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800876c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008770:	2330      	movs	r3, #48	; 0x30
 8008772:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008918 <_svfiprintf_r+0x1e8>
 8008776:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800877a:	f04f 0901 	mov.w	r9, #1
 800877e:	4623      	mov	r3, r4
 8008780:	469a      	mov	sl, r3
 8008782:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008786:	b10a      	cbz	r2, 800878c <_svfiprintf_r+0x5c>
 8008788:	2a25      	cmp	r2, #37	; 0x25
 800878a:	d1f9      	bne.n	8008780 <_svfiprintf_r+0x50>
 800878c:	ebba 0b04 	subs.w	fp, sl, r4
 8008790:	d00b      	beq.n	80087aa <_svfiprintf_r+0x7a>
 8008792:	465b      	mov	r3, fp
 8008794:	4622      	mov	r2, r4
 8008796:	4629      	mov	r1, r5
 8008798:	4638      	mov	r0, r7
 800879a:	f7ff ff6f 	bl	800867c <__ssputs_r>
 800879e:	3001      	adds	r0, #1
 80087a0:	f000 80a9 	beq.w	80088f6 <_svfiprintf_r+0x1c6>
 80087a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087a6:	445a      	add	r2, fp
 80087a8:	9209      	str	r2, [sp, #36]	; 0x24
 80087aa:	f89a 3000 	ldrb.w	r3, [sl]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	f000 80a1 	beq.w	80088f6 <_svfiprintf_r+0x1c6>
 80087b4:	2300      	movs	r3, #0
 80087b6:	f04f 32ff 	mov.w	r2, #4294967295
 80087ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087be:	f10a 0a01 	add.w	sl, sl, #1
 80087c2:	9304      	str	r3, [sp, #16]
 80087c4:	9307      	str	r3, [sp, #28]
 80087c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087ca:	931a      	str	r3, [sp, #104]	; 0x68
 80087cc:	4654      	mov	r4, sl
 80087ce:	2205      	movs	r2, #5
 80087d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087d4:	4850      	ldr	r0, [pc, #320]	; (8008918 <_svfiprintf_r+0x1e8>)
 80087d6:	f7f7 fd03 	bl	80001e0 <memchr>
 80087da:	9a04      	ldr	r2, [sp, #16]
 80087dc:	b9d8      	cbnz	r0, 8008816 <_svfiprintf_r+0xe6>
 80087de:	06d0      	lsls	r0, r2, #27
 80087e0:	bf44      	itt	mi
 80087e2:	2320      	movmi	r3, #32
 80087e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087e8:	0711      	lsls	r1, r2, #28
 80087ea:	bf44      	itt	mi
 80087ec:	232b      	movmi	r3, #43	; 0x2b
 80087ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087f2:	f89a 3000 	ldrb.w	r3, [sl]
 80087f6:	2b2a      	cmp	r3, #42	; 0x2a
 80087f8:	d015      	beq.n	8008826 <_svfiprintf_r+0xf6>
 80087fa:	9a07      	ldr	r2, [sp, #28]
 80087fc:	4654      	mov	r4, sl
 80087fe:	2000      	movs	r0, #0
 8008800:	f04f 0c0a 	mov.w	ip, #10
 8008804:	4621      	mov	r1, r4
 8008806:	f811 3b01 	ldrb.w	r3, [r1], #1
 800880a:	3b30      	subs	r3, #48	; 0x30
 800880c:	2b09      	cmp	r3, #9
 800880e:	d94d      	bls.n	80088ac <_svfiprintf_r+0x17c>
 8008810:	b1b0      	cbz	r0, 8008840 <_svfiprintf_r+0x110>
 8008812:	9207      	str	r2, [sp, #28]
 8008814:	e014      	b.n	8008840 <_svfiprintf_r+0x110>
 8008816:	eba0 0308 	sub.w	r3, r0, r8
 800881a:	fa09 f303 	lsl.w	r3, r9, r3
 800881e:	4313      	orrs	r3, r2
 8008820:	9304      	str	r3, [sp, #16]
 8008822:	46a2      	mov	sl, r4
 8008824:	e7d2      	b.n	80087cc <_svfiprintf_r+0x9c>
 8008826:	9b03      	ldr	r3, [sp, #12]
 8008828:	1d19      	adds	r1, r3, #4
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	9103      	str	r1, [sp, #12]
 800882e:	2b00      	cmp	r3, #0
 8008830:	bfbb      	ittet	lt
 8008832:	425b      	neglt	r3, r3
 8008834:	f042 0202 	orrlt.w	r2, r2, #2
 8008838:	9307      	strge	r3, [sp, #28]
 800883a:	9307      	strlt	r3, [sp, #28]
 800883c:	bfb8      	it	lt
 800883e:	9204      	strlt	r2, [sp, #16]
 8008840:	7823      	ldrb	r3, [r4, #0]
 8008842:	2b2e      	cmp	r3, #46	; 0x2e
 8008844:	d10c      	bne.n	8008860 <_svfiprintf_r+0x130>
 8008846:	7863      	ldrb	r3, [r4, #1]
 8008848:	2b2a      	cmp	r3, #42	; 0x2a
 800884a:	d134      	bne.n	80088b6 <_svfiprintf_r+0x186>
 800884c:	9b03      	ldr	r3, [sp, #12]
 800884e:	1d1a      	adds	r2, r3, #4
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	9203      	str	r2, [sp, #12]
 8008854:	2b00      	cmp	r3, #0
 8008856:	bfb8      	it	lt
 8008858:	f04f 33ff 	movlt.w	r3, #4294967295
 800885c:	3402      	adds	r4, #2
 800885e:	9305      	str	r3, [sp, #20]
 8008860:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008928 <_svfiprintf_r+0x1f8>
 8008864:	7821      	ldrb	r1, [r4, #0]
 8008866:	2203      	movs	r2, #3
 8008868:	4650      	mov	r0, sl
 800886a:	f7f7 fcb9 	bl	80001e0 <memchr>
 800886e:	b138      	cbz	r0, 8008880 <_svfiprintf_r+0x150>
 8008870:	9b04      	ldr	r3, [sp, #16]
 8008872:	eba0 000a 	sub.w	r0, r0, sl
 8008876:	2240      	movs	r2, #64	; 0x40
 8008878:	4082      	lsls	r2, r0
 800887a:	4313      	orrs	r3, r2
 800887c:	3401      	adds	r4, #1
 800887e:	9304      	str	r3, [sp, #16]
 8008880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008884:	4825      	ldr	r0, [pc, #148]	; (800891c <_svfiprintf_r+0x1ec>)
 8008886:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800888a:	2206      	movs	r2, #6
 800888c:	f7f7 fca8 	bl	80001e0 <memchr>
 8008890:	2800      	cmp	r0, #0
 8008892:	d038      	beq.n	8008906 <_svfiprintf_r+0x1d6>
 8008894:	4b22      	ldr	r3, [pc, #136]	; (8008920 <_svfiprintf_r+0x1f0>)
 8008896:	bb1b      	cbnz	r3, 80088e0 <_svfiprintf_r+0x1b0>
 8008898:	9b03      	ldr	r3, [sp, #12]
 800889a:	3307      	adds	r3, #7
 800889c:	f023 0307 	bic.w	r3, r3, #7
 80088a0:	3308      	adds	r3, #8
 80088a2:	9303      	str	r3, [sp, #12]
 80088a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088a6:	4433      	add	r3, r6
 80088a8:	9309      	str	r3, [sp, #36]	; 0x24
 80088aa:	e768      	b.n	800877e <_svfiprintf_r+0x4e>
 80088ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80088b0:	460c      	mov	r4, r1
 80088b2:	2001      	movs	r0, #1
 80088b4:	e7a6      	b.n	8008804 <_svfiprintf_r+0xd4>
 80088b6:	2300      	movs	r3, #0
 80088b8:	3401      	adds	r4, #1
 80088ba:	9305      	str	r3, [sp, #20]
 80088bc:	4619      	mov	r1, r3
 80088be:	f04f 0c0a 	mov.w	ip, #10
 80088c2:	4620      	mov	r0, r4
 80088c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088c8:	3a30      	subs	r2, #48	; 0x30
 80088ca:	2a09      	cmp	r2, #9
 80088cc:	d903      	bls.n	80088d6 <_svfiprintf_r+0x1a6>
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d0c6      	beq.n	8008860 <_svfiprintf_r+0x130>
 80088d2:	9105      	str	r1, [sp, #20]
 80088d4:	e7c4      	b.n	8008860 <_svfiprintf_r+0x130>
 80088d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80088da:	4604      	mov	r4, r0
 80088dc:	2301      	movs	r3, #1
 80088de:	e7f0      	b.n	80088c2 <_svfiprintf_r+0x192>
 80088e0:	ab03      	add	r3, sp, #12
 80088e2:	9300      	str	r3, [sp, #0]
 80088e4:	462a      	mov	r2, r5
 80088e6:	4b0f      	ldr	r3, [pc, #60]	; (8008924 <_svfiprintf_r+0x1f4>)
 80088e8:	a904      	add	r1, sp, #16
 80088ea:	4638      	mov	r0, r7
 80088ec:	f3af 8000 	nop.w
 80088f0:	1c42      	adds	r2, r0, #1
 80088f2:	4606      	mov	r6, r0
 80088f4:	d1d6      	bne.n	80088a4 <_svfiprintf_r+0x174>
 80088f6:	89ab      	ldrh	r3, [r5, #12]
 80088f8:	065b      	lsls	r3, r3, #25
 80088fa:	f53f af2d 	bmi.w	8008758 <_svfiprintf_r+0x28>
 80088fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008900:	b01d      	add	sp, #116	; 0x74
 8008902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008906:	ab03      	add	r3, sp, #12
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	462a      	mov	r2, r5
 800890c:	4b05      	ldr	r3, [pc, #20]	; (8008924 <_svfiprintf_r+0x1f4>)
 800890e:	a904      	add	r1, sp, #16
 8008910:	4638      	mov	r0, r7
 8008912:	f000 f9bd 	bl	8008c90 <_printf_i>
 8008916:	e7eb      	b.n	80088f0 <_svfiprintf_r+0x1c0>
 8008918:	080095c9 	.word	0x080095c9
 800891c:	080095d3 	.word	0x080095d3
 8008920:	00000000 	.word	0x00000000
 8008924:	0800867d 	.word	0x0800867d
 8008928:	080095cf 	.word	0x080095cf

0800892c <__sfputc_r>:
 800892c:	6893      	ldr	r3, [r2, #8]
 800892e:	3b01      	subs	r3, #1
 8008930:	2b00      	cmp	r3, #0
 8008932:	b410      	push	{r4}
 8008934:	6093      	str	r3, [r2, #8]
 8008936:	da08      	bge.n	800894a <__sfputc_r+0x1e>
 8008938:	6994      	ldr	r4, [r2, #24]
 800893a:	42a3      	cmp	r3, r4
 800893c:	db01      	blt.n	8008942 <__sfputc_r+0x16>
 800893e:	290a      	cmp	r1, #10
 8008940:	d103      	bne.n	800894a <__sfputc_r+0x1e>
 8008942:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008946:	f000 bb73 	b.w	8009030 <__swbuf_r>
 800894a:	6813      	ldr	r3, [r2, #0]
 800894c:	1c58      	adds	r0, r3, #1
 800894e:	6010      	str	r0, [r2, #0]
 8008950:	7019      	strb	r1, [r3, #0]
 8008952:	4608      	mov	r0, r1
 8008954:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008958:	4770      	bx	lr

0800895a <__sfputs_r>:
 800895a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895c:	4606      	mov	r6, r0
 800895e:	460f      	mov	r7, r1
 8008960:	4614      	mov	r4, r2
 8008962:	18d5      	adds	r5, r2, r3
 8008964:	42ac      	cmp	r4, r5
 8008966:	d101      	bne.n	800896c <__sfputs_r+0x12>
 8008968:	2000      	movs	r0, #0
 800896a:	e007      	b.n	800897c <__sfputs_r+0x22>
 800896c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008970:	463a      	mov	r2, r7
 8008972:	4630      	mov	r0, r6
 8008974:	f7ff ffda 	bl	800892c <__sfputc_r>
 8008978:	1c43      	adds	r3, r0, #1
 800897a:	d1f3      	bne.n	8008964 <__sfputs_r+0xa>
 800897c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008980 <_vfiprintf_r>:
 8008980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008984:	460d      	mov	r5, r1
 8008986:	b09d      	sub	sp, #116	; 0x74
 8008988:	4614      	mov	r4, r2
 800898a:	4698      	mov	r8, r3
 800898c:	4606      	mov	r6, r0
 800898e:	b118      	cbz	r0, 8008998 <_vfiprintf_r+0x18>
 8008990:	6a03      	ldr	r3, [r0, #32]
 8008992:	b90b      	cbnz	r3, 8008998 <_vfiprintf_r+0x18>
 8008994:	f7ff fbee 	bl	8008174 <__sinit>
 8008998:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800899a:	07d9      	lsls	r1, r3, #31
 800899c:	d405      	bmi.n	80089aa <_vfiprintf_r+0x2a>
 800899e:	89ab      	ldrh	r3, [r5, #12]
 80089a0:	059a      	lsls	r2, r3, #22
 80089a2:	d402      	bmi.n	80089aa <_vfiprintf_r+0x2a>
 80089a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089a6:	f7ff fd60 	bl	800846a <__retarget_lock_acquire_recursive>
 80089aa:	89ab      	ldrh	r3, [r5, #12]
 80089ac:	071b      	lsls	r3, r3, #28
 80089ae:	d501      	bpl.n	80089b4 <_vfiprintf_r+0x34>
 80089b0:	692b      	ldr	r3, [r5, #16]
 80089b2:	b99b      	cbnz	r3, 80089dc <_vfiprintf_r+0x5c>
 80089b4:	4629      	mov	r1, r5
 80089b6:	4630      	mov	r0, r6
 80089b8:	f000 fb78 	bl	80090ac <__swsetup_r>
 80089bc:	b170      	cbz	r0, 80089dc <_vfiprintf_r+0x5c>
 80089be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089c0:	07dc      	lsls	r4, r3, #31
 80089c2:	d504      	bpl.n	80089ce <_vfiprintf_r+0x4e>
 80089c4:	f04f 30ff 	mov.w	r0, #4294967295
 80089c8:	b01d      	add	sp, #116	; 0x74
 80089ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ce:	89ab      	ldrh	r3, [r5, #12]
 80089d0:	0598      	lsls	r0, r3, #22
 80089d2:	d4f7      	bmi.n	80089c4 <_vfiprintf_r+0x44>
 80089d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089d6:	f7ff fd49 	bl	800846c <__retarget_lock_release_recursive>
 80089da:	e7f3      	b.n	80089c4 <_vfiprintf_r+0x44>
 80089dc:	2300      	movs	r3, #0
 80089de:	9309      	str	r3, [sp, #36]	; 0x24
 80089e0:	2320      	movs	r3, #32
 80089e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80089ea:	2330      	movs	r3, #48	; 0x30
 80089ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008ba0 <_vfiprintf_r+0x220>
 80089f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089f4:	f04f 0901 	mov.w	r9, #1
 80089f8:	4623      	mov	r3, r4
 80089fa:	469a      	mov	sl, r3
 80089fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a00:	b10a      	cbz	r2, 8008a06 <_vfiprintf_r+0x86>
 8008a02:	2a25      	cmp	r2, #37	; 0x25
 8008a04:	d1f9      	bne.n	80089fa <_vfiprintf_r+0x7a>
 8008a06:	ebba 0b04 	subs.w	fp, sl, r4
 8008a0a:	d00b      	beq.n	8008a24 <_vfiprintf_r+0xa4>
 8008a0c:	465b      	mov	r3, fp
 8008a0e:	4622      	mov	r2, r4
 8008a10:	4629      	mov	r1, r5
 8008a12:	4630      	mov	r0, r6
 8008a14:	f7ff ffa1 	bl	800895a <__sfputs_r>
 8008a18:	3001      	adds	r0, #1
 8008a1a:	f000 80a9 	beq.w	8008b70 <_vfiprintf_r+0x1f0>
 8008a1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a20:	445a      	add	r2, fp
 8008a22:	9209      	str	r2, [sp, #36]	; 0x24
 8008a24:	f89a 3000 	ldrb.w	r3, [sl]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f000 80a1 	beq.w	8008b70 <_vfiprintf_r+0x1f0>
 8008a2e:	2300      	movs	r3, #0
 8008a30:	f04f 32ff 	mov.w	r2, #4294967295
 8008a34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a38:	f10a 0a01 	add.w	sl, sl, #1
 8008a3c:	9304      	str	r3, [sp, #16]
 8008a3e:	9307      	str	r3, [sp, #28]
 8008a40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a44:	931a      	str	r3, [sp, #104]	; 0x68
 8008a46:	4654      	mov	r4, sl
 8008a48:	2205      	movs	r2, #5
 8008a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a4e:	4854      	ldr	r0, [pc, #336]	; (8008ba0 <_vfiprintf_r+0x220>)
 8008a50:	f7f7 fbc6 	bl	80001e0 <memchr>
 8008a54:	9a04      	ldr	r2, [sp, #16]
 8008a56:	b9d8      	cbnz	r0, 8008a90 <_vfiprintf_r+0x110>
 8008a58:	06d1      	lsls	r1, r2, #27
 8008a5a:	bf44      	itt	mi
 8008a5c:	2320      	movmi	r3, #32
 8008a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a62:	0713      	lsls	r3, r2, #28
 8008a64:	bf44      	itt	mi
 8008a66:	232b      	movmi	r3, #43	; 0x2b
 8008a68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8008a70:	2b2a      	cmp	r3, #42	; 0x2a
 8008a72:	d015      	beq.n	8008aa0 <_vfiprintf_r+0x120>
 8008a74:	9a07      	ldr	r2, [sp, #28]
 8008a76:	4654      	mov	r4, sl
 8008a78:	2000      	movs	r0, #0
 8008a7a:	f04f 0c0a 	mov.w	ip, #10
 8008a7e:	4621      	mov	r1, r4
 8008a80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a84:	3b30      	subs	r3, #48	; 0x30
 8008a86:	2b09      	cmp	r3, #9
 8008a88:	d94d      	bls.n	8008b26 <_vfiprintf_r+0x1a6>
 8008a8a:	b1b0      	cbz	r0, 8008aba <_vfiprintf_r+0x13a>
 8008a8c:	9207      	str	r2, [sp, #28]
 8008a8e:	e014      	b.n	8008aba <_vfiprintf_r+0x13a>
 8008a90:	eba0 0308 	sub.w	r3, r0, r8
 8008a94:	fa09 f303 	lsl.w	r3, r9, r3
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	9304      	str	r3, [sp, #16]
 8008a9c:	46a2      	mov	sl, r4
 8008a9e:	e7d2      	b.n	8008a46 <_vfiprintf_r+0xc6>
 8008aa0:	9b03      	ldr	r3, [sp, #12]
 8008aa2:	1d19      	adds	r1, r3, #4
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	9103      	str	r1, [sp, #12]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	bfbb      	ittet	lt
 8008aac:	425b      	neglt	r3, r3
 8008aae:	f042 0202 	orrlt.w	r2, r2, #2
 8008ab2:	9307      	strge	r3, [sp, #28]
 8008ab4:	9307      	strlt	r3, [sp, #28]
 8008ab6:	bfb8      	it	lt
 8008ab8:	9204      	strlt	r2, [sp, #16]
 8008aba:	7823      	ldrb	r3, [r4, #0]
 8008abc:	2b2e      	cmp	r3, #46	; 0x2e
 8008abe:	d10c      	bne.n	8008ada <_vfiprintf_r+0x15a>
 8008ac0:	7863      	ldrb	r3, [r4, #1]
 8008ac2:	2b2a      	cmp	r3, #42	; 0x2a
 8008ac4:	d134      	bne.n	8008b30 <_vfiprintf_r+0x1b0>
 8008ac6:	9b03      	ldr	r3, [sp, #12]
 8008ac8:	1d1a      	adds	r2, r3, #4
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	9203      	str	r2, [sp, #12]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	bfb8      	it	lt
 8008ad2:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ad6:	3402      	adds	r4, #2
 8008ad8:	9305      	str	r3, [sp, #20]
 8008ada:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008bb0 <_vfiprintf_r+0x230>
 8008ade:	7821      	ldrb	r1, [r4, #0]
 8008ae0:	2203      	movs	r2, #3
 8008ae2:	4650      	mov	r0, sl
 8008ae4:	f7f7 fb7c 	bl	80001e0 <memchr>
 8008ae8:	b138      	cbz	r0, 8008afa <_vfiprintf_r+0x17a>
 8008aea:	9b04      	ldr	r3, [sp, #16]
 8008aec:	eba0 000a 	sub.w	r0, r0, sl
 8008af0:	2240      	movs	r2, #64	; 0x40
 8008af2:	4082      	lsls	r2, r0
 8008af4:	4313      	orrs	r3, r2
 8008af6:	3401      	adds	r4, #1
 8008af8:	9304      	str	r3, [sp, #16]
 8008afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008afe:	4829      	ldr	r0, [pc, #164]	; (8008ba4 <_vfiprintf_r+0x224>)
 8008b00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b04:	2206      	movs	r2, #6
 8008b06:	f7f7 fb6b 	bl	80001e0 <memchr>
 8008b0a:	2800      	cmp	r0, #0
 8008b0c:	d03f      	beq.n	8008b8e <_vfiprintf_r+0x20e>
 8008b0e:	4b26      	ldr	r3, [pc, #152]	; (8008ba8 <_vfiprintf_r+0x228>)
 8008b10:	bb1b      	cbnz	r3, 8008b5a <_vfiprintf_r+0x1da>
 8008b12:	9b03      	ldr	r3, [sp, #12]
 8008b14:	3307      	adds	r3, #7
 8008b16:	f023 0307 	bic.w	r3, r3, #7
 8008b1a:	3308      	adds	r3, #8
 8008b1c:	9303      	str	r3, [sp, #12]
 8008b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b20:	443b      	add	r3, r7
 8008b22:	9309      	str	r3, [sp, #36]	; 0x24
 8008b24:	e768      	b.n	80089f8 <_vfiprintf_r+0x78>
 8008b26:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b2a:	460c      	mov	r4, r1
 8008b2c:	2001      	movs	r0, #1
 8008b2e:	e7a6      	b.n	8008a7e <_vfiprintf_r+0xfe>
 8008b30:	2300      	movs	r3, #0
 8008b32:	3401      	adds	r4, #1
 8008b34:	9305      	str	r3, [sp, #20]
 8008b36:	4619      	mov	r1, r3
 8008b38:	f04f 0c0a 	mov.w	ip, #10
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b42:	3a30      	subs	r2, #48	; 0x30
 8008b44:	2a09      	cmp	r2, #9
 8008b46:	d903      	bls.n	8008b50 <_vfiprintf_r+0x1d0>
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d0c6      	beq.n	8008ada <_vfiprintf_r+0x15a>
 8008b4c:	9105      	str	r1, [sp, #20]
 8008b4e:	e7c4      	b.n	8008ada <_vfiprintf_r+0x15a>
 8008b50:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b54:	4604      	mov	r4, r0
 8008b56:	2301      	movs	r3, #1
 8008b58:	e7f0      	b.n	8008b3c <_vfiprintf_r+0x1bc>
 8008b5a:	ab03      	add	r3, sp, #12
 8008b5c:	9300      	str	r3, [sp, #0]
 8008b5e:	462a      	mov	r2, r5
 8008b60:	4b12      	ldr	r3, [pc, #72]	; (8008bac <_vfiprintf_r+0x22c>)
 8008b62:	a904      	add	r1, sp, #16
 8008b64:	4630      	mov	r0, r6
 8008b66:	f3af 8000 	nop.w
 8008b6a:	4607      	mov	r7, r0
 8008b6c:	1c78      	adds	r0, r7, #1
 8008b6e:	d1d6      	bne.n	8008b1e <_vfiprintf_r+0x19e>
 8008b70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b72:	07d9      	lsls	r1, r3, #31
 8008b74:	d405      	bmi.n	8008b82 <_vfiprintf_r+0x202>
 8008b76:	89ab      	ldrh	r3, [r5, #12]
 8008b78:	059a      	lsls	r2, r3, #22
 8008b7a:	d402      	bmi.n	8008b82 <_vfiprintf_r+0x202>
 8008b7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b7e:	f7ff fc75 	bl	800846c <__retarget_lock_release_recursive>
 8008b82:	89ab      	ldrh	r3, [r5, #12]
 8008b84:	065b      	lsls	r3, r3, #25
 8008b86:	f53f af1d 	bmi.w	80089c4 <_vfiprintf_r+0x44>
 8008b8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b8c:	e71c      	b.n	80089c8 <_vfiprintf_r+0x48>
 8008b8e:	ab03      	add	r3, sp, #12
 8008b90:	9300      	str	r3, [sp, #0]
 8008b92:	462a      	mov	r2, r5
 8008b94:	4b05      	ldr	r3, [pc, #20]	; (8008bac <_vfiprintf_r+0x22c>)
 8008b96:	a904      	add	r1, sp, #16
 8008b98:	4630      	mov	r0, r6
 8008b9a:	f000 f879 	bl	8008c90 <_printf_i>
 8008b9e:	e7e4      	b.n	8008b6a <_vfiprintf_r+0x1ea>
 8008ba0:	080095c9 	.word	0x080095c9
 8008ba4:	080095d3 	.word	0x080095d3
 8008ba8:	00000000 	.word	0x00000000
 8008bac:	0800895b 	.word	0x0800895b
 8008bb0:	080095cf 	.word	0x080095cf

08008bb4 <_printf_common>:
 8008bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bb8:	4616      	mov	r6, r2
 8008bba:	4699      	mov	r9, r3
 8008bbc:	688a      	ldr	r2, [r1, #8]
 8008bbe:	690b      	ldr	r3, [r1, #16]
 8008bc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	bfb8      	it	lt
 8008bc8:	4613      	movlt	r3, r2
 8008bca:	6033      	str	r3, [r6, #0]
 8008bcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bd0:	4607      	mov	r7, r0
 8008bd2:	460c      	mov	r4, r1
 8008bd4:	b10a      	cbz	r2, 8008bda <_printf_common+0x26>
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	6033      	str	r3, [r6, #0]
 8008bda:	6823      	ldr	r3, [r4, #0]
 8008bdc:	0699      	lsls	r1, r3, #26
 8008bde:	bf42      	ittt	mi
 8008be0:	6833      	ldrmi	r3, [r6, #0]
 8008be2:	3302      	addmi	r3, #2
 8008be4:	6033      	strmi	r3, [r6, #0]
 8008be6:	6825      	ldr	r5, [r4, #0]
 8008be8:	f015 0506 	ands.w	r5, r5, #6
 8008bec:	d106      	bne.n	8008bfc <_printf_common+0x48>
 8008bee:	f104 0a19 	add.w	sl, r4, #25
 8008bf2:	68e3      	ldr	r3, [r4, #12]
 8008bf4:	6832      	ldr	r2, [r6, #0]
 8008bf6:	1a9b      	subs	r3, r3, r2
 8008bf8:	42ab      	cmp	r3, r5
 8008bfa:	dc26      	bgt.n	8008c4a <_printf_common+0x96>
 8008bfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c00:	1e13      	subs	r3, r2, #0
 8008c02:	6822      	ldr	r2, [r4, #0]
 8008c04:	bf18      	it	ne
 8008c06:	2301      	movne	r3, #1
 8008c08:	0692      	lsls	r2, r2, #26
 8008c0a:	d42b      	bmi.n	8008c64 <_printf_common+0xb0>
 8008c0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c10:	4649      	mov	r1, r9
 8008c12:	4638      	mov	r0, r7
 8008c14:	47c0      	blx	r8
 8008c16:	3001      	adds	r0, #1
 8008c18:	d01e      	beq.n	8008c58 <_printf_common+0xa4>
 8008c1a:	6823      	ldr	r3, [r4, #0]
 8008c1c:	6922      	ldr	r2, [r4, #16]
 8008c1e:	f003 0306 	and.w	r3, r3, #6
 8008c22:	2b04      	cmp	r3, #4
 8008c24:	bf02      	ittt	eq
 8008c26:	68e5      	ldreq	r5, [r4, #12]
 8008c28:	6833      	ldreq	r3, [r6, #0]
 8008c2a:	1aed      	subeq	r5, r5, r3
 8008c2c:	68a3      	ldr	r3, [r4, #8]
 8008c2e:	bf0c      	ite	eq
 8008c30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c34:	2500      	movne	r5, #0
 8008c36:	4293      	cmp	r3, r2
 8008c38:	bfc4      	itt	gt
 8008c3a:	1a9b      	subgt	r3, r3, r2
 8008c3c:	18ed      	addgt	r5, r5, r3
 8008c3e:	2600      	movs	r6, #0
 8008c40:	341a      	adds	r4, #26
 8008c42:	42b5      	cmp	r5, r6
 8008c44:	d11a      	bne.n	8008c7c <_printf_common+0xc8>
 8008c46:	2000      	movs	r0, #0
 8008c48:	e008      	b.n	8008c5c <_printf_common+0xa8>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	4652      	mov	r2, sl
 8008c4e:	4649      	mov	r1, r9
 8008c50:	4638      	mov	r0, r7
 8008c52:	47c0      	blx	r8
 8008c54:	3001      	adds	r0, #1
 8008c56:	d103      	bne.n	8008c60 <_printf_common+0xac>
 8008c58:	f04f 30ff 	mov.w	r0, #4294967295
 8008c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c60:	3501      	adds	r5, #1
 8008c62:	e7c6      	b.n	8008bf2 <_printf_common+0x3e>
 8008c64:	18e1      	adds	r1, r4, r3
 8008c66:	1c5a      	adds	r2, r3, #1
 8008c68:	2030      	movs	r0, #48	; 0x30
 8008c6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c6e:	4422      	add	r2, r4
 8008c70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c78:	3302      	adds	r3, #2
 8008c7a:	e7c7      	b.n	8008c0c <_printf_common+0x58>
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	4622      	mov	r2, r4
 8008c80:	4649      	mov	r1, r9
 8008c82:	4638      	mov	r0, r7
 8008c84:	47c0      	blx	r8
 8008c86:	3001      	adds	r0, #1
 8008c88:	d0e6      	beq.n	8008c58 <_printf_common+0xa4>
 8008c8a:	3601      	adds	r6, #1
 8008c8c:	e7d9      	b.n	8008c42 <_printf_common+0x8e>
	...

08008c90 <_printf_i>:
 8008c90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c94:	7e0f      	ldrb	r7, [r1, #24]
 8008c96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c98:	2f78      	cmp	r7, #120	; 0x78
 8008c9a:	4691      	mov	r9, r2
 8008c9c:	4680      	mov	r8, r0
 8008c9e:	460c      	mov	r4, r1
 8008ca0:	469a      	mov	sl, r3
 8008ca2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008ca6:	d807      	bhi.n	8008cb8 <_printf_i+0x28>
 8008ca8:	2f62      	cmp	r7, #98	; 0x62
 8008caa:	d80a      	bhi.n	8008cc2 <_printf_i+0x32>
 8008cac:	2f00      	cmp	r7, #0
 8008cae:	f000 80d4 	beq.w	8008e5a <_printf_i+0x1ca>
 8008cb2:	2f58      	cmp	r7, #88	; 0x58
 8008cb4:	f000 80c0 	beq.w	8008e38 <_printf_i+0x1a8>
 8008cb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008cc0:	e03a      	b.n	8008d38 <_printf_i+0xa8>
 8008cc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cc6:	2b15      	cmp	r3, #21
 8008cc8:	d8f6      	bhi.n	8008cb8 <_printf_i+0x28>
 8008cca:	a101      	add	r1, pc, #4	; (adr r1, 8008cd0 <_printf_i+0x40>)
 8008ccc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008cd0:	08008d29 	.word	0x08008d29
 8008cd4:	08008d3d 	.word	0x08008d3d
 8008cd8:	08008cb9 	.word	0x08008cb9
 8008cdc:	08008cb9 	.word	0x08008cb9
 8008ce0:	08008cb9 	.word	0x08008cb9
 8008ce4:	08008cb9 	.word	0x08008cb9
 8008ce8:	08008d3d 	.word	0x08008d3d
 8008cec:	08008cb9 	.word	0x08008cb9
 8008cf0:	08008cb9 	.word	0x08008cb9
 8008cf4:	08008cb9 	.word	0x08008cb9
 8008cf8:	08008cb9 	.word	0x08008cb9
 8008cfc:	08008e41 	.word	0x08008e41
 8008d00:	08008d69 	.word	0x08008d69
 8008d04:	08008dfb 	.word	0x08008dfb
 8008d08:	08008cb9 	.word	0x08008cb9
 8008d0c:	08008cb9 	.word	0x08008cb9
 8008d10:	08008e63 	.word	0x08008e63
 8008d14:	08008cb9 	.word	0x08008cb9
 8008d18:	08008d69 	.word	0x08008d69
 8008d1c:	08008cb9 	.word	0x08008cb9
 8008d20:	08008cb9 	.word	0x08008cb9
 8008d24:	08008e03 	.word	0x08008e03
 8008d28:	682b      	ldr	r3, [r5, #0]
 8008d2a:	1d1a      	adds	r2, r3, #4
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	602a      	str	r2, [r5, #0]
 8008d30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e09f      	b.n	8008e7c <_printf_i+0x1ec>
 8008d3c:	6820      	ldr	r0, [r4, #0]
 8008d3e:	682b      	ldr	r3, [r5, #0]
 8008d40:	0607      	lsls	r7, r0, #24
 8008d42:	f103 0104 	add.w	r1, r3, #4
 8008d46:	6029      	str	r1, [r5, #0]
 8008d48:	d501      	bpl.n	8008d4e <_printf_i+0xbe>
 8008d4a:	681e      	ldr	r6, [r3, #0]
 8008d4c:	e003      	b.n	8008d56 <_printf_i+0xc6>
 8008d4e:	0646      	lsls	r6, r0, #25
 8008d50:	d5fb      	bpl.n	8008d4a <_printf_i+0xba>
 8008d52:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008d56:	2e00      	cmp	r6, #0
 8008d58:	da03      	bge.n	8008d62 <_printf_i+0xd2>
 8008d5a:	232d      	movs	r3, #45	; 0x2d
 8008d5c:	4276      	negs	r6, r6
 8008d5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d62:	485a      	ldr	r0, [pc, #360]	; (8008ecc <_printf_i+0x23c>)
 8008d64:	230a      	movs	r3, #10
 8008d66:	e012      	b.n	8008d8e <_printf_i+0xfe>
 8008d68:	682b      	ldr	r3, [r5, #0]
 8008d6a:	6820      	ldr	r0, [r4, #0]
 8008d6c:	1d19      	adds	r1, r3, #4
 8008d6e:	6029      	str	r1, [r5, #0]
 8008d70:	0605      	lsls	r5, r0, #24
 8008d72:	d501      	bpl.n	8008d78 <_printf_i+0xe8>
 8008d74:	681e      	ldr	r6, [r3, #0]
 8008d76:	e002      	b.n	8008d7e <_printf_i+0xee>
 8008d78:	0641      	lsls	r1, r0, #25
 8008d7a:	d5fb      	bpl.n	8008d74 <_printf_i+0xe4>
 8008d7c:	881e      	ldrh	r6, [r3, #0]
 8008d7e:	4853      	ldr	r0, [pc, #332]	; (8008ecc <_printf_i+0x23c>)
 8008d80:	2f6f      	cmp	r7, #111	; 0x6f
 8008d82:	bf0c      	ite	eq
 8008d84:	2308      	moveq	r3, #8
 8008d86:	230a      	movne	r3, #10
 8008d88:	2100      	movs	r1, #0
 8008d8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d8e:	6865      	ldr	r5, [r4, #4]
 8008d90:	60a5      	str	r5, [r4, #8]
 8008d92:	2d00      	cmp	r5, #0
 8008d94:	bfa2      	ittt	ge
 8008d96:	6821      	ldrge	r1, [r4, #0]
 8008d98:	f021 0104 	bicge.w	r1, r1, #4
 8008d9c:	6021      	strge	r1, [r4, #0]
 8008d9e:	b90e      	cbnz	r6, 8008da4 <_printf_i+0x114>
 8008da0:	2d00      	cmp	r5, #0
 8008da2:	d04b      	beq.n	8008e3c <_printf_i+0x1ac>
 8008da4:	4615      	mov	r5, r2
 8008da6:	fbb6 f1f3 	udiv	r1, r6, r3
 8008daa:	fb03 6711 	mls	r7, r3, r1, r6
 8008dae:	5dc7      	ldrb	r7, [r0, r7]
 8008db0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008db4:	4637      	mov	r7, r6
 8008db6:	42bb      	cmp	r3, r7
 8008db8:	460e      	mov	r6, r1
 8008dba:	d9f4      	bls.n	8008da6 <_printf_i+0x116>
 8008dbc:	2b08      	cmp	r3, #8
 8008dbe:	d10b      	bne.n	8008dd8 <_printf_i+0x148>
 8008dc0:	6823      	ldr	r3, [r4, #0]
 8008dc2:	07de      	lsls	r6, r3, #31
 8008dc4:	d508      	bpl.n	8008dd8 <_printf_i+0x148>
 8008dc6:	6923      	ldr	r3, [r4, #16]
 8008dc8:	6861      	ldr	r1, [r4, #4]
 8008dca:	4299      	cmp	r1, r3
 8008dcc:	bfde      	ittt	le
 8008dce:	2330      	movle	r3, #48	; 0x30
 8008dd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008dd4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008dd8:	1b52      	subs	r2, r2, r5
 8008dda:	6122      	str	r2, [r4, #16]
 8008ddc:	f8cd a000 	str.w	sl, [sp]
 8008de0:	464b      	mov	r3, r9
 8008de2:	aa03      	add	r2, sp, #12
 8008de4:	4621      	mov	r1, r4
 8008de6:	4640      	mov	r0, r8
 8008de8:	f7ff fee4 	bl	8008bb4 <_printf_common>
 8008dec:	3001      	adds	r0, #1
 8008dee:	d14a      	bne.n	8008e86 <_printf_i+0x1f6>
 8008df0:	f04f 30ff 	mov.w	r0, #4294967295
 8008df4:	b004      	add	sp, #16
 8008df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dfa:	6823      	ldr	r3, [r4, #0]
 8008dfc:	f043 0320 	orr.w	r3, r3, #32
 8008e00:	6023      	str	r3, [r4, #0]
 8008e02:	4833      	ldr	r0, [pc, #204]	; (8008ed0 <_printf_i+0x240>)
 8008e04:	2778      	movs	r7, #120	; 0x78
 8008e06:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e0a:	6823      	ldr	r3, [r4, #0]
 8008e0c:	6829      	ldr	r1, [r5, #0]
 8008e0e:	061f      	lsls	r7, r3, #24
 8008e10:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e14:	d402      	bmi.n	8008e1c <_printf_i+0x18c>
 8008e16:	065f      	lsls	r7, r3, #25
 8008e18:	bf48      	it	mi
 8008e1a:	b2b6      	uxthmi	r6, r6
 8008e1c:	07df      	lsls	r7, r3, #31
 8008e1e:	bf48      	it	mi
 8008e20:	f043 0320 	orrmi.w	r3, r3, #32
 8008e24:	6029      	str	r1, [r5, #0]
 8008e26:	bf48      	it	mi
 8008e28:	6023      	strmi	r3, [r4, #0]
 8008e2a:	b91e      	cbnz	r6, 8008e34 <_printf_i+0x1a4>
 8008e2c:	6823      	ldr	r3, [r4, #0]
 8008e2e:	f023 0320 	bic.w	r3, r3, #32
 8008e32:	6023      	str	r3, [r4, #0]
 8008e34:	2310      	movs	r3, #16
 8008e36:	e7a7      	b.n	8008d88 <_printf_i+0xf8>
 8008e38:	4824      	ldr	r0, [pc, #144]	; (8008ecc <_printf_i+0x23c>)
 8008e3a:	e7e4      	b.n	8008e06 <_printf_i+0x176>
 8008e3c:	4615      	mov	r5, r2
 8008e3e:	e7bd      	b.n	8008dbc <_printf_i+0x12c>
 8008e40:	682b      	ldr	r3, [r5, #0]
 8008e42:	6826      	ldr	r6, [r4, #0]
 8008e44:	6961      	ldr	r1, [r4, #20]
 8008e46:	1d18      	adds	r0, r3, #4
 8008e48:	6028      	str	r0, [r5, #0]
 8008e4a:	0635      	lsls	r5, r6, #24
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	d501      	bpl.n	8008e54 <_printf_i+0x1c4>
 8008e50:	6019      	str	r1, [r3, #0]
 8008e52:	e002      	b.n	8008e5a <_printf_i+0x1ca>
 8008e54:	0670      	lsls	r0, r6, #25
 8008e56:	d5fb      	bpl.n	8008e50 <_printf_i+0x1c0>
 8008e58:	8019      	strh	r1, [r3, #0]
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	6123      	str	r3, [r4, #16]
 8008e5e:	4615      	mov	r5, r2
 8008e60:	e7bc      	b.n	8008ddc <_printf_i+0x14c>
 8008e62:	682b      	ldr	r3, [r5, #0]
 8008e64:	1d1a      	adds	r2, r3, #4
 8008e66:	602a      	str	r2, [r5, #0]
 8008e68:	681d      	ldr	r5, [r3, #0]
 8008e6a:	6862      	ldr	r2, [r4, #4]
 8008e6c:	2100      	movs	r1, #0
 8008e6e:	4628      	mov	r0, r5
 8008e70:	f7f7 f9b6 	bl	80001e0 <memchr>
 8008e74:	b108      	cbz	r0, 8008e7a <_printf_i+0x1ea>
 8008e76:	1b40      	subs	r0, r0, r5
 8008e78:	6060      	str	r0, [r4, #4]
 8008e7a:	6863      	ldr	r3, [r4, #4]
 8008e7c:	6123      	str	r3, [r4, #16]
 8008e7e:	2300      	movs	r3, #0
 8008e80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e84:	e7aa      	b.n	8008ddc <_printf_i+0x14c>
 8008e86:	6923      	ldr	r3, [r4, #16]
 8008e88:	462a      	mov	r2, r5
 8008e8a:	4649      	mov	r1, r9
 8008e8c:	4640      	mov	r0, r8
 8008e8e:	47d0      	blx	sl
 8008e90:	3001      	adds	r0, #1
 8008e92:	d0ad      	beq.n	8008df0 <_printf_i+0x160>
 8008e94:	6823      	ldr	r3, [r4, #0]
 8008e96:	079b      	lsls	r3, r3, #30
 8008e98:	d413      	bmi.n	8008ec2 <_printf_i+0x232>
 8008e9a:	68e0      	ldr	r0, [r4, #12]
 8008e9c:	9b03      	ldr	r3, [sp, #12]
 8008e9e:	4298      	cmp	r0, r3
 8008ea0:	bfb8      	it	lt
 8008ea2:	4618      	movlt	r0, r3
 8008ea4:	e7a6      	b.n	8008df4 <_printf_i+0x164>
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	4632      	mov	r2, r6
 8008eaa:	4649      	mov	r1, r9
 8008eac:	4640      	mov	r0, r8
 8008eae:	47d0      	blx	sl
 8008eb0:	3001      	adds	r0, #1
 8008eb2:	d09d      	beq.n	8008df0 <_printf_i+0x160>
 8008eb4:	3501      	adds	r5, #1
 8008eb6:	68e3      	ldr	r3, [r4, #12]
 8008eb8:	9903      	ldr	r1, [sp, #12]
 8008eba:	1a5b      	subs	r3, r3, r1
 8008ebc:	42ab      	cmp	r3, r5
 8008ebe:	dcf2      	bgt.n	8008ea6 <_printf_i+0x216>
 8008ec0:	e7eb      	b.n	8008e9a <_printf_i+0x20a>
 8008ec2:	2500      	movs	r5, #0
 8008ec4:	f104 0619 	add.w	r6, r4, #25
 8008ec8:	e7f5      	b.n	8008eb6 <_printf_i+0x226>
 8008eca:	bf00      	nop
 8008ecc:	080095da 	.word	0x080095da
 8008ed0:	080095eb 	.word	0x080095eb

08008ed4 <__sflush_r>:
 8008ed4:	898a      	ldrh	r2, [r1, #12]
 8008ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eda:	4605      	mov	r5, r0
 8008edc:	0710      	lsls	r0, r2, #28
 8008ede:	460c      	mov	r4, r1
 8008ee0:	d458      	bmi.n	8008f94 <__sflush_r+0xc0>
 8008ee2:	684b      	ldr	r3, [r1, #4]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	dc05      	bgt.n	8008ef4 <__sflush_r+0x20>
 8008ee8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	dc02      	bgt.n	8008ef4 <__sflush_r+0x20>
 8008eee:	2000      	movs	r0, #0
 8008ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ef4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ef6:	2e00      	cmp	r6, #0
 8008ef8:	d0f9      	beq.n	8008eee <__sflush_r+0x1a>
 8008efa:	2300      	movs	r3, #0
 8008efc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f00:	682f      	ldr	r7, [r5, #0]
 8008f02:	6a21      	ldr	r1, [r4, #32]
 8008f04:	602b      	str	r3, [r5, #0]
 8008f06:	d032      	beq.n	8008f6e <__sflush_r+0x9a>
 8008f08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f0a:	89a3      	ldrh	r3, [r4, #12]
 8008f0c:	075a      	lsls	r2, r3, #29
 8008f0e:	d505      	bpl.n	8008f1c <__sflush_r+0x48>
 8008f10:	6863      	ldr	r3, [r4, #4]
 8008f12:	1ac0      	subs	r0, r0, r3
 8008f14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f16:	b10b      	cbz	r3, 8008f1c <__sflush_r+0x48>
 8008f18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f1a:	1ac0      	subs	r0, r0, r3
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	4602      	mov	r2, r0
 8008f20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f22:	6a21      	ldr	r1, [r4, #32]
 8008f24:	4628      	mov	r0, r5
 8008f26:	47b0      	blx	r6
 8008f28:	1c43      	adds	r3, r0, #1
 8008f2a:	89a3      	ldrh	r3, [r4, #12]
 8008f2c:	d106      	bne.n	8008f3c <__sflush_r+0x68>
 8008f2e:	6829      	ldr	r1, [r5, #0]
 8008f30:	291d      	cmp	r1, #29
 8008f32:	d82b      	bhi.n	8008f8c <__sflush_r+0xb8>
 8008f34:	4a29      	ldr	r2, [pc, #164]	; (8008fdc <__sflush_r+0x108>)
 8008f36:	410a      	asrs	r2, r1
 8008f38:	07d6      	lsls	r6, r2, #31
 8008f3a:	d427      	bmi.n	8008f8c <__sflush_r+0xb8>
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	6062      	str	r2, [r4, #4]
 8008f40:	04d9      	lsls	r1, r3, #19
 8008f42:	6922      	ldr	r2, [r4, #16]
 8008f44:	6022      	str	r2, [r4, #0]
 8008f46:	d504      	bpl.n	8008f52 <__sflush_r+0x7e>
 8008f48:	1c42      	adds	r2, r0, #1
 8008f4a:	d101      	bne.n	8008f50 <__sflush_r+0x7c>
 8008f4c:	682b      	ldr	r3, [r5, #0]
 8008f4e:	b903      	cbnz	r3, 8008f52 <__sflush_r+0x7e>
 8008f50:	6560      	str	r0, [r4, #84]	; 0x54
 8008f52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f54:	602f      	str	r7, [r5, #0]
 8008f56:	2900      	cmp	r1, #0
 8008f58:	d0c9      	beq.n	8008eee <__sflush_r+0x1a>
 8008f5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f5e:	4299      	cmp	r1, r3
 8008f60:	d002      	beq.n	8008f68 <__sflush_r+0x94>
 8008f62:	4628      	mov	r0, r5
 8008f64:	f7ff fa92 	bl	800848c <_free_r>
 8008f68:	2000      	movs	r0, #0
 8008f6a:	6360      	str	r0, [r4, #52]	; 0x34
 8008f6c:	e7c0      	b.n	8008ef0 <__sflush_r+0x1c>
 8008f6e:	2301      	movs	r3, #1
 8008f70:	4628      	mov	r0, r5
 8008f72:	47b0      	blx	r6
 8008f74:	1c41      	adds	r1, r0, #1
 8008f76:	d1c8      	bne.n	8008f0a <__sflush_r+0x36>
 8008f78:	682b      	ldr	r3, [r5, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d0c5      	beq.n	8008f0a <__sflush_r+0x36>
 8008f7e:	2b1d      	cmp	r3, #29
 8008f80:	d001      	beq.n	8008f86 <__sflush_r+0xb2>
 8008f82:	2b16      	cmp	r3, #22
 8008f84:	d101      	bne.n	8008f8a <__sflush_r+0xb6>
 8008f86:	602f      	str	r7, [r5, #0]
 8008f88:	e7b1      	b.n	8008eee <__sflush_r+0x1a>
 8008f8a:	89a3      	ldrh	r3, [r4, #12]
 8008f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f90:	81a3      	strh	r3, [r4, #12]
 8008f92:	e7ad      	b.n	8008ef0 <__sflush_r+0x1c>
 8008f94:	690f      	ldr	r7, [r1, #16]
 8008f96:	2f00      	cmp	r7, #0
 8008f98:	d0a9      	beq.n	8008eee <__sflush_r+0x1a>
 8008f9a:	0793      	lsls	r3, r2, #30
 8008f9c:	680e      	ldr	r6, [r1, #0]
 8008f9e:	bf08      	it	eq
 8008fa0:	694b      	ldreq	r3, [r1, #20]
 8008fa2:	600f      	str	r7, [r1, #0]
 8008fa4:	bf18      	it	ne
 8008fa6:	2300      	movne	r3, #0
 8008fa8:	eba6 0807 	sub.w	r8, r6, r7
 8008fac:	608b      	str	r3, [r1, #8]
 8008fae:	f1b8 0f00 	cmp.w	r8, #0
 8008fb2:	dd9c      	ble.n	8008eee <__sflush_r+0x1a>
 8008fb4:	6a21      	ldr	r1, [r4, #32]
 8008fb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008fb8:	4643      	mov	r3, r8
 8008fba:	463a      	mov	r2, r7
 8008fbc:	4628      	mov	r0, r5
 8008fbe:	47b0      	blx	r6
 8008fc0:	2800      	cmp	r0, #0
 8008fc2:	dc06      	bgt.n	8008fd2 <__sflush_r+0xfe>
 8008fc4:	89a3      	ldrh	r3, [r4, #12]
 8008fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fca:	81a3      	strh	r3, [r4, #12]
 8008fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd0:	e78e      	b.n	8008ef0 <__sflush_r+0x1c>
 8008fd2:	4407      	add	r7, r0
 8008fd4:	eba8 0800 	sub.w	r8, r8, r0
 8008fd8:	e7e9      	b.n	8008fae <__sflush_r+0xda>
 8008fda:	bf00      	nop
 8008fdc:	dfbffffe 	.word	0xdfbffffe

08008fe0 <_fflush_r>:
 8008fe0:	b538      	push	{r3, r4, r5, lr}
 8008fe2:	690b      	ldr	r3, [r1, #16]
 8008fe4:	4605      	mov	r5, r0
 8008fe6:	460c      	mov	r4, r1
 8008fe8:	b913      	cbnz	r3, 8008ff0 <_fflush_r+0x10>
 8008fea:	2500      	movs	r5, #0
 8008fec:	4628      	mov	r0, r5
 8008fee:	bd38      	pop	{r3, r4, r5, pc}
 8008ff0:	b118      	cbz	r0, 8008ffa <_fflush_r+0x1a>
 8008ff2:	6a03      	ldr	r3, [r0, #32]
 8008ff4:	b90b      	cbnz	r3, 8008ffa <_fflush_r+0x1a>
 8008ff6:	f7ff f8bd 	bl	8008174 <__sinit>
 8008ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d0f3      	beq.n	8008fea <_fflush_r+0xa>
 8009002:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009004:	07d0      	lsls	r0, r2, #31
 8009006:	d404      	bmi.n	8009012 <_fflush_r+0x32>
 8009008:	0599      	lsls	r1, r3, #22
 800900a:	d402      	bmi.n	8009012 <_fflush_r+0x32>
 800900c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800900e:	f7ff fa2c 	bl	800846a <__retarget_lock_acquire_recursive>
 8009012:	4628      	mov	r0, r5
 8009014:	4621      	mov	r1, r4
 8009016:	f7ff ff5d 	bl	8008ed4 <__sflush_r>
 800901a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800901c:	07da      	lsls	r2, r3, #31
 800901e:	4605      	mov	r5, r0
 8009020:	d4e4      	bmi.n	8008fec <_fflush_r+0xc>
 8009022:	89a3      	ldrh	r3, [r4, #12]
 8009024:	059b      	lsls	r3, r3, #22
 8009026:	d4e1      	bmi.n	8008fec <_fflush_r+0xc>
 8009028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800902a:	f7ff fa1f 	bl	800846c <__retarget_lock_release_recursive>
 800902e:	e7dd      	b.n	8008fec <_fflush_r+0xc>

08009030 <__swbuf_r>:
 8009030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009032:	460e      	mov	r6, r1
 8009034:	4614      	mov	r4, r2
 8009036:	4605      	mov	r5, r0
 8009038:	b118      	cbz	r0, 8009042 <__swbuf_r+0x12>
 800903a:	6a03      	ldr	r3, [r0, #32]
 800903c:	b90b      	cbnz	r3, 8009042 <__swbuf_r+0x12>
 800903e:	f7ff f899 	bl	8008174 <__sinit>
 8009042:	69a3      	ldr	r3, [r4, #24]
 8009044:	60a3      	str	r3, [r4, #8]
 8009046:	89a3      	ldrh	r3, [r4, #12]
 8009048:	071a      	lsls	r2, r3, #28
 800904a:	d525      	bpl.n	8009098 <__swbuf_r+0x68>
 800904c:	6923      	ldr	r3, [r4, #16]
 800904e:	b31b      	cbz	r3, 8009098 <__swbuf_r+0x68>
 8009050:	6823      	ldr	r3, [r4, #0]
 8009052:	6922      	ldr	r2, [r4, #16]
 8009054:	1a98      	subs	r0, r3, r2
 8009056:	6963      	ldr	r3, [r4, #20]
 8009058:	b2f6      	uxtb	r6, r6
 800905a:	4283      	cmp	r3, r0
 800905c:	4637      	mov	r7, r6
 800905e:	dc04      	bgt.n	800906a <__swbuf_r+0x3a>
 8009060:	4621      	mov	r1, r4
 8009062:	4628      	mov	r0, r5
 8009064:	f7ff ffbc 	bl	8008fe0 <_fflush_r>
 8009068:	b9e0      	cbnz	r0, 80090a4 <__swbuf_r+0x74>
 800906a:	68a3      	ldr	r3, [r4, #8]
 800906c:	3b01      	subs	r3, #1
 800906e:	60a3      	str	r3, [r4, #8]
 8009070:	6823      	ldr	r3, [r4, #0]
 8009072:	1c5a      	adds	r2, r3, #1
 8009074:	6022      	str	r2, [r4, #0]
 8009076:	701e      	strb	r6, [r3, #0]
 8009078:	6962      	ldr	r2, [r4, #20]
 800907a:	1c43      	adds	r3, r0, #1
 800907c:	429a      	cmp	r2, r3
 800907e:	d004      	beq.n	800908a <__swbuf_r+0x5a>
 8009080:	89a3      	ldrh	r3, [r4, #12]
 8009082:	07db      	lsls	r3, r3, #31
 8009084:	d506      	bpl.n	8009094 <__swbuf_r+0x64>
 8009086:	2e0a      	cmp	r6, #10
 8009088:	d104      	bne.n	8009094 <__swbuf_r+0x64>
 800908a:	4621      	mov	r1, r4
 800908c:	4628      	mov	r0, r5
 800908e:	f7ff ffa7 	bl	8008fe0 <_fflush_r>
 8009092:	b938      	cbnz	r0, 80090a4 <__swbuf_r+0x74>
 8009094:	4638      	mov	r0, r7
 8009096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009098:	4621      	mov	r1, r4
 800909a:	4628      	mov	r0, r5
 800909c:	f000 f806 	bl	80090ac <__swsetup_r>
 80090a0:	2800      	cmp	r0, #0
 80090a2:	d0d5      	beq.n	8009050 <__swbuf_r+0x20>
 80090a4:	f04f 37ff 	mov.w	r7, #4294967295
 80090a8:	e7f4      	b.n	8009094 <__swbuf_r+0x64>
	...

080090ac <__swsetup_r>:
 80090ac:	b538      	push	{r3, r4, r5, lr}
 80090ae:	4b2a      	ldr	r3, [pc, #168]	; (8009158 <__swsetup_r+0xac>)
 80090b0:	4605      	mov	r5, r0
 80090b2:	6818      	ldr	r0, [r3, #0]
 80090b4:	460c      	mov	r4, r1
 80090b6:	b118      	cbz	r0, 80090c0 <__swsetup_r+0x14>
 80090b8:	6a03      	ldr	r3, [r0, #32]
 80090ba:	b90b      	cbnz	r3, 80090c0 <__swsetup_r+0x14>
 80090bc:	f7ff f85a 	bl	8008174 <__sinit>
 80090c0:	89a3      	ldrh	r3, [r4, #12]
 80090c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090c6:	0718      	lsls	r0, r3, #28
 80090c8:	d422      	bmi.n	8009110 <__swsetup_r+0x64>
 80090ca:	06d9      	lsls	r1, r3, #27
 80090cc:	d407      	bmi.n	80090de <__swsetup_r+0x32>
 80090ce:	2309      	movs	r3, #9
 80090d0:	602b      	str	r3, [r5, #0]
 80090d2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80090d6:	81a3      	strh	r3, [r4, #12]
 80090d8:	f04f 30ff 	mov.w	r0, #4294967295
 80090dc:	e034      	b.n	8009148 <__swsetup_r+0x9c>
 80090de:	0758      	lsls	r0, r3, #29
 80090e0:	d512      	bpl.n	8009108 <__swsetup_r+0x5c>
 80090e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090e4:	b141      	cbz	r1, 80090f8 <__swsetup_r+0x4c>
 80090e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090ea:	4299      	cmp	r1, r3
 80090ec:	d002      	beq.n	80090f4 <__swsetup_r+0x48>
 80090ee:	4628      	mov	r0, r5
 80090f0:	f7ff f9cc 	bl	800848c <_free_r>
 80090f4:	2300      	movs	r3, #0
 80090f6:	6363      	str	r3, [r4, #52]	; 0x34
 80090f8:	89a3      	ldrh	r3, [r4, #12]
 80090fa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80090fe:	81a3      	strh	r3, [r4, #12]
 8009100:	2300      	movs	r3, #0
 8009102:	6063      	str	r3, [r4, #4]
 8009104:	6923      	ldr	r3, [r4, #16]
 8009106:	6023      	str	r3, [r4, #0]
 8009108:	89a3      	ldrh	r3, [r4, #12]
 800910a:	f043 0308 	orr.w	r3, r3, #8
 800910e:	81a3      	strh	r3, [r4, #12]
 8009110:	6923      	ldr	r3, [r4, #16]
 8009112:	b94b      	cbnz	r3, 8009128 <__swsetup_r+0x7c>
 8009114:	89a3      	ldrh	r3, [r4, #12]
 8009116:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800911a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800911e:	d003      	beq.n	8009128 <__swsetup_r+0x7c>
 8009120:	4621      	mov	r1, r4
 8009122:	4628      	mov	r0, r5
 8009124:	f000 f899 	bl	800925a <__smakebuf_r>
 8009128:	89a0      	ldrh	r0, [r4, #12]
 800912a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800912e:	f010 0301 	ands.w	r3, r0, #1
 8009132:	d00a      	beq.n	800914a <__swsetup_r+0x9e>
 8009134:	2300      	movs	r3, #0
 8009136:	60a3      	str	r3, [r4, #8]
 8009138:	6963      	ldr	r3, [r4, #20]
 800913a:	425b      	negs	r3, r3
 800913c:	61a3      	str	r3, [r4, #24]
 800913e:	6923      	ldr	r3, [r4, #16]
 8009140:	b943      	cbnz	r3, 8009154 <__swsetup_r+0xa8>
 8009142:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009146:	d1c4      	bne.n	80090d2 <__swsetup_r+0x26>
 8009148:	bd38      	pop	{r3, r4, r5, pc}
 800914a:	0781      	lsls	r1, r0, #30
 800914c:	bf58      	it	pl
 800914e:	6963      	ldrpl	r3, [r4, #20]
 8009150:	60a3      	str	r3, [r4, #8]
 8009152:	e7f4      	b.n	800913e <__swsetup_r+0x92>
 8009154:	2000      	movs	r0, #0
 8009156:	e7f7      	b.n	8009148 <__swsetup_r+0x9c>
 8009158:	20000068 	.word	0x20000068

0800915c <memmove>:
 800915c:	4288      	cmp	r0, r1
 800915e:	b510      	push	{r4, lr}
 8009160:	eb01 0402 	add.w	r4, r1, r2
 8009164:	d902      	bls.n	800916c <memmove+0x10>
 8009166:	4284      	cmp	r4, r0
 8009168:	4623      	mov	r3, r4
 800916a:	d807      	bhi.n	800917c <memmove+0x20>
 800916c:	1e43      	subs	r3, r0, #1
 800916e:	42a1      	cmp	r1, r4
 8009170:	d008      	beq.n	8009184 <memmove+0x28>
 8009172:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009176:	f803 2f01 	strb.w	r2, [r3, #1]!
 800917a:	e7f8      	b.n	800916e <memmove+0x12>
 800917c:	4402      	add	r2, r0
 800917e:	4601      	mov	r1, r0
 8009180:	428a      	cmp	r2, r1
 8009182:	d100      	bne.n	8009186 <memmove+0x2a>
 8009184:	bd10      	pop	{r4, pc}
 8009186:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800918a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800918e:	e7f7      	b.n	8009180 <memmove+0x24>

08009190 <_sbrk_r>:
 8009190:	b538      	push	{r3, r4, r5, lr}
 8009192:	4d06      	ldr	r5, [pc, #24]	; (80091ac <_sbrk_r+0x1c>)
 8009194:	2300      	movs	r3, #0
 8009196:	4604      	mov	r4, r0
 8009198:	4608      	mov	r0, r1
 800919a:	602b      	str	r3, [r5, #0]
 800919c:	f7f8 fd40 	bl	8001c20 <_sbrk>
 80091a0:	1c43      	adds	r3, r0, #1
 80091a2:	d102      	bne.n	80091aa <_sbrk_r+0x1a>
 80091a4:	682b      	ldr	r3, [r5, #0]
 80091a6:	b103      	cbz	r3, 80091aa <_sbrk_r+0x1a>
 80091a8:	6023      	str	r3, [r4, #0]
 80091aa:	bd38      	pop	{r3, r4, r5, pc}
 80091ac:	20004564 	.word	0x20004564

080091b0 <_realloc_r>:
 80091b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091b4:	4680      	mov	r8, r0
 80091b6:	4614      	mov	r4, r2
 80091b8:	460e      	mov	r6, r1
 80091ba:	b921      	cbnz	r1, 80091c6 <_realloc_r+0x16>
 80091bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091c0:	4611      	mov	r1, r2
 80091c2:	f7ff b9cf 	b.w	8008564 <_malloc_r>
 80091c6:	b92a      	cbnz	r2, 80091d4 <_realloc_r+0x24>
 80091c8:	f7ff f960 	bl	800848c <_free_r>
 80091cc:	4625      	mov	r5, r4
 80091ce:	4628      	mov	r0, r5
 80091d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091d4:	f000 f8a0 	bl	8009318 <_malloc_usable_size_r>
 80091d8:	4284      	cmp	r4, r0
 80091da:	4607      	mov	r7, r0
 80091dc:	d802      	bhi.n	80091e4 <_realloc_r+0x34>
 80091de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80091e2:	d812      	bhi.n	800920a <_realloc_r+0x5a>
 80091e4:	4621      	mov	r1, r4
 80091e6:	4640      	mov	r0, r8
 80091e8:	f7ff f9bc 	bl	8008564 <_malloc_r>
 80091ec:	4605      	mov	r5, r0
 80091ee:	2800      	cmp	r0, #0
 80091f0:	d0ed      	beq.n	80091ce <_realloc_r+0x1e>
 80091f2:	42bc      	cmp	r4, r7
 80091f4:	4622      	mov	r2, r4
 80091f6:	4631      	mov	r1, r6
 80091f8:	bf28      	it	cs
 80091fa:	463a      	movcs	r2, r7
 80091fc:	f7ff f937 	bl	800846e <memcpy>
 8009200:	4631      	mov	r1, r6
 8009202:	4640      	mov	r0, r8
 8009204:	f7ff f942 	bl	800848c <_free_r>
 8009208:	e7e1      	b.n	80091ce <_realloc_r+0x1e>
 800920a:	4635      	mov	r5, r6
 800920c:	e7df      	b.n	80091ce <_realloc_r+0x1e>

0800920e <__swhatbuf_r>:
 800920e:	b570      	push	{r4, r5, r6, lr}
 8009210:	460c      	mov	r4, r1
 8009212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009216:	2900      	cmp	r1, #0
 8009218:	b096      	sub	sp, #88	; 0x58
 800921a:	4615      	mov	r5, r2
 800921c:	461e      	mov	r6, r3
 800921e:	da0d      	bge.n	800923c <__swhatbuf_r+0x2e>
 8009220:	89a3      	ldrh	r3, [r4, #12]
 8009222:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009226:	f04f 0100 	mov.w	r1, #0
 800922a:	bf0c      	ite	eq
 800922c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009230:	2340      	movne	r3, #64	; 0x40
 8009232:	2000      	movs	r0, #0
 8009234:	6031      	str	r1, [r6, #0]
 8009236:	602b      	str	r3, [r5, #0]
 8009238:	b016      	add	sp, #88	; 0x58
 800923a:	bd70      	pop	{r4, r5, r6, pc}
 800923c:	466a      	mov	r2, sp
 800923e:	f000 f849 	bl	80092d4 <_fstat_r>
 8009242:	2800      	cmp	r0, #0
 8009244:	dbec      	blt.n	8009220 <__swhatbuf_r+0x12>
 8009246:	9901      	ldr	r1, [sp, #4]
 8009248:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800924c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009250:	4259      	negs	r1, r3
 8009252:	4159      	adcs	r1, r3
 8009254:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009258:	e7eb      	b.n	8009232 <__swhatbuf_r+0x24>

0800925a <__smakebuf_r>:
 800925a:	898b      	ldrh	r3, [r1, #12]
 800925c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800925e:	079d      	lsls	r5, r3, #30
 8009260:	4606      	mov	r6, r0
 8009262:	460c      	mov	r4, r1
 8009264:	d507      	bpl.n	8009276 <__smakebuf_r+0x1c>
 8009266:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800926a:	6023      	str	r3, [r4, #0]
 800926c:	6123      	str	r3, [r4, #16]
 800926e:	2301      	movs	r3, #1
 8009270:	6163      	str	r3, [r4, #20]
 8009272:	b002      	add	sp, #8
 8009274:	bd70      	pop	{r4, r5, r6, pc}
 8009276:	ab01      	add	r3, sp, #4
 8009278:	466a      	mov	r2, sp
 800927a:	f7ff ffc8 	bl	800920e <__swhatbuf_r>
 800927e:	9900      	ldr	r1, [sp, #0]
 8009280:	4605      	mov	r5, r0
 8009282:	4630      	mov	r0, r6
 8009284:	f7ff f96e 	bl	8008564 <_malloc_r>
 8009288:	b948      	cbnz	r0, 800929e <__smakebuf_r+0x44>
 800928a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800928e:	059a      	lsls	r2, r3, #22
 8009290:	d4ef      	bmi.n	8009272 <__smakebuf_r+0x18>
 8009292:	f023 0303 	bic.w	r3, r3, #3
 8009296:	f043 0302 	orr.w	r3, r3, #2
 800929a:	81a3      	strh	r3, [r4, #12]
 800929c:	e7e3      	b.n	8009266 <__smakebuf_r+0xc>
 800929e:	89a3      	ldrh	r3, [r4, #12]
 80092a0:	6020      	str	r0, [r4, #0]
 80092a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092a6:	81a3      	strh	r3, [r4, #12]
 80092a8:	9b00      	ldr	r3, [sp, #0]
 80092aa:	6163      	str	r3, [r4, #20]
 80092ac:	9b01      	ldr	r3, [sp, #4]
 80092ae:	6120      	str	r0, [r4, #16]
 80092b0:	b15b      	cbz	r3, 80092ca <__smakebuf_r+0x70>
 80092b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092b6:	4630      	mov	r0, r6
 80092b8:	f000 f81e 	bl	80092f8 <_isatty_r>
 80092bc:	b128      	cbz	r0, 80092ca <__smakebuf_r+0x70>
 80092be:	89a3      	ldrh	r3, [r4, #12]
 80092c0:	f023 0303 	bic.w	r3, r3, #3
 80092c4:	f043 0301 	orr.w	r3, r3, #1
 80092c8:	81a3      	strh	r3, [r4, #12]
 80092ca:	89a3      	ldrh	r3, [r4, #12]
 80092cc:	431d      	orrs	r5, r3
 80092ce:	81a5      	strh	r5, [r4, #12]
 80092d0:	e7cf      	b.n	8009272 <__smakebuf_r+0x18>
	...

080092d4 <_fstat_r>:
 80092d4:	b538      	push	{r3, r4, r5, lr}
 80092d6:	4d07      	ldr	r5, [pc, #28]	; (80092f4 <_fstat_r+0x20>)
 80092d8:	2300      	movs	r3, #0
 80092da:	4604      	mov	r4, r0
 80092dc:	4608      	mov	r0, r1
 80092de:	4611      	mov	r1, r2
 80092e0:	602b      	str	r3, [r5, #0]
 80092e2:	f7f8 fc74 	bl	8001bce <_fstat>
 80092e6:	1c43      	adds	r3, r0, #1
 80092e8:	d102      	bne.n	80092f0 <_fstat_r+0x1c>
 80092ea:	682b      	ldr	r3, [r5, #0]
 80092ec:	b103      	cbz	r3, 80092f0 <_fstat_r+0x1c>
 80092ee:	6023      	str	r3, [r4, #0]
 80092f0:	bd38      	pop	{r3, r4, r5, pc}
 80092f2:	bf00      	nop
 80092f4:	20004564 	.word	0x20004564

080092f8 <_isatty_r>:
 80092f8:	b538      	push	{r3, r4, r5, lr}
 80092fa:	4d06      	ldr	r5, [pc, #24]	; (8009314 <_isatty_r+0x1c>)
 80092fc:	2300      	movs	r3, #0
 80092fe:	4604      	mov	r4, r0
 8009300:	4608      	mov	r0, r1
 8009302:	602b      	str	r3, [r5, #0]
 8009304:	f7f8 fc73 	bl	8001bee <_isatty>
 8009308:	1c43      	adds	r3, r0, #1
 800930a:	d102      	bne.n	8009312 <_isatty_r+0x1a>
 800930c:	682b      	ldr	r3, [r5, #0]
 800930e:	b103      	cbz	r3, 8009312 <_isatty_r+0x1a>
 8009310:	6023      	str	r3, [r4, #0]
 8009312:	bd38      	pop	{r3, r4, r5, pc}
 8009314:	20004564 	.word	0x20004564

08009318 <_malloc_usable_size_r>:
 8009318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800931c:	1f18      	subs	r0, r3, #4
 800931e:	2b00      	cmp	r3, #0
 8009320:	bfbc      	itt	lt
 8009322:	580b      	ldrlt	r3, [r1, r0]
 8009324:	18c0      	addlt	r0, r0, r3
 8009326:	4770      	bx	lr

08009328 <_init>:
 8009328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800932a:	bf00      	nop
 800932c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800932e:	bc08      	pop	{r3}
 8009330:	469e      	mov	lr, r3
 8009332:	4770      	bx	lr

08009334 <_fini>:
 8009334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009336:	bf00      	nop
 8009338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800933a:	bc08      	pop	{r3}
 800933c:	469e      	mov	lr, r3
 800933e:	4770      	bx	lr
