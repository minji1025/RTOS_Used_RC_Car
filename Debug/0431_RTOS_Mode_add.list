
0431_RTOS_Mode_add.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007738  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  080078d8  080078d8  000178d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b4c  08007b4c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08007b4c  08007b4c  00017b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b54  08007b54  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b54  08007b54  00017b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b58  08007b58  00017b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004428  20000060  08007bbc  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004488  08007bbc  00024488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019666  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000400b  00000000  00000000  00039739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001728  00000000  00000000  0003d748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011e3  00000000  00000000  0003ee70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005993  00000000  00000000  00040053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001da6c  00000000  00000000  000459e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a1f6  00000000  00000000  00063452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000644c  00000000  00000000  000fd648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00103a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080078c0 	.word	0x080078c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080078c0 	.word	0x080078c0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <Que_init>:
 *      Author: kccistc
 */
#include "Queue.h"

void Que_init(Que_t *Que)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	Que->head = 0;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2200      	movs	r2, #0
 8000588:	669a      	str	r2, [r3, #104]	; 0x68
	Que->tail = 0;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2200      	movs	r2, #0
 800058e:	665a      	str	r2, [r3, #100]	; 0x64
	Que->QueCounter = 0;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2200      	movs	r2, #0
 8000594:	66da      	str	r2, [r3, #108]	; 0x6c
	Que->cmpltFlag = 0;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2200      	movs	r2, #0
 800059a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <setQueFlag>:

void setQueFlag(Que_t *Que, int flagState){
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
	Que->cmpltFlag = flagState;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	683a      	ldr	r2, [r7, #0]
 80005b6:	671a      	str	r2, [r3, #112]	; 0x70
}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <getQueFlag>:

int getQueFlag(Que_t *Que){
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	return Que->cmpltFlag;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <QueFull>:


int QueFull(Que_t *Que)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	//if(head == ((tail+1) % BUF_SIZE))
	if(Que->QueCounter == BUF_SIZE)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80005e8:	2b64      	cmp	r3, #100	; 0x64
 80005ea:	d101      	bne.n	80005f0 <QueFull+0x14>
		return 1;
 80005ec:	2301      	movs	r3, #1
 80005ee:	e000      	b.n	80005f2 <QueFull+0x16>
	else
		return 0;
 80005f0:	2300      	movs	r3, #0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <QueEmpty>:
int QueEmpty(Que_t *Que)
{
 80005fe:	b480      	push	{r7}
 8000600:	b083      	sub	sp, #12
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
	//if(head == tail)
	if(Que->QueCounter == 0)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800060a:	2b00      	cmp	r3, #0
 800060c:	d101      	bne.n	8000612 <QueEmpty+0x14>
		return 1;
 800060e:	2301      	movs	r3, #1
 8000610:	e000      	b.n	8000614 <QueEmpty+0x16>
	else
		return 0;
 8000612:	2300      	movs	r3, #0
}
 8000614:	4618      	mov	r0, r3
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr

08000620 <enQue>:

void enQue(Que_t *Que, uint8_t data)			// push(write)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	460b      	mov	r3, r1
 800062a:	70fb      	strb	r3, [r7, #3]
	if(QueFull(Que)) return;
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f7ff ffd5 	bl	80005dc <QueFull>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d119      	bne.n	800066c <enQue+0x4c>

	Que->QueBuff[Que->tail] = data;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	78f9      	ldrb	r1, [r7, #3]
 8000640:	54d1      	strb	r1, [r2, r3]
	Que->tail = (Que->tail+1) % BUF_SIZE;			// tail : 0~3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000646:	1c5a      	adds	r2, r3, #1
 8000648:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <enQue+0x54>)
 800064a:	fb83 1302 	smull	r1, r3, r3, r2
 800064e:	1159      	asrs	r1, r3, #5
 8000650:	17d3      	asrs	r3, r2, #31
 8000652:	1acb      	subs	r3, r1, r3
 8000654:	2164      	movs	r1, #100	; 0x64
 8000656:	fb01 f303 	mul.w	r3, r1, r3
 800065a:	1ad3      	subs	r3, r2, r3
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	6653      	str	r3, [r2, #100]	; 0x64
	Que->QueCounter++;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000664:	1c5a      	adds	r2, r3, #1
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	66da      	str	r2, [r3, #108]	; 0x6c
 800066a:	e000      	b.n	800066e <enQue+0x4e>
	if(QueFull(Que)) return;
 800066c:	bf00      	nop
}
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	51eb851f 	.word	0x51eb851f

08000678 <deQue>:

uint8_t deQue(Que_t *Que)			// pop(read)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	if(QueEmpty(Que)) return -1;
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f7ff ffbc 	bl	80005fe <QueEmpty>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <deQue+0x18>
 800068c:	23ff      	movs	r3, #255	; 0xff
 800068e:	e019      	b.n	80006c4 <deQue+0x4c>

	uint8_t temp = Que->QueBuff[Que->head];
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	5cd3      	ldrb	r3, [r2, r3]
 8000698:	73fb      	strb	r3, [r7, #15]
	Que->head = (Que->head+1) % BUF_SIZE;			// head : 0~3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800069e:	1c5a      	adds	r2, r3, #1
 80006a0:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <deQue+0x54>)
 80006a2:	fb83 1302 	smull	r1, r3, r3, r2
 80006a6:	1159      	asrs	r1, r3, #5
 80006a8:	17d3      	asrs	r3, r2, #31
 80006aa:	1acb      	subs	r3, r1, r3
 80006ac:	2164      	movs	r1, #100	; 0x64
 80006ae:	fb01 f303 	mul.w	r3, r1, r3
 80006b2:	1ad3      	subs	r3, r2, r3
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	6693      	str	r3, [r2, #104]	; 0x68
	Que->QueCounter--;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80006bc:	1e5a      	subs	r2, r3, #1
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	66da      	str	r2, [r3, #108]	; 0x6c

	return temp;
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	51eb851f 	.word	0x51eb851f

080006d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	4a07      	ldr	r2, [pc, #28]	; (80006fc <vApplicationGetIdleTaskMemory+0x2c>)
 80006e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	4a06      	ldr	r2, [pc, #24]	; (8000700 <vApplicationGetIdleTaskMemory+0x30>)
 80006e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2280      	movs	r2, #128	; 0x80
 80006ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006ee:	bf00      	nop
 80006f0:	3714      	adds	r7, #20
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	2000007c 	.word	0x2000007c
 8000700:	2000011c 	.word	0x2000011c

08000704 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t uart1RxData,uart2RxData;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a15      	ldr	r2, [pc, #84]	; (8000768 <HAL_UART_RxCpltCallback+0x64>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d10f      	bne.n	8000736 <HAL_UART_RxCpltCallback+0x32>
		Listener_ISR_Process(uart1RxData);
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <HAL_UART_RxCpltCallback+0x68>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	4618      	mov	r0, r3
 800071c:	f000 fe7a 	bl	8001414 <Listener_ISR_Process>
		HAL_UART_Transmit(&huart1, &uart1RxData, 1, 100);
 8000720:	2364      	movs	r3, #100	; 0x64
 8000722:	2201      	movs	r2, #1
 8000724:	4911      	ldr	r1, [pc, #68]	; (800076c <HAL_UART_RxCpltCallback+0x68>)
 8000726:	4812      	ldr	r0, [pc, #72]	; (8000770 <HAL_UART_RxCpltCallback+0x6c>)
 8000728:	f004 f8c2 	bl	80048b0 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart1, &uart1RxData, 1);
 800072c:	2201      	movs	r2, #1
 800072e:	490f      	ldr	r1, [pc, #60]	; (800076c <HAL_UART_RxCpltCallback+0x68>)
 8000730:	480f      	ldr	r0, [pc, #60]	; (8000770 <HAL_UART_RxCpltCallback+0x6c>)
 8000732:	f004 f948 	bl	80049c6 <HAL_UART_Receive_IT>
	}
	if (huart->Instance == USART2) {
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a0e      	ldr	r2, [pc, #56]	; (8000774 <HAL_UART_RxCpltCallback+0x70>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d10f      	bne.n	8000760 <HAL_UART_RxCpltCallback+0x5c>
		Listener_ISR_Process(uart2RxData);
 8000740:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <HAL_UART_RxCpltCallback+0x74>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	4618      	mov	r0, r3
 8000746:	f000 fe65 	bl	8001414 <Listener_ISR_Process>
		HAL_UART_Transmit(&huart2, &uart2RxData, 1, 100);
 800074a:	2364      	movs	r3, #100	; 0x64
 800074c:	2201      	movs	r2, #1
 800074e:	490a      	ldr	r1, [pc, #40]	; (8000778 <HAL_UART_RxCpltCallback+0x74>)
 8000750:	480a      	ldr	r0, [pc, #40]	; (800077c <HAL_UART_RxCpltCallback+0x78>)
 8000752:	f004 f8ad 	bl	80048b0 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &uart2RxData, 1);
 8000756:	2201      	movs	r2, #1
 8000758:	4907      	ldr	r1, [pc, #28]	; (8000778 <HAL_UART_RxCpltCallback+0x74>)
 800075a:	4808      	ldr	r0, [pc, #32]	; (800077c <HAL_UART_RxCpltCallback+0x78>)
 800075c:	f004 f933 	bl	80049c6 <HAL_UART_Receive_IT>
	}
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40011000 	.word	0x40011000
 800076c:	20000458 	.word	0x20000458
 8000770:	200003b8 	.word	0x200003b8
 8000774:	40004400 	.word	0x40004400
 8000778:	20000459 	.word	0x20000459
 800077c:	20000400 	.word	0x20000400

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b5b0      	push	{r4, r5, r7, lr}
 8000782:	b09c      	sub	sp, #112	; 0x70
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000786:	f001 fb15 	bl	8001db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078a:	f000 f87f 	bl	800088c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078e:	f000 f9e9 	bl	8000b64 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000792:	f000 f9bd 	bl	8000b10 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000796:	f000 f8e1 	bl	800095c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800079a:	f000 f98f 	bl	8000abc <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800079e:	f000 f90b 	bl	80009b8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	LCD_init(&hi2c1);
 80007a2:	482d      	ldr	r0, [pc, #180]	; (8000858 <main+0xd8>)
 80007a4:	f001 f8d4 	bl	8001950 <LCD_init>
	HAL_UART_Receive_IT(&huart2, &uart2RxData, 1);
 80007a8:	2201      	movs	r2, #1
 80007aa:	492c      	ldr	r1, [pc, #176]	; (800085c <main+0xdc>)
 80007ac:	482c      	ldr	r0, [pc, #176]	; (8000860 <main+0xe0>)
 80007ae:	f004 f90a 	bl	80049c6 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart1, &uart1RxData, 1);
 80007b2:	2201      	movs	r2, #1
 80007b4:	492b      	ldr	r1, [pc, #172]	; (8000864 <main+0xe4>)
 80007b6:	482c      	ldr	r0, [pc, #176]	; (8000868 <main+0xe8>)
 80007b8:	f004 f905 	bl	80049c6 <HAL_UART_Receive_IT>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80007bc:	4b2b      	ldr	r3, [pc, #172]	; (800086c <main+0xec>)
 80007be:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80007c2:	461d      	mov	r5, r3
 80007c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f005 f88f 	bl	80058fa <osThreadCreate>
 80007dc:	4603      	mov	r3, r0
 80007de:	4a24      	ldr	r2, [pc, #144]	; (8000870 <main+0xf0>)
 80007e0:	6013      	str	r3, [r2, #0]

  /* definition and creation of listenerTask */
  osThreadDef(listenerTask, ListenerTask, osPriorityNormal, 0, 128);
 80007e2:	4b24      	ldr	r3, [pc, #144]	; (8000874 <main+0xf4>)
 80007e4:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80007e8:	461d      	mov	r5, r3
 80007ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  listenerTaskHandle = osThreadCreate(osThread(listenerTask), NULL);
 80007f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007fa:	2100      	movs	r1, #0
 80007fc:	4618      	mov	r0, r3
 80007fe:	f005 f87c 	bl	80058fa <osThreadCreate>
 8000802:	4603      	mov	r3, r0
 8000804:	4a1c      	ldr	r2, [pc, #112]	; (8000878 <main+0xf8>)
 8000806:	6013      	str	r3, [r2, #0]

  /* definition and creation of controllerTask */
  osThreadDef(controllerTask, ControllerTask, osPriorityNormal, 0, 128);
 8000808:	4b1c      	ldr	r3, [pc, #112]	; (800087c <main+0xfc>)
 800080a:	f107 041c 	add.w	r4, r7, #28
 800080e:	461d      	mov	r5, r3
 8000810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000814:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000818:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controllerTaskHandle = osThreadCreate(osThread(controllerTask), NULL);
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f005 f869 	bl	80058fa <osThreadCreate>
 8000828:	4603      	mov	r3, r0
 800082a:	4a15      	ldr	r2, [pc, #84]	; (8000880 <main+0x100>)
 800082c:	6013      	str	r3, [r2, #0]

  /* definition and creation of presenterTask */
  osThreadDef(presenterTask, PresenterTask, osPriorityNormal, 0, 128);
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <main+0x104>)
 8000830:	463c      	mov	r4, r7
 8000832:	461d      	mov	r5, r3
 8000834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000838:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800083c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  presenterTaskHandle = osThreadCreate(osThread(presenterTask), NULL);
 8000840:	463b      	mov	r3, r7
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f005 f858 	bl	80058fa <osThreadCreate>
 800084a:	4603      	mov	r3, r0
 800084c:	4a0e      	ldr	r2, [pc, #56]	; (8000888 <main+0x108>)
 800084e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000850:	f005 f84c 	bl	80058ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000854:	e7fe      	b.n	8000854 <main+0xd4>
 8000856:	bf00      	nop
 8000858:	2000031c 	.word	0x2000031c
 800085c:	20000459 	.word	0x20000459
 8000860:	20000400 	.word	0x20000400
 8000864:	20000458 	.word	0x20000458
 8000868:	200003b8 	.word	0x200003b8
 800086c:	080078e4 	.word	0x080078e4
 8000870:	20000448 	.word	0x20000448
 8000874:	08007910 	.word	0x08007910
 8000878:	2000044c 	.word	0x2000044c
 800087c:	0800793c 	.word	0x0800793c
 8000880:	20000450 	.word	0x20000450
 8000884:	08007968 	.word	0x08007968
 8000888:	20000454 	.word	0x20000454

0800088c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b094      	sub	sp, #80	; 0x50
 8000890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000892:	f107 0320 	add.w	r3, r7, #32
 8000896:	2230      	movs	r2, #48	; 0x30
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f006 fb36 	bl	8006f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b0:	2300      	movs	r3, #0
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	4b27      	ldr	r3, [pc, #156]	; (8000954 <SystemClock_Config+0xc8>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b8:	4a26      	ldr	r2, [pc, #152]	; (8000954 <SystemClock_Config+0xc8>)
 80008ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008be:	6413      	str	r3, [r2, #64]	; 0x40
 80008c0:	4b24      	ldr	r3, [pc, #144]	; (8000954 <SystemClock_Config+0xc8>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008cc:	2300      	movs	r3, #0
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	4b21      	ldr	r3, [pc, #132]	; (8000958 <SystemClock_Config+0xcc>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a20      	ldr	r2, [pc, #128]	; (8000958 <SystemClock_Config+0xcc>)
 80008d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008da:	6013      	str	r3, [r2, #0]
 80008dc:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <SystemClock_Config+0xcc>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e8:	2301      	movs	r3, #1
 80008ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f2:	2302      	movs	r3, #2
 80008f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008fc:	2304      	movs	r3, #4
 80008fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000900:	2364      	movs	r3, #100	; 0x64
 8000902:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000904:	2302      	movs	r3, #2
 8000906:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000908:	2304      	movs	r3, #4
 800090a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090c:	f107 0320 	add.w	r3, r7, #32
 8000910:	4618      	mov	r0, r3
 8000912:	f002 fa97 	bl	8002e44 <HAL_RCC_OscConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800091c:	f000 fa02 	bl	8000d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000920:	230f      	movs	r3, #15
 8000922:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000924:	2302      	movs	r3, #2
 8000926:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800092c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000930:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000936:	f107 030c 	add.w	r3, r7, #12
 800093a:	2103      	movs	r1, #3
 800093c:	4618      	mov	r0, r3
 800093e:	f002 fcf9 	bl	8003334 <HAL_RCC_ClockConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000948:	f000 f9ec 	bl	8000d24 <Error_Handler>
  }
}
 800094c:	bf00      	nop
 800094e:	3750      	adds	r7, #80	; 0x50
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40023800 	.word	0x40023800
 8000958:	40007000 	.word	0x40007000

0800095c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <MX_I2C1_Init+0x50>)
 8000962:	4a13      	ldr	r2, [pc, #76]	; (80009b0 <MX_I2C1_Init+0x54>)
 8000964:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <MX_I2C1_Init+0x50>)
 8000968:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <MX_I2C1_Init+0x58>)
 800096a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <MX_I2C1_Init+0x50>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_I2C1_Init+0x50>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_I2C1_Init+0x50>)
 800097a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800097e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000980:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <MX_I2C1_Init+0x50>)
 8000982:	2200      	movs	r2, #0
 8000984:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_I2C1_Init+0x50>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800098c:	4b07      	ldr	r3, [pc, #28]	; (80009ac <MX_I2C1_Init+0x50>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <MX_I2C1_Init+0x50>)
 8000994:	2200      	movs	r2, #0
 8000996:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <MX_I2C1_Init+0x50>)
 800099a:	f001 fdb5 	bl	8002508 <HAL_I2C_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009a4:	f000 f9be 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	2000031c 	.word	0x2000031c
 80009b0:	40005400 	.word	0x40005400
 80009b4:	000186a0 	.word	0x000186a0

080009b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08e      	sub	sp, #56	; 0x38
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009cc:	f107 0320 	add.w	r3, r7, #32
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
 80009e4:	615a      	str	r2, [r3, #20]
 80009e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009e8:	4b32      	ldr	r3, [pc, #200]	; (8000ab4 <MX_TIM3_Init+0xfc>)
 80009ea:	4a33      	ldr	r2, [pc, #204]	; (8000ab8 <MX_TIM3_Init+0x100>)
 80009ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 80009ee:	4b31      	ldr	r3, [pc, #196]	; (8000ab4 <MX_TIM3_Init+0xfc>)
 80009f0:	2263      	movs	r2, #99	; 0x63
 80009f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f4:	4b2f      	ldr	r3, [pc, #188]	; (8000ab4 <MX_TIM3_Init+0xfc>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80009fa:	4b2e      	ldr	r3, [pc, #184]	; (8000ab4 <MX_TIM3_Init+0xfc>)
 80009fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a02:	4b2c      	ldr	r3, [pc, #176]	; (8000ab4 <MX_TIM3_Init+0xfc>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a08:	4b2a      	ldr	r3, [pc, #168]	; (8000ab4 <MX_TIM3_Init+0xfc>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a0e:	4829      	ldr	r0, [pc, #164]	; (8000ab4 <MX_TIM3_Init+0xfc>)
 8000a10:	f002 fee2 	bl	80037d8 <HAL_TIM_Base_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000a1a:	f000 f983 	bl	8000d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a22:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4822      	ldr	r0, [pc, #136]	; (8000ab4 <MX_TIM3_Init+0xfc>)
 8000a2c:	f003 faa6 	bl	8003f7c <HAL_TIM_ConfigClockSource>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000a36:	f000 f975 	bl	8000d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a3a:	481e      	ldr	r0, [pc, #120]	; (8000ab4 <MX_TIM3_Init+0xfc>)
 8000a3c:	f002 ff7e 	bl	800393c <HAL_TIM_PWM_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000a46:	f000 f96d 	bl	8000d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a52:	f107 0320 	add.w	r3, r7, #32
 8000a56:	4619      	mov	r1, r3
 8000a58:	4816      	ldr	r0, [pc, #88]	; (8000ab4 <MX_TIM3_Init+0xfc>)
 8000a5a:	f003 fe57 	bl	800470c <HAL_TIMEx_MasterConfigSynchronization>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000a64:	f000 f95e 	bl	8000d24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a68:	2360      	movs	r3, #96	; 0x60
 8000a6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <MX_TIM3_Init+0xfc>)
 8000a80:	f003 f9ba 	bl	8003df8 <HAL_TIM_PWM_ConfigChannel>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000a8a:	f000 f94b 	bl	8000d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2204      	movs	r2, #4
 8000a92:	4619      	mov	r1, r3
 8000a94:	4807      	ldr	r0, [pc, #28]	; (8000ab4 <MX_TIM3_Init+0xfc>)
 8000a96:	f003 f9af 	bl	8003df8 <HAL_TIM_PWM_ConfigChannel>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000aa0:	f000 f940 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000aa4:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <MX_TIM3_Init+0xfc>)
 8000aa6:	f000 f9d9 	bl	8000e5c <HAL_TIM_MspPostInit>

}
 8000aaa:	bf00      	nop
 8000aac:	3738      	adds	r7, #56	; 0x38
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000370 	.word	0x20000370
 8000ab8:	40000400 	.word	0x40000400

08000abc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000ac2:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <MX_USART1_UART_Init+0x50>)
 8000ac4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000ac8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000acc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000af4:	f003 fe8c 	bl	8004810 <HAL_UART_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000afe:	f000 f911 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	200003b8 	.word	0x200003b8
 8000b0c:	40011000 	.word	0x40011000

08000b10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b16:	4a12      	ldr	r2, [pc, #72]	; (8000b60 <MX_USART2_UART_Init+0x50>)
 8000b18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b36:	220c      	movs	r2, #12
 8000b38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b48:	f003 fe62 	bl	8004810 <HAL_UART_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b52:	f000 f8e7 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000400 	.word	0x20000400
 8000b60:	40004400 	.word	0x40004400

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
 8000b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	4b42      	ldr	r3, [pc, #264]	; (8000c88 <MX_GPIO_Init+0x124>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a41      	ldr	r2, [pc, #260]	; (8000c88 <MX_GPIO_Init+0x124>)
 8000b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b3f      	ldr	r3, [pc, #252]	; (8000c88 <MX_GPIO_Init+0x124>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b3b      	ldr	r3, [pc, #236]	; (8000c88 <MX_GPIO_Init+0x124>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a3a      	ldr	r2, [pc, #232]	; (8000c88 <MX_GPIO_Init+0x124>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b38      	ldr	r3, [pc, #224]	; (8000c88 <MX_GPIO_Init+0x124>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	4b34      	ldr	r3, [pc, #208]	; (8000c88 <MX_GPIO_Init+0x124>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a33      	ldr	r2, [pc, #204]	; (8000c88 <MX_GPIO_Init+0x124>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b31      	ldr	r3, [pc, #196]	; (8000c88 <MX_GPIO_Init+0x124>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	4b2d      	ldr	r3, [pc, #180]	; (8000c88 <MX_GPIO_Init+0x124>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a2c      	ldr	r2, [pc, #176]	; (8000c88 <MX_GPIO_Init+0x124>)
 8000bd8:	f043 0304 	orr.w	r3, r3, #4
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b2a      	ldr	r3, [pc, #168]	; (8000c88 <MX_GPIO_Init+0x124>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0304 	and.w	r3, r3, #4
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000bf0:	4826      	ldr	r0, [pc, #152]	; (8000c8c <MX_GPIO_Init+0x128>)
 8000bf2:	f001 fc55 	bl	80024a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bfc:	4824      	ldr	r0, [pc, #144]	; (8000c90 <MX_GPIO_Init+0x12c>)
 8000bfe:	f001 fc4f 	bl	80024a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2180      	movs	r1, #128	; 0x80
 8000c06:	4823      	ldr	r0, [pc, #140]	; (8000c94 <MX_GPIO_Init+0x130>)
 8000c08:	f001 fc4a 	bl	80024a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8000c0c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	4819      	ldr	r0, [pc, #100]	; (8000c8c <MX_GPIO_Init+0x128>)
 8000c26:	f001 fa9f 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	4813      	ldr	r0, [pc, #76]	; (8000c90 <MX_GPIO_Init+0x12c>)
 8000c44:	f001 fa90 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c48:	2380      	movs	r3, #128	; 0x80
 8000c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480d      	ldr	r0, [pc, #52]	; (8000c94 <MX_GPIO_Init+0x130>)
 8000c60:	f001 fa82 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c64:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	4619      	mov	r1, r3
 8000c78:	4806      	ldr	r0, [pc, #24]	; (8000c94 <MX_GPIO_Init+0x130>)
 8000c7a:	f001 fa75 	bl	8002168 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c7e:	bf00      	nop
 8000c80:	3728      	adds	r7, #40	; 0x28
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020000 	.word	0x40020000
 8000c90:	40020400 	.word	0x40020400
 8000c94:	40020800 	.word	0x40020800

08000c98 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000ca0:	2120      	movs	r1, #32
 8000ca2:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <StartDefaultTask+0x1c>)
 8000ca4:	f001 fc15 	bl	80024d2 <HAL_GPIO_TogglePin>
		osDelay(500);
 8000ca8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cac:	f004 fe71 	bl	8005992 <osDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000cb0:	e7f6      	b.n	8000ca0 <StartDefaultTask+0x8>
 8000cb2:	bf00      	nop
 8000cb4:	40020000 	.word	0x40020000

08000cb8 <ListenerTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ListenerTask */
void ListenerTask(void const * argument)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ListenerTask */
	Listner_init();
 8000cc0:	f000 fb90 	bl	80013e4 <Listner_init>
	/* Infinite loop */
	for (;;) {
		Listener_Button();
 8000cc4:	f000 fbc0 	bl	8001448 <Listener_Button>
		osDelay(1);
 8000cc8:	2001      	movs	r0, #1
 8000cca:	f004 fe62 	bl	8005992 <osDelay>
		Listener_Button();
 8000cce:	e7f9      	b.n	8000cc4 <ListenerTask+0xc>

08000cd0 <ControllerTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ControllerTask */
void ControllerTask(void const * argument)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ControllerTask */
	Controller_init();
 8000cd8:	f000 fabd 	bl	8001256 <Controller_init>
	/* Infinite loop */
	for (;;) {
		Controller_excuteTask();
 8000cdc:	f000 fac3 	bl	8001266 <Controller_excuteTask>
		osDelay(1);
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	f004 fe56 	bl	8005992 <osDelay>
		Controller_excuteTask();
 8000ce6:	e7f9      	b.n	8000cdc <ControllerTask+0xc>

08000ce8 <PresenterTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_PresenterTask */
void PresenterTask(void const * argument)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PresenterTask */
	Presenter_Init();
 8000cf0:	f000 fca8 	bl	8001644 <Presenter_Init>
	/* Infinite loop */
	for (;;) {
		Presenter_excuteTask();
 8000cf4:	f000 fcde 	bl	80016b4 <Presenter_excuteTask>
		osDelay(1);
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	f004 fe4a 	bl	8005992 <osDelay>
		Presenter_excuteTask();
 8000cfe:	e7f9      	b.n	8000cf4 <PresenterTask+0xc>

08000d00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d101      	bne.n	8000d16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d12:	f001 f871 	bl	8001df8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40014800 	.word	0x40014800

08000d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d28:	b672      	cpsid	i
}
 8000d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d2c:	e7fe      	b.n	8000d2c <Error_Handler+0x8>
	...

08000d30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_MspInit+0x54>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	4a11      	ldr	r2, [pc, #68]	; (8000d84 <HAL_MspInit+0x54>)
 8000d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d44:	6453      	str	r3, [r2, #68]	; 0x44
 8000d46:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <HAL_MspInit+0x54>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	603b      	str	r3, [r7, #0]
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <HAL_MspInit+0x54>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <HAL_MspInit+0x54>)
 8000d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d60:	6413      	str	r3, [r2, #64]	; 0x40
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <HAL_MspInit+0x54>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	210f      	movs	r1, #15
 8000d72:	f06f 0001 	mvn.w	r0, #1
 8000d76:	f001 f93b 	bl	8001ff0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800

08000d88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	; 0x28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a19      	ldr	r2, [pc, #100]	; (8000e0c <HAL_I2C_MspInit+0x84>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d12c      	bne.n	8000e04 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	4b18      	ldr	r3, [pc, #96]	; (8000e10 <HAL_I2C_MspInit+0x88>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a17      	ldr	r2, [pc, #92]	; (8000e10 <HAL_I2C_MspInit+0x88>)
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <HAL_I2C_MspInit+0x88>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dcc:	2312      	movs	r3, #18
 8000dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dd8:	2304      	movs	r3, #4
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4619      	mov	r1, r3
 8000de2:	480c      	ldr	r0, [pc, #48]	; (8000e14 <HAL_I2C_MspInit+0x8c>)
 8000de4:	f001 f9c0 	bl	8002168 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <HAL_I2C_MspInit+0x88>)
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <HAL_I2C_MspInit+0x88>)
 8000df2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000df6:	6413      	str	r3, [r2, #64]	; 0x40
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <HAL_I2C_MspInit+0x88>)
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e04:	bf00      	nop
 8000e06:	3728      	adds	r7, #40	; 0x28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40005400 	.word	0x40005400
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020400 	.word	0x40020400

08000e18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0b      	ldr	r2, [pc, #44]	; (8000e54 <HAL_TIM_Base_MspInit+0x3c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d10d      	bne.n	8000e46 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <HAL_TIM_Base_MspInit+0x40>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	4a09      	ldr	r2, [pc, #36]	; (8000e58 <HAL_TIM_Base_MspInit+0x40>)
 8000e34:	f043 0302 	orr.w	r3, r3, #2
 8000e38:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3a:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <HAL_TIM_Base_MspInit+0x40>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e46:	bf00      	nop
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40000400 	.word	0x40000400
 8000e58:	40023800 	.word	0x40023800

08000e5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b088      	sub	sp, #32
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 030c 	add.w	r3, r7, #12
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a12      	ldr	r2, [pc, #72]	; (8000ec4 <HAL_TIM_MspPostInit+0x68>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d11d      	bne.n	8000eba <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <HAL_TIM_MspPostInit+0x6c>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a10      	ldr	r2, [pc, #64]	; (8000ec8 <HAL_TIM_MspPostInit+0x6c>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <HAL_TIM_MspPostInit+0x6c>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e9a:	23c0      	movs	r3, #192	; 0xc0
 8000e9c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 030c 	add.w	r3, r7, #12
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4805      	ldr	r0, [pc, #20]	; (8000ecc <HAL_TIM_MspPostInit+0x70>)
 8000eb6:	f001 f957 	bl	8002168 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000eba:	bf00      	nop
 8000ebc:	3720      	adds	r7, #32
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40000400 	.word	0x40000400
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020000 	.word	0x40020000

08000ed0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08c      	sub	sp, #48	; 0x30
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 031c 	add.w	r3, r7, #28
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a49      	ldr	r2, [pc, #292]	; (8001014 <HAL_UART_MspInit+0x144>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d153      	bne.n	8000f9a <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
 8000ef6:	4b48      	ldr	r3, [pc, #288]	; (8001018 <HAL_UART_MspInit+0x148>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	4a47      	ldr	r2, [pc, #284]	; (8001018 <HAL_UART_MspInit+0x148>)
 8000efc:	f043 0310 	orr.w	r3, r3, #16
 8000f00:	6453      	str	r3, [r2, #68]	; 0x44
 8000f02:	4b45      	ldr	r3, [pc, #276]	; (8001018 <HAL_UART_MspInit+0x148>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	f003 0310 	and.w	r3, r3, #16
 8000f0a:	61bb      	str	r3, [r7, #24]
 8000f0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	4b41      	ldr	r3, [pc, #260]	; (8001018 <HAL_UART_MspInit+0x148>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a40      	ldr	r2, [pc, #256]	; (8001018 <HAL_UART_MspInit+0x148>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b3e      	ldr	r3, [pc, #248]	; (8001018 <HAL_UART_MspInit+0x148>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	4b3a      	ldr	r3, [pc, #232]	; (8001018 <HAL_UART_MspInit+0x148>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a39      	ldr	r2, [pc, #228]	; (8001018 <HAL_UART_MspInit+0x148>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b37      	ldr	r3, [pc, #220]	; (8001018 <HAL_UART_MspInit+0x148>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f54:	2303      	movs	r3, #3
 8000f56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f58:	2307      	movs	r3, #7
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5c:	f107 031c 	add.w	r3, r7, #28
 8000f60:	4619      	mov	r1, r3
 8000f62:	482e      	ldr	r0, [pc, #184]	; (800101c <HAL_UART_MspInit+0x14c>)
 8000f64:	f001 f900 	bl	8002168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f68:	2340      	movs	r3, #64	; 0x40
 8000f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f74:	2303      	movs	r3, #3
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f78:	2307      	movs	r3, #7
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	4619      	mov	r1, r3
 8000f82:	4827      	ldr	r0, [pc, #156]	; (8001020 <HAL_UART_MspInit+0x150>)
 8000f84:	f001 f8f0 	bl	8002168 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2105      	movs	r1, #5
 8000f8c:	2025      	movs	r0, #37	; 0x25
 8000f8e:	f001 f82f 	bl	8001ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f92:	2025      	movs	r0, #37	; 0x25
 8000f94:	f001 f848 	bl	8002028 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f98:	e038      	b.n	800100c <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a21      	ldr	r2, [pc, #132]	; (8001024 <HAL_UART_MspInit+0x154>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d133      	bne.n	800100c <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <HAL_UART_MspInit+0x148>)
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	4a1a      	ldr	r2, [pc, #104]	; (8001018 <HAL_UART_MspInit+0x148>)
 8000fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb4:	4b18      	ldr	r3, [pc, #96]	; (8001018 <HAL_UART_MspInit+0x148>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	4b14      	ldr	r3, [pc, #80]	; (8001018 <HAL_UART_MspInit+0x148>)
 8000fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc8:	4a13      	ldr	r2, [pc, #76]	; (8001018 <HAL_UART_MspInit+0x148>)
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <HAL_UART_MspInit+0x148>)
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fdc:	230c      	movs	r3, #12
 8000fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fec:	2307      	movs	r3, #7
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4809      	ldr	r0, [pc, #36]	; (800101c <HAL_UART_MspInit+0x14c>)
 8000ff8:	f001 f8b6 	bl	8002168 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2105      	movs	r1, #5
 8001000:	2026      	movs	r0, #38	; 0x26
 8001002:	f000 fff5 	bl	8001ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001006:	2026      	movs	r0, #38	; 0x26
 8001008:	f001 f80e 	bl	8002028 <HAL_NVIC_EnableIRQ>
}
 800100c:	bf00      	nop
 800100e:	3730      	adds	r7, #48	; 0x30
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40011000 	.word	0x40011000
 8001018:	40023800 	.word	0x40023800
 800101c:	40020000 	.word	0x40020000
 8001020:	40020400 	.word	0x40020400
 8001024:	40004400 	.word	0x40004400

08001028 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08c      	sub	sp, #48	; 0x30
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001030:	2300      	movs	r3, #0
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001034:	2300      	movs	r3, #0
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001038:	2300      	movs	r3, #0
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	4b2e      	ldr	r3, [pc, #184]	; (80010f8 <HAL_InitTick+0xd0>)
 800103e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001040:	4a2d      	ldr	r2, [pc, #180]	; (80010f8 <HAL_InitTick+0xd0>)
 8001042:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001046:	6453      	str	r3, [r2, #68]	; 0x44
 8001048:	4b2b      	ldr	r3, [pc, #172]	; (80010f8 <HAL_InitTick+0xd0>)
 800104a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001054:	f107 020c 	add.w	r2, r7, #12
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	4611      	mov	r1, r2
 800105e:	4618      	mov	r0, r3
 8001060:	f002 fb88 	bl	8003774 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001064:	f002 fb72 	bl	800374c <HAL_RCC_GetPCLK2Freq>
 8001068:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800106a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800106c:	4a23      	ldr	r2, [pc, #140]	; (80010fc <HAL_InitTick+0xd4>)
 800106e:	fba2 2303 	umull	r2, r3, r2, r3
 8001072:	0c9b      	lsrs	r3, r3, #18
 8001074:	3b01      	subs	r3, #1
 8001076:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001078:	4b21      	ldr	r3, [pc, #132]	; (8001100 <HAL_InitTick+0xd8>)
 800107a:	4a22      	ldr	r2, [pc, #136]	; (8001104 <HAL_InitTick+0xdc>)
 800107c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800107e:	4b20      	ldr	r3, [pc, #128]	; (8001100 <HAL_InitTick+0xd8>)
 8001080:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001084:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8001086:	4a1e      	ldr	r2, [pc, #120]	; (8001100 <HAL_InitTick+0xd8>)
 8001088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108a:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 800108c:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <HAL_InitTick+0xd8>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001092:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <HAL_InitTick+0xd8>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001098:	4b19      	ldr	r3, [pc, #100]	; (8001100 <HAL_InitTick+0xd8>)
 800109a:	2200      	movs	r2, #0
 800109c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 800109e:	4818      	ldr	r0, [pc, #96]	; (8001100 <HAL_InitTick+0xd8>)
 80010a0:	f002 fb9a 	bl	80037d8 <HAL_TIM_Base_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80010aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d11b      	bne.n	80010ea <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 80010b2:	4813      	ldr	r0, [pc, #76]	; (8001100 <HAL_InitTick+0xd8>)
 80010b4:	f002 fbe0 	bl	8003878 <HAL_TIM_Base_Start_IT>
 80010b8:	4603      	mov	r3, r0
 80010ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80010be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d111      	bne.n	80010ea <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80010c6:	201a      	movs	r0, #26
 80010c8:	f000 ffae 	bl	8002028 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b0f      	cmp	r3, #15
 80010d0:	d808      	bhi.n	80010e4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 80010d2:	2200      	movs	r2, #0
 80010d4:	6879      	ldr	r1, [r7, #4]
 80010d6:	201a      	movs	r0, #26
 80010d8:	f000 ff8a 	bl	8001ff0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010dc:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <HAL_InitTick+0xe0>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	e002      	b.n	80010ea <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80010ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3730      	adds	r7, #48	; 0x30
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023800 	.word	0x40023800
 80010fc:	431bde83 	.word	0x431bde83
 8001100:	2000045c 	.word	0x2000045c
 8001104:	40014800 	.word	0x40014800
 8001108:	20000004 	.word	0x20000004

0800110c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001110:	e7fe      	b.n	8001110 <NMI_Handler+0x4>

08001112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <HardFault_Handler+0x4>

08001118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <MemManage_Handler+0x4>

0800111e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001122:	e7fe      	b.n	8001122 <BusFault_Handler+0x4>

08001124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <UsageFault_Handler+0x4>

0800112a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800113e:	f002 fd6b 	bl	8003c18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	2000045c 	.word	0x2000045c

0800114c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001150:	4802      	ldr	r0, [pc, #8]	; (800115c <USART1_IRQHandler+0x10>)
 8001152:	f003 fc5d 	bl	8004a10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200003b8 	.word	0x200003b8

08001160 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001164:	4802      	ldr	r0, [pc, #8]	; (8001170 <USART2_IRQHandler+0x10>)
 8001166:	f003 fc53 	bl	8004a10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000400 	.word	0x20000400

08001174 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800117c:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <_sbrk+0x5c>)
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <_sbrk+0x60>)
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <_sbrk+0x64>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d102      	bne.n	8001196 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <_sbrk+0x64>)
 8001192:	4a12      	ldr	r2, [pc, #72]	; (80011dc <_sbrk+0x68>)
 8001194:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <_sbrk+0x64>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d207      	bcs.n	80011b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a4:	f005 ff10 	bl	8006fc8 <__errno>
 80011a8:	4603      	mov	r3, r0
 80011aa:	220c      	movs	r2, #12
 80011ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
 80011b2:	e009      	b.n	80011c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <_sbrk+0x64>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ba:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <_sbrk+0x64>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	4a05      	ldr	r2, [pc, #20]	; (80011d8 <_sbrk+0x64>)
 80011c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011c6:	68fb      	ldr	r3, [r7, #12]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20020000 	.word	0x20020000
 80011d4:	00000400 	.word	0x00000400
 80011d8:	200004a4 	.word	0x200004a4
 80011dc:	20004488 	.word	0x20004488

080011e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <SystemInit+0x20>)
 80011e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ea:	4a05      	ldr	r2, [pc, #20]	; (8001200 <SystemInit+0x20>)
 80011ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001204:	f8df d034 	ldr.w	sp, [pc, #52]	; 800123c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001208:	f7ff ffea 	bl	80011e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800120c:	480c      	ldr	r0, [pc, #48]	; (8001240 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800120e:	490d      	ldr	r1, [pc, #52]	; (8001244 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001210:	4a0d      	ldr	r2, [pc, #52]	; (8001248 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001214:	e002      	b.n	800121c <LoopCopyDataInit>

08001216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121a:	3304      	adds	r3, #4

0800121c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800121c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001220:	d3f9      	bcc.n	8001216 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001222:	4a0a      	ldr	r2, [pc, #40]	; (800124c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001224:	4c0a      	ldr	r4, [pc, #40]	; (8001250 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001228:	e001      	b.n	800122e <LoopFillZerobss>

0800122a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800122c:	3204      	adds	r2, #4

0800122e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001230:	d3fb      	bcc.n	800122a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001232:	f005 fecf 	bl	8006fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001236:	f7ff faa3 	bl	8000780 <main>
  bx  lr    
 800123a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800123c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001244:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001248:	08007b5c 	.word	0x08007b5c
  ldr r2, =_sbss
 800124c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001250:	20004488 	.word	0x20004488

08001254 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001254:	e7fe      	b.n	8001254 <ADC_IRQHandler>

08001256 <Controller_init>:
 */

#include "Controller.h"
#include <stdlib.h>

void Controller_init() {
 8001256:	b580      	push	{r7, lr}
 8001258:	af00      	add	r7, sp, #0
	BT_init();
 800125a:	f000 f915 	bl	8001488 <BT_init>
	MotorState_init();
 800125e:	f000 f997 	bl	8001590 <MotorState_init>
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}

08001266 <Controller_excuteTask>:

void Controller_excuteTask() {
 8001266:	b580      	push	{r7, lr}
 8001268:	b084      	sub	sp, #16
 800126a:	af00      	add	r7, sp, #0
	int BTflag = BT_getFlag();
 800126c:	f000 f93e 	bl	80014ec <BT_getFlag>
 8001270:	60f8      	str	r0, [r7, #12]
	if (!BTflag) return;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d012      	beq.n	800129e <Controller_excuteTask+0x38>

	uint8_t rxBuff[10];

	Controller_getData(rxBuff); //Uart data rxBuff에 저장
 8001278:	463b      	mov	r3, r7
 800127a:	4618      	mov	r0, r3
 800127c:	f000 f813 	bl	80012a6 <Controller_getData>
	Controller_Mode_parsingData(rxBuff);	//Buff에 저장된 값 판단
 8001280:	463b      	mov	r3, r7
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f845 	bl	8001312 <Controller_Mode_parsingData>
	Controller_Mode_decision(rxBuff);	//모드 결정하여 나머지 파싱 실행
 8001288:	463b      	mov	r3, r7
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f828 	bl	80012e0 <Controller_Mode_decision>

	MotorState_setFlag(SET);
 8001290:	2001      	movs	r0, #1
 8001292:	f000 f9bf 	bl	8001614 <MotorState_setFlag>
	BT_setFlag(BTRESET);
 8001296:	2000      	movs	r0, #0
 8001298:	f000 f91a 	bl	80014d0 <BT_setFlag>
 800129c:	e000      	b.n	80012a0 <Controller_excuteTask+0x3a>
	if (!BTflag) return;
 800129e:	bf00      	nop
}
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <Controller_getData>:

void Controller_getData(uint8_t *Buff) {
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b084      	sub	sp, #16
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
	uint8_t rxData = 1;
 80012ae:	2301      	movs	r3, #1
 80012b0:	73fb      	strb	r3, [r7, #15]

	for (int i = 0; rxData; i++) {
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	e00b      	b.n	80012d0 <Controller_getData+0x2a>
		rxData = BT_deQue();
 80012b8:	f000 f900 	bl	80014bc <BT_deQue>
 80012bc:	4603      	mov	r3, r0
 80012be:	73fb      	strb	r3, [r7, #15]
		Buff[i] = rxData;
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	7bfa      	ldrb	r2, [r7, #15]
 80012c8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; rxData; i++) {
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	3301      	adds	r3, #1
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f0      	bne.n	80012b8 <Controller_getData+0x12>
	}
}
 80012d6:	bf00      	nop
 80012d8:	bf00      	nop
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <Controller_Mode_decision>:

void Controller_Mode_decision(uint8_t *Buff) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	MODE_t Mode;
	Mode.Modestate = ModeState_get();
 80012e8:	f000 f92a 	bl	8001540 <ModeState_get>
 80012ec:	4603      	mov	r3, r0
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	733b      	strb	r3, [r7, #12]
	if (Mode.Modestate == MANUAL) {
 80012f2:	7b3b      	ldrb	r3, [r7, #12]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d102      	bne.n	80012fe <Controller_Mode_decision+0x1e>
		Controller_Manual_parsingData(Buff); //Buff에 저장된 값 판단
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f000 f820 	bl	800133e <Controller_Manual_parsingData>
	}
	if (Mode.Modestate == AUTO) {
 80012fe:	7b3b      	ldrb	r3, [r7, #12]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d102      	bne.n	800130a <Controller_Mode_decision+0x2a>
		//UltraSonic 계산 추가
		Controller_Auto_parsingData(Buff); //Buff에 저장된 값 판단
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f000 f85d 	bl	80013c4 <Controller_Auto_parsingData>
	}
}
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <Controller_Mode_parsingData>:

void Controller_Mode_parsingData(uint8_t *Buff) {
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
	if (Buff[0] == 'm') {
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b6d      	cmp	r3, #109	; 0x6d
 8001320:	d102      	bne.n	8001328 <Controller_Mode_parsingData+0x16>
		ModeState_set(MANUAL);
 8001322:	2000      	movs	r0, #0
 8001324:	f000 f8fc 	bl	8001520 <ModeState_set>
	}
	if (Buff[0] == 'a') {
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b61      	cmp	r3, #97	; 0x61
 800132e:	d102      	bne.n	8001336 <Controller_Mode_parsingData+0x24>
		ModeState_set(AUTO);
 8001330:	2001      	movs	r0, #1
 8001332:	f000 f8f5 	bl	8001520 <ModeState_set>
	}
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <Controller_Manual_parsingData>:

void Controller_Manual_parsingData(uint8_t *Buff) {
 800133e:	b580      	push	{r7, lr}
 8001340:	b084      	sub	sp, #16
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
	if (Buff[0] == 'g') {	//go
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b67      	cmp	r3, #103	; 0x67
 800134c:	d103      	bne.n	8001356 <Controller_Manual_parsingData+0x18>
		MotorState_enQue(GO);
 800134e:	2001      	movs	r0, #1
 8001350:	f000 f946 	bl	80015e0 <MotorState_enQue>
 8001354:	e02f      	b.n	80013b6 <Controller_Manual_parsingData+0x78>
	}
	else if (Buff[0] == 'b') {	//back
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b62      	cmp	r3, #98	; 0x62
 800135c:	d103      	bne.n	8001366 <Controller_Manual_parsingData+0x28>
		MotorState_enQue(BACK);
 800135e:	2004      	movs	r0, #4
 8001360:	f000 f93e 	bl	80015e0 <MotorState_enQue>
 8001364:	e027      	b.n	80013b6 <Controller_Manual_parsingData+0x78>
	}
	else if (Buff[0] == 'l') {	//left
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b6c      	cmp	r3, #108	; 0x6c
 800136c:	d103      	bne.n	8001376 <Controller_Manual_parsingData+0x38>
		MotorState_enQue(LEFT);
 800136e:	2002      	movs	r0, #2
 8001370:	f000 f936 	bl	80015e0 <MotorState_enQue>
 8001374:	e01f      	b.n	80013b6 <Controller_Manual_parsingData+0x78>
	}
	else if (Buff[0] == 'r') {	//right
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b72      	cmp	r3, #114	; 0x72
 800137c:	d103      	bne.n	8001386 <Controller_Manual_parsingData+0x48>
		MotorState_enQue(RIGHT);
 800137e:	2003      	movs	r0, #3
 8001380:	f000 f92e 	bl	80015e0 <MotorState_enQue>
 8001384:	e017      	b.n	80013b6 <Controller_Manual_parsingData+0x78>
	}
	else if (Buff[0] == 's') {	//stop
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b73      	cmp	r3, #115	; 0x73
 800138c:	d103      	bne.n	8001396 <Controller_Manual_parsingData+0x58>
		MotorState_enQue(STOP);
 800138e:	2000      	movs	r0, #0
 8001390:	f000 f926 	bl	80015e0 <MotorState_enQue>
 8001394:	e00f      	b.n	80013b6 <Controller_Manual_parsingData+0x78>
	}
	else if (Buff[0] == 'p') {	//speed p98'0'
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b70      	cmp	r3, #112	; 0x70
 800139c:	d10b      	bne.n	80013b6 <Controller_Manual_parsingData+0x78>
		MotorState_enQue(SPEED);
 800139e:	2005      	movs	r0, #5
 80013a0:	f000 f91e 	bl	80015e0 <MotorState_enQue>
		int speed = atoi(&Buff[1]);	//해당 주소부터 숫자가 아닌 것까지 계산
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3301      	adds	r3, #1
 80013a8:	4618      	mov	r0, r3
 80013aa:	f005 fcff 	bl	8006dac <atoi>
 80013ae:	60f8      	str	r0, [r7, #12]
		MotorState_setSpeed(speed);
 80013b0:	68f8      	ldr	r0, [r7, #12]
 80013b2:	f000 f8f9 	bl	80015a8 <MotorState_setSpeed>
	}
	MotorState_setFlag(SET);
 80013b6:	2001      	movs	r0, #1
 80013b8:	f000 f92c 	bl	8001614 <MotorState_setFlag>
}
 80013bc:	bf00      	nop
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <Controller_Auto_parsingData>:

void Controller_Auto_parsingData(uint8_t *Buff) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	if (Buff[0] == 's') {	//응급 상황시 사람이 stop
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b73      	cmp	r3, #115	; 0x73
 80013d2:	d102      	bne.n	80013da <Controller_Auto_parsingData+0x16>
		MotorState_enQue(STOP);
 80013d4:	2000      	movs	r0, #0
 80013d6:	f000 f903 	bl	80015e0 <MotorState_enQue>
	}
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <Listner_init>:

#include "Listener.h"

button_t ManualButton, AutoButton;

void Listner_init() {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
	ModeState_init();
 80013e8:	f000 f88a 	bl	8001500 <ModeState_init>
	button_init(&ManualButton, GPIOC, GPIO_PIN_10);
 80013ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013f0:	4905      	ldr	r1, [pc, #20]	; (8001408 <Listner_init+0x24>)
 80013f2:	4806      	ldr	r0, [pc, #24]	; (800140c <Listner_init+0x28>)
 80013f4:	f000 fa60 	bl	80018b8 <button_init>
	button_init(&AutoButton, GPIOC, GPIO_PIN_11);
 80013f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013fc:	4902      	ldr	r1, [pc, #8]	; (8001408 <Listner_init+0x24>)
 80013fe:	4804      	ldr	r0, [pc, #16]	; (8001410 <Listner_init+0x2c>)
 8001400:	f000 fa5a 	bl	80018b8 <button_init>
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40020800 	.word	0x40020800
 800140c:	200004a8 	.word	0x200004a8
 8001410:	200004b4 	.word	0x200004b4

08001414 <Listener_ISR_Process>:

void Listener_ISR_Process(uint8_t rxData) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
	if (rxData == ';') {
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	2b3b      	cmp	r3, #59	; 0x3b
 8001422:	d106      	bne.n	8001432 <Listener_ISR_Process+0x1e>
		BT_enQue('\0');
 8001424:	2000      	movs	r0, #0
 8001426:	f000 f839 	bl	800149c <BT_enQue>
		BT_setFlag(BTSET);
 800142a:	2001      	movs	r0, #1
 800142c:	f000 f850 	bl	80014d0 <BT_setFlag>
	}
	else {
		BT_enQue(rxData);
		BT_setFlag(BTRESET);
	}
}
 8001430:	e006      	b.n	8001440 <Listener_ISR_Process+0x2c>
		BT_enQue(rxData);
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	4618      	mov	r0, r3
 8001436:	f000 f831 	bl	800149c <BT_enQue>
		BT_setFlag(BTRESET);
 800143a:	2000      	movs	r0, #0
 800143c:	f000 f848 	bl	80014d0 <BT_setFlag>
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <Listener_Button>:

void Listener_Button() {
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
	if (button_getState(&ManualButton) == ACT_RELEASED) {
 800144c:	480c      	ldr	r0, [pc, #48]	; (8001480 <Listener_Button+0x38>)
 800144e:	f000 fa49 	bl	80018e4 <button_getState>
 8001452:	4603      	mov	r3, r0
 8001454:	2b04      	cmp	r3, #4
 8001456:	d105      	bne.n	8001464 <Listener_Button+0x1c>
		ModeState_set(MANUAL);
 8001458:	2000      	movs	r0, #0
 800145a:	f000 f861 	bl	8001520 <ModeState_set>
		ModeState_setFlag(MODESET);
 800145e:	2001      	movs	r0, #1
 8001460:	f000 f87a 	bl	8001558 <ModeState_setFlag>
	}
	if (button_getState(&AutoButton) == ACT_RELEASED) {
 8001464:	4807      	ldr	r0, [pc, #28]	; (8001484 <Listener_Button+0x3c>)
 8001466:	f000 fa3d 	bl	80018e4 <button_getState>
 800146a:	4603      	mov	r3, r0
 800146c:	2b04      	cmp	r3, #4
 800146e:	d105      	bne.n	800147c <Listener_Button+0x34>
		ModeState_set(AUTO);
 8001470:	2001      	movs	r0, #1
 8001472:	f000 f855 	bl	8001520 <ModeState_set>
		ModeState_setFlag(MODESET);
 8001476:	2001      	movs	r0, #1
 8001478:	f000 f86e 	bl	8001558 <ModeState_setFlag>
	}
}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	200004a8 	.word	0x200004a8
 8001484:	200004b4 	.word	0x200004b4

08001488 <BT_init>:
 */

#include "BT_dataQue.h"
Que_t BTQue;

void BT_init(){
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	Que_init(&BTQue);
 800148c:	4802      	ldr	r0, [pc, #8]	; (8001498 <BT_init+0x10>)
 800148e:	f7ff f875 	bl	800057c <Que_init>
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200004c0 	.word	0x200004c0

0800149c <BT_enQue>:

void BT_enQue(uint8_t rxData){
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
	enQue(&BTQue,rxData);
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	4619      	mov	r1, r3
 80014aa:	4803      	ldr	r0, [pc, #12]	; (80014b8 <BT_enQue+0x1c>)
 80014ac:	f7ff f8b8 	bl	8000620 <enQue>
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	200004c0 	.word	0x200004c0

080014bc <BT_deQue>:

uint8_t BT_deQue(){
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	return deQue(&BTQue);
 80014c0:	4802      	ldr	r0, [pc, #8]	; (80014cc <BT_deQue+0x10>)
 80014c2:	f7ff f8d9 	bl	8000678 <deQue>
 80014c6:	4603      	mov	r3, r0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200004c0 	.word	0x200004c0

080014d0 <BT_setFlag>:
void BT_setFlag(int flagState){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	setQueFlag(&BTQue, flagState);
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	4803      	ldr	r0, [pc, #12]	; (80014e8 <BT_setFlag+0x18>)
 80014dc:	f7ff f864 	bl	80005a8 <setQueFlag>
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	200004c0 	.word	0x200004c0

080014ec <BT_getFlag>:

int BT_getFlag(){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	return getQueFlag(&BTQue);
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <BT_getFlag+0x10>)
 80014f2:	f7ff f867 	bl	80005c4 <getQueFlag>
 80014f6:	4603      	mov	r3, r0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	200004c0 	.word	0x200004c0

08001500 <ModeState_init>:

#include "ModeStateQue.h"

MODE_t Mode;

void ModeState_init(){
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
	Mode.Modestate = MANUAL;
 8001504:	4b05      	ldr	r3, [pc, #20]	; (800151c <ModeState_init+0x1c>)
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
	Mode.ModeFlag = RESET;
 800150a:	4b04      	ldr	r3, [pc, #16]	; (800151c <ModeState_init+0x1c>)
 800150c:	2200      	movs	r2, #0
 800150e:	705a      	strb	r2, [r3, #1]
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000534 	.word	0x20000534

08001520 <ModeState_set>:

void ModeState_set(int ModeState){
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	Mode.Modestate = ModeState;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	b2da      	uxtb	r2, r3
 800152c:	4b03      	ldr	r3, [pc, #12]	; (800153c <ModeState_set+0x1c>)
 800152e:	701a      	strb	r2, [r3, #0]
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	20000534 	.word	0x20000534

08001540 <ModeState_get>:

int ModeState_get(){
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
	return Mode.Modestate;
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <ModeState_get+0x14>)
 8001546:	781b      	ldrb	r3, [r3, #0]
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	20000534 	.word	0x20000534

08001558 <ModeState_setFlag>:

void ModeState_setFlag(int flagState){
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	Mode.ModeFlag = flagState;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	b2da      	uxtb	r2, r3
 8001564:	4b03      	ldr	r3, [pc, #12]	; (8001574 <ModeState_setFlag+0x1c>)
 8001566:	705a      	strb	r2, [r3, #1]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	20000534 	.word	0x20000534

08001578 <ModeState_getFlag>:

int ModeState_getFlag(){
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
	return Mode.ModeFlag;
 800157c:	4b03      	ldr	r3, [pc, #12]	; (800158c <ModeState_getFlag+0x14>)
 800157e:	785b      	ldrb	r3, [r3, #1]
}
 8001580:	4618      	mov	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000534 	.word	0x20000534

08001590 <MotorState_init>:

#include "MotorStateQue.h"

MotorState_t MotorStateQue;

void MotorState_init(){
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
	Que_init(&MotorStateQue.state);
 8001594:	4803      	ldr	r0, [pc, #12]	; (80015a4 <MotorState_init+0x14>)
 8001596:	f7fe fff1 	bl	800057c <Que_init>
	MotorStateQue.speed = 0;
 800159a:	4b02      	ldr	r3, [pc, #8]	; (80015a4 <MotorState_init+0x14>)
 800159c:	2200      	movs	r2, #0
 800159e:	675a      	str	r2, [r3, #116]	; 0x74
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000538 	.word	0x20000538

080015a8 <MotorState_setSpeed>:

void MotorState_setSpeed(int speed){
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	MotorStateQue.speed = speed;
 80015b0:	4a04      	ldr	r2, [pc, #16]	; (80015c4 <MotorState_setSpeed+0x1c>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6753      	str	r3, [r2, #116]	; 0x74
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	20000538 	.word	0x20000538

080015c8 <MotorState_getSpeed>:
int MotorState_getSpeed(){
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
	return MotorStateQue.speed;
 80015cc:	4b03      	ldr	r3, [pc, #12]	; (80015dc <MotorState_getSpeed+0x14>)
 80015ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	20000538 	.word	0x20000538

080015e0 <MotorState_enQue>:


void MotorState_enQue(uint8_t rxData){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
	enQue(&MotorStateQue.state,rxData);
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	4619      	mov	r1, r3
 80015ee:	4803      	ldr	r0, [pc, #12]	; (80015fc <MotorState_enQue+0x1c>)
 80015f0:	f7ff f816 	bl	8000620 <enQue>
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000538 	.word	0x20000538

08001600 <MotorState_deQue>:
uint8_t MotorState_deQue(){
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	return deQue(&MotorStateQue.state);
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <MotorState_deQue+0x10>)
 8001606:	f7ff f837 	bl	8000678 <deQue>
 800160a:	4603      	mov	r3, r0
}
 800160c:	4618      	mov	r0, r3
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000538 	.word	0x20000538

08001614 <MotorState_setFlag>:

void MotorState_setFlag(int flagState){
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	setQueFlag(&MotorStateQue.state, flagState);
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	4803      	ldr	r0, [pc, #12]	; (800162c <MotorState_setFlag+0x18>)
 8001620:	f7fe ffc2 	bl	80005a8 <setQueFlag>
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000538 	.word	0x20000538

08001630 <MotorState_getFlag>:
int MotorState_getFlag(){
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	return getQueFlag(&MotorStateQue.state);
 8001634:	4802      	ldr	r0, [pc, #8]	; (8001640 <MotorState_getFlag+0x10>)
 8001636:	f7fe ffc5 	bl	80005c4 <getQueFlag>
 800163a:	4603      	mov	r3, r0
}
 800163c:	4618      	mov	r0, r3
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000538 	.word	0x20000538

08001644 <Presenter_Init>:

#include "Presenter.h"
#include <stdio.h>
Motor_t leftMotor, rightMotor;

void Presenter_Init() {
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af04      	add	r7, sp, #16
	Motor_init(&leftMotor, &htim3, TIM_CHANNEL_1,
 800164a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800164e:	9302      	str	r3, [sp, #8]
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <Presenter_Init+0x58>)
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <Presenter_Init+0x5c>)
 800165a:	2200      	movs	r2, #0
 800165c:	4911      	ldr	r1, [pc, #68]	; (80016a4 <Presenter_Init+0x60>)
 800165e:	4812      	ldr	r0, [pc, #72]	; (80016a8 <Presenter_Init+0x64>)
 8001660:	f000 fb0a 	bl	8001c78 <Motor_init>
	LEFT_DIR1_GPIO, LEFT_DIR1_GPIO_PIN, LEFT_DIR2_GPIO, LEFT_DIR2_GPIO_PIN);
	Motor_init(&rightMotor, &htim3, TIM_CHANNEL_2,
 8001664:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001668:	9302      	str	r3, [sp, #8]
 800166a:	4b0c      	ldr	r3, [pc, #48]	; (800169c <Presenter_Init+0x58>)
 800166c:	9301      	str	r3, [sp, #4]
 800166e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <Presenter_Init+0x68>)
 8001676:	2204      	movs	r2, #4
 8001678:	490a      	ldr	r1, [pc, #40]	; (80016a4 <Presenter_Init+0x60>)
 800167a:	480d      	ldr	r0, [pc, #52]	; (80016b0 <Presenter_Init+0x6c>)
 800167c:	f000 fafc 	bl	8001c78 <Motor_init>
	RIGHT_DIR1_GPIO, RIGHT_DIR1_GPIO_PIN, RIGHT_DIR2_GPIO, RIGHT_DIR2_GPIO_PIN);
	//초기 MotorSpeed
	Motor_setSpeed(&leftMotor, 900);
 8001680:	f44f 7161 	mov.w	r1, #900	; 0x384
 8001684:	4808      	ldr	r0, [pc, #32]	; (80016a8 <Presenter_Init+0x64>)
 8001686:	f000 fb66 	bl	8001d56 <Motor_setSpeed>
	Motor_setSpeed(&rightMotor, 900);
 800168a:	f44f 7161 	mov.w	r1, #900	; 0x384
 800168e:	4808      	ldr	r0, [pc, #32]	; (80016b0 <Presenter_Init+0x6c>)
 8001690:	f000 fb61 	bl	8001d56 <Motor_setSpeed>
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40020000 	.word	0x40020000
 80016a0:	40020800 	.word	0x40020800
 80016a4:	20000370 	.word	0x20000370
 80016a8:	200005b0 	.word	0x200005b0
 80016ac:	40020400 	.word	0x40020400
 80016b0:	200005c8 	.word	0x200005c8

080016b4 <Presenter_excuteTask>:

void Presenter_excuteTask() {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
	int MotorQueFlag = MotorState_getFlag();
 80016ba:	f7ff ffb9 	bl	8001630 <MotorState_getFlag>
 80016be:	6078      	str	r0, [r7, #4]
	int ModeFlag = ModeState_getFlag();
 80016c0:	f7ff ff5a 	bl	8001578 <ModeState_getFlag>
 80016c4:	6038      	str	r0, [r7, #0]

	if (!MotorQueFlag&&!ModeFlag) return;	//둘 중 하나가 set되면 실행
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d102      	bne.n	80016d2 <Presenter_excuteTask+0x1e>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d008      	beq.n	80016e4 <Presenter_excuteTask+0x30>

	Presenter_Mode_setState();
 80016d2:	f000 f80b 	bl	80016ec <Presenter_Mode_setState>

	MotorState_setFlag(RESET);
 80016d6:	2000      	movs	r0, #0
 80016d8:	f7ff ff9c 	bl	8001614 <MotorState_setFlag>
	ModeState_setFlag(MODERESET);
 80016dc:	2000      	movs	r0, #0
 80016de:	f7ff ff3b 	bl	8001558 <ModeState_setFlag>
 80016e2:	e000      	b.n	80016e6 <Presenter_excuteTask+0x32>
	if (!MotorQueFlag&&!ModeFlag) return;	//둘 중 하나가 set되면 실행
 80016e4:	bf00      	nop
}
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <Presenter_Mode_setState>:

void Presenter_Mode_setState(){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
	ModeState_t ModeState;
	ModeState = ModeState_get();
 80016f2:	f7ff ff25 	bl	8001540 <ModeState_get>
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
	switch(ModeState){
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d002      	beq.n	8001706 <Presenter_Mode_setState+0x1a>
 8001700:	2b01      	cmp	r3, #1
 8001702:	d003      	beq.n	800170c <Presenter_Mode_setState+0x20>
			break;
		case AUTO:
			Presenter_Auto_setState();
			break;
	}
}
 8001704:	e005      	b.n	8001712 <Presenter_Mode_setState+0x26>
			Presenter_Manual_setState();
 8001706:	f000 f809 	bl	800171c <Presenter_Manual_setState>
			break;
 800170a:	e002      	b.n	8001712 <Presenter_Mode_setState+0x26>
			Presenter_Auto_setState();
 800170c:	f000 f8c2 	bl	8001894 <Presenter_Auto_setState>
			break;
 8001710:	bf00      	nop
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <Presenter_Manual_setState>:

void Presenter_Manual_setState() {
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
	LCD_writeStringXY(0, 0, "Car Manual!");
 8001722:	4a18      	ldr	r2, [pc, #96]	; (8001784 <Presenter_Manual_setState+0x68>)
 8001724:	2100      	movs	r1, #0
 8001726:	2000      	movs	r0, #0
 8001728:	f000 fa91 	bl	8001c4e <LCD_writeStringXY>
	uint8_t MotorState = MotorState_deQue();
 800172c:	f7ff ff68 	bl	8001600 <MotorState_deQue>
 8001730:	4603      	mov	r3, r0
 8001732:	71fb      	strb	r3, [r7, #7]
	switch (MotorState) {
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	2b05      	cmp	r3, #5
 8001738:	d820      	bhi.n	800177c <Presenter_Manual_setState+0x60>
 800173a:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <Presenter_Manual_setState+0x24>)
 800173c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001740:	08001771 	.word	0x08001771
 8001744:	08001759 	.word	0x08001759
 8001748:	08001765 	.word	0x08001765
 800174c:	0800176b 	.word	0x0800176b
 8001750:	0800175f 	.word	0x0800175f
 8001754:	08001777 	.word	0x08001777
		case GO:
			Presenter_CarGo();
 8001758:	f000 f816 	bl	8001788 <Presenter_CarGo>
			break;
 800175c:	e00e      	b.n	800177c <Presenter_Manual_setState+0x60>
		case BACK:
			Presenter_CarBack();
 800175e:	f000 f86b 	bl	8001838 <Presenter_CarBack>
			break;
 8001762:	e00b      	b.n	800177c <Presenter_Manual_setState+0x60>
		case LEFT:
			Presenter_CarLeft();
 8001764:	f000 f83c 	bl	80017e0 <Presenter_CarLeft>
			break;
 8001768:	e008      	b.n	800177c <Presenter_Manual_setState+0x60>
		case RIGHT:
			Presenter_CarRight();
 800176a:	f000 f84f 	bl	800180c <Presenter_CarRight>
			break;
 800176e:	e005      	b.n	800177c <Presenter_Manual_setState+0x60>
		case STOP:
			Presenter_CarStop();
 8001770:	f000 f820 	bl	80017b4 <Presenter_CarStop>
			break;
 8001774:	e002      	b.n	800177c <Presenter_Manual_setState+0x60>
		case SPEED:
			Presenter_CarSpeed();
 8001776:	f000 f875 	bl	8001864 <Presenter_CarSpeed>
			break;
 800177a:	bf00      	nop
//		default: //Stop
//			Presenter_CarStop();
//			break;
	}
}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	08007984 	.word	0x08007984

08001788 <Presenter_CarGo>:
void Presenter_CarGo() {
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	LCD_writeStringXY(1, 0, "Car Go!");
 800178c:	4a06      	ldr	r2, [pc, #24]	; (80017a8 <Presenter_CarGo+0x20>)
 800178e:	2100      	movs	r1, #0
 8001790:	2001      	movs	r0, #1
 8001792:	f000 fa5c 	bl	8001c4e <LCD_writeStringXY>
	Motor_forward(&leftMotor);
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <Presenter_CarGo+0x24>)
 8001798:	f000 fa9d 	bl	8001cd6 <Motor_forward>
	Motor_forward(&rightMotor);
 800179c:	4804      	ldr	r0, [pc, #16]	; (80017b0 <Presenter_CarGo+0x28>)
 800179e:	f000 fa9a 	bl	8001cd6 <Motor_forward>
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	08007990 	.word	0x08007990
 80017ac:	200005b0 	.word	0x200005b0
 80017b0:	200005c8 	.word	0x200005c8

080017b4 <Presenter_CarStop>:
void Presenter_CarStop() {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	LCD_writeStringXY(1, 0, "Car Stop!");
 80017b8:	4a06      	ldr	r2, [pc, #24]	; (80017d4 <Presenter_CarStop+0x20>)
 80017ba:	2100      	movs	r1, #0
 80017bc:	2001      	movs	r0, #1
 80017be:	f000 fa46 	bl	8001c4e <LCD_writeStringXY>
	Motor_stop(&leftMotor);
 80017c2:	4805      	ldr	r0, [pc, #20]	; (80017d8 <Presenter_CarStop+0x24>)
 80017c4:	f000 fa77 	bl	8001cb6 <Motor_stop>
	Motor_stop(&rightMotor);
 80017c8:	4804      	ldr	r0, [pc, #16]	; (80017dc <Presenter_CarStop+0x28>)
 80017ca:	f000 fa74 	bl	8001cb6 <Motor_stop>
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	08007998 	.word	0x08007998
 80017d8:	200005b0 	.word	0x200005b0
 80017dc:	200005c8 	.word	0x200005c8

080017e0 <Presenter_CarLeft>:
void Presenter_CarLeft() {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
	LCD_writeStringXY(1, 0, "Car Left!");
 80017e4:	4a06      	ldr	r2, [pc, #24]	; (8001800 <Presenter_CarLeft+0x20>)
 80017e6:	2100      	movs	r1, #0
 80017e8:	2001      	movs	r0, #1
 80017ea:	f000 fa30 	bl	8001c4e <LCD_writeStringXY>
	Motor_backward(&leftMotor);
 80017ee:	4805      	ldr	r0, [pc, #20]	; (8001804 <Presenter_CarLeft+0x24>)
 80017f0:	f000 fa91 	bl	8001d16 <Motor_backward>
	Motor_forward(&rightMotor);
 80017f4:	4804      	ldr	r0, [pc, #16]	; (8001808 <Presenter_CarLeft+0x28>)
 80017f6:	f000 fa6e 	bl	8001cd6 <Motor_forward>

}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	080079a4 	.word	0x080079a4
 8001804:	200005b0 	.word	0x200005b0
 8001808:	200005c8 	.word	0x200005c8

0800180c <Presenter_CarRight>:
void Presenter_CarRight() {
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
	LCD_writeStringXY(1, 0, "Car Right!");
 8001810:	4a06      	ldr	r2, [pc, #24]	; (800182c <Presenter_CarRight+0x20>)
 8001812:	2100      	movs	r1, #0
 8001814:	2001      	movs	r0, #1
 8001816:	f000 fa1a 	bl	8001c4e <LCD_writeStringXY>
	Motor_backward(&rightMotor);
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <Presenter_CarRight+0x24>)
 800181c:	f000 fa7b 	bl	8001d16 <Motor_backward>
	Motor_forward(&leftMotor);
 8001820:	4804      	ldr	r0, [pc, #16]	; (8001834 <Presenter_CarRight+0x28>)
 8001822:	f000 fa58 	bl	8001cd6 <Motor_forward>

}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	080079b0 	.word	0x080079b0
 8001830:	200005c8 	.word	0x200005c8
 8001834:	200005b0 	.word	0x200005b0

08001838 <Presenter_CarBack>:
void Presenter_CarBack() {
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
	LCD_writeStringXY(1, 0, "Car Back!");
 800183c:	4a06      	ldr	r2, [pc, #24]	; (8001858 <Presenter_CarBack+0x20>)
 800183e:	2100      	movs	r1, #0
 8001840:	2001      	movs	r0, #1
 8001842:	f000 fa04 	bl	8001c4e <LCD_writeStringXY>
	Motor_backward(&leftMotor);
 8001846:	4805      	ldr	r0, [pc, #20]	; (800185c <Presenter_CarBack+0x24>)
 8001848:	f000 fa65 	bl	8001d16 <Motor_backward>
	Motor_backward(&rightMotor);
 800184c:	4804      	ldr	r0, [pc, #16]	; (8001860 <Presenter_CarBack+0x28>)
 800184e:	f000 fa62 	bl	8001d16 <Motor_backward>

}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	080079bc 	.word	0x080079bc
 800185c:	200005b0 	.word	0x200005b0
 8001860:	200005c8 	.word	0x200005c8

08001864 <Presenter_CarSpeed>:
void Presenter_CarSpeed() {
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af00      	add	r7, sp, #0
	char buff[30];
	sprintf(buff, "Car Speed!:%d", MotorState_getSpeed());
 800186a:	f7ff fead 	bl	80015c8 <MotorState_getSpeed>
 800186e:	4602      	mov	r2, r0
 8001870:	463b      	mov	r3, r7
 8001872:	4907      	ldr	r1, [pc, #28]	; (8001890 <Presenter_CarSpeed+0x2c>)
 8001874:	4618      	mov	r0, r3
 8001876:	f005 fb29 	bl	8006ecc <siprintf>
	LCD_writeStringXY(1, 0, buff);
 800187a:	463b      	mov	r3, r7
 800187c:	461a      	mov	r2, r3
 800187e:	2100      	movs	r1, #0
 8001880:	2001      	movs	r0, #1
 8001882:	f000 f9e4 	bl	8001c4e <LCD_writeStringXY>

}
 8001886:	bf00      	nop
 8001888:	3720      	adds	r7, #32
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	080079c8 	.word	0x080079c8

08001894 <Presenter_Auto_setState>:


void Presenter_Auto_setState(){
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
	LCD_writeStringXY(0, 0, "Car AUTO!");
 8001898:	4a05      	ldr	r2, [pc, #20]	; (80018b0 <Presenter_Auto_setState+0x1c>)
 800189a:	2100      	movs	r1, #0
 800189c:	2000      	movs	r0, #0
 800189e:	f000 f9d6 	bl	8001c4e <LCD_writeStringXY>
	LCD_writeStringXY(1, 0, "                 ");
 80018a2:	4a04      	ldr	r2, [pc, #16]	; (80018b4 <Presenter_Auto_setState+0x20>)
 80018a4:	2100      	movs	r1, #0
 80018a6:	2001      	movs	r0, #1
 80018a8:	f000 f9d1 	bl	8001c4e <LCD_writeStringXY>
}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	080079d8 	.word	0x080079d8
 80018b4:	080079e4 	.word	0x080079e4

080018b8 <button_init>:
 */

#include "Button.h"


void button_init(button_t *button,GPIO_TypeDef* GPIOx,uint16_t GPIO_Pin){
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	4613      	mov	r3, r2
 80018c4:	80fb      	strh	r3, [r7, #6]
	button->GPIOx = GPIOx;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	601a      	str	r2, [r3, #0]
	button->GPIO_Pin = GPIO_Pin;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	88fa      	ldrh	r2, [r7, #6]
 80018d0:	809a      	strh	r2, [r3, #4]
	button->prevState =RELEASED;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2201      	movs	r2, #1
 80018d6:	609a      	str	r2, [r3, #8]
}
 80018d8:	bf00      	nop
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <button_getState>:

button_state_t button_getState(button_t *button){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	int curState = HAL_GPIO_ReadPin(button->GPIOx, button->GPIO_Pin);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	889b      	ldrh	r3, [r3, #4]
 80018f4:	4619      	mov	r1, r3
 80018f6:	4610      	mov	r0, r2
 80018f8:	f000 fdba 	bl	8002470 <HAL_GPIO_ReadPin>
 80018fc:	4603      	mov	r3, r0
 80018fe:	60fb      	str	r3, [r7, #12]

	if((button->prevState == RELEASED) && (curState == PUSHED)){
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d107      	bne.n	8001918 <button_getState+0x34>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d104      	bne.n	8001918 <button_getState+0x34>
		//HAL_Delay(50);
		button->prevState = PUSHED;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
		return ACT_PUSHED;
 8001914:	2303      	movs	r3, #3
 8001916:	e00c      	b.n	8001932 <button_getState+0x4e>
	}
	else 	if((button->prevState == PUSHED) && (curState == RELEASED)){
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d107      	bne.n	8001930 <button_getState+0x4c>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d104      	bne.n	8001930 <button_getState+0x4c>
		//HAL_Delay(50);
		button->prevState = RELEASED;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2201      	movs	r2, #1
 800192a:	609a      	str	r2, [r3, #8]
		return ACT_RELEASED;
 800192c:	2304      	movs	r3, #4
 800192e:	e000      	b.n	8001932 <button_getState+0x4e>
	}
	return NO_ACT;
 8001930:	2302      	movs	r3, #2
}
 8001932:	4618      	mov	r0, r3
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <LCD_delay>:
#include "LCD.h"

I2C_HandleTypeDef *hLCDI2C;
uint8_t lcdData = 0;

void LCD_delay(uint32_t Delay){
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
	HAL_Delay(Delay);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 fa78 	bl	8001e38 <HAL_Delay>
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <LCD_init>:

void LCD_init(I2C_HandleTypeDef *hi2c1){
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	hLCDI2C = hi2c1;
 8001958:	4a18      	ldr	r2, [pc, #96]	; (80019bc <LCD_init+0x6c>)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6013      	str	r3, [r2, #0]
	LCD_delay(15);
 800195e:	200f      	movs	r0, #15
 8001960:	f7ff ffeb 	bl	800193a <LCD_delay>
	LCD_cmdMode();
 8001964:	f000 f83e 	bl	80019e4 <LCD_cmdMode>
	LCD_writeMode();
 8001968:	f000 f85c 	bl	8001a24 <LCD_writeMode>
	LCD_sendHighNibble(0x30);
 800196c:	2030      	movs	r0, #48	; 0x30
 800196e:	f000 f8b1 	bl	8001ad4 <LCD_sendHighNibble>
	LCD_delay(5);
 8001972:	2005      	movs	r0, #5
 8001974:	f7ff ffe1 	bl	800193a <LCD_delay>
	LCD_sendHighNibble(0x30);
 8001978:	2030      	movs	r0, #48	; 0x30
 800197a:	f000 f8ab 	bl	8001ad4 <LCD_sendHighNibble>
	LCD_delay(1);
 800197e:	2001      	movs	r0, #1
 8001980:	f7ff ffdb 	bl	800193a <LCD_delay>
	LCD_sendHighNibble(0x30);
 8001984:	2030      	movs	r0, #48	; 0x30
 8001986:	f000 f8a5 	bl	8001ad4 <LCD_sendHighNibble>
	LCD_sendHighNibble(0x20);
 800198a:	2020      	movs	r0, #32
 800198c:	f000 f8a2 	bl	8001ad4 <LCD_sendHighNibble>
	LCD_sendByte(LCD_4BIT_FUNCTION_SET);	//Function Set: 4Bit Interface, 2Line, 5x8 Font
 8001990:	2028      	movs	r0, #40	; 0x28
 8001992:	f000 f88d 	bl	8001ab0 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_OFF); 				//Display Off
 8001996:	2008      	movs	r0, #8
 8001998:	f000 f88a 	bl	8001ab0 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_CLEAR);			//Display Clear
 800199c:	2001      	movs	r0, #1
 800199e:	f000 f887 	bl	8001ab0 <LCD_sendByte>
	LCD_sendByte(LCD_ENTRY_MODE_SET);			//Entry Mode Set
 80019a2:	2006      	movs	r0, #6
 80019a4:	f000 f884 	bl	8001ab0 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_ON);					//Display On
 80019a8:	200c      	movs	r0, #12
 80019aa:	f000 f881 	bl	8001ab0 <LCD_sendByte>
	LCD_backLightOn();										//backLightOn
 80019ae:	f000 f807 	bl	80019c0 <LCD_backLightOn>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200005e0 	.word	0x200005e0

080019c0 <LCD_backLightOn>:

void LCD_backLightOn(){
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	lcdData |=(1<<LCD_BACKLIGHT);
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <LCD_backLightOn+0x20>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	f043 0308 	orr.w	r3, r3, #8
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <LCD_backLightOn+0x20>)
 80019d0:	701a      	strb	r2, [r3, #0]
	LCD_sendData(lcdData);
 80019d2:	4b03      	ldr	r3, [pc, #12]	; (80019e0 <LCD_backLightOn+0x20>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 f854 	bl	8001a84 <LCD_sendData>
}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	200005e4 	.word	0x200005e4

080019e4 <LCD_cmdMode>:

void LCD_cmdMode() {
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RS);
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <LCD_cmdMode+0x1c>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	f023 0301 	bic.w	r3, r3, #1
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <LCD_cmdMode+0x1c>)
 80019f4:	701a      	strb	r2, [r3, #0]
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	200005e4 	.word	0x200005e4

08001a04 <LCD_charMode>:
void LCD_charMode() {
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_RS);
 8001a08:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <LCD_charMode+0x1c>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	4b03      	ldr	r3, [pc, #12]	; (8001a20 <LCD_charMode+0x1c>)
 8001a14:	701a      	strb	r2, [r3, #0]
}
 8001a16:	bf00      	nop
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	200005e4 	.word	0x200005e4

08001a24 <LCD_writeMode>:
void LCD_writeMode() {
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RW);
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <LCD_writeMode+0x1c>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	f023 0302 	bic.w	r3, r3, #2
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4b03      	ldr	r3, [pc, #12]	; (8001a40 <LCD_writeMode+0x1c>)
 8001a34:	701a      	strb	r2, [r3, #0]
}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	200005e4 	.word	0x200005e4

08001a44 <LCD_E_High>:

void LCD_E_High() {
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_E);
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <LCD_E_High+0x1c>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	f043 0304 	orr.w	r3, r3, #4
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4b03      	ldr	r3, [pc, #12]	; (8001a60 <LCD_E_High+0x1c>)
 8001a54:	701a      	strb	r2, [r3, #0]
}
 8001a56:	bf00      	nop
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	200005e4 	.word	0x200005e4

08001a64 <LCD_E_Low>:
void LCD_E_Low() {
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_E);
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <LCD_E_Low+0x1c>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	f023 0304 	bic.w	r3, r3, #4
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	4b03      	ldr	r3, [pc, #12]	; (8001a80 <LCD_E_Low+0x1c>)
 8001a74:	701a      	strb	r2, [r3, #0]
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	200005e4 	.word	0x200005e4

08001a84 <LCD_sendData>:

void LCD_sendData(uint8_t data) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af02      	add	r7, sp, #8
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hLCDI2C, lcdDevAddr_w, &data, 1, 1000);
 8001a8e:	4b07      	ldr	r3, [pc, #28]	; (8001aac <LCD_sendData+0x28>)
 8001a90:	6818      	ldr	r0, [r3, #0]
 8001a92:	1dfa      	adds	r2, r7, #7
 8001a94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	214e      	movs	r1, #78	; 0x4e
 8001a9e:	f000 fe77 	bl	8002790 <HAL_I2C_Master_Transmit>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200005e0 	.word	0x200005e0

08001ab0 <LCD_sendByte>:

void LCD_sendByte(uint8_t data) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
	LCD_sendHighNibble(data); //상위 4bit 전송
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f000 f809 	bl	8001ad4 <LCD_sendHighNibble>
	LCD_sendLowNibble(data); //하위 4bit 전송
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f000 f835 	bl	8001b34 <LCD_sendLowNibble>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <LCD_sendHighNibble>:

void LCD_sendHighNibble(uint8_t data) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	71fb      	strb	r3, [r7, #7]
	LCD_E_High();
 8001ade:	f7ff ffb1 	bl	8001a44 <LCD_E_High>
	lcdData = (lcdData & 0x0f) | (data & 0xf0);	//상위 4bit data
 8001ae2:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <LCD_sendHighNibble+0x5c>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	b25b      	sxtb	r3, r3
 8001ae8:	f003 030f 	and.w	r3, r3, #15
 8001aec:	b25a      	sxtb	r2, r3
 8001aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af2:	f023 030f 	bic.w	r3, r3, #15
 8001af6:	b25b      	sxtb	r3, r3
 8001af8:	4313      	orrs	r3, r2
 8001afa:	b25b      	sxtb	r3, r3
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <LCD_sendHighNibble+0x5c>)
 8001b00:	701a      	strb	r2, [r3, #0]
	LCD_sendData(lcdData); //MCU send to LCD
 8001b02:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <LCD_sendHighNibble+0x5c>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff ffbc 	bl	8001a84 <LCD_sendData>
	HAL_Delay(1);
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	f000 f993 	bl	8001e38 <HAL_Delay>
	LCD_E_Low();
 8001b12:	f7ff ffa7 	bl	8001a64 <LCD_E_Low>
	LCD_sendData(lcdData); //MCU send to LCD
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <LCD_sendHighNibble+0x5c>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff ffb2 	bl	8001a84 <LCD_sendData>
	HAL_Delay(1);
 8001b20:	2001      	movs	r0, #1
 8001b22:	f000 f989 	bl	8001e38 <HAL_Delay>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200005e4 	.word	0x200005e4

08001b34 <LCD_sendLowNibble>:

void LCD_sendLowNibble(uint8_t data) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]
	LCD_E_High();
 8001b3e:	f7ff ff81 	bl	8001a44 <LCD_E_High>
	lcdData = (lcdData & 0x0f) | ((data & 0x0f)<<4);	//하위 4bit data
 8001b42:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <LCD_sendLowNibble+0x58>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	b25b      	sxtb	r3, r3
 8001b48:	f003 030f 	and.w	r3, r3, #15
 8001b4c:	b25a      	sxtb	r2, r3
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	011b      	lsls	r3, r3, #4
 8001b52:	b25b      	sxtb	r3, r3
 8001b54:	4313      	orrs	r3, r2
 8001b56:	b25b      	sxtb	r3, r3
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <LCD_sendLowNibble+0x58>)
 8001b5c:	701a      	strb	r2, [r3, #0]
	LCD_sendData(lcdData); //MCU send to LCD
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <LCD_sendLowNibble+0x58>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff ff8e 	bl	8001a84 <LCD_sendData>
	HAL_Delay(1);
 8001b68:	2001      	movs	r0, #1
 8001b6a:	f000 f965 	bl	8001e38 <HAL_Delay>
	LCD_E_Low();
 8001b6e:	f7ff ff79 	bl	8001a64 <LCD_E_Low>
	LCD_sendData(lcdData); //MCU send to LCD
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <LCD_sendLowNibble+0x58>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff ff84 	bl	8001a84 <LCD_sendData>
	HAL_Delay(1);
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	f000 f95b 	bl	8001e38 <HAL_Delay>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	200005e4 	.word	0x200005e4

08001b90 <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
	LCD_cmdMode();
 8001b9a:	f7ff ff23 	bl	80019e4 <LCD_cmdMode>
	LCD_writeMode();
 8001b9e:	f7ff ff41 	bl	8001a24 <LCD_writeMode>
	LCD_sendByte(data);
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff83 	bl	8001ab0 <LCD_sendByte>
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data) {
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	4603      	mov	r3, r0
 8001bba:	71fb      	strb	r3, [r7, #7]
	LCD_charMode();
 8001bbc:	f7ff ff22 	bl	8001a04 <LCD_charMode>
	LCD_writeMode();
 8001bc0:	f7ff ff30 	bl	8001a24 <LCD_writeMode>
	LCD_sendByte(data);
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff ff72 	bl	8001ab0 <LCD_sendByte>
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col){
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	460a      	mov	r2, r1
 8001bde:	71fb      	strb	r3, [r7, #7]
 8001be0:	4613      	mov	r3, r2
 8001be2:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 8001be4:	79bb      	ldrb	r3, [r7, #6]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	71bb      	strb	r3, [r7, #6]
	row %=2;
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = (0x40 * row) +col;
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	019b      	lsls	r3, r3, #6
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	79bb      	ldrb	r3, [r7, #6]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	73fb      	strb	r3, [r7, #15]
	uint8_t command = 0x80 + lcdRegAddr;
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	3b80      	subs	r3, #128	; 0x80
 8001c04:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 8001c06:	7bbb      	ldrb	r3, [r7, #14]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ffc1 	bl	8001b90 <LCD_writeCmdData>
}
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <LCD_writeString>:

void LCD_writeString(char *str){
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b084      	sub	sp, #16
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
	for(int i=0; str[i]; i++){ //str[i] == 0 for문 탈출
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	e009      	b.n	8001c38 <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ffc0 	bl	8001bb2 <LCD_writeCharData>
	for(int i=0; str[i]; i++){ //str[i] == 0 for문 탈출
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	3301      	adds	r3, #1
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1ef      	bne.n	8001c24 <LCD_writeString+0xe>
	}
}
 8001c44:	bf00      	nop
 8001c46:	bf00      	nop
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col,char *str){
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	4603      	mov	r3, r0
 8001c56:	603a      	str	r2, [r7, #0]
 8001c58:	71fb      	strb	r3, [r7, #7]
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 8001c5e:	79ba      	ldrb	r2, [r7, #6]
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	4611      	mov	r1, r2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ffb5 	bl	8001bd4 <LCD_gotoXY>
	LCD_writeString(str);
 8001c6a:	6838      	ldr	r0, [r7, #0]
 8001c6c:	f7ff ffd3 	bl	8001c16 <LCD_writeString>
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <Motor_init>:
#include "Motor.h"


void Motor_init(Motor_t *Motor, TIM_HandleTypeDef *htim, uint32_t Channel,
		GPIO_TypeDef *dir1_GPIO, uint16_t dir1_GPIO_Pin, GPIO_TypeDef *dir2_GPIO,
		uint16_t dir2_GPIO_Pin) {
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	603b      	str	r3, [r7, #0]
	Motor-> htim = htim;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	601a      	str	r2, [r3, #0]
	Motor-> Channel = Channel;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	605a      	str	r2, [r3, #4]
	Motor-> dir1_GPIO = dir1_GPIO;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	609a      	str	r2, [r3, #8]
	Motor-> dir1_GPIO_Pin = dir1_GPIO_Pin;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8b3a      	ldrh	r2, [r7, #24]
 8001c9c:	819a      	strh	r2, [r3, #12]
	Motor-> dir2_GPIO = dir2_GPIO;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	69fa      	ldr	r2, [r7, #28]
 8001ca2:	611a      	str	r2, [r3, #16]
	Motor-> dir2_GPIO_Pin = dir2_GPIO_Pin;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8c3a      	ldrh	r2, [r7, #32]
 8001ca8:	829a      	strh	r2, [r3, #20]
}
 8001caa:	bf00      	nop
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <Motor_stop>:

void Motor_stop(Motor_t *Motor) {
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(Motor->htim, Motor->Channel);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4610      	mov	r0, r2
 8001cca:	f001 ff41 	bl	8003b50 <HAL_TIM_PWM_Stop>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <Motor_forward>:

void Motor_forward(Motor_t *Motor) {
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Motor->dir1_GPIO, Motor->dir1_GPIO_Pin, SET);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6898      	ldr	r0, [r3, #8]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	899b      	ldrh	r3, [r3, #12]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f000 fbd9 	bl	80024a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor->dir2_GPIO, Motor->dir2_GPIO_Pin, RESET);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6918      	ldr	r0, [r3, #16]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	8a9b      	ldrh	r3, [r3, #20]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f000 fbd1 	bl	80024a0 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(Motor->htim, Motor->Channel);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	4619      	mov	r1, r3
 8001d08:	4610      	mov	r0, r2
 8001d0a:	f001 fe71 	bl	80039f0 <HAL_TIM_PWM_Start>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <Motor_backward>:
void Motor_backward(Motor_t *Motor) {
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Motor->dir1_GPIO, Motor->dir1_GPIO_Pin, RESET);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6898      	ldr	r0, [r3, #8]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	899b      	ldrh	r3, [r3, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f000 fbb9 	bl	80024a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor->dir2_GPIO, Motor->dir2_GPIO_Pin, SET);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6918      	ldr	r0, [r3, #16]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	8a9b      	ldrh	r3, [r3, #20]
 8001d36:	2201      	movs	r2, #1
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f000 fbb1 	bl	80024a0 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(Motor->htim, Motor->Channel);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	4619      	mov	r1, r3
 8001d48:	4610      	mov	r0, r2
 8001d4a:	f001 fe51 	bl	80039f0 <HAL_TIM_PWM_Start>

}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <Motor_setSpeed>:
void Motor_setSpeed(Motor_t *Motor,int speedVal) {
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, speedVal);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d105      	bne.n	8001d74 <Motor_setSpeed+0x1e>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001d72:	e018      	b.n	8001da6 <Motor_setSpeed+0x50>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, speedVal);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d105      	bne.n	8001d88 <Motor_setSpeed+0x32>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001d86:	e00e      	b.n	8001da6 <Motor_setSpeed+0x50>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, speedVal);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d105      	bne.n	8001d9c <Motor_setSpeed+0x46>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001d9a:	e004      	b.n	8001da6 <Motor_setSpeed+0x50>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, speedVal);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001db8:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <HAL_Init+0x40>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a0d      	ldr	r2, [pc, #52]	; (8001df4 <HAL_Init+0x40>)
 8001dbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_Init+0x40>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <HAL_Init+0x40>)
 8001dca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <HAL_Init+0x40>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a07      	ldr	r2, [pc, #28]	; (8001df4 <HAL_Init+0x40>)
 8001dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ddc:	2003      	movs	r0, #3
 8001dde:	f000 f8fc 	bl	8001fda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001de2:	2005      	movs	r0, #5
 8001de4:	f7ff f920 	bl	8001028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001de8:	f7fe ffa2 	bl	8000d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40023c00 	.word	0x40023c00

08001df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_IncTick+0x20>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_IncTick+0x24>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	4a04      	ldr	r2, [pc, #16]	; (8001e1c <HAL_IncTick+0x24>)
 8001e0a:	6013      	str	r3, [r2, #0]
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20000008 	.word	0x20000008
 8001e1c:	200005e8 	.word	0x200005e8

08001e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return uwTick;
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <HAL_GetTick+0x14>)
 8001e26:	681b      	ldr	r3, [r3, #0]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	200005e8 	.word	0x200005e8

08001e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e40:	f7ff ffee 	bl	8001e20 <HAL_GetTick>
 8001e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e50:	d005      	beq.n	8001e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e52:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <HAL_Delay+0x44>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e5e:	bf00      	nop
 8001e60:	f7ff ffde 	bl	8001e20 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d8f7      	bhi.n	8001e60 <HAL_Delay+0x28>
  {
  }
}
 8001e70:	bf00      	nop
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000008 	.word	0x20000008

08001e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eb2:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	60d3      	str	r3, [r2, #12]
}
 8001eb8:	bf00      	nop
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ecc:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	0a1b      	lsrs	r3, r3, #8
 8001ed2:	f003 0307 	and.w	r3, r3, #7
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	db0b      	blt.n	8001f0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	f003 021f 	and.w	r2, r3, #31
 8001efc:	4907      	ldr	r1, [pc, #28]	; (8001f1c <__NVIC_EnableIRQ+0x38>)
 8001efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f02:	095b      	lsrs	r3, r3, #5
 8001f04:	2001      	movs	r0, #1
 8001f06:	fa00 f202 	lsl.w	r2, r0, r2
 8001f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	e000e100 	.word	0xe000e100

08001f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	6039      	str	r1, [r7, #0]
 8001f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	db0a      	blt.n	8001f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	490c      	ldr	r1, [pc, #48]	; (8001f6c <__NVIC_SetPriority+0x4c>)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	0112      	lsls	r2, r2, #4
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	440b      	add	r3, r1
 8001f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f48:	e00a      	b.n	8001f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	4908      	ldr	r1, [pc, #32]	; (8001f70 <__NVIC_SetPriority+0x50>)
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	3b04      	subs	r3, #4
 8001f58:	0112      	lsls	r2, r2, #4
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	761a      	strb	r2, [r3, #24]
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000e100 	.word	0xe000e100
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b089      	sub	sp, #36	; 0x24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f1c3 0307 	rsb	r3, r3, #7
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	bf28      	it	cs
 8001f92:	2304      	movcs	r3, #4
 8001f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	2b06      	cmp	r3, #6
 8001f9c:	d902      	bls.n	8001fa4 <NVIC_EncodePriority+0x30>
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3b03      	subs	r3, #3
 8001fa2:	e000      	b.n	8001fa6 <NVIC_EncodePriority+0x32>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43da      	mvns	r2, r3
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc6:	43d9      	mvns	r1, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fcc:	4313      	orrs	r3, r2
         );
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3724      	adds	r7, #36	; 0x24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff ff4c 	bl	8001e80 <__NVIC_SetPriorityGrouping>
}
 8001fe8:	bf00      	nop
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
 8001ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002002:	f7ff ff61 	bl	8001ec8 <__NVIC_GetPriorityGrouping>
 8002006:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	68b9      	ldr	r1, [r7, #8]
 800200c:	6978      	ldr	r0, [r7, #20]
 800200e:	f7ff ffb1 	bl	8001f74 <NVIC_EncodePriority>
 8002012:	4602      	mov	r2, r0
 8002014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002018:	4611      	mov	r1, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff ff80 	bl	8001f20 <__NVIC_SetPriority>
}
 8002020:	bf00      	nop
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff ff54 	bl	8001ee4 <__NVIC_EnableIRQ>
}
 800203c:	bf00      	nop
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002050:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002052:	f7ff fee5 	bl	8001e20 <HAL_GetTick>
 8002056:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d008      	beq.n	8002076 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2280      	movs	r2, #128	; 0x80
 8002068:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e052      	b.n	800211c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0216 	bic.w	r2, r2, #22
 8002084:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	695a      	ldr	r2, [r3, #20]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002094:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	2b00      	cmp	r3, #0
 800209c:	d103      	bne.n	80020a6 <HAL_DMA_Abort+0x62>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d007      	beq.n	80020b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 0208 	bic.w	r2, r2, #8
 80020b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 0201 	bic.w	r2, r2, #1
 80020c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020c6:	e013      	b.n	80020f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020c8:	f7ff feaa 	bl	8001e20 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b05      	cmp	r3, #5
 80020d4:	d90c      	bls.n	80020f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2220      	movs	r2, #32
 80020da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2203      	movs	r2, #3
 80020e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e015      	b.n	800211c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1e4      	bne.n	80020c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002102:	223f      	movs	r2, #63	; 0x3f
 8002104:	409a      	lsls	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d004      	beq.n	8002142 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2280      	movs	r2, #128	; 0x80
 800213c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e00c      	b.n	800215c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2205      	movs	r2, #5
 8002146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0201 	bic.w	r2, r2, #1
 8002158:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002168:	b480      	push	{r7}
 800216a:	b089      	sub	sp, #36	; 0x24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800217a:	2300      	movs	r3, #0
 800217c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
 8002182:	e159      	b.n	8002438 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002184:	2201      	movs	r2, #1
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	4013      	ands	r3, r2
 8002196:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	429a      	cmp	r2, r3
 800219e:	f040 8148 	bne.w	8002432 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d005      	beq.n	80021ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d130      	bne.n	800221c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	2203      	movs	r2, #3
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43db      	mvns	r3, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4013      	ands	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	68da      	ldr	r2, [r3, #12]
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021f0:	2201      	movs	r2, #1
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	091b      	lsrs	r3, r3, #4
 8002206:	f003 0201 	and.w	r2, r3, #1
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	2b03      	cmp	r3, #3
 8002226:	d017      	beq.n	8002258 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	2203      	movs	r2, #3
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4313      	orrs	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 0303 	and.w	r3, r3, #3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d123      	bne.n	80022ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	08da      	lsrs	r2, r3, #3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3208      	adds	r2, #8
 800226c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002270:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	220f      	movs	r2, #15
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4013      	ands	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	691a      	ldr	r2, [r3, #16]
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	08da      	lsrs	r2, r3, #3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3208      	adds	r2, #8
 80022a6:	69b9      	ldr	r1, [r7, #24]
 80022a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	2203      	movs	r2, #3
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 0203 	and.w	r2, r3, #3
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 80a2 	beq.w	8002432 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	4b57      	ldr	r3, [pc, #348]	; (8002450 <HAL_GPIO_Init+0x2e8>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	4a56      	ldr	r2, [pc, #344]	; (8002450 <HAL_GPIO_Init+0x2e8>)
 80022f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022fc:	6453      	str	r3, [r2, #68]	; 0x44
 80022fe:	4b54      	ldr	r3, [pc, #336]	; (8002450 <HAL_GPIO_Init+0x2e8>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800230a:	4a52      	ldr	r2, [pc, #328]	; (8002454 <HAL_GPIO_Init+0x2ec>)
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	089b      	lsrs	r3, r3, #2
 8002310:	3302      	adds	r3, #2
 8002312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	220f      	movs	r2, #15
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4013      	ands	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a49      	ldr	r2, [pc, #292]	; (8002458 <HAL_GPIO_Init+0x2f0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d019      	beq.n	800236a <HAL_GPIO_Init+0x202>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a48      	ldr	r2, [pc, #288]	; (800245c <HAL_GPIO_Init+0x2f4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d013      	beq.n	8002366 <HAL_GPIO_Init+0x1fe>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a47      	ldr	r2, [pc, #284]	; (8002460 <HAL_GPIO_Init+0x2f8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d00d      	beq.n	8002362 <HAL_GPIO_Init+0x1fa>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a46      	ldr	r2, [pc, #280]	; (8002464 <HAL_GPIO_Init+0x2fc>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d007      	beq.n	800235e <HAL_GPIO_Init+0x1f6>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a45      	ldr	r2, [pc, #276]	; (8002468 <HAL_GPIO_Init+0x300>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d101      	bne.n	800235a <HAL_GPIO_Init+0x1f2>
 8002356:	2304      	movs	r3, #4
 8002358:	e008      	b.n	800236c <HAL_GPIO_Init+0x204>
 800235a:	2307      	movs	r3, #7
 800235c:	e006      	b.n	800236c <HAL_GPIO_Init+0x204>
 800235e:	2303      	movs	r3, #3
 8002360:	e004      	b.n	800236c <HAL_GPIO_Init+0x204>
 8002362:	2302      	movs	r3, #2
 8002364:	e002      	b.n	800236c <HAL_GPIO_Init+0x204>
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <HAL_GPIO_Init+0x204>
 800236a:	2300      	movs	r3, #0
 800236c:	69fa      	ldr	r2, [r7, #28]
 800236e:	f002 0203 	and.w	r2, r2, #3
 8002372:	0092      	lsls	r2, r2, #2
 8002374:	4093      	lsls	r3, r2
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4313      	orrs	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800237c:	4935      	ldr	r1, [pc, #212]	; (8002454 <HAL_GPIO_Init+0x2ec>)
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	089b      	lsrs	r3, r3, #2
 8002382:	3302      	adds	r3, #2
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800238a:	4b38      	ldr	r3, [pc, #224]	; (800246c <HAL_GPIO_Init+0x304>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ae:	4a2f      	ldr	r2, [pc, #188]	; (800246c <HAL_GPIO_Init+0x304>)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023b4:	4b2d      	ldr	r3, [pc, #180]	; (800246c <HAL_GPIO_Init+0x304>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023d8:	4a24      	ldr	r2, [pc, #144]	; (800246c <HAL_GPIO_Init+0x304>)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023de:	4b23      	ldr	r3, [pc, #140]	; (800246c <HAL_GPIO_Init+0x304>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	43db      	mvns	r3, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4013      	ands	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002402:	4a1a      	ldr	r2, [pc, #104]	; (800246c <HAL_GPIO_Init+0x304>)
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002408:	4b18      	ldr	r3, [pc, #96]	; (800246c <HAL_GPIO_Init+0x304>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800242c:	4a0f      	ldr	r2, [pc, #60]	; (800246c <HAL_GPIO_Init+0x304>)
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3301      	adds	r3, #1
 8002436:	61fb      	str	r3, [r7, #28]
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	2b0f      	cmp	r3, #15
 800243c:	f67f aea2 	bls.w	8002184 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002440:	bf00      	nop
 8002442:	bf00      	nop
 8002444:	3724      	adds	r7, #36	; 0x24
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40023800 	.word	0x40023800
 8002454:	40013800 	.word	0x40013800
 8002458:	40020000 	.word	0x40020000
 800245c:	40020400 	.word	0x40020400
 8002460:	40020800 	.word	0x40020800
 8002464:	40020c00 	.word	0x40020c00
 8002468:	40021000 	.word	0x40021000
 800246c:	40013c00 	.word	0x40013c00

08002470 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691a      	ldr	r2, [r3, #16]
 8002480:	887b      	ldrh	r3, [r7, #2]
 8002482:	4013      	ands	r3, r2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d002      	beq.n	800248e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
 800248c:	e001      	b.n	8002492 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800248e:	2300      	movs	r3, #0
 8002490:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002492:	7bfb      	ldrb	r3, [r7, #15]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	807b      	strh	r3, [r7, #2]
 80024ac:	4613      	mov	r3, r2
 80024ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024b0:	787b      	ldrb	r3, [r7, #1]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024b6:	887a      	ldrh	r2, [r7, #2]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024bc:	e003      	b.n	80024c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024be:	887b      	ldrh	r3, [r7, #2]
 80024c0:	041a      	lsls	r2, r3, #16
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	619a      	str	r2, [r3, #24]
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b085      	sub	sp, #20
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	460b      	mov	r3, r1
 80024dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024e4:	887a      	ldrh	r2, [r7, #2]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4013      	ands	r3, r2
 80024ea:	041a      	lsls	r2, r3, #16
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	43d9      	mvns	r1, r3
 80024f0:	887b      	ldrh	r3, [r7, #2]
 80024f2:	400b      	ands	r3, r1
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	619a      	str	r2, [r3, #24]
}
 80024fa:	bf00      	nop
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
	...

08002508 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e12b      	b.n	8002772 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d106      	bne.n	8002534 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7fe fc2a 	bl	8000d88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2224      	movs	r2, #36	; 0x24
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0201 	bic.w	r2, r2, #1
 800254a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800255a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800256a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800256c:	f001 f8da 	bl	8003724 <HAL_RCC_GetPCLK1Freq>
 8002570:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	4a81      	ldr	r2, [pc, #516]	; (800277c <HAL_I2C_Init+0x274>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d807      	bhi.n	800258c <HAL_I2C_Init+0x84>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4a80      	ldr	r2, [pc, #512]	; (8002780 <HAL_I2C_Init+0x278>)
 8002580:	4293      	cmp	r3, r2
 8002582:	bf94      	ite	ls
 8002584:	2301      	movls	r3, #1
 8002586:	2300      	movhi	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	e006      	b.n	800259a <HAL_I2C_Init+0x92>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4a7d      	ldr	r2, [pc, #500]	; (8002784 <HAL_I2C_Init+0x27c>)
 8002590:	4293      	cmp	r3, r2
 8002592:	bf94      	ite	ls
 8002594:	2301      	movls	r3, #1
 8002596:	2300      	movhi	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e0e7      	b.n	8002772 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	4a78      	ldr	r2, [pc, #480]	; (8002788 <HAL_I2C_Init+0x280>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	0c9b      	lsrs	r3, r3, #18
 80025ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	430a      	orrs	r2, r1
 80025c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	4a6a      	ldr	r2, [pc, #424]	; (800277c <HAL_I2C_Init+0x274>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d802      	bhi.n	80025dc <HAL_I2C_Init+0xd4>
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	3301      	adds	r3, #1
 80025da:	e009      	b.n	80025f0 <HAL_I2C_Init+0xe8>
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025e2:	fb02 f303 	mul.w	r3, r2, r3
 80025e6:	4a69      	ldr	r2, [pc, #420]	; (800278c <HAL_I2C_Init+0x284>)
 80025e8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ec:	099b      	lsrs	r3, r3, #6
 80025ee:	3301      	adds	r3, #1
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	430b      	orrs	r3, r1
 80025f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002602:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	495c      	ldr	r1, [pc, #368]	; (800277c <HAL_I2C_Init+0x274>)
 800260c:	428b      	cmp	r3, r1
 800260e:	d819      	bhi.n	8002644 <HAL_I2C_Init+0x13c>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	1e59      	subs	r1, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	fbb1 f3f3 	udiv	r3, r1, r3
 800261e:	1c59      	adds	r1, r3, #1
 8002620:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002624:	400b      	ands	r3, r1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00a      	beq.n	8002640 <HAL_I2C_Init+0x138>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	1e59      	subs	r1, r3, #1
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	fbb1 f3f3 	udiv	r3, r1, r3
 8002638:	3301      	adds	r3, #1
 800263a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800263e:	e051      	b.n	80026e4 <HAL_I2C_Init+0x1dc>
 8002640:	2304      	movs	r3, #4
 8002642:	e04f      	b.n	80026e4 <HAL_I2C_Init+0x1dc>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d111      	bne.n	8002670 <HAL_I2C_Init+0x168>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	1e58      	subs	r0, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6859      	ldr	r1, [r3, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	440b      	add	r3, r1
 800265a:	fbb0 f3f3 	udiv	r3, r0, r3
 800265e:	3301      	adds	r3, #1
 8002660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002664:	2b00      	cmp	r3, #0
 8002666:	bf0c      	ite	eq
 8002668:	2301      	moveq	r3, #1
 800266a:	2300      	movne	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	e012      	b.n	8002696 <HAL_I2C_Init+0x18e>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	1e58      	subs	r0, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6859      	ldr	r1, [r3, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	0099      	lsls	r1, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	fbb0 f3f3 	udiv	r3, r0, r3
 8002686:	3301      	adds	r3, #1
 8002688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800268c:	2b00      	cmp	r3, #0
 800268e:	bf0c      	ite	eq
 8002690:	2301      	moveq	r3, #1
 8002692:	2300      	movne	r3, #0
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_I2C_Init+0x196>
 800269a:	2301      	movs	r3, #1
 800269c:	e022      	b.n	80026e4 <HAL_I2C_Init+0x1dc>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10e      	bne.n	80026c4 <HAL_I2C_Init+0x1bc>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1e58      	subs	r0, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6859      	ldr	r1, [r3, #4]
 80026ae:	460b      	mov	r3, r1
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	440b      	add	r3, r1
 80026b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80026b8:	3301      	adds	r3, #1
 80026ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026c2:	e00f      	b.n	80026e4 <HAL_I2C_Init+0x1dc>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	1e58      	subs	r0, r3, #1
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6859      	ldr	r1, [r3, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	0099      	lsls	r1, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026da:	3301      	adds	r3, #1
 80026dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	6809      	ldr	r1, [r1, #0]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69da      	ldr	r2, [r3, #28]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002712:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6911      	ldr	r1, [r2, #16]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	68d2      	ldr	r2, [r2, #12]
 800271e:	4311      	orrs	r1, r2
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	430b      	orrs	r3, r1
 8002726:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695a      	ldr	r2, [r3, #20]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0201 	orr.w	r2, r2, #1
 8002752:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2220      	movs	r2, #32
 800275e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	000186a0 	.word	0x000186a0
 8002780:	001e847f 	.word	0x001e847f
 8002784:	003d08ff 	.word	0x003d08ff
 8002788:	431bde83 	.word	0x431bde83
 800278c:	10624dd3 	.word	0x10624dd3

08002790 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af02      	add	r7, sp, #8
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	607a      	str	r2, [r7, #4]
 800279a:	461a      	mov	r2, r3
 800279c:	460b      	mov	r3, r1
 800279e:	817b      	strh	r3, [r7, #10]
 80027a0:	4613      	mov	r3, r2
 80027a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027a4:	f7ff fb3c 	bl	8001e20 <HAL_GetTick>
 80027a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b20      	cmp	r3, #32
 80027b4:	f040 80e0 	bne.w	8002978 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	2319      	movs	r3, #25
 80027be:	2201      	movs	r2, #1
 80027c0:	4970      	ldr	r1, [pc, #448]	; (8002984 <HAL_I2C_Master_Transmit+0x1f4>)
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 f964 	bl	8002a90 <I2C_WaitOnFlagUntilTimeout>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80027ce:	2302      	movs	r3, #2
 80027d0:	e0d3      	b.n	800297a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_I2C_Master_Transmit+0x50>
 80027dc:	2302      	movs	r3, #2
 80027de:	e0cc      	b.n	800297a <HAL_I2C_Master_Transmit+0x1ea>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d007      	beq.n	8002806 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f042 0201 	orr.w	r2, r2, #1
 8002804:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002814:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2221      	movs	r2, #33	; 0x21
 800281a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2210      	movs	r2, #16
 8002822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	893a      	ldrh	r2, [r7, #8]
 8002836:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283c:	b29a      	uxth	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4a50      	ldr	r2, [pc, #320]	; (8002988 <HAL_I2C_Master_Transmit+0x1f8>)
 8002846:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002848:	8979      	ldrh	r1, [r7, #10]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	6a3a      	ldr	r2, [r7, #32]
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 f89c 	bl	800298c <I2C_MasterRequestWrite>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e08d      	b.n	800297a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800285e:	2300      	movs	r3, #0
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002874:	e066      	b.n	8002944 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	6a39      	ldr	r1, [r7, #32]
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 fa22 	bl	8002cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00d      	beq.n	80028a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	2b04      	cmp	r3, #4
 800288c:	d107      	bne.n	800289e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800289c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e06b      	b.n	800297a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	781a      	ldrb	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	1c5a      	adds	r2, r3, #1
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028bc:	b29b      	uxth	r3, r3
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d11b      	bne.n	8002918 <HAL_I2C_Master_Transmit+0x188>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d017      	beq.n	8002918 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	781a      	ldrb	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002902:	b29b      	uxth	r3, r3
 8002904:	3b01      	subs	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002910:	3b01      	subs	r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	6a39      	ldr	r1, [r7, #32]
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 fa19 	bl	8002d54 <I2C_WaitOnBTFFlagUntilTimeout>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00d      	beq.n	8002944 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	2b04      	cmp	r3, #4
 800292e:	d107      	bne.n	8002940 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800293e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e01a      	b.n	800297a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002948:	2b00      	cmp	r3, #0
 800294a:	d194      	bne.n	8002876 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800295a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2220      	movs	r2, #32
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	e000      	b.n	800297a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002978:	2302      	movs	r3, #2
  }
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	00100002 	.word	0x00100002
 8002988:	ffff0000 	.word	0xffff0000

0800298c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b088      	sub	sp, #32
 8002990:	af02      	add	r7, sp, #8
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	607a      	str	r2, [r7, #4]
 8002996:	603b      	str	r3, [r7, #0]
 8002998:	460b      	mov	r3, r1
 800299a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d006      	beq.n	80029b6 <I2C_MasterRequestWrite+0x2a>
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d003      	beq.n	80029b6 <I2C_MasterRequestWrite+0x2a>
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029b4:	d108      	bne.n	80029c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	e00b      	b.n	80029e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029cc:	2b12      	cmp	r3, #18
 80029ce:	d107      	bne.n	80029e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 f84f 	bl	8002a90 <I2C_WaitOnFlagUntilTimeout>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00d      	beq.n	8002a14 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a06:	d103      	bne.n	8002a10 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e035      	b.n	8002a80 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a1c:	d108      	bne.n	8002a30 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a1e:	897b      	ldrh	r3, [r7, #10]
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	461a      	mov	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a2c:	611a      	str	r2, [r3, #16]
 8002a2e:	e01b      	b.n	8002a68 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a30:	897b      	ldrh	r3, [r7, #10]
 8002a32:	11db      	asrs	r3, r3, #7
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	f003 0306 	and.w	r3, r3, #6
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	f063 030f 	orn	r3, r3, #15
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	490e      	ldr	r1, [pc, #56]	; (8002a88 <I2C_MasterRequestWrite+0xfc>)
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 f898 	bl	8002b84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e010      	b.n	8002a80 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a5e:	897b      	ldrh	r3, [r7, #10]
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	4907      	ldr	r1, [pc, #28]	; (8002a8c <I2C_MasterRequestWrite+0x100>)
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 f888 	bl	8002b84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	00010008 	.word	0x00010008
 8002a8c:	00010002 	.word	0x00010002

08002a90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	603b      	str	r3, [r7, #0]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002aa0:	e048      	b.n	8002b34 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa8:	d044      	beq.n	8002b34 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aaa:	f7ff f9b9 	bl	8001e20 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d302      	bcc.n	8002ac0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d139      	bne.n	8002b34 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	0c1b      	lsrs	r3, r3, #16
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d10d      	bne.n	8002ae6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	43da      	mvns	r2, r3
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	bf0c      	ite	eq
 8002adc:	2301      	moveq	r3, #1
 8002ade:	2300      	movne	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	e00c      	b.n	8002b00 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	43da      	mvns	r2, r3
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	4013      	ands	r3, r2
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	bf0c      	ite	eq
 8002af8:	2301      	moveq	r3, #1
 8002afa:	2300      	movne	r3, #0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	461a      	mov	r2, r3
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d116      	bne.n	8002b34 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	f043 0220 	orr.w	r2, r3, #32
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e023      	b.n	8002b7c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	0c1b      	lsrs	r3, r3, #16
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d10d      	bne.n	8002b5a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	43da      	mvns	r2, r3
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	bf0c      	ite	eq
 8002b50:	2301      	moveq	r3, #1
 8002b52:	2300      	movne	r3, #0
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	461a      	mov	r2, r3
 8002b58:	e00c      	b.n	8002b74 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	43da      	mvns	r2, r3
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	4013      	ands	r3, r2
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	bf0c      	ite	eq
 8002b6c:	2301      	moveq	r3, #1
 8002b6e:	2300      	movne	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	461a      	mov	r2, r3
 8002b74:	79fb      	ldrb	r3, [r7, #7]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d093      	beq.n	8002aa2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
 8002b90:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b92:	e071      	b.n	8002c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba2:	d123      	bne.n	8002bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	f043 0204 	orr.w	r2, r3, #4
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e067      	b.n	8002cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf2:	d041      	beq.n	8002c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf4:	f7ff f914 	bl	8001e20 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d302      	bcc.n	8002c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d136      	bne.n	8002c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	0c1b      	lsrs	r3, r3, #16
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d10c      	bne.n	8002c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	43da      	mvns	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	bf14      	ite	ne
 8002c26:	2301      	movne	r3, #1
 8002c28:	2300      	moveq	r3, #0
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	e00b      	b.n	8002c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	43da      	mvns	r2, r3
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	bf14      	ite	ne
 8002c40:	2301      	movne	r3, #1
 8002c42:	2300      	moveq	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d016      	beq.n	8002c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	f043 0220 	orr.w	r2, r3, #32
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e021      	b.n	8002cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	0c1b      	lsrs	r3, r3, #16
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d10c      	bne.n	8002c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	43da      	mvns	r2, r3
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	bf14      	ite	ne
 8002c94:	2301      	movne	r3, #1
 8002c96:	2300      	moveq	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	e00b      	b.n	8002cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	43da      	mvns	r2, r3
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	bf14      	ite	ne
 8002cae:	2301      	movne	r3, #1
 8002cb0:	2300      	moveq	r3, #0
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f47f af6d 	bne.w	8002b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cd0:	e034      	b.n	8002d3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f886 	bl	8002de4 <I2C_IsAcknowledgeFailed>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e034      	b.n	8002d4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce8:	d028      	beq.n	8002d3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cea:	f7ff f899 	bl	8001e20 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d302      	bcc.n	8002d00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d11d      	bne.n	8002d3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0a:	2b80      	cmp	r3, #128	; 0x80
 8002d0c:	d016      	beq.n	8002d3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	f043 0220 	orr.w	r2, r3, #32
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e007      	b.n	8002d4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d46:	2b80      	cmp	r3, #128	; 0x80
 8002d48:	d1c3      	bne.n	8002cd2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d60:	e034      	b.n	8002dcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 f83e 	bl	8002de4 <I2C_IsAcknowledgeFailed>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e034      	b.n	8002ddc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d78:	d028      	beq.n	8002dcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d7a:	f7ff f851 	bl	8001e20 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d302      	bcc.n	8002d90 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d11d      	bne.n	8002dcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d016      	beq.n	8002dcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	f043 0220 	orr.w	r2, r3, #32
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e007      	b.n	8002ddc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	f003 0304 	and.w	r3, r3, #4
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d1c3      	bne.n	8002d62 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dfa:	d11b      	bne.n	8002e34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	f043 0204 	orr.w	r2, r3, #4
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
	...

08002e44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e267      	b.n	8003326 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d075      	beq.n	8002f4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e62:	4b88      	ldr	r3, [pc, #544]	; (8003084 <HAL_RCC_OscConfig+0x240>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 030c 	and.w	r3, r3, #12
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d00c      	beq.n	8002e88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e6e:	4b85      	ldr	r3, [pc, #532]	; (8003084 <HAL_RCC_OscConfig+0x240>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e76:	2b08      	cmp	r3, #8
 8002e78:	d112      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e7a:	4b82      	ldr	r3, [pc, #520]	; (8003084 <HAL_RCC_OscConfig+0x240>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e86:	d10b      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e88:	4b7e      	ldr	r3, [pc, #504]	; (8003084 <HAL_RCC_OscConfig+0x240>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d05b      	beq.n	8002f4c <HAL_RCC_OscConfig+0x108>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d157      	bne.n	8002f4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e242      	b.n	8003326 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea8:	d106      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x74>
 8002eaa:	4b76      	ldr	r3, [pc, #472]	; (8003084 <HAL_RCC_OscConfig+0x240>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a75      	ldr	r2, [pc, #468]	; (8003084 <HAL_RCC_OscConfig+0x240>)
 8002eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	e01d      	b.n	8002ef4 <HAL_RCC_OscConfig+0xb0>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ec0:	d10c      	bne.n	8002edc <HAL_RCC_OscConfig+0x98>
 8002ec2:	4b70      	ldr	r3, [pc, #448]	; (8003084 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a6f      	ldr	r2, [pc, #444]	; (8003084 <HAL_RCC_OscConfig+0x240>)
 8002ec8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ecc:	6013      	str	r3, [r2, #0]
 8002ece:	4b6d      	ldr	r3, [pc, #436]	; (8003084 <HAL_RCC_OscConfig+0x240>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a6c      	ldr	r2, [pc, #432]	; (8003084 <HAL_RCC_OscConfig+0x240>)
 8002ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	e00b      	b.n	8002ef4 <HAL_RCC_OscConfig+0xb0>
 8002edc:	4b69      	ldr	r3, [pc, #420]	; (8003084 <HAL_RCC_OscConfig+0x240>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a68      	ldr	r2, [pc, #416]	; (8003084 <HAL_RCC_OscConfig+0x240>)
 8002ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee6:	6013      	str	r3, [r2, #0]
 8002ee8:	4b66      	ldr	r3, [pc, #408]	; (8003084 <HAL_RCC_OscConfig+0x240>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a65      	ldr	r2, [pc, #404]	; (8003084 <HAL_RCC_OscConfig+0x240>)
 8002eee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ef2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d013      	beq.n	8002f24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efc:	f7fe ff90 	bl	8001e20 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f04:	f7fe ff8c 	bl	8001e20 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b64      	cmp	r3, #100	; 0x64
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e207      	b.n	8003326 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f16:	4b5b      	ldr	r3, [pc, #364]	; (8003084 <HAL_RCC_OscConfig+0x240>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0f0      	beq.n	8002f04 <HAL_RCC_OscConfig+0xc0>
 8002f22:	e014      	b.n	8002f4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f24:	f7fe ff7c 	bl	8001e20 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f2c:	f7fe ff78 	bl	8001e20 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b64      	cmp	r3, #100	; 0x64
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e1f3      	b.n	8003326 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f3e:	4b51      	ldr	r3, [pc, #324]	; (8003084 <HAL_RCC_OscConfig+0x240>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f0      	bne.n	8002f2c <HAL_RCC_OscConfig+0xe8>
 8002f4a:	e000      	b.n	8002f4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d063      	beq.n	8003022 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f5a:	4b4a      	ldr	r3, [pc, #296]	; (8003084 <HAL_RCC_OscConfig+0x240>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 030c 	and.w	r3, r3, #12
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00b      	beq.n	8002f7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f66:	4b47      	ldr	r3, [pc, #284]	; (8003084 <HAL_RCC_OscConfig+0x240>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f6e:	2b08      	cmp	r3, #8
 8002f70:	d11c      	bne.n	8002fac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f72:	4b44      	ldr	r3, [pc, #272]	; (8003084 <HAL_RCC_OscConfig+0x240>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d116      	bne.n	8002fac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f7e:	4b41      	ldr	r3, [pc, #260]	; (8003084 <HAL_RCC_OscConfig+0x240>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d005      	beq.n	8002f96 <HAL_RCC_OscConfig+0x152>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d001      	beq.n	8002f96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e1c7      	b.n	8003326 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f96:	4b3b      	ldr	r3, [pc, #236]	; (8003084 <HAL_RCC_OscConfig+0x240>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	4937      	ldr	r1, [pc, #220]	; (8003084 <HAL_RCC_OscConfig+0x240>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002faa:	e03a      	b.n	8003022 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d020      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fb4:	4b34      	ldr	r3, [pc, #208]	; (8003088 <HAL_RCC_OscConfig+0x244>)
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fba:	f7fe ff31 	bl	8001e20 <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc0:	e008      	b.n	8002fd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fc2:	f7fe ff2d 	bl	8001e20 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e1a8      	b.n	8003326 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd4:	4b2b      	ldr	r3, [pc, #172]	; (8003084 <HAL_RCC_OscConfig+0x240>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d0f0      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe0:	4b28      	ldr	r3, [pc, #160]	; (8003084 <HAL_RCC_OscConfig+0x240>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	4925      	ldr	r1, [pc, #148]	; (8003084 <HAL_RCC_OscConfig+0x240>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	600b      	str	r3, [r1, #0]
 8002ff4:	e015      	b.n	8003022 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ff6:	4b24      	ldr	r3, [pc, #144]	; (8003088 <HAL_RCC_OscConfig+0x244>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffc:	f7fe ff10 	bl	8001e20 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003004:	f7fe ff0c 	bl	8001e20 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e187      	b.n	8003326 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003016:	4b1b      	ldr	r3, [pc, #108]	; (8003084 <HAL_RCC_OscConfig+0x240>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f0      	bne.n	8003004 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d036      	beq.n	800309c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d016      	beq.n	8003064 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003036:	4b15      	ldr	r3, [pc, #84]	; (800308c <HAL_RCC_OscConfig+0x248>)
 8003038:	2201      	movs	r2, #1
 800303a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303c:	f7fe fef0 	bl	8001e20 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003044:	f7fe feec 	bl	8001e20 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e167      	b.n	8003326 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003056:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <HAL_RCC_OscConfig+0x240>)
 8003058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f0      	beq.n	8003044 <HAL_RCC_OscConfig+0x200>
 8003062:	e01b      	b.n	800309c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003064:	4b09      	ldr	r3, [pc, #36]	; (800308c <HAL_RCC_OscConfig+0x248>)
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800306a:	f7fe fed9 	bl	8001e20 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003070:	e00e      	b.n	8003090 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003072:	f7fe fed5 	bl	8001e20 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d907      	bls.n	8003090 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e150      	b.n	8003326 <HAL_RCC_OscConfig+0x4e2>
 8003084:	40023800 	.word	0x40023800
 8003088:	42470000 	.word	0x42470000
 800308c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003090:	4b88      	ldr	r3, [pc, #544]	; (80032b4 <HAL_RCC_OscConfig+0x470>)
 8003092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1ea      	bne.n	8003072 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 8097 	beq.w	80031d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030aa:	2300      	movs	r3, #0
 80030ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ae:	4b81      	ldr	r3, [pc, #516]	; (80032b4 <HAL_RCC_OscConfig+0x470>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10f      	bne.n	80030da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ba:	2300      	movs	r3, #0
 80030bc:	60bb      	str	r3, [r7, #8]
 80030be:	4b7d      	ldr	r3, [pc, #500]	; (80032b4 <HAL_RCC_OscConfig+0x470>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	4a7c      	ldr	r2, [pc, #496]	; (80032b4 <HAL_RCC_OscConfig+0x470>)
 80030c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ca:	4b7a      	ldr	r3, [pc, #488]	; (80032b4 <HAL_RCC_OscConfig+0x470>)
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d2:	60bb      	str	r3, [r7, #8]
 80030d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030d6:	2301      	movs	r3, #1
 80030d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030da:	4b77      	ldr	r3, [pc, #476]	; (80032b8 <HAL_RCC_OscConfig+0x474>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d118      	bne.n	8003118 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030e6:	4b74      	ldr	r3, [pc, #464]	; (80032b8 <HAL_RCC_OscConfig+0x474>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a73      	ldr	r2, [pc, #460]	; (80032b8 <HAL_RCC_OscConfig+0x474>)
 80030ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030f2:	f7fe fe95 	bl	8001e20 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030fa:	f7fe fe91 	bl	8001e20 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e10c      	b.n	8003326 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310c:	4b6a      	ldr	r3, [pc, #424]	; (80032b8 <HAL_RCC_OscConfig+0x474>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0f0      	beq.n	80030fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d106      	bne.n	800312e <HAL_RCC_OscConfig+0x2ea>
 8003120:	4b64      	ldr	r3, [pc, #400]	; (80032b4 <HAL_RCC_OscConfig+0x470>)
 8003122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003124:	4a63      	ldr	r2, [pc, #396]	; (80032b4 <HAL_RCC_OscConfig+0x470>)
 8003126:	f043 0301 	orr.w	r3, r3, #1
 800312a:	6713      	str	r3, [r2, #112]	; 0x70
 800312c:	e01c      	b.n	8003168 <HAL_RCC_OscConfig+0x324>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b05      	cmp	r3, #5
 8003134:	d10c      	bne.n	8003150 <HAL_RCC_OscConfig+0x30c>
 8003136:	4b5f      	ldr	r3, [pc, #380]	; (80032b4 <HAL_RCC_OscConfig+0x470>)
 8003138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313a:	4a5e      	ldr	r2, [pc, #376]	; (80032b4 <HAL_RCC_OscConfig+0x470>)
 800313c:	f043 0304 	orr.w	r3, r3, #4
 8003140:	6713      	str	r3, [r2, #112]	; 0x70
 8003142:	4b5c      	ldr	r3, [pc, #368]	; (80032b4 <HAL_RCC_OscConfig+0x470>)
 8003144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003146:	4a5b      	ldr	r2, [pc, #364]	; (80032b4 <HAL_RCC_OscConfig+0x470>)
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	6713      	str	r3, [r2, #112]	; 0x70
 800314e:	e00b      	b.n	8003168 <HAL_RCC_OscConfig+0x324>
 8003150:	4b58      	ldr	r3, [pc, #352]	; (80032b4 <HAL_RCC_OscConfig+0x470>)
 8003152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003154:	4a57      	ldr	r2, [pc, #348]	; (80032b4 <HAL_RCC_OscConfig+0x470>)
 8003156:	f023 0301 	bic.w	r3, r3, #1
 800315a:	6713      	str	r3, [r2, #112]	; 0x70
 800315c:	4b55      	ldr	r3, [pc, #340]	; (80032b4 <HAL_RCC_OscConfig+0x470>)
 800315e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003160:	4a54      	ldr	r2, [pc, #336]	; (80032b4 <HAL_RCC_OscConfig+0x470>)
 8003162:	f023 0304 	bic.w	r3, r3, #4
 8003166:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d015      	beq.n	800319c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003170:	f7fe fe56 	bl	8001e20 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003176:	e00a      	b.n	800318e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003178:	f7fe fe52 	bl	8001e20 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	f241 3288 	movw	r2, #5000	; 0x1388
 8003186:	4293      	cmp	r3, r2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e0cb      	b.n	8003326 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318e:	4b49      	ldr	r3, [pc, #292]	; (80032b4 <HAL_RCC_OscConfig+0x470>)
 8003190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0ee      	beq.n	8003178 <HAL_RCC_OscConfig+0x334>
 800319a:	e014      	b.n	80031c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800319c:	f7fe fe40 	bl	8001e20 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a2:	e00a      	b.n	80031ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031a4:	f7fe fe3c 	bl	8001e20 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e0b5      	b.n	8003326 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ba:	4b3e      	ldr	r3, [pc, #248]	; (80032b4 <HAL_RCC_OscConfig+0x470>)
 80031bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1ee      	bne.n	80031a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031c6:	7dfb      	ldrb	r3, [r7, #23]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d105      	bne.n	80031d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031cc:	4b39      	ldr	r3, [pc, #228]	; (80032b4 <HAL_RCC_OscConfig+0x470>)
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	4a38      	ldr	r2, [pc, #224]	; (80032b4 <HAL_RCC_OscConfig+0x470>)
 80031d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 80a1 	beq.w	8003324 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031e2:	4b34      	ldr	r3, [pc, #208]	; (80032b4 <HAL_RCC_OscConfig+0x470>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 030c 	and.w	r3, r3, #12
 80031ea:	2b08      	cmp	r3, #8
 80031ec:	d05c      	beq.n	80032a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d141      	bne.n	800327a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f6:	4b31      	ldr	r3, [pc, #196]	; (80032bc <HAL_RCC_OscConfig+0x478>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fc:	f7fe fe10 	bl	8001e20 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003204:	f7fe fe0c 	bl	8001e20 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e087      	b.n	8003326 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003216:	4b27      	ldr	r3, [pc, #156]	; (80032b4 <HAL_RCC_OscConfig+0x470>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f0      	bne.n	8003204 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69da      	ldr	r2, [r3, #28]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	431a      	orrs	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	019b      	lsls	r3, r3, #6
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003238:	085b      	lsrs	r3, r3, #1
 800323a:	3b01      	subs	r3, #1
 800323c:	041b      	lsls	r3, r3, #16
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003244:	061b      	lsls	r3, r3, #24
 8003246:	491b      	ldr	r1, [pc, #108]	; (80032b4 <HAL_RCC_OscConfig+0x470>)
 8003248:	4313      	orrs	r3, r2
 800324a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800324c:	4b1b      	ldr	r3, [pc, #108]	; (80032bc <HAL_RCC_OscConfig+0x478>)
 800324e:	2201      	movs	r2, #1
 8003250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003252:	f7fe fde5 	bl	8001e20 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800325a:	f7fe fde1 	bl	8001e20 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e05c      	b.n	8003326 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326c:	4b11      	ldr	r3, [pc, #68]	; (80032b4 <HAL_RCC_OscConfig+0x470>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0f0      	beq.n	800325a <HAL_RCC_OscConfig+0x416>
 8003278:	e054      	b.n	8003324 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800327a:	4b10      	ldr	r3, [pc, #64]	; (80032bc <HAL_RCC_OscConfig+0x478>)
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003280:	f7fe fdce 	bl	8001e20 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003288:	f7fe fdca 	bl	8001e20 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e045      	b.n	8003326 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800329a:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <HAL_RCC_OscConfig+0x470>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f0      	bne.n	8003288 <HAL_RCC_OscConfig+0x444>
 80032a6:	e03d      	b.n	8003324 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d107      	bne.n	80032c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e038      	b.n	8003326 <HAL_RCC_OscConfig+0x4e2>
 80032b4:	40023800 	.word	0x40023800
 80032b8:	40007000 	.word	0x40007000
 80032bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032c0:	4b1b      	ldr	r3, [pc, #108]	; (8003330 <HAL_RCC_OscConfig+0x4ec>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d028      	beq.n	8003320 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032d8:	429a      	cmp	r2, r3
 80032da:	d121      	bne.n	8003320 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d11a      	bne.n	8003320 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032f0:	4013      	ands	r3, r2
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d111      	bne.n	8003320 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003306:	085b      	lsrs	r3, r3, #1
 8003308:	3b01      	subs	r3, #1
 800330a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800330c:	429a      	cmp	r2, r3
 800330e:	d107      	bne.n	8003320 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800331c:	429a      	cmp	r2, r3
 800331e:	d001      	beq.n	8003324 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e000      	b.n	8003326 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40023800 	.word	0x40023800

08003334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e0cc      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003348:	4b68      	ldr	r3, [pc, #416]	; (80034ec <HAL_RCC_ClockConfig+0x1b8>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d90c      	bls.n	8003370 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003356:	4b65      	ldr	r3, [pc, #404]	; (80034ec <HAL_RCC_ClockConfig+0x1b8>)
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800335e:	4b63      	ldr	r3, [pc, #396]	; (80034ec <HAL_RCC_ClockConfig+0x1b8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	429a      	cmp	r2, r3
 800336a:	d001      	beq.n	8003370 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e0b8      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d020      	beq.n	80033be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	d005      	beq.n	8003394 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003388:	4b59      	ldr	r3, [pc, #356]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	4a58      	ldr	r2, [pc, #352]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 800338e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003392:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	2b00      	cmp	r3, #0
 800339e:	d005      	beq.n	80033ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033a0:	4b53      	ldr	r3, [pc, #332]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	4a52      	ldr	r2, [pc, #328]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033ac:	4b50      	ldr	r3, [pc, #320]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	494d      	ldr	r1, [pc, #308]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d044      	beq.n	8003454 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d107      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d2:	4b47      	ldr	r3, [pc, #284]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d119      	bne.n	8003412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e07f      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d003      	beq.n	80033f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ee:	2b03      	cmp	r3, #3
 80033f0:	d107      	bne.n	8003402 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f2:	4b3f      	ldr	r3, [pc, #252]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d109      	bne.n	8003412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e06f      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003402:	4b3b      	ldr	r3, [pc, #236]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e067      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003412:	4b37      	ldr	r3, [pc, #220]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f023 0203 	bic.w	r2, r3, #3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	4934      	ldr	r1, [pc, #208]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003420:	4313      	orrs	r3, r2
 8003422:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003424:	f7fe fcfc 	bl	8001e20 <HAL_GetTick>
 8003428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342a:	e00a      	b.n	8003442 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800342c:	f7fe fcf8 	bl	8001e20 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	f241 3288 	movw	r2, #5000	; 0x1388
 800343a:	4293      	cmp	r3, r2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e04f      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003442:	4b2b      	ldr	r3, [pc, #172]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 020c 	and.w	r2, r3, #12
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	429a      	cmp	r2, r3
 8003452:	d1eb      	bne.n	800342c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003454:	4b25      	ldr	r3, [pc, #148]	; (80034ec <HAL_RCC_ClockConfig+0x1b8>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d20c      	bcs.n	800347c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003462:	4b22      	ldr	r3, [pc, #136]	; (80034ec <HAL_RCC_ClockConfig+0x1b8>)
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800346a:	4b20      	ldr	r3, [pc, #128]	; (80034ec <HAL_RCC_ClockConfig+0x1b8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	429a      	cmp	r2, r3
 8003476:	d001      	beq.n	800347c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e032      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b00      	cmp	r3, #0
 8003486:	d008      	beq.n	800349a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003488:	4b19      	ldr	r3, [pc, #100]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	4916      	ldr	r1, [pc, #88]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	4313      	orrs	r3, r2
 8003498:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0308 	and.w	r3, r3, #8
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d009      	beq.n	80034ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034a6:	4b12      	ldr	r3, [pc, #72]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	490e      	ldr	r1, [pc, #56]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034ba:	f000 f821 	bl	8003500 <HAL_RCC_GetSysClockFreq>
 80034be:	4602      	mov	r2, r0
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	091b      	lsrs	r3, r3, #4
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	490a      	ldr	r1, [pc, #40]	; (80034f4 <HAL_RCC_ClockConfig+0x1c0>)
 80034cc:	5ccb      	ldrb	r3, [r1, r3]
 80034ce:	fa22 f303 	lsr.w	r3, r2, r3
 80034d2:	4a09      	ldr	r2, [pc, #36]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 80034d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034d6:	4b09      	ldr	r3, [pc, #36]	; (80034fc <HAL_RCC_ClockConfig+0x1c8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fd fda4 	bl	8001028 <HAL_InitTick>

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40023c00 	.word	0x40023c00
 80034f0:	40023800 	.word	0x40023800
 80034f4:	08007a00 	.word	0x08007a00
 80034f8:	20000000 	.word	0x20000000
 80034fc:	20000004 	.word	0x20000004

08003500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003504:	b094      	sub	sp, #80	; 0x50
 8003506:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003508:	2300      	movs	r3, #0
 800350a:	647b      	str	r3, [r7, #68]	; 0x44
 800350c:	2300      	movs	r3, #0
 800350e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003510:	2300      	movs	r3, #0
 8003512:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003518:	4b79      	ldr	r3, [pc, #484]	; (8003700 <HAL_RCC_GetSysClockFreq+0x200>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 030c 	and.w	r3, r3, #12
 8003520:	2b08      	cmp	r3, #8
 8003522:	d00d      	beq.n	8003540 <HAL_RCC_GetSysClockFreq+0x40>
 8003524:	2b08      	cmp	r3, #8
 8003526:	f200 80e1 	bhi.w	80036ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <HAL_RCC_GetSysClockFreq+0x34>
 800352e:	2b04      	cmp	r3, #4
 8003530:	d003      	beq.n	800353a <HAL_RCC_GetSysClockFreq+0x3a>
 8003532:	e0db      	b.n	80036ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003534:	4b73      	ldr	r3, [pc, #460]	; (8003704 <HAL_RCC_GetSysClockFreq+0x204>)
 8003536:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003538:	e0db      	b.n	80036f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800353a:	4b73      	ldr	r3, [pc, #460]	; (8003708 <HAL_RCC_GetSysClockFreq+0x208>)
 800353c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800353e:	e0d8      	b.n	80036f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003540:	4b6f      	ldr	r3, [pc, #444]	; (8003700 <HAL_RCC_GetSysClockFreq+0x200>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003548:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800354a:	4b6d      	ldr	r3, [pc, #436]	; (8003700 <HAL_RCC_GetSysClockFreq+0x200>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d063      	beq.n	800361e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003556:	4b6a      	ldr	r3, [pc, #424]	; (8003700 <HAL_RCC_GetSysClockFreq+0x200>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	099b      	lsrs	r3, r3, #6
 800355c:	2200      	movs	r2, #0
 800355e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003560:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003568:	633b      	str	r3, [r7, #48]	; 0x30
 800356a:	2300      	movs	r3, #0
 800356c:	637b      	str	r3, [r7, #52]	; 0x34
 800356e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003572:	4622      	mov	r2, r4
 8003574:	462b      	mov	r3, r5
 8003576:	f04f 0000 	mov.w	r0, #0
 800357a:	f04f 0100 	mov.w	r1, #0
 800357e:	0159      	lsls	r1, r3, #5
 8003580:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003584:	0150      	lsls	r0, r2, #5
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	4621      	mov	r1, r4
 800358c:	1a51      	subs	r1, r2, r1
 800358e:	6139      	str	r1, [r7, #16]
 8003590:	4629      	mov	r1, r5
 8003592:	eb63 0301 	sbc.w	r3, r3, r1
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	f04f 0200 	mov.w	r2, #0
 800359c:	f04f 0300 	mov.w	r3, #0
 80035a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035a4:	4659      	mov	r1, fp
 80035a6:	018b      	lsls	r3, r1, #6
 80035a8:	4651      	mov	r1, sl
 80035aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035ae:	4651      	mov	r1, sl
 80035b0:	018a      	lsls	r2, r1, #6
 80035b2:	4651      	mov	r1, sl
 80035b4:	ebb2 0801 	subs.w	r8, r2, r1
 80035b8:	4659      	mov	r1, fp
 80035ba:	eb63 0901 	sbc.w	r9, r3, r1
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035d2:	4690      	mov	r8, r2
 80035d4:	4699      	mov	r9, r3
 80035d6:	4623      	mov	r3, r4
 80035d8:	eb18 0303 	adds.w	r3, r8, r3
 80035dc:	60bb      	str	r3, [r7, #8]
 80035de:	462b      	mov	r3, r5
 80035e0:	eb49 0303 	adc.w	r3, r9, r3
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	f04f 0200 	mov.w	r2, #0
 80035ea:	f04f 0300 	mov.w	r3, #0
 80035ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035f2:	4629      	mov	r1, r5
 80035f4:	024b      	lsls	r3, r1, #9
 80035f6:	4621      	mov	r1, r4
 80035f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035fc:	4621      	mov	r1, r4
 80035fe:	024a      	lsls	r2, r1, #9
 8003600:	4610      	mov	r0, r2
 8003602:	4619      	mov	r1, r3
 8003604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003606:	2200      	movs	r2, #0
 8003608:	62bb      	str	r3, [r7, #40]	; 0x28
 800360a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800360c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003610:	f7fc fe36 	bl	8000280 <__aeabi_uldivmod>
 8003614:	4602      	mov	r2, r0
 8003616:	460b      	mov	r3, r1
 8003618:	4613      	mov	r3, r2
 800361a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800361c:	e058      	b.n	80036d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800361e:	4b38      	ldr	r3, [pc, #224]	; (8003700 <HAL_RCC_GetSysClockFreq+0x200>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	099b      	lsrs	r3, r3, #6
 8003624:	2200      	movs	r2, #0
 8003626:	4618      	mov	r0, r3
 8003628:	4611      	mov	r1, r2
 800362a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800362e:	623b      	str	r3, [r7, #32]
 8003630:	2300      	movs	r3, #0
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
 8003634:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003638:	4642      	mov	r2, r8
 800363a:	464b      	mov	r3, r9
 800363c:	f04f 0000 	mov.w	r0, #0
 8003640:	f04f 0100 	mov.w	r1, #0
 8003644:	0159      	lsls	r1, r3, #5
 8003646:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800364a:	0150      	lsls	r0, r2, #5
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4641      	mov	r1, r8
 8003652:	ebb2 0a01 	subs.w	sl, r2, r1
 8003656:	4649      	mov	r1, r9
 8003658:	eb63 0b01 	sbc.w	fp, r3, r1
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	f04f 0300 	mov.w	r3, #0
 8003664:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003668:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800366c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003670:	ebb2 040a 	subs.w	r4, r2, sl
 8003674:	eb63 050b 	sbc.w	r5, r3, fp
 8003678:	f04f 0200 	mov.w	r2, #0
 800367c:	f04f 0300 	mov.w	r3, #0
 8003680:	00eb      	lsls	r3, r5, #3
 8003682:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003686:	00e2      	lsls	r2, r4, #3
 8003688:	4614      	mov	r4, r2
 800368a:	461d      	mov	r5, r3
 800368c:	4643      	mov	r3, r8
 800368e:	18e3      	adds	r3, r4, r3
 8003690:	603b      	str	r3, [r7, #0]
 8003692:	464b      	mov	r3, r9
 8003694:	eb45 0303 	adc.w	r3, r5, r3
 8003698:	607b      	str	r3, [r7, #4]
 800369a:	f04f 0200 	mov.w	r2, #0
 800369e:	f04f 0300 	mov.w	r3, #0
 80036a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036a6:	4629      	mov	r1, r5
 80036a8:	028b      	lsls	r3, r1, #10
 80036aa:	4621      	mov	r1, r4
 80036ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036b0:	4621      	mov	r1, r4
 80036b2:	028a      	lsls	r2, r1, #10
 80036b4:	4610      	mov	r0, r2
 80036b6:	4619      	mov	r1, r3
 80036b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036ba:	2200      	movs	r2, #0
 80036bc:	61bb      	str	r3, [r7, #24]
 80036be:	61fa      	str	r2, [r7, #28]
 80036c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036c4:	f7fc fddc 	bl	8000280 <__aeabi_uldivmod>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	4613      	mov	r3, r2
 80036ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036d0:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <HAL_RCC_GetSysClockFreq+0x200>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	0c1b      	lsrs	r3, r3, #16
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	3301      	adds	r3, #1
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80036e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036ea:	e002      	b.n	80036f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036ec:	4b05      	ldr	r3, [pc, #20]	; (8003704 <HAL_RCC_GetSysClockFreq+0x204>)
 80036ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3750      	adds	r7, #80	; 0x50
 80036f8:	46bd      	mov	sp, r7
 80036fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036fe:	bf00      	nop
 8003700:	40023800 	.word	0x40023800
 8003704:	00f42400 	.word	0x00f42400
 8003708:	007a1200 	.word	0x007a1200

0800370c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003710:	4b03      	ldr	r3, [pc, #12]	; (8003720 <HAL_RCC_GetHCLKFreq+0x14>)
 8003712:	681b      	ldr	r3, [r3, #0]
}
 8003714:	4618      	mov	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	20000000 	.word	0x20000000

08003724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003728:	f7ff fff0 	bl	800370c <HAL_RCC_GetHCLKFreq>
 800372c:	4602      	mov	r2, r0
 800372e:	4b05      	ldr	r3, [pc, #20]	; (8003744 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	0a9b      	lsrs	r3, r3, #10
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	4903      	ldr	r1, [pc, #12]	; (8003748 <HAL_RCC_GetPCLK1Freq+0x24>)
 800373a:	5ccb      	ldrb	r3, [r1, r3]
 800373c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003740:	4618      	mov	r0, r3
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40023800 	.word	0x40023800
 8003748:	08007a10 	.word	0x08007a10

0800374c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003750:	f7ff ffdc 	bl	800370c <HAL_RCC_GetHCLKFreq>
 8003754:	4602      	mov	r2, r0
 8003756:	4b05      	ldr	r3, [pc, #20]	; (800376c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	0b5b      	lsrs	r3, r3, #13
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	4903      	ldr	r1, [pc, #12]	; (8003770 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003762:	5ccb      	ldrb	r3, [r1, r3]
 8003764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003768:	4618      	mov	r0, r3
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40023800 	.word	0x40023800
 8003770:	08007a10 	.word	0x08007a10

08003774 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	220f      	movs	r2, #15
 8003782:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003784:	4b12      	ldr	r3, [pc, #72]	; (80037d0 <HAL_RCC_GetClockConfig+0x5c>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f003 0203 	and.w	r2, r3, #3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003790:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <HAL_RCC_GetClockConfig+0x5c>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800379c:	4b0c      	ldr	r3, [pc, #48]	; (80037d0 <HAL_RCC_GetClockConfig+0x5c>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80037a8:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <HAL_RCC_GetClockConfig+0x5c>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	08db      	lsrs	r3, r3, #3
 80037ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80037b6:	4b07      	ldr	r3, [pc, #28]	; (80037d4 <HAL_RCC_GetClockConfig+0x60>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0207 	and.w	r2, r3, #7
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	601a      	str	r2, [r3, #0]
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	40023800 	.word	0x40023800
 80037d4:	40023c00 	.word	0x40023c00

080037d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e041      	b.n	800386e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d106      	bne.n	8003804 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7fd fb0a 	bl	8000e18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3304      	adds	r3, #4
 8003814:	4619      	mov	r1, r3
 8003816:	4610      	mov	r0, r2
 8003818:	f000 fca0 	bl	800415c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
	...

08003878 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b01      	cmp	r3, #1
 800388a:	d001      	beq.n	8003890 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e044      	b.n	800391a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0201 	orr.w	r2, r2, #1
 80038a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a1e      	ldr	r2, [pc, #120]	; (8003928 <HAL_TIM_Base_Start_IT+0xb0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d018      	beq.n	80038e4 <HAL_TIM_Base_Start_IT+0x6c>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ba:	d013      	beq.n	80038e4 <HAL_TIM_Base_Start_IT+0x6c>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a1a      	ldr	r2, [pc, #104]	; (800392c <HAL_TIM_Base_Start_IT+0xb4>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d00e      	beq.n	80038e4 <HAL_TIM_Base_Start_IT+0x6c>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a19      	ldr	r2, [pc, #100]	; (8003930 <HAL_TIM_Base_Start_IT+0xb8>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d009      	beq.n	80038e4 <HAL_TIM_Base_Start_IT+0x6c>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a17      	ldr	r2, [pc, #92]	; (8003934 <HAL_TIM_Base_Start_IT+0xbc>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d004      	beq.n	80038e4 <HAL_TIM_Base_Start_IT+0x6c>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a16      	ldr	r2, [pc, #88]	; (8003938 <HAL_TIM_Base_Start_IT+0xc0>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d111      	bne.n	8003908 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2b06      	cmp	r3, #6
 80038f4:	d010      	beq.n	8003918 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f042 0201 	orr.w	r2, r2, #1
 8003904:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003906:	e007      	b.n	8003918 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0201 	orr.w	r2, r2, #1
 8003916:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	40010000 	.word	0x40010000
 800392c:	40000400 	.word	0x40000400
 8003930:	40000800 	.word	0x40000800
 8003934:	40000c00 	.word	0x40000c00
 8003938:	40014000 	.word	0x40014000

0800393c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e041      	b.n	80039d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d106      	bne.n	8003968 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f839 	bl	80039da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2202      	movs	r2, #2
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3304      	adds	r3, #4
 8003978:	4619      	mov	r1, r3
 800397a:	4610      	mov	r0, r2
 800397c:	f000 fbee 	bl	800415c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
	...

080039f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d109      	bne.n	8003a14 <HAL_TIM_PWM_Start+0x24>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	bf14      	ite	ne
 8003a0c:	2301      	movne	r3, #1
 8003a0e:	2300      	moveq	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	e022      	b.n	8003a5a <HAL_TIM_PWM_Start+0x6a>
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d109      	bne.n	8003a2e <HAL_TIM_PWM_Start+0x3e>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	bf14      	ite	ne
 8003a26:	2301      	movne	r3, #1
 8003a28:	2300      	moveq	r3, #0
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	e015      	b.n	8003a5a <HAL_TIM_PWM_Start+0x6a>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	d109      	bne.n	8003a48 <HAL_TIM_PWM_Start+0x58>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	bf14      	ite	ne
 8003a40:	2301      	movne	r3, #1
 8003a42:	2300      	moveq	r3, #0
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	e008      	b.n	8003a5a <HAL_TIM_PWM_Start+0x6a>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	bf14      	ite	ne
 8003a54:	2301      	movne	r3, #1
 8003a56:	2300      	moveq	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e068      	b.n	8003b34 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d104      	bne.n	8003a72 <HAL_TIM_PWM_Start+0x82>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a70:	e013      	b.n	8003a9a <HAL_TIM_PWM_Start+0xaa>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d104      	bne.n	8003a82 <HAL_TIM_PWM_Start+0x92>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a80:	e00b      	b.n	8003a9a <HAL_TIM_PWM_Start+0xaa>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d104      	bne.n	8003a92 <HAL_TIM_PWM_Start+0xa2>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a90:	e003      	b.n	8003a9a <HAL_TIM_PWM_Start+0xaa>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2202      	movs	r2, #2
 8003a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	6839      	ldr	r1, [r7, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 fe0c 	bl	80046c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a23      	ldr	r2, [pc, #140]	; (8003b3c <HAL_TIM_PWM_Start+0x14c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d107      	bne.n	8003ac2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ac0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a1d      	ldr	r2, [pc, #116]	; (8003b3c <HAL_TIM_PWM_Start+0x14c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d018      	beq.n	8003afe <HAL_TIM_PWM_Start+0x10e>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad4:	d013      	beq.n	8003afe <HAL_TIM_PWM_Start+0x10e>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a19      	ldr	r2, [pc, #100]	; (8003b40 <HAL_TIM_PWM_Start+0x150>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d00e      	beq.n	8003afe <HAL_TIM_PWM_Start+0x10e>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a17      	ldr	r2, [pc, #92]	; (8003b44 <HAL_TIM_PWM_Start+0x154>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d009      	beq.n	8003afe <HAL_TIM_PWM_Start+0x10e>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a16      	ldr	r2, [pc, #88]	; (8003b48 <HAL_TIM_PWM_Start+0x158>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d004      	beq.n	8003afe <HAL_TIM_PWM_Start+0x10e>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a14      	ldr	r2, [pc, #80]	; (8003b4c <HAL_TIM_PWM_Start+0x15c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d111      	bne.n	8003b22 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2b06      	cmp	r3, #6
 8003b0e:	d010      	beq.n	8003b32 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0201 	orr.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b20:	e007      	b.n	8003b32 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0201 	orr.w	r2, r2, #1
 8003b30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40010000 	.word	0x40010000
 8003b40:	40000400 	.word	0x40000400
 8003b44:	40000800 	.word	0x40000800
 8003b48:	40000c00 	.word	0x40000c00
 8003b4c:	40014000 	.word	0x40014000

08003b50 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	6839      	ldr	r1, [r7, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 fdac 	bl	80046c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a29      	ldr	r2, [pc, #164]	; (8003c14 <HAL_TIM_PWM_Stop+0xc4>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d117      	bne.n	8003ba2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6a1a      	ldr	r2, [r3, #32]
 8003b78:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10f      	bne.n	8003ba2 <HAL_TIM_PWM_Stop+0x52>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6a1a      	ldr	r2, [r3, #32]
 8003b88:	f240 4344 	movw	r3, #1092	; 0x444
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d107      	bne.n	8003ba2 <HAL_TIM_PWM_Stop+0x52>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ba0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6a1a      	ldr	r2, [r3, #32]
 8003ba8:	f241 1311 	movw	r3, #4369	; 0x1111
 8003bac:	4013      	ands	r3, r2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10f      	bne.n	8003bd2 <HAL_TIM_PWM_Stop+0x82>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6a1a      	ldr	r2, [r3, #32]
 8003bb8:	f240 4344 	movw	r3, #1092	; 0x444
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d107      	bne.n	8003bd2 <HAL_TIM_PWM_Stop+0x82>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0201 	bic.w	r2, r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d104      	bne.n	8003be2 <HAL_TIM_PWM_Stop+0x92>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003be0:	e013      	b.n	8003c0a <HAL_TIM_PWM_Stop+0xba>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b04      	cmp	r3, #4
 8003be6:	d104      	bne.n	8003bf2 <HAL_TIM_PWM_Stop+0xa2>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bf0:	e00b      	b.n	8003c0a <HAL_TIM_PWM_Stop+0xba>
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d104      	bne.n	8003c02 <HAL_TIM_PWM_Stop+0xb2>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c00:	e003      	b.n	8003c0a <HAL_TIM_PWM_Stop+0xba>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40010000 	.word	0x40010000

08003c18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d020      	beq.n	8003c7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d01b      	beq.n	8003c7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f06f 0202 	mvn.w	r2, #2
 8003c4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fa5b 	bl	800411e <HAL_TIM_IC_CaptureCallback>
 8003c68:	e005      	b.n	8003c76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 fa4d 	bl	800410a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 fa5e 	bl	8004132 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d020      	beq.n	8003cc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d01b      	beq.n	8003cc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f06f 0204 	mvn.w	r2, #4
 8003c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fa35 	bl	800411e <HAL_TIM_IC_CaptureCallback>
 8003cb4:	e005      	b.n	8003cc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 fa27 	bl	800410a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 fa38 	bl	8004132 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f003 0308 	and.w	r3, r3, #8
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d020      	beq.n	8003d14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d01b      	beq.n	8003d14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f06f 0208 	mvn.w	r2, #8
 8003ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2204      	movs	r2, #4
 8003cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	f003 0303 	and.w	r3, r3, #3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 fa0f 	bl	800411e <HAL_TIM_IC_CaptureCallback>
 8003d00:	e005      	b.n	8003d0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 fa01 	bl	800410a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 fa12 	bl	8004132 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	f003 0310 	and.w	r3, r3, #16
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d020      	beq.n	8003d60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f003 0310 	and.w	r3, r3, #16
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d01b      	beq.n	8003d60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f06f 0210 	mvn.w	r2, #16
 8003d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2208      	movs	r2, #8
 8003d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f9e9 	bl	800411e <HAL_TIM_IC_CaptureCallback>
 8003d4c:	e005      	b.n	8003d5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f9db 	bl	800410a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f9ec 	bl	8004132 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00c      	beq.n	8003d84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d007      	beq.n	8003d84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f06f 0201 	mvn.w	r2, #1
 8003d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7fc ffbe 	bl	8000d00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00c      	beq.n	8003da8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d007      	beq.n	8003da8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 fd2a 	bl	80047fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00c      	beq.n	8003dcc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d007      	beq.n	8003dcc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f9bd 	bl	8004146 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00c      	beq.n	8003df0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f003 0320 	and.w	r3, r3, #32
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d007      	beq.n	8003df0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f06f 0220 	mvn.w	r2, #32
 8003de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 fcfc 	bl	80047e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003df0:	bf00      	nop
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d101      	bne.n	8003e16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e12:	2302      	movs	r3, #2
 8003e14:	e0ae      	b.n	8003f74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b0c      	cmp	r3, #12
 8003e22:	f200 809f 	bhi.w	8003f64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e26:	a201      	add	r2, pc, #4	; (adr r2, 8003e2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2c:	08003e61 	.word	0x08003e61
 8003e30:	08003f65 	.word	0x08003f65
 8003e34:	08003f65 	.word	0x08003f65
 8003e38:	08003f65 	.word	0x08003f65
 8003e3c:	08003ea1 	.word	0x08003ea1
 8003e40:	08003f65 	.word	0x08003f65
 8003e44:	08003f65 	.word	0x08003f65
 8003e48:	08003f65 	.word	0x08003f65
 8003e4c:	08003ee3 	.word	0x08003ee3
 8003e50:	08003f65 	.word	0x08003f65
 8003e54:	08003f65 	.word	0x08003f65
 8003e58:	08003f65 	.word	0x08003f65
 8003e5c:	08003f23 	.word	0x08003f23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68b9      	ldr	r1, [r7, #8]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 fa04 	bl	8004274 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699a      	ldr	r2, [r3, #24]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0208 	orr.w	r2, r2, #8
 8003e7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	699a      	ldr	r2, [r3, #24]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0204 	bic.w	r2, r2, #4
 8003e8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6999      	ldr	r1, [r3, #24]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	691a      	ldr	r2, [r3, #16]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	619a      	str	r2, [r3, #24]
      break;
 8003e9e:	e064      	b.n	8003f6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68b9      	ldr	r1, [r7, #8]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 fa4a 	bl	8004340 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699a      	ldr	r2, [r3, #24]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699a      	ldr	r2, [r3, #24]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6999      	ldr	r1, [r3, #24]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	021a      	lsls	r2, r3, #8
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	619a      	str	r2, [r3, #24]
      break;
 8003ee0:	e043      	b.n	8003f6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68b9      	ldr	r1, [r7, #8]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 fa95 	bl	8004418 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	69da      	ldr	r2, [r3, #28]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f042 0208 	orr.w	r2, r2, #8
 8003efc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	69da      	ldr	r2, [r3, #28]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0204 	bic.w	r2, r2, #4
 8003f0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	69d9      	ldr	r1, [r3, #28]
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	691a      	ldr	r2, [r3, #16]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	61da      	str	r2, [r3, #28]
      break;
 8003f20:	e023      	b.n	8003f6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68b9      	ldr	r1, [r7, #8]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 fadf 	bl	80044ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69da      	ldr	r2, [r3, #28]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	69da      	ldr	r2, [r3, #28]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69d9      	ldr	r1, [r3, #28]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	021a      	lsls	r2, r3, #8
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	61da      	str	r2, [r3, #28]
      break;
 8003f62:	e002      	b.n	8003f6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	75fb      	strb	r3, [r7, #23]
      break;
 8003f68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3718      	adds	r7, #24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d101      	bne.n	8003f98 <HAL_TIM_ConfigClockSource+0x1c>
 8003f94:	2302      	movs	r3, #2
 8003f96:	e0b4      	b.n	8004102 <HAL_TIM_ConfigClockSource+0x186>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fd0:	d03e      	beq.n	8004050 <HAL_TIM_ConfigClockSource+0xd4>
 8003fd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fd6:	f200 8087 	bhi.w	80040e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fde:	f000 8086 	beq.w	80040ee <HAL_TIM_ConfigClockSource+0x172>
 8003fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe6:	d87f      	bhi.n	80040e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe8:	2b70      	cmp	r3, #112	; 0x70
 8003fea:	d01a      	beq.n	8004022 <HAL_TIM_ConfigClockSource+0xa6>
 8003fec:	2b70      	cmp	r3, #112	; 0x70
 8003fee:	d87b      	bhi.n	80040e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ff0:	2b60      	cmp	r3, #96	; 0x60
 8003ff2:	d050      	beq.n	8004096 <HAL_TIM_ConfigClockSource+0x11a>
 8003ff4:	2b60      	cmp	r3, #96	; 0x60
 8003ff6:	d877      	bhi.n	80040e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ff8:	2b50      	cmp	r3, #80	; 0x50
 8003ffa:	d03c      	beq.n	8004076 <HAL_TIM_ConfigClockSource+0xfa>
 8003ffc:	2b50      	cmp	r3, #80	; 0x50
 8003ffe:	d873      	bhi.n	80040e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004000:	2b40      	cmp	r3, #64	; 0x40
 8004002:	d058      	beq.n	80040b6 <HAL_TIM_ConfigClockSource+0x13a>
 8004004:	2b40      	cmp	r3, #64	; 0x40
 8004006:	d86f      	bhi.n	80040e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004008:	2b30      	cmp	r3, #48	; 0x30
 800400a:	d064      	beq.n	80040d6 <HAL_TIM_ConfigClockSource+0x15a>
 800400c:	2b30      	cmp	r3, #48	; 0x30
 800400e:	d86b      	bhi.n	80040e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004010:	2b20      	cmp	r3, #32
 8004012:	d060      	beq.n	80040d6 <HAL_TIM_ConfigClockSource+0x15a>
 8004014:	2b20      	cmp	r3, #32
 8004016:	d867      	bhi.n	80040e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004018:	2b00      	cmp	r3, #0
 800401a:	d05c      	beq.n	80040d6 <HAL_TIM_ConfigClockSource+0x15a>
 800401c:	2b10      	cmp	r3, #16
 800401e:	d05a      	beq.n	80040d6 <HAL_TIM_ConfigClockSource+0x15a>
 8004020:	e062      	b.n	80040e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004032:	f000 fb25 	bl	8004680 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004044:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	609a      	str	r2, [r3, #8]
      break;
 800404e:	e04f      	b.n	80040f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004060:	f000 fb0e 	bl	8004680 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689a      	ldr	r2, [r3, #8]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004072:	609a      	str	r2, [r3, #8]
      break;
 8004074:	e03c      	b.n	80040f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004082:	461a      	mov	r2, r3
 8004084:	f000 fa82 	bl	800458c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2150      	movs	r1, #80	; 0x50
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fadb 	bl	800464a <TIM_ITRx_SetConfig>
      break;
 8004094:	e02c      	b.n	80040f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040a2:	461a      	mov	r2, r3
 80040a4:	f000 faa1 	bl	80045ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2160      	movs	r1, #96	; 0x60
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 facb 	bl	800464a <TIM_ITRx_SetConfig>
      break;
 80040b4:	e01c      	b.n	80040f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040c2:	461a      	mov	r2, r3
 80040c4:	f000 fa62 	bl	800458c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2140      	movs	r1, #64	; 0x40
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 fabb 	bl	800464a <TIM_ITRx_SetConfig>
      break;
 80040d4:	e00c      	b.n	80040f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4619      	mov	r1, r3
 80040e0:	4610      	mov	r0, r2
 80040e2:	f000 fab2 	bl	800464a <TIM_ITRx_SetConfig>
      break;
 80040e6:	e003      	b.n	80040f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	73fb      	strb	r3, [r7, #15]
      break;
 80040ec:	e000      	b.n	80040f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004100:	7bfb      	ldrb	r3, [r7, #15]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800410a:	b480      	push	{r7}
 800410c:	b083      	sub	sp, #12
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
	...

0800415c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a3a      	ldr	r2, [pc, #232]	; (8004258 <TIM_Base_SetConfig+0xfc>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d00f      	beq.n	8004194 <TIM_Base_SetConfig+0x38>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800417a:	d00b      	beq.n	8004194 <TIM_Base_SetConfig+0x38>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a37      	ldr	r2, [pc, #220]	; (800425c <TIM_Base_SetConfig+0x100>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d007      	beq.n	8004194 <TIM_Base_SetConfig+0x38>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a36      	ldr	r2, [pc, #216]	; (8004260 <TIM_Base_SetConfig+0x104>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d003      	beq.n	8004194 <TIM_Base_SetConfig+0x38>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a35      	ldr	r2, [pc, #212]	; (8004264 <TIM_Base_SetConfig+0x108>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d108      	bne.n	80041a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a2b      	ldr	r2, [pc, #172]	; (8004258 <TIM_Base_SetConfig+0xfc>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d01b      	beq.n	80041e6 <TIM_Base_SetConfig+0x8a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b4:	d017      	beq.n	80041e6 <TIM_Base_SetConfig+0x8a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a28      	ldr	r2, [pc, #160]	; (800425c <TIM_Base_SetConfig+0x100>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d013      	beq.n	80041e6 <TIM_Base_SetConfig+0x8a>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a27      	ldr	r2, [pc, #156]	; (8004260 <TIM_Base_SetConfig+0x104>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00f      	beq.n	80041e6 <TIM_Base_SetConfig+0x8a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a26      	ldr	r2, [pc, #152]	; (8004264 <TIM_Base_SetConfig+0x108>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00b      	beq.n	80041e6 <TIM_Base_SetConfig+0x8a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a25      	ldr	r2, [pc, #148]	; (8004268 <TIM_Base_SetConfig+0x10c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d007      	beq.n	80041e6 <TIM_Base_SetConfig+0x8a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a24      	ldr	r2, [pc, #144]	; (800426c <TIM_Base_SetConfig+0x110>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d003      	beq.n	80041e6 <TIM_Base_SetConfig+0x8a>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a23      	ldr	r2, [pc, #140]	; (8004270 <TIM_Base_SetConfig+0x114>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d108      	bne.n	80041f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	4313      	orrs	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a0e      	ldr	r2, [pc, #56]	; (8004258 <TIM_Base_SetConfig+0xfc>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d103      	bne.n	800422c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b01      	cmp	r3, #1
 800423c:	d105      	bne.n	800424a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	f023 0201 	bic.w	r2, r3, #1
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	611a      	str	r2, [r3, #16]
  }
}
 800424a:	bf00      	nop
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40010000 	.word	0x40010000
 800425c:	40000400 	.word	0x40000400
 8004260:	40000800 	.word	0x40000800
 8004264:	40000c00 	.word	0x40000c00
 8004268:	40014000 	.word	0x40014000
 800426c:	40014400 	.word	0x40014400
 8004270:	40014800 	.word	0x40014800

08004274 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	f023 0201 	bic.w	r2, r3, #1
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0303 	bic.w	r3, r3, #3
 80042aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f023 0302 	bic.w	r3, r3, #2
 80042bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a1c      	ldr	r2, [pc, #112]	; (800433c <TIM_OC1_SetConfig+0xc8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d10c      	bne.n	80042ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f023 0308 	bic.w	r3, r3, #8
 80042d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	4313      	orrs	r3, r2
 80042e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f023 0304 	bic.w	r3, r3, #4
 80042e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a13      	ldr	r2, [pc, #76]	; (800433c <TIM_OC1_SetConfig+0xc8>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d111      	bne.n	8004316 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	4313      	orrs	r3, r2
 800430a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	4313      	orrs	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	621a      	str	r2, [r3, #32]
}
 8004330:	bf00      	nop
 8004332:	371c      	adds	r7, #28
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	40010000 	.word	0x40010000

08004340 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004340:	b480      	push	{r7}
 8004342:	b087      	sub	sp, #28
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	f023 0210 	bic.w	r2, r3, #16
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800436e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004376:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	021b      	lsls	r3, r3, #8
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	4313      	orrs	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f023 0320 	bic.w	r3, r3, #32
 800438a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	4313      	orrs	r3, r2
 8004396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a1e      	ldr	r2, [pc, #120]	; (8004414 <TIM_OC2_SetConfig+0xd4>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d10d      	bne.n	80043bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a15      	ldr	r2, [pc, #84]	; (8004414 <TIM_OC2_SetConfig+0xd4>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d113      	bne.n	80043ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	4313      	orrs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	621a      	str	r2, [r3, #32]
}
 8004406:	bf00      	nop
 8004408:	371c      	adds	r7, #28
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	40010000 	.word	0x40010000

08004418 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 0303 	bic.w	r3, r3, #3
 800444e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	021b      	lsls	r3, r3, #8
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	4313      	orrs	r3, r2
 800446c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a1d      	ldr	r2, [pc, #116]	; (80044e8 <TIM_OC3_SetConfig+0xd0>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d10d      	bne.n	8004492 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800447c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	021b      	lsls	r3, r3, #8
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	4313      	orrs	r3, r2
 8004488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004490:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a14      	ldr	r2, [pc, #80]	; (80044e8 <TIM_OC3_SetConfig+0xd0>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d113      	bne.n	80044c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	011b      	lsls	r3, r3, #4
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	4313      	orrs	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	621a      	str	r2, [r3, #32]
}
 80044dc:	bf00      	nop
 80044de:	371c      	adds	r7, #28
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	40010000 	.word	0x40010000

080044ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800451a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	021b      	lsls	r3, r3, #8
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4313      	orrs	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004536:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	031b      	lsls	r3, r3, #12
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	4313      	orrs	r3, r2
 8004542:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a10      	ldr	r2, [pc, #64]	; (8004588 <TIM_OC4_SetConfig+0x9c>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d109      	bne.n	8004560 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004552:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	019b      	lsls	r3, r3, #6
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	4313      	orrs	r3, r2
 800455e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	621a      	str	r2, [r3, #32]
}
 800457a:	bf00      	nop
 800457c:	371c      	adds	r7, #28
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	40010000 	.word	0x40010000

0800458c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	f023 0201 	bic.w	r2, r3, #1
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	4313      	orrs	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f023 030a 	bic.w	r3, r3, #10
 80045c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	621a      	str	r2, [r3, #32]
}
 80045de:	bf00      	nop
 80045e0:	371c      	adds	r7, #28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b087      	sub	sp, #28
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	60f8      	str	r0, [r7, #12]
 80045f2:	60b9      	str	r1, [r7, #8]
 80045f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	f023 0210 	bic.w	r2, r3, #16
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004614:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	031b      	lsls	r3, r3, #12
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004626:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	4313      	orrs	r3, r2
 8004630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	621a      	str	r2, [r3, #32]
}
 800463e:	bf00      	nop
 8004640:	371c      	adds	r7, #28
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800464a:	b480      	push	{r7}
 800464c:	b085      	sub	sp, #20
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
 8004652:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004660:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4313      	orrs	r3, r2
 8004668:	f043 0307 	orr.w	r3, r3, #7
 800466c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	609a      	str	r2, [r3, #8]
}
 8004674:	bf00      	nop
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004680:	b480      	push	{r7}
 8004682:	b087      	sub	sp, #28
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
 800468c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800469a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	021a      	lsls	r2, r3, #8
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	431a      	orrs	r2, r3
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	609a      	str	r2, [r3, #8]
}
 80046b4:	bf00      	nop
 80046b6:	371c      	adds	r7, #28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	f003 031f 	and.w	r3, r3, #31
 80046d2:	2201      	movs	r2, #1
 80046d4:	fa02 f303 	lsl.w	r3, r2, r3
 80046d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6a1a      	ldr	r2, [r3, #32]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	43db      	mvns	r3, r3
 80046e2:	401a      	ands	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6a1a      	ldr	r2, [r3, #32]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f003 031f 	and.w	r3, r3, #31
 80046f2:	6879      	ldr	r1, [r7, #4]
 80046f4:	fa01 f303 	lsl.w	r3, r1, r3
 80046f8:	431a      	orrs	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	621a      	str	r2, [r3, #32]
}
 80046fe:	bf00      	nop
 8004700:	371c      	adds	r7, #28
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
	...

0800470c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800471c:	2b01      	cmp	r3, #1
 800471e:	d101      	bne.n	8004724 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004720:	2302      	movs	r3, #2
 8004722:	e050      	b.n	80047c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800474a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	4313      	orrs	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a1c      	ldr	r2, [pc, #112]	; (80047d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d018      	beq.n	800479a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004770:	d013      	beq.n	800479a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a18      	ldr	r2, [pc, #96]	; (80047d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d00e      	beq.n	800479a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a16      	ldr	r2, [pc, #88]	; (80047dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d009      	beq.n	800479a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a15      	ldr	r2, [pc, #84]	; (80047e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d004      	beq.n	800479a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a13      	ldr	r2, [pc, #76]	; (80047e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d10c      	bne.n	80047b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	40010000 	.word	0x40010000
 80047d8:	40000400 	.word	0x40000400
 80047dc:	40000800 	.word	0x40000800
 80047e0:	40000c00 	.word	0x40000c00
 80047e4:	40014000 	.word	0x40014000

080047e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e042      	b.n	80048a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d106      	bne.n	800483c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7fc fb4a 	bl	8000ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2224      	movs	r2, #36	; 0x24
 8004840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004852:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 fdbd 	bl	80053d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	691a      	ldr	r2, [r3, #16]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004868:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	695a      	ldr	r2, [r3, #20]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004878:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68da      	ldr	r2, [r3, #12]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004888:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2220      	movs	r2, #32
 8004894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3708      	adds	r7, #8
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b08a      	sub	sp, #40	; 0x28
 80048b4:	af02      	add	r7, sp, #8
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	603b      	str	r3, [r7, #0]
 80048bc:	4613      	mov	r3, r2
 80048be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b20      	cmp	r3, #32
 80048ce:	d175      	bne.n	80049bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d002      	beq.n	80048dc <HAL_UART_Transmit+0x2c>
 80048d6:	88fb      	ldrh	r3, [r7, #6]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e06e      	b.n	80049be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2221      	movs	r2, #33	; 0x21
 80048ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048ee:	f7fd fa97 	bl	8001e20 <HAL_GetTick>
 80048f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	88fa      	ldrh	r2, [r7, #6]
 80048f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	88fa      	ldrh	r2, [r7, #6]
 80048fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004908:	d108      	bne.n	800491c <HAL_UART_Transmit+0x6c>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d104      	bne.n	800491c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004912:	2300      	movs	r3, #0
 8004914:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	61bb      	str	r3, [r7, #24]
 800491a:	e003      	b.n	8004924 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004920:	2300      	movs	r3, #0
 8004922:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004924:	e02e      	b.n	8004984 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	2200      	movs	r2, #0
 800492e:	2180      	movs	r1, #128	; 0x80
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f000 fb1f 	bl	8004f74 <UART_WaitOnFlagUntilTimeout>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d005      	beq.n	8004948 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2220      	movs	r2, #32
 8004940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e03a      	b.n	80049be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10b      	bne.n	8004966 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	461a      	mov	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800495c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	3302      	adds	r3, #2
 8004962:	61bb      	str	r3, [r7, #24]
 8004964:	e007      	b.n	8004976 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	781a      	ldrb	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	3301      	adds	r3, #1
 8004974:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800497a:	b29b      	uxth	r3, r3
 800497c:	3b01      	subs	r3, #1
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004988:	b29b      	uxth	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1cb      	bne.n	8004926 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	2200      	movs	r2, #0
 8004996:	2140      	movs	r1, #64	; 0x40
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 faeb 	bl	8004f74 <UART_WaitOnFlagUntilTimeout>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d005      	beq.n	80049b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e006      	b.n	80049be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80049b8:	2300      	movs	r3, #0
 80049ba:	e000      	b.n	80049be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80049bc:	2302      	movs	r3, #2
  }
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3720      	adds	r7, #32
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b084      	sub	sp, #16
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	60f8      	str	r0, [r7, #12]
 80049ce:	60b9      	str	r1, [r7, #8]
 80049d0:	4613      	mov	r3, r2
 80049d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b20      	cmp	r3, #32
 80049de:	d112      	bne.n	8004a06 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d002      	beq.n	80049ec <HAL_UART_Receive_IT+0x26>
 80049e6:	88fb      	ldrh	r3, [r7, #6]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e00b      	b.n	8004a08 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80049f6:	88fb      	ldrh	r3, [r7, #6]
 80049f8:	461a      	mov	r2, r3
 80049fa:	68b9      	ldr	r1, [r7, #8]
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 fb12 	bl	8005026 <UART_Start_Receive_IT>
 8004a02:	4603      	mov	r3, r0
 8004a04:	e000      	b.n	8004a08 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004a06:	2302      	movs	r3, #2
  }
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b0ba      	sub	sp, #232	; 0xe8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004a36:	2300      	movs	r3, #0
 8004a38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a46:	f003 030f 	and.w	r3, r3, #15
 8004a4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004a4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10f      	bne.n	8004a76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5a:	f003 0320 	and.w	r3, r3, #32
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d009      	beq.n	8004a76 <HAL_UART_IRQHandler+0x66>
 8004a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a66:	f003 0320 	and.w	r3, r3, #32
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fbf2 	bl	8005258 <UART_Receive_IT>
      return;
 8004a74:	e25b      	b.n	8004f2e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 80de 	beq.w	8004c3c <HAL_UART_IRQHandler+0x22c>
 8004a80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d106      	bne.n	8004a9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a90:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 80d1 	beq.w	8004c3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00b      	beq.n	8004abe <HAL_UART_IRQHandler+0xae>
 8004aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d005      	beq.n	8004abe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab6:	f043 0201 	orr.w	r2, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ac2:	f003 0304 	and.w	r3, r3, #4
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00b      	beq.n	8004ae2 <HAL_UART_IRQHandler+0xd2>
 8004aca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d005      	beq.n	8004ae2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ada:	f043 0202 	orr.w	r2, r3, #2
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00b      	beq.n	8004b06 <HAL_UART_IRQHandler+0xf6>
 8004aee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d005      	beq.n	8004b06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afe:	f043 0204 	orr.w	r2, r3, #4
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b0a:	f003 0308 	and.w	r3, r3, #8
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d011      	beq.n	8004b36 <HAL_UART_IRQHandler+0x126>
 8004b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b16:	f003 0320 	and.w	r3, r3, #32
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d105      	bne.n	8004b2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d005      	beq.n	8004b36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2e:	f043 0208 	orr.w	r2, r3, #8
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f000 81f2 	beq.w	8004f24 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b44:	f003 0320 	and.w	r3, r3, #32
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d008      	beq.n	8004b5e <HAL_UART_IRQHandler+0x14e>
 8004b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b50:	f003 0320 	and.w	r3, r3, #32
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 fb7d 	bl	8005258 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b68:	2b40      	cmp	r3, #64	; 0x40
 8004b6a:	bf0c      	ite	eq
 8004b6c:	2301      	moveq	r3, #1
 8004b6e:	2300      	movne	r3, #0
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7a:	f003 0308 	and.w	r3, r3, #8
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d103      	bne.n	8004b8a <HAL_UART_IRQHandler+0x17a>
 8004b82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d04f      	beq.n	8004c2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 fa85 	bl	800509a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9a:	2b40      	cmp	r3, #64	; 0x40
 8004b9c:	d141      	bne.n	8004c22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	3314      	adds	r3, #20
 8004ba4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bac:	e853 3f00 	ldrex	r3, [r3]
 8004bb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004bb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	3314      	adds	r3, #20
 8004bc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004bca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004bce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004bd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004bda:	e841 2300 	strex	r3, r2, [r1]
 8004bde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004be2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1d9      	bne.n	8004b9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d013      	beq.n	8004c1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf6:	4a7e      	ldr	r2, [pc, #504]	; (8004df0 <HAL_UART_IRQHandler+0x3e0>)
 8004bf8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7fd fa90 	bl	8002124 <HAL_DMA_Abort_IT>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d016      	beq.n	8004c38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c14:	4610      	mov	r0, r2
 8004c16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c18:	e00e      	b.n	8004c38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f994 	bl	8004f48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c20:	e00a      	b.n	8004c38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f990 	bl	8004f48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c28:	e006      	b.n	8004c38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f98c 	bl	8004f48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004c36:	e175      	b.n	8004f24 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c38:	bf00      	nop
    return;
 8004c3a:	e173      	b.n	8004f24 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	f040 814f 	bne.w	8004ee4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c4a:	f003 0310 	and.w	r3, r3, #16
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 8148 	beq.w	8004ee4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c58:	f003 0310 	and.w	r3, r3, #16
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 8141 	beq.w	8004ee4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c62:	2300      	movs	r3, #0
 8004c64:	60bb      	str	r3, [r7, #8]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	60bb      	str	r3, [r7, #8]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	60bb      	str	r3, [r7, #8]
 8004c76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c82:	2b40      	cmp	r3, #64	; 0x40
 8004c84:	f040 80b6 	bne.w	8004df4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 8145 	beq.w	8004f28 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ca2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	f080 813e 	bcs.w	8004f28 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cb2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cbe:	f000 8088 	beq.w	8004dd2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	330c      	adds	r3, #12
 8004cc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ccc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cd0:	e853 3f00 	ldrex	r3, [r3]
 8004cd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004cd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ce0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	330c      	adds	r3, #12
 8004cea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004cee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004cfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004cfe:	e841 2300 	strex	r3, r2, [r1]
 8004d02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1d9      	bne.n	8004cc2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	3314      	adds	r3, #20
 8004d14:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d18:	e853 3f00 	ldrex	r3, [r3]
 8004d1c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d20:	f023 0301 	bic.w	r3, r3, #1
 8004d24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	3314      	adds	r3, #20
 8004d2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d32:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d36:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d38:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d3e:	e841 2300 	strex	r3, r2, [r1]
 8004d42:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1e1      	bne.n	8004d0e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	3314      	adds	r3, #20
 8004d50:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d54:	e853 3f00 	ldrex	r3, [r3]
 8004d58:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3314      	adds	r3, #20
 8004d6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d70:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d72:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d76:	e841 2300 	strex	r3, r2, [r1]
 8004d7a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1e3      	bne.n	8004d4a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	330c      	adds	r3, #12
 8004d96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d9a:	e853 3f00 	ldrex	r3, [r3]
 8004d9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004da0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004da2:	f023 0310 	bic.w	r3, r3, #16
 8004da6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	330c      	adds	r3, #12
 8004db0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004db4:	65ba      	str	r2, [r7, #88]	; 0x58
 8004db6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004dba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dbc:	e841 2300 	strex	r3, r2, [r1]
 8004dc0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1e3      	bne.n	8004d90 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7fd f939 	bl	8002044 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	4619      	mov	r1, r3
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f8b7 	bl	8004f5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004dee:	e09b      	b.n	8004f28 <HAL_UART_IRQHandler+0x518>
 8004df0:	08005161 	.word	0x08005161
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 808e 	beq.w	8004f2c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004e10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 8089 	beq.w	8004f2c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	330c      	adds	r3, #12
 8004e20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e24:	e853 3f00 	ldrex	r3, [r3]
 8004e28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	330c      	adds	r3, #12
 8004e3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004e3e:	647a      	str	r2, [r7, #68]	; 0x44
 8004e40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e46:	e841 2300 	strex	r3, r2, [r1]
 8004e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1e3      	bne.n	8004e1a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3314      	adds	r3, #20
 8004e58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	e853 3f00 	ldrex	r3, [r3]
 8004e60:	623b      	str	r3, [r7, #32]
   return(result);
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	f023 0301 	bic.w	r3, r3, #1
 8004e68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3314      	adds	r3, #20
 8004e72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e76:	633a      	str	r2, [r7, #48]	; 0x30
 8004e78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e7e:	e841 2300 	strex	r3, r2, [r1]
 8004e82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1e3      	bne.n	8004e52 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	330c      	adds	r3, #12
 8004e9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	e853 3f00 	ldrex	r3, [r3]
 8004ea6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0310 	bic.w	r3, r3, #16
 8004eae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	330c      	adds	r3, #12
 8004eb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ebc:	61fa      	str	r2, [r7, #28]
 8004ebe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec0:	69b9      	ldr	r1, [r7, #24]
 8004ec2:	69fa      	ldr	r2, [r7, #28]
 8004ec4:	e841 2300 	strex	r3, r2, [r1]
 8004ec8:	617b      	str	r3, [r7, #20]
   return(result);
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1e3      	bne.n	8004e98 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ed6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004eda:	4619      	mov	r1, r3
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f83d 	bl	8004f5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ee2:	e023      	b.n	8004f2c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d009      	beq.n	8004f04 <HAL_UART_IRQHandler+0x4f4>
 8004ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f943 	bl	8005188 <UART_Transmit_IT>
    return;
 8004f02:	e014      	b.n	8004f2e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00e      	beq.n	8004f2e <HAL_UART_IRQHandler+0x51e>
 8004f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d008      	beq.n	8004f2e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f983 	bl	8005228 <UART_EndTransmit_IT>
    return;
 8004f22:	e004      	b.n	8004f2e <HAL_UART_IRQHandler+0x51e>
    return;
 8004f24:	bf00      	nop
 8004f26:	e002      	b.n	8004f2e <HAL_UART_IRQHandler+0x51e>
      return;
 8004f28:	bf00      	nop
 8004f2a:	e000      	b.n	8004f2e <HAL_UART_IRQHandler+0x51e>
      return;
 8004f2c:	bf00      	nop
  }
}
 8004f2e:	37e8      	adds	r7, #232	; 0xe8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	460b      	mov	r3, r1
 8004f66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	603b      	str	r3, [r7, #0]
 8004f80:	4613      	mov	r3, r2
 8004f82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f84:	e03b      	b.n	8004ffe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8c:	d037      	beq.n	8004ffe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f8e:	f7fc ff47 	bl	8001e20 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	6a3a      	ldr	r2, [r7, #32]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d302      	bcc.n	8004fa4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d101      	bne.n	8004fa8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e03a      	b.n	800501e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	f003 0304 	and.w	r3, r3, #4
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d023      	beq.n	8004ffe <UART_WaitOnFlagUntilTimeout+0x8a>
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	2b80      	cmp	r3, #128	; 0x80
 8004fba:	d020      	beq.n	8004ffe <UART_WaitOnFlagUntilTimeout+0x8a>
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2b40      	cmp	r3, #64	; 0x40
 8004fc0:	d01d      	beq.n	8004ffe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0308 	and.w	r3, r3, #8
 8004fcc:	2b08      	cmp	r3, #8
 8004fce:	d116      	bne.n	8004ffe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	617b      	str	r3, [r7, #20]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	617b      	str	r3, [r7, #20]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	617b      	str	r3, [r7, #20]
 8004fe4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 f857 	bl	800509a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2208      	movs	r2, #8
 8004ff0:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e00f      	b.n	800501e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	4013      	ands	r3, r2
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	429a      	cmp	r2, r3
 800500c:	bf0c      	ite	eq
 800500e:	2301      	moveq	r3, #1
 8005010:	2300      	movne	r3, #0
 8005012:	b2db      	uxtb	r3, r3
 8005014:	461a      	mov	r2, r3
 8005016:	79fb      	ldrb	r3, [r7, #7]
 8005018:	429a      	cmp	r2, r3
 800501a:	d0b4      	beq.n	8004f86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3718      	adds	r7, #24
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005026:	b480      	push	{r7}
 8005028:	b085      	sub	sp, #20
 800502a:	af00      	add	r7, sp, #0
 800502c:	60f8      	str	r0, [r7, #12]
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	4613      	mov	r3, r2
 8005032:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	88fa      	ldrh	r2, [r7, #6]
 800503e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	88fa      	ldrh	r2, [r7, #6]
 8005044:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2222      	movs	r2, #34	; 0x22
 8005050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d007      	beq.n	800506c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68da      	ldr	r2, [r3, #12]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800506a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	695a      	ldr	r2, [r3, #20]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f042 0201 	orr.w	r2, r2, #1
 800507a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0220 	orr.w	r2, r2, #32
 800508a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800509a:	b480      	push	{r7}
 800509c:	b095      	sub	sp, #84	; 0x54
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	330c      	adds	r3, #12
 80050a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ac:	e853 3f00 	ldrex	r3, [r3]
 80050b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	330c      	adds	r3, #12
 80050c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050c2:	643a      	str	r2, [r7, #64]	; 0x40
 80050c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050ca:	e841 2300 	strex	r3, r2, [r1]
 80050ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1e5      	bne.n	80050a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	3314      	adds	r3, #20
 80050dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	e853 3f00 	ldrex	r3, [r3]
 80050e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	f023 0301 	bic.w	r3, r3, #1
 80050ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	3314      	adds	r3, #20
 80050f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050fe:	e841 2300 	strex	r3, r2, [r1]
 8005102:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1e5      	bne.n	80050d6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510e:	2b01      	cmp	r3, #1
 8005110:	d119      	bne.n	8005146 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	330c      	adds	r3, #12
 8005118:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	e853 3f00 	ldrex	r3, [r3]
 8005120:	60bb      	str	r3, [r7, #8]
   return(result);
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	f023 0310 	bic.w	r3, r3, #16
 8005128:	647b      	str	r3, [r7, #68]	; 0x44
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	330c      	adds	r3, #12
 8005130:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005132:	61ba      	str	r2, [r7, #24]
 8005134:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005136:	6979      	ldr	r1, [r7, #20]
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	e841 2300 	strex	r3, r2, [r1]
 800513e:	613b      	str	r3, [r7, #16]
   return(result);
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1e5      	bne.n	8005112 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2220      	movs	r2, #32
 800514a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005154:	bf00      	nop
 8005156:	3754      	adds	r7, #84	; 0x54
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f7ff fee4 	bl	8004f48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005180:	bf00      	nop
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b21      	cmp	r3, #33	; 0x21
 800519a:	d13e      	bne.n	800521a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a4:	d114      	bne.n	80051d0 <UART_Transmit_IT+0x48>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d110      	bne.n	80051d0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	461a      	mov	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051c2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	1c9a      	adds	r2, r3, #2
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	621a      	str	r2, [r3, #32]
 80051ce:	e008      	b.n	80051e2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	1c59      	adds	r1, r3, #1
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	6211      	str	r1, [r2, #32]
 80051da:	781a      	ldrb	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	3b01      	subs	r3, #1
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	4619      	mov	r1, r3
 80051f0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10f      	bne.n	8005216 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68da      	ldr	r2, [r3, #12]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005204:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68da      	ldr	r2, [r3, #12]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005214:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005216:	2300      	movs	r3, #0
 8005218:	e000      	b.n	800521c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800521a:	2302      	movs	r3, #2
  }
}
 800521c:	4618      	mov	r0, r3
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68da      	ldr	r2, [r3, #12]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800523e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2220      	movs	r2, #32
 8005244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f7ff fe73 	bl	8004f34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b08c      	sub	sp, #48	; 0x30
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b22      	cmp	r3, #34	; 0x22
 800526a:	f040 80ae 	bne.w	80053ca <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005276:	d117      	bne.n	80052a8 <UART_Receive_IT+0x50>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d113      	bne.n	80052a8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005280:	2300      	movs	r3, #0
 8005282:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005288:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	b29b      	uxth	r3, r3
 8005292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005296:	b29a      	uxth	r2, r3
 8005298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a0:	1c9a      	adds	r2, r3, #2
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	629a      	str	r2, [r3, #40]	; 0x28
 80052a6:	e026      	b.n	80052f6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ba:	d007      	beq.n	80052cc <UART_Receive_IT+0x74>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10a      	bne.n	80052da <UART_Receive_IT+0x82>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d106      	bne.n	80052da <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d6:	701a      	strb	r2, [r3, #0]
 80052d8:	e008      	b.n	80052ec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052e6:	b2da      	uxtb	r2, r3
 80052e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	3b01      	subs	r3, #1
 80052fe:	b29b      	uxth	r3, r3
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	4619      	mov	r1, r3
 8005304:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005306:	2b00      	cmp	r3, #0
 8005308:	d15d      	bne.n	80053c6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68da      	ldr	r2, [r3, #12]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f022 0220 	bic.w	r2, r2, #32
 8005318:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68da      	ldr	r2, [r3, #12]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005328:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	695a      	ldr	r2, [r3, #20]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 0201 	bic.w	r2, r2, #1
 8005338:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2220      	movs	r2, #32
 800533e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534c:	2b01      	cmp	r3, #1
 800534e:	d135      	bne.n	80053bc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	330c      	adds	r3, #12
 800535c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	e853 3f00 	ldrex	r3, [r3]
 8005364:	613b      	str	r3, [r7, #16]
   return(result);
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	f023 0310 	bic.w	r3, r3, #16
 800536c:	627b      	str	r3, [r7, #36]	; 0x24
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	330c      	adds	r3, #12
 8005374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005376:	623a      	str	r2, [r7, #32]
 8005378:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537a:	69f9      	ldr	r1, [r7, #28]
 800537c:	6a3a      	ldr	r2, [r7, #32]
 800537e:	e841 2300 	strex	r3, r2, [r1]
 8005382:	61bb      	str	r3, [r7, #24]
   return(result);
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1e5      	bne.n	8005356 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0310 	and.w	r3, r3, #16
 8005394:	2b10      	cmp	r3, #16
 8005396:	d10a      	bne.n	80053ae <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005398:	2300      	movs	r3, #0
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053b2:	4619      	mov	r1, r3
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7ff fdd1 	bl	8004f5c <HAL_UARTEx_RxEventCallback>
 80053ba:	e002      	b.n	80053c2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f7fb f9a1 	bl	8000704 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80053c2:	2300      	movs	r3, #0
 80053c4:	e002      	b.n	80053cc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	e000      	b.n	80053cc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80053ca:	2302      	movs	r3, #2
  }
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3730      	adds	r7, #48	; 0x30
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053d8:	b0c0      	sub	sp, #256	; 0x100
 80053da:	af00      	add	r7, sp, #0
 80053dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80053ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f0:	68d9      	ldr	r1, [r3, #12]
 80053f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	ea40 0301 	orr.w	r3, r0, r1
 80053fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	431a      	orrs	r2, r3
 800540c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	431a      	orrs	r2, r3
 8005414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	4313      	orrs	r3, r2
 800541c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800542c:	f021 010c 	bic.w	r1, r1, #12
 8005430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800543a:	430b      	orrs	r3, r1
 800543c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800543e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800544a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800544e:	6999      	ldr	r1, [r3, #24]
 8005450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	ea40 0301 	orr.w	r3, r0, r1
 800545a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800545c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	4b8f      	ldr	r3, [pc, #572]	; (80056a0 <UART_SetConfig+0x2cc>)
 8005464:	429a      	cmp	r2, r3
 8005466:	d005      	beq.n	8005474 <UART_SetConfig+0xa0>
 8005468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	4b8d      	ldr	r3, [pc, #564]	; (80056a4 <UART_SetConfig+0x2d0>)
 8005470:	429a      	cmp	r2, r3
 8005472:	d104      	bne.n	800547e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005474:	f7fe f96a 	bl	800374c <HAL_RCC_GetPCLK2Freq>
 8005478:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800547c:	e003      	b.n	8005486 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800547e:	f7fe f951 	bl	8003724 <HAL_RCC_GetPCLK1Freq>
 8005482:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005490:	f040 810c 	bne.w	80056ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005498:	2200      	movs	r2, #0
 800549a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800549e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80054a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80054a6:	4622      	mov	r2, r4
 80054a8:	462b      	mov	r3, r5
 80054aa:	1891      	adds	r1, r2, r2
 80054ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80054ae:	415b      	adcs	r3, r3
 80054b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80054b6:	4621      	mov	r1, r4
 80054b8:	eb12 0801 	adds.w	r8, r2, r1
 80054bc:	4629      	mov	r1, r5
 80054be:	eb43 0901 	adc.w	r9, r3, r1
 80054c2:	f04f 0200 	mov.w	r2, #0
 80054c6:	f04f 0300 	mov.w	r3, #0
 80054ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054d6:	4690      	mov	r8, r2
 80054d8:	4699      	mov	r9, r3
 80054da:	4623      	mov	r3, r4
 80054dc:	eb18 0303 	adds.w	r3, r8, r3
 80054e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80054e4:	462b      	mov	r3, r5
 80054e6:	eb49 0303 	adc.w	r3, r9, r3
 80054ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80054ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80054fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80054fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005502:	460b      	mov	r3, r1
 8005504:	18db      	adds	r3, r3, r3
 8005506:	653b      	str	r3, [r7, #80]	; 0x50
 8005508:	4613      	mov	r3, r2
 800550a:	eb42 0303 	adc.w	r3, r2, r3
 800550e:	657b      	str	r3, [r7, #84]	; 0x54
 8005510:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005514:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005518:	f7fa feb2 	bl	8000280 <__aeabi_uldivmod>
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	4b61      	ldr	r3, [pc, #388]	; (80056a8 <UART_SetConfig+0x2d4>)
 8005522:	fba3 2302 	umull	r2, r3, r3, r2
 8005526:	095b      	lsrs	r3, r3, #5
 8005528:	011c      	lsls	r4, r3, #4
 800552a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800552e:	2200      	movs	r2, #0
 8005530:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005534:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005538:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800553c:	4642      	mov	r2, r8
 800553e:	464b      	mov	r3, r9
 8005540:	1891      	adds	r1, r2, r2
 8005542:	64b9      	str	r1, [r7, #72]	; 0x48
 8005544:	415b      	adcs	r3, r3
 8005546:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005548:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800554c:	4641      	mov	r1, r8
 800554e:	eb12 0a01 	adds.w	sl, r2, r1
 8005552:	4649      	mov	r1, r9
 8005554:	eb43 0b01 	adc.w	fp, r3, r1
 8005558:	f04f 0200 	mov.w	r2, #0
 800555c:	f04f 0300 	mov.w	r3, #0
 8005560:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005564:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005568:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800556c:	4692      	mov	sl, r2
 800556e:	469b      	mov	fp, r3
 8005570:	4643      	mov	r3, r8
 8005572:	eb1a 0303 	adds.w	r3, sl, r3
 8005576:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800557a:	464b      	mov	r3, r9
 800557c:	eb4b 0303 	adc.w	r3, fp, r3
 8005580:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005590:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005594:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005598:	460b      	mov	r3, r1
 800559a:	18db      	adds	r3, r3, r3
 800559c:	643b      	str	r3, [r7, #64]	; 0x40
 800559e:	4613      	mov	r3, r2
 80055a0:	eb42 0303 	adc.w	r3, r2, r3
 80055a4:	647b      	str	r3, [r7, #68]	; 0x44
 80055a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80055aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80055ae:	f7fa fe67 	bl	8000280 <__aeabi_uldivmod>
 80055b2:	4602      	mov	r2, r0
 80055b4:	460b      	mov	r3, r1
 80055b6:	4611      	mov	r1, r2
 80055b8:	4b3b      	ldr	r3, [pc, #236]	; (80056a8 <UART_SetConfig+0x2d4>)
 80055ba:	fba3 2301 	umull	r2, r3, r3, r1
 80055be:	095b      	lsrs	r3, r3, #5
 80055c0:	2264      	movs	r2, #100	; 0x64
 80055c2:	fb02 f303 	mul.w	r3, r2, r3
 80055c6:	1acb      	subs	r3, r1, r3
 80055c8:	00db      	lsls	r3, r3, #3
 80055ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80055ce:	4b36      	ldr	r3, [pc, #216]	; (80056a8 <UART_SetConfig+0x2d4>)
 80055d0:	fba3 2302 	umull	r2, r3, r3, r2
 80055d4:	095b      	lsrs	r3, r3, #5
 80055d6:	005b      	lsls	r3, r3, #1
 80055d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80055dc:	441c      	add	r4, r3
 80055de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055e2:	2200      	movs	r2, #0
 80055e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80055ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80055f0:	4642      	mov	r2, r8
 80055f2:	464b      	mov	r3, r9
 80055f4:	1891      	adds	r1, r2, r2
 80055f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80055f8:	415b      	adcs	r3, r3
 80055fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005600:	4641      	mov	r1, r8
 8005602:	1851      	adds	r1, r2, r1
 8005604:	6339      	str	r1, [r7, #48]	; 0x30
 8005606:	4649      	mov	r1, r9
 8005608:	414b      	adcs	r3, r1
 800560a:	637b      	str	r3, [r7, #52]	; 0x34
 800560c:	f04f 0200 	mov.w	r2, #0
 8005610:	f04f 0300 	mov.w	r3, #0
 8005614:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005618:	4659      	mov	r1, fp
 800561a:	00cb      	lsls	r3, r1, #3
 800561c:	4651      	mov	r1, sl
 800561e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005622:	4651      	mov	r1, sl
 8005624:	00ca      	lsls	r2, r1, #3
 8005626:	4610      	mov	r0, r2
 8005628:	4619      	mov	r1, r3
 800562a:	4603      	mov	r3, r0
 800562c:	4642      	mov	r2, r8
 800562e:	189b      	adds	r3, r3, r2
 8005630:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005634:	464b      	mov	r3, r9
 8005636:	460a      	mov	r2, r1
 8005638:	eb42 0303 	adc.w	r3, r2, r3
 800563c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800564c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005650:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005654:	460b      	mov	r3, r1
 8005656:	18db      	adds	r3, r3, r3
 8005658:	62bb      	str	r3, [r7, #40]	; 0x28
 800565a:	4613      	mov	r3, r2
 800565c:	eb42 0303 	adc.w	r3, r2, r3
 8005660:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005662:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005666:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800566a:	f7fa fe09 	bl	8000280 <__aeabi_uldivmod>
 800566e:	4602      	mov	r2, r0
 8005670:	460b      	mov	r3, r1
 8005672:	4b0d      	ldr	r3, [pc, #52]	; (80056a8 <UART_SetConfig+0x2d4>)
 8005674:	fba3 1302 	umull	r1, r3, r3, r2
 8005678:	095b      	lsrs	r3, r3, #5
 800567a:	2164      	movs	r1, #100	; 0x64
 800567c:	fb01 f303 	mul.w	r3, r1, r3
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	3332      	adds	r3, #50	; 0x32
 8005686:	4a08      	ldr	r2, [pc, #32]	; (80056a8 <UART_SetConfig+0x2d4>)
 8005688:	fba2 2303 	umull	r2, r3, r2, r3
 800568c:	095b      	lsrs	r3, r3, #5
 800568e:	f003 0207 	and.w	r2, r3, #7
 8005692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4422      	add	r2, r4
 800569a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800569c:	e106      	b.n	80058ac <UART_SetConfig+0x4d8>
 800569e:	bf00      	nop
 80056a0:	40011000 	.word	0x40011000
 80056a4:	40011400 	.word	0x40011400
 80056a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056b0:	2200      	movs	r2, #0
 80056b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80056b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80056ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80056be:	4642      	mov	r2, r8
 80056c0:	464b      	mov	r3, r9
 80056c2:	1891      	adds	r1, r2, r2
 80056c4:	6239      	str	r1, [r7, #32]
 80056c6:	415b      	adcs	r3, r3
 80056c8:	627b      	str	r3, [r7, #36]	; 0x24
 80056ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80056ce:	4641      	mov	r1, r8
 80056d0:	1854      	adds	r4, r2, r1
 80056d2:	4649      	mov	r1, r9
 80056d4:	eb43 0501 	adc.w	r5, r3, r1
 80056d8:	f04f 0200 	mov.w	r2, #0
 80056dc:	f04f 0300 	mov.w	r3, #0
 80056e0:	00eb      	lsls	r3, r5, #3
 80056e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056e6:	00e2      	lsls	r2, r4, #3
 80056e8:	4614      	mov	r4, r2
 80056ea:	461d      	mov	r5, r3
 80056ec:	4643      	mov	r3, r8
 80056ee:	18e3      	adds	r3, r4, r3
 80056f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80056f4:	464b      	mov	r3, r9
 80056f6:	eb45 0303 	adc.w	r3, r5, r3
 80056fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800570a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800570e:	f04f 0200 	mov.w	r2, #0
 8005712:	f04f 0300 	mov.w	r3, #0
 8005716:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800571a:	4629      	mov	r1, r5
 800571c:	008b      	lsls	r3, r1, #2
 800571e:	4621      	mov	r1, r4
 8005720:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005724:	4621      	mov	r1, r4
 8005726:	008a      	lsls	r2, r1, #2
 8005728:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800572c:	f7fa fda8 	bl	8000280 <__aeabi_uldivmod>
 8005730:	4602      	mov	r2, r0
 8005732:	460b      	mov	r3, r1
 8005734:	4b60      	ldr	r3, [pc, #384]	; (80058b8 <UART_SetConfig+0x4e4>)
 8005736:	fba3 2302 	umull	r2, r3, r3, r2
 800573a:	095b      	lsrs	r3, r3, #5
 800573c:	011c      	lsls	r4, r3, #4
 800573e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005742:	2200      	movs	r2, #0
 8005744:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005748:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800574c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005750:	4642      	mov	r2, r8
 8005752:	464b      	mov	r3, r9
 8005754:	1891      	adds	r1, r2, r2
 8005756:	61b9      	str	r1, [r7, #24]
 8005758:	415b      	adcs	r3, r3
 800575a:	61fb      	str	r3, [r7, #28]
 800575c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005760:	4641      	mov	r1, r8
 8005762:	1851      	adds	r1, r2, r1
 8005764:	6139      	str	r1, [r7, #16]
 8005766:	4649      	mov	r1, r9
 8005768:	414b      	adcs	r3, r1
 800576a:	617b      	str	r3, [r7, #20]
 800576c:	f04f 0200 	mov.w	r2, #0
 8005770:	f04f 0300 	mov.w	r3, #0
 8005774:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005778:	4659      	mov	r1, fp
 800577a:	00cb      	lsls	r3, r1, #3
 800577c:	4651      	mov	r1, sl
 800577e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005782:	4651      	mov	r1, sl
 8005784:	00ca      	lsls	r2, r1, #3
 8005786:	4610      	mov	r0, r2
 8005788:	4619      	mov	r1, r3
 800578a:	4603      	mov	r3, r0
 800578c:	4642      	mov	r2, r8
 800578e:	189b      	adds	r3, r3, r2
 8005790:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005794:	464b      	mov	r3, r9
 8005796:	460a      	mov	r2, r1
 8005798:	eb42 0303 	adc.w	r3, r2, r3
 800579c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80057a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80057aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80057ac:	f04f 0200 	mov.w	r2, #0
 80057b0:	f04f 0300 	mov.w	r3, #0
 80057b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80057b8:	4649      	mov	r1, r9
 80057ba:	008b      	lsls	r3, r1, #2
 80057bc:	4641      	mov	r1, r8
 80057be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057c2:	4641      	mov	r1, r8
 80057c4:	008a      	lsls	r2, r1, #2
 80057c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80057ca:	f7fa fd59 	bl	8000280 <__aeabi_uldivmod>
 80057ce:	4602      	mov	r2, r0
 80057d0:	460b      	mov	r3, r1
 80057d2:	4611      	mov	r1, r2
 80057d4:	4b38      	ldr	r3, [pc, #224]	; (80058b8 <UART_SetConfig+0x4e4>)
 80057d6:	fba3 2301 	umull	r2, r3, r3, r1
 80057da:	095b      	lsrs	r3, r3, #5
 80057dc:	2264      	movs	r2, #100	; 0x64
 80057de:	fb02 f303 	mul.w	r3, r2, r3
 80057e2:	1acb      	subs	r3, r1, r3
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	3332      	adds	r3, #50	; 0x32
 80057e8:	4a33      	ldr	r2, [pc, #204]	; (80058b8 <UART_SetConfig+0x4e4>)
 80057ea:	fba2 2303 	umull	r2, r3, r2, r3
 80057ee:	095b      	lsrs	r3, r3, #5
 80057f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057f4:	441c      	add	r4, r3
 80057f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057fa:	2200      	movs	r2, #0
 80057fc:	673b      	str	r3, [r7, #112]	; 0x70
 80057fe:	677a      	str	r2, [r7, #116]	; 0x74
 8005800:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005804:	4642      	mov	r2, r8
 8005806:	464b      	mov	r3, r9
 8005808:	1891      	adds	r1, r2, r2
 800580a:	60b9      	str	r1, [r7, #8]
 800580c:	415b      	adcs	r3, r3
 800580e:	60fb      	str	r3, [r7, #12]
 8005810:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005814:	4641      	mov	r1, r8
 8005816:	1851      	adds	r1, r2, r1
 8005818:	6039      	str	r1, [r7, #0]
 800581a:	4649      	mov	r1, r9
 800581c:	414b      	adcs	r3, r1
 800581e:	607b      	str	r3, [r7, #4]
 8005820:	f04f 0200 	mov.w	r2, #0
 8005824:	f04f 0300 	mov.w	r3, #0
 8005828:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800582c:	4659      	mov	r1, fp
 800582e:	00cb      	lsls	r3, r1, #3
 8005830:	4651      	mov	r1, sl
 8005832:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005836:	4651      	mov	r1, sl
 8005838:	00ca      	lsls	r2, r1, #3
 800583a:	4610      	mov	r0, r2
 800583c:	4619      	mov	r1, r3
 800583e:	4603      	mov	r3, r0
 8005840:	4642      	mov	r2, r8
 8005842:	189b      	adds	r3, r3, r2
 8005844:	66bb      	str	r3, [r7, #104]	; 0x68
 8005846:	464b      	mov	r3, r9
 8005848:	460a      	mov	r2, r1
 800584a:	eb42 0303 	adc.w	r3, r2, r3
 800584e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	663b      	str	r3, [r7, #96]	; 0x60
 800585a:	667a      	str	r2, [r7, #100]	; 0x64
 800585c:	f04f 0200 	mov.w	r2, #0
 8005860:	f04f 0300 	mov.w	r3, #0
 8005864:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005868:	4649      	mov	r1, r9
 800586a:	008b      	lsls	r3, r1, #2
 800586c:	4641      	mov	r1, r8
 800586e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005872:	4641      	mov	r1, r8
 8005874:	008a      	lsls	r2, r1, #2
 8005876:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800587a:	f7fa fd01 	bl	8000280 <__aeabi_uldivmod>
 800587e:	4602      	mov	r2, r0
 8005880:	460b      	mov	r3, r1
 8005882:	4b0d      	ldr	r3, [pc, #52]	; (80058b8 <UART_SetConfig+0x4e4>)
 8005884:	fba3 1302 	umull	r1, r3, r3, r2
 8005888:	095b      	lsrs	r3, r3, #5
 800588a:	2164      	movs	r1, #100	; 0x64
 800588c:	fb01 f303 	mul.w	r3, r1, r3
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	3332      	adds	r3, #50	; 0x32
 8005896:	4a08      	ldr	r2, [pc, #32]	; (80058b8 <UART_SetConfig+0x4e4>)
 8005898:	fba2 2303 	umull	r2, r3, r2, r3
 800589c:	095b      	lsrs	r3, r3, #5
 800589e:	f003 020f 	and.w	r2, r3, #15
 80058a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4422      	add	r2, r4
 80058aa:	609a      	str	r2, [r3, #8]
}
 80058ac:	bf00      	nop
 80058ae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80058b2:	46bd      	mov	sp, r7
 80058b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058b8:	51eb851f 	.word	0x51eb851f

080058bc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	4603      	mov	r3, r0
 80058c4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80058c6:	2300      	movs	r3, #0
 80058c8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80058ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058ce:	2b84      	cmp	r3, #132	; 0x84
 80058d0:	d005      	beq.n	80058de <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80058d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	4413      	add	r3, r2
 80058da:	3303      	adds	r3, #3
 80058dc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80058de:	68fb      	ldr	r3, [r7, #12]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80058f0:	f000 faf6 	bl	8005ee0 <vTaskStartScheduler>
  
  return osOK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	bd80      	pop	{r7, pc}

080058fa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80058fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058fc:	b089      	sub	sp, #36	; 0x24
 80058fe:	af04      	add	r7, sp, #16
 8005900:	6078      	str	r0, [r7, #4]
 8005902:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	695b      	ldr	r3, [r3, #20]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d020      	beq.n	800594e <osThreadCreate+0x54>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d01c      	beq.n	800594e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685c      	ldr	r4, [r3, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	691e      	ldr	r6, [r3, #16]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005926:	4618      	mov	r0, r3
 8005928:	f7ff ffc8 	bl	80058bc <makeFreeRtosPriority>
 800592c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005936:	9202      	str	r2, [sp, #8]
 8005938:	9301      	str	r3, [sp, #4]
 800593a:	9100      	str	r1, [sp, #0]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	4632      	mov	r2, r6
 8005940:	4629      	mov	r1, r5
 8005942:	4620      	mov	r0, r4
 8005944:	f000 f8ed 	bl	8005b22 <xTaskCreateStatic>
 8005948:	4603      	mov	r3, r0
 800594a:	60fb      	str	r3, [r7, #12]
 800594c:	e01c      	b.n	8005988 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685c      	ldr	r4, [r3, #4]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800595a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005962:	4618      	mov	r0, r3
 8005964:	f7ff ffaa 	bl	80058bc <makeFreeRtosPriority>
 8005968:	4602      	mov	r2, r0
 800596a:	f107 030c 	add.w	r3, r7, #12
 800596e:	9301      	str	r3, [sp, #4]
 8005970:	9200      	str	r2, [sp, #0]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	4632      	mov	r2, r6
 8005976:	4629      	mov	r1, r5
 8005978:	4620      	mov	r0, r4
 800597a:	f000 f92f 	bl	8005bdc <xTaskCreate>
 800597e:	4603      	mov	r3, r0
 8005980:	2b01      	cmp	r3, #1
 8005982:	d001      	beq.n	8005988 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005984:	2300      	movs	r3, #0
 8005986:	e000      	b.n	800598a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005988:	68fb      	ldr	r3, [r7, #12]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005992 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b084      	sub	sp, #16
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <osDelay+0x16>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	e000      	b.n	80059aa <osDelay+0x18>
 80059a8:	2301      	movs	r3, #1
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 fa64 	bl	8005e78 <vTaskDelay>
  
  return osOK;
 80059b0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80059ba:	b480      	push	{r7}
 80059bc:	b083      	sub	sp, #12
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f103 0208 	add.w	r2, r3, #8
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f04f 32ff 	mov.w	r2, #4294967295
 80059d2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f103 0208 	add.w	r2, r3, #8
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f103 0208 	add.w	r2, r3, #8
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80059ee:	bf00      	nop
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80059fa:	b480      	push	{r7}
 80059fc:	b083      	sub	sp, #12
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	689a      	ldr	r2, [r3, #8]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	683a      	ldr	r2, [r7, #0]
 8005a3e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	1c5a      	adds	r2, r3, #1
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	601a      	str	r2, [r3, #0]
}
 8005a50:	bf00      	nop
 8005a52:	3714      	adds	r7, #20
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a72:	d103      	bne.n	8005a7c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	60fb      	str	r3, [r7, #12]
 8005a7a:	e00c      	b.n	8005a96 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	3308      	adds	r3, #8
 8005a80:	60fb      	str	r3, [r7, #12]
 8005a82:	e002      	b.n	8005a8a <vListInsert+0x2e>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	60fb      	str	r3, [r7, #12]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d2f6      	bcs.n	8005a84 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	683a      	ldr	r2, [r7, #0]
 8005aa4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	1c5a      	adds	r2, r3, #1
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	601a      	str	r2, [r3, #0]
}
 8005ac2:	bf00      	nop
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b085      	sub	sp, #20
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	6892      	ldr	r2, [r2, #8]
 8005ae4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	6852      	ldr	r2, [r2, #4]
 8005aee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d103      	bne.n	8005b02 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	689a      	ldr	r2, [r3, #8]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	1e5a      	subs	r2, r3, #1
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b08e      	sub	sp, #56	; 0x38
 8005b26:	af04      	add	r7, sp, #16
 8005b28:	60f8      	str	r0, [r7, #12]
 8005b2a:	60b9      	str	r1, [r7, #8]
 8005b2c:	607a      	str	r2, [r7, #4]
 8005b2e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10a      	bne.n	8005b4c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3a:	f383 8811 	msr	BASEPRI, r3
 8005b3e:	f3bf 8f6f 	isb	sy
 8005b42:	f3bf 8f4f 	dsb	sy
 8005b46:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b48:	bf00      	nop
 8005b4a:	e7fe      	b.n	8005b4a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10a      	bne.n	8005b68 <xTaskCreateStatic+0x46>
	__asm volatile
 8005b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b56:	f383 8811 	msr	BASEPRI, r3
 8005b5a:	f3bf 8f6f 	isb	sy
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	61fb      	str	r3, [r7, #28]
}
 8005b64:	bf00      	nop
 8005b66:	e7fe      	b.n	8005b66 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b68:	23a0      	movs	r3, #160	; 0xa0
 8005b6a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	2ba0      	cmp	r3, #160	; 0xa0
 8005b70:	d00a      	beq.n	8005b88 <xTaskCreateStatic+0x66>
	__asm volatile
 8005b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	61bb      	str	r3, [r7, #24]
}
 8005b84:	bf00      	nop
 8005b86:	e7fe      	b.n	8005b86 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005b88:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d01e      	beq.n	8005bce <xTaskCreateStatic+0xac>
 8005b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d01b      	beq.n	8005bce <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b98:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b9e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ba8:	2300      	movs	r3, #0
 8005baa:	9303      	str	r3, [sp, #12]
 8005bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bae:	9302      	str	r3, [sp, #8]
 8005bb0:	f107 0314 	add.w	r3, r7, #20
 8005bb4:	9301      	str	r3, [sp, #4]
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	68b9      	ldr	r1, [r7, #8]
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f000 f851 	bl	8005c68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bc6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bc8:	f000 f8ec 	bl	8005da4 <prvAddNewTaskToReadyList>
 8005bcc:	e001      	b.n	8005bd2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005bd2:	697b      	ldr	r3, [r7, #20]
	}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3728      	adds	r7, #40	; 0x28
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b08c      	sub	sp, #48	; 0x30
 8005be0:	af04      	add	r7, sp, #16
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	603b      	str	r3, [r7, #0]
 8005be8:	4613      	mov	r3, r2
 8005bea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005bec:	88fb      	ldrh	r3, [r7, #6]
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f000 fef1 	bl	80069d8 <pvPortMalloc>
 8005bf6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00e      	beq.n	8005c1c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005bfe:	20a0      	movs	r0, #160	; 0xa0
 8005c00:	f000 feea 	bl	80069d8 <pvPortMalloc>
 8005c04:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	631a      	str	r2, [r3, #48]	; 0x30
 8005c12:	e005      	b.n	8005c20 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c14:	6978      	ldr	r0, [r7, #20]
 8005c16:	f000 ffab 	bl	8006b70 <vPortFree>
 8005c1a:	e001      	b.n	8005c20 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d017      	beq.n	8005c56 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c2e:	88fa      	ldrh	r2, [r7, #6]
 8005c30:	2300      	movs	r3, #0
 8005c32:	9303      	str	r3, [sp, #12]
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	9302      	str	r3, [sp, #8]
 8005c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3a:	9301      	str	r3, [sp, #4]
 8005c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	68b9      	ldr	r1, [r7, #8]
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 f80f 	bl	8005c68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c4a:	69f8      	ldr	r0, [r7, #28]
 8005c4c:	f000 f8aa 	bl	8005da4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c50:	2301      	movs	r3, #1
 8005c52:	61bb      	str	r3, [r7, #24]
 8005c54:	e002      	b.n	8005c5c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c56:	f04f 33ff 	mov.w	r3, #4294967295
 8005c5a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c5c:	69bb      	ldr	r3, [r7, #24]
	}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3720      	adds	r7, #32
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
	...

08005c68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b088      	sub	sp, #32
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
 8005c74:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c80:	3b01      	subs	r3, #1
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	f023 0307 	bic.w	r3, r3, #7
 8005c8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	f003 0307 	and.w	r3, r3, #7
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00a      	beq.n	8005cb0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9e:	f383 8811 	msr	BASEPRI, r3
 8005ca2:	f3bf 8f6f 	isb	sy
 8005ca6:	f3bf 8f4f 	dsb	sy
 8005caa:	617b      	str	r3, [r7, #20]
}
 8005cac:	bf00      	nop
 8005cae:	e7fe      	b.n	8005cae <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d01f      	beq.n	8005cf6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	61fb      	str	r3, [r7, #28]
 8005cba:	e012      	b.n	8005ce2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	7819      	ldrb	r1, [r3, #0]
 8005cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	4413      	add	r3, r2
 8005cca:	3334      	adds	r3, #52	; 0x34
 8005ccc:	460a      	mov	r2, r1
 8005cce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d006      	beq.n	8005cea <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	61fb      	str	r3, [r7, #28]
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	2b0f      	cmp	r3, #15
 8005ce6:	d9e9      	bls.n	8005cbc <prvInitialiseNewTask+0x54>
 8005ce8:	e000      	b.n	8005cec <prvInitialiseNewTask+0x84>
			{
				break;
 8005cea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cf4:	e003      	b.n	8005cfe <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d00:	2b06      	cmp	r3, #6
 8005d02:	d901      	bls.n	8005d08 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d04:	2306      	movs	r3, #6
 8005d06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d12:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d16:	2200      	movs	r2, #0
 8005d18:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7ff fe6b 	bl	80059fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d26:	3318      	adds	r3, #24
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7ff fe66 	bl	80059fa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d36:	f1c3 0207 	rsb	r2, r3, #7
 8005d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d46:	2200      	movs	r2, #0
 8005d48:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d56:	334c      	adds	r3, #76	; 0x4c
 8005d58:	224c      	movs	r2, #76	; 0x4c
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f001 f8d5 	bl	8006f0c <memset>
 8005d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d64:	4a0c      	ldr	r2, [pc, #48]	; (8005d98 <prvInitialiseNewTask+0x130>)
 8005d66:	651a      	str	r2, [r3, #80]	; 0x50
 8005d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6a:	4a0c      	ldr	r2, [pc, #48]	; (8005d9c <prvInitialiseNewTask+0x134>)
 8005d6c:	655a      	str	r2, [r3, #84]	; 0x54
 8005d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d70:	4a0b      	ldr	r2, [pc, #44]	; (8005da0 <prvInitialiseNewTask+0x138>)
 8005d72:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d74:	683a      	ldr	r2, [r7, #0]
 8005d76:	68f9      	ldr	r1, [r7, #12]
 8005d78:	69b8      	ldr	r0, [r7, #24]
 8005d7a:	f000 fc1f 	bl	80065bc <pxPortInitialiseStack>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d82:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d002      	beq.n	8005d90 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d8e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d90:	bf00      	nop
 8005d92:	3720      	adds	r7, #32
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	20004340 	.word	0x20004340
 8005d9c:	200043a8 	.word	0x200043a8
 8005da0:	20004410 	.word	0x20004410

08005da4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005dac:	f000 fd32 	bl	8006814 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005db0:	4b2a      	ldr	r3, [pc, #168]	; (8005e5c <prvAddNewTaskToReadyList+0xb8>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	3301      	adds	r3, #1
 8005db6:	4a29      	ldr	r2, [pc, #164]	; (8005e5c <prvAddNewTaskToReadyList+0xb8>)
 8005db8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005dba:	4b29      	ldr	r3, [pc, #164]	; (8005e60 <prvAddNewTaskToReadyList+0xbc>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d109      	bne.n	8005dd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005dc2:	4a27      	ldr	r2, [pc, #156]	; (8005e60 <prvAddNewTaskToReadyList+0xbc>)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005dc8:	4b24      	ldr	r3, [pc, #144]	; (8005e5c <prvAddNewTaskToReadyList+0xb8>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d110      	bne.n	8005df2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005dd0:	f000 facc 	bl	800636c <prvInitialiseTaskLists>
 8005dd4:	e00d      	b.n	8005df2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005dd6:	4b23      	ldr	r3, [pc, #140]	; (8005e64 <prvAddNewTaskToReadyList+0xc0>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d109      	bne.n	8005df2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005dde:	4b20      	ldr	r3, [pc, #128]	; (8005e60 <prvAddNewTaskToReadyList+0xbc>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d802      	bhi.n	8005df2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005dec:	4a1c      	ldr	r2, [pc, #112]	; (8005e60 <prvAddNewTaskToReadyList+0xbc>)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005df2:	4b1d      	ldr	r3, [pc, #116]	; (8005e68 <prvAddNewTaskToReadyList+0xc4>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	3301      	adds	r3, #1
 8005df8:	4a1b      	ldr	r2, [pc, #108]	; (8005e68 <prvAddNewTaskToReadyList+0xc4>)
 8005dfa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e00:	2201      	movs	r2, #1
 8005e02:	409a      	lsls	r2, r3
 8005e04:	4b19      	ldr	r3, [pc, #100]	; (8005e6c <prvAddNewTaskToReadyList+0xc8>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	4a18      	ldr	r2, [pc, #96]	; (8005e6c <prvAddNewTaskToReadyList+0xc8>)
 8005e0c:	6013      	str	r3, [r2, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e12:	4613      	mov	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4a15      	ldr	r2, [pc, #84]	; (8005e70 <prvAddNewTaskToReadyList+0xcc>)
 8005e1c:	441a      	add	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	3304      	adds	r3, #4
 8005e22:	4619      	mov	r1, r3
 8005e24:	4610      	mov	r0, r2
 8005e26:	f7ff fdf5 	bl	8005a14 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e2a:	f000 fd23 	bl	8006874 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e2e:	4b0d      	ldr	r3, [pc, #52]	; (8005e64 <prvAddNewTaskToReadyList+0xc0>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00e      	beq.n	8005e54 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e36:	4b0a      	ldr	r3, [pc, #40]	; (8005e60 <prvAddNewTaskToReadyList+0xbc>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d207      	bcs.n	8005e54 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e44:	4b0b      	ldr	r3, [pc, #44]	; (8005e74 <prvAddNewTaskToReadyList+0xd0>)
 8005e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e54:	bf00      	nop
 8005e56:	3708      	adds	r7, #8
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	200006ec 	.word	0x200006ec
 8005e60:	200005ec 	.word	0x200005ec
 8005e64:	200006f8 	.word	0x200006f8
 8005e68:	20000708 	.word	0x20000708
 8005e6c:	200006f4 	.word	0x200006f4
 8005e70:	200005f0 	.word	0x200005f0
 8005e74:	e000ed04 	.word	0xe000ed04

08005e78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e80:	2300      	movs	r3, #0
 8005e82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d017      	beq.n	8005eba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e8a:	4b13      	ldr	r3, [pc, #76]	; (8005ed8 <vTaskDelay+0x60>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00a      	beq.n	8005ea8 <vTaskDelay+0x30>
	__asm volatile
 8005e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	60bb      	str	r3, [r7, #8]
}
 8005ea4:	bf00      	nop
 8005ea6:	e7fe      	b.n	8005ea6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005ea8:	f000 f884 	bl	8005fb4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005eac:	2100      	movs	r1, #0
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 fb1e 	bl	80064f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005eb4:	f000 f88c 	bl	8005fd0 <xTaskResumeAll>
 8005eb8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d107      	bne.n	8005ed0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005ec0:	4b06      	ldr	r3, [pc, #24]	; (8005edc <vTaskDelay+0x64>)
 8005ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ec6:	601a      	str	r2, [r3, #0]
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ed0:	bf00      	nop
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	20000714 	.word	0x20000714
 8005edc:	e000ed04 	.word	0xe000ed04

08005ee0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b08a      	sub	sp, #40	; 0x28
 8005ee4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005eea:	2300      	movs	r3, #0
 8005eec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005eee:	463a      	mov	r2, r7
 8005ef0:	1d39      	adds	r1, r7, #4
 8005ef2:	f107 0308 	add.w	r3, r7, #8
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fa fbea 	bl	80006d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005efc:	6839      	ldr	r1, [r7, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	9202      	str	r2, [sp, #8]
 8005f04:	9301      	str	r3, [sp, #4]
 8005f06:	2300      	movs	r3, #0
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	460a      	mov	r2, r1
 8005f0e:	4921      	ldr	r1, [pc, #132]	; (8005f94 <vTaskStartScheduler+0xb4>)
 8005f10:	4821      	ldr	r0, [pc, #132]	; (8005f98 <vTaskStartScheduler+0xb8>)
 8005f12:	f7ff fe06 	bl	8005b22 <xTaskCreateStatic>
 8005f16:	4603      	mov	r3, r0
 8005f18:	4a20      	ldr	r2, [pc, #128]	; (8005f9c <vTaskStartScheduler+0xbc>)
 8005f1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005f1c:	4b1f      	ldr	r3, [pc, #124]	; (8005f9c <vTaskStartScheduler+0xbc>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005f24:	2301      	movs	r3, #1
 8005f26:	617b      	str	r3, [r7, #20]
 8005f28:	e001      	b.n	8005f2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d11b      	bne.n	8005f6c <vTaskStartScheduler+0x8c>
	__asm volatile
 8005f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f38:	f383 8811 	msr	BASEPRI, r3
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	613b      	str	r3, [r7, #16]
}
 8005f46:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f48:	4b15      	ldr	r3, [pc, #84]	; (8005fa0 <vTaskStartScheduler+0xc0>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	334c      	adds	r3, #76	; 0x4c
 8005f4e:	4a15      	ldr	r2, [pc, #84]	; (8005fa4 <vTaskStartScheduler+0xc4>)
 8005f50:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f52:	4b15      	ldr	r3, [pc, #84]	; (8005fa8 <vTaskStartScheduler+0xc8>)
 8005f54:	f04f 32ff 	mov.w	r2, #4294967295
 8005f58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f5a:	4b14      	ldr	r3, [pc, #80]	; (8005fac <vTaskStartScheduler+0xcc>)
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005f60:	4b13      	ldr	r3, [pc, #76]	; (8005fb0 <vTaskStartScheduler+0xd0>)
 8005f62:	2200      	movs	r2, #0
 8005f64:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f66:	f000 fbb3 	bl	80066d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f6a:	e00e      	b.n	8005f8a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f72:	d10a      	bne.n	8005f8a <vTaskStartScheduler+0xaa>
	__asm volatile
 8005f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f78:	f383 8811 	msr	BASEPRI, r3
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	f3bf 8f4f 	dsb	sy
 8005f84:	60fb      	str	r3, [r7, #12]
}
 8005f86:	bf00      	nop
 8005f88:	e7fe      	b.n	8005f88 <vTaskStartScheduler+0xa8>
}
 8005f8a:	bf00      	nop
 8005f8c:	3718      	adds	r7, #24
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	080079f8 	.word	0x080079f8
 8005f98:	0800633d 	.word	0x0800633d
 8005f9c:	20000710 	.word	0x20000710
 8005fa0:	200005ec 	.word	0x200005ec
 8005fa4:	2000005c 	.word	0x2000005c
 8005fa8:	2000070c 	.word	0x2000070c
 8005fac:	200006f8 	.word	0x200006f8
 8005fb0:	200006f0 	.word	0x200006f0

08005fb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005fb8:	4b04      	ldr	r3, [pc, #16]	; (8005fcc <vTaskSuspendAll+0x18>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	4a03      	ldr	r2, [pc, #12]	; (8005fcc <vTaskSuspendAll+0x18>)
 8005fc0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005fc2:	bf00      	nop
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	20000714 	.word	0x20000714

08005fd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005fde:	4b41      	ldr	r3, [pc, #260]	; (80060e4 <xTaskResumeAll+0x114>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10a      	bne.n	8005ffc <xTaskResumeAll+0x2c>
	__asm volatile
 8005fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fea:	f383 8811 	msr	BASEPRI, r3
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f3bf 8f4f 	dsb	sy
 8005ff6:	603b      	str	r3, [r7, #0]
}
 8005ff8:	bf00      	nop
 8005ffa:	e7fe      	b.n	8005ffa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005ffc:	f000 fc0a 	bl	8006814 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006000:	4b38      	ldr	r3, [pc, #224]	; (80060e4 <xTaskResumeAll+0x114>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3b01      	subs	r3, #1
 8006006:	4a37      	ldr	r2, [pc, #220]	; (80060e4 <xTaskResumeAll+0x114>)
 8006008:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800600a:	4b36      	ldr	r3, [pc, #216]	; (80060e4 <xTaskResumeAll+0x114>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d161      	bne.n	80060d6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006012:	4b35      	ldr	r3, [pc, #212]	; (80060e8 <xTaskResumeAll+0x118>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d05d      	beq.n	80060d6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800601a:	e02e      	b.n	800607a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800601c:	4b33      	ldr	r3, [pc, #204]	; (80060ec <xTaskResumeAll+0x11c>)
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	3318      	adds	r3, #24
 8006028:	4618      	mov	r0, r3
 800602a:	f7ff fd50 	bl	8005ace <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	3304      	adds	r3, #4
 8006032:	4618      	mov	r0, r3
 8006034:	f7ff fd4b 	bl	8005ace <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603c:	2201      	movs	r2, #1
 800603e:	409a      	lsls	r2, r3
 8006040:	4b2b      	ldr	r3, [pc, #172]	; (80060f0 <xTaskResumeAll+0x120>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4313      	orrs	r3, r2
 8006046:	4a2a      	ldr	r2, [pc, #168]	; (80060f0 <xTaskResumeAll+0x120>)
 8006048:	6013      	str	r3, [r2, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800604e:	4613      	mov	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4a27      	ldr	r2, [pc, #156]	; (80060f4 <xTaskResumeAll+0x124>)
 8006058:	441a      	add	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	3304      	adds	r3, #4
 800605e:	4619      	mov	r1, r3
 8006060:	4610      	mov	r0, r2
 8006062:	f7ff fcd7 	bl	8005a14 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800606a:	4b23      	ldr	r3, [pc, #140]	; (80060f8 <xTaskResumeAll+0x128>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006070:	429a      	cmp	r2, r3
 8006072:	d302      	bcc.n	800607a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006074:	4b21      	ldr	r3, [pc, #132]	; (80060fc <xTaskResumeAll+0x12c>)
 8006076:	2201      	movs	r2, #1
 8006078:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800607a:	4b1c      	ldr	r3, [pc, #112]	; (80060ec <xTaskResumeAll+0x11c>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1cc      	bne.n	800601c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d001      	beq.n	800608c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006088:	f000 fa12 	bl	80064b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800608c:	4b1c      	ldr	r3, [pc, #112]	; (8006100 <xTaskResumeAll+0x130>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d010      	beq.n	80060ba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006098:	f000 f836 	bl	8006108 <xTaskIncrementTick>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d002      	beq.n	80060a8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80060a2:	4b16      	ldr	r3, [pc, #88]	; (80060fc <xTaskResumeAll+0x12c>)
 80060a4:	2201      	movs	r2, #1
 80060a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	3b01      	subs	r3, #1
 80060ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1f1      	bne.n	8006098 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80060b4:	4b12      	ldr	r3, [pc, #72]	; (8006100 <xTaskResumeAll+0x130>)
 80060b6:	2200      	movs	r2, #0
 80060b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80060ba:	4b10      	ldr	r3, [pc, #64]	; (80060fc <xTaskResumeAll+0x12c>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d009      	beq.n	80060d6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80060c2:	2301      	movs	r3, #1
 80060c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80060c6:	4b0f      	ldr	r3, [pc, #60]	; (8006104 <xTaskResumeAll+0x134>)
 80060c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060d6:	f000 fbcd 	bl	8006874 <vPortExitCritical>

	return xAlreadyYielded;
 80060da:	68bb      	ldr	r3, [r7, #8]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	20000714 	.word	0x20000714
 80060e8:	200006ec 	.word	0x200006ec
 80060ec:	200006ac 	.word	0x200006ac
 80060f0:	200006f4 	.word	0x200006f4
 80060f4:	200005f0 	.word	0x200005f0
 80060f8:	200005ec 	.word	0x200005ec
 80060fc:	20000700 	.word	0x20000700
 8006100:	200006fc 	.word	0x200006fc
 8006104:	e000ed04 	.word	0xe000ed04

08006108 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800610e:	2300      	movs	r3, #0
 8006110:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006112:	4b4e      	ldr	r3, [pc, #312]	; (800624c <xTaskIncrementTick+0x144>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	f040 808e 	bne.w	8006238 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800611c:	4b4c      	ldr	r3, [pc, #304]	; (8006250 <xTaskIncrementTick+0x148>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3301      	adds	r3, #1
 8006122:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006124:	4a4a      	ldr	r2, [pc, #296]	; (8006250 <xTaskIncrementTick+0x148>)
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d120      	bne.n	8006172 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006130:	4b48      	ldr	r3, [pc, #288]	; (8006254 <xTaskIncrementTick+0x14c>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00a      	beq.n	8006150 <xTaskIncrementTick+0x48>
	__asm volatile
 800613a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613e:	f383 8811 	msr	BASEPRI, r3
 8006142:	f3bf 8f6f 	isb	sy
 8006146:	f3bf 8f4f 	dsb	sy
 800614a:	603b      	str	r3, [r7, #0]
}
 800614c:	bf00      	nop
 800614e:	e7fe      	b.n	800614e <xTaskIncrementTick+0x46>
 8006150:	4b40      	ldr	r3, [pc, #256]	; (8006254 <xTaskIncrementTick+0x14c>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	60fb      	str	r3, [r7, #12]
 8006156:	4b40      	ldr	r3, [pc, #256]	; (8006258 <xTaskIncrementTick+0x150>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a3e      	ldr	r2, [pc, #248]	; (8006254 <xTaskIncrementTick+0x14c>)
 800615c:	6013      	str	r3, [r2, #0]
 800615e:	4a3e      	ldr	r2, [pc, #248]	; (8006258 <xTaskIncrementTick+0x150>)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6013      	str	r3, [r2, #0]
 8006164:	4b3d      	ldr	r3, [pc, #244]	; (800625c <xTaskIncrementTick+0x154>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	3301      	adds	r3, #1
 800616a:	4a3c      	ldr	r2, [pc, #240]	; (800625c <xTaskIncrementTick+0x154>)
 800616c:	6013      	str	r3, [r2, #0]
 800616e:	f000 f99f 	bl	80064b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006172:	4b3b      	ldr	r3, [pc, #236]	; (8006260 <xTaskIncrementTick+0x158>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	429a      	cmp	r2, r3
 800617a:	d348      	bcc.n	800620e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800617c:	4b35      	ldr	r3, [pc, #212]	; (8006254 <xTaskIncrementTick+0x14c>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d104      	bne.n	8006190 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006186:	4b36      	ldr	r3, [pc, #216]	; (8006260 <xTaskIncrementTick+0x158>)
 8006188:	f04f 32ff 	mov.w	r2, #4294967295
 800618c:	601a      	str	r2, [r3, #0]
					break;
 800618e:	e03e      	b.n	800620e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006190:	4b30      	ldr	r3, [pc, #192]	; (8006254 <xTaskIncrementTick+0x14c>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d203      	bcs.n	80061b0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80061a8:	4a2d      	ldr	r2, [pc, #180]	; (8006260 <xTaskIncrementTick+0x158>)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80061ae:	e02e      	b.n	800620e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	3304      	adds	r3, #4
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7ff fc8a 	bl	8005ace <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d004      	beq.n	80061cc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	3318      	adds	r3, #24
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7ff fc81 	bl	8005ace <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d0:	2201      	movs	r2, #1
 80061d2:	409a      	lsls	r2, r3
 80061d4:	4b23      	ldr	r3, [pc, #140]	; (8006264 <xTaskIncrementTick+0x15c>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4313      	orrs	r3, r2
 80061da:	4a22      	ldr	r2, [pc, #136]	; (8006264 <xTaskIncrementTick+0x15c>)
 80061dc:	6013      	str	r3, [r2, #0]
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e2:	4613      	mov	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4413      	add	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4a1f      	ldr	r2, [pc, #124]	; (8006268 <xTaskIncrementTick+0x160>)
 80061ec:	441a      	add	r2, r3
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	3304      	adds	r3, #4
 80061f2:	4619      	mov	r1, r3
 80061f4:	4610      	mov	r0, r2
 80061f6:	f7ff fc0d 	bl	8005a14 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061fe:	4b1b      	ldr	r3, [pc, #108]	; (800626c <xTaskIncrementTick+0x164>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006204:	429a      	cmp	r2, r3
 8006206:	d3b9      	bcc.n	800617c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006208:	2301      	movs	r3, #1
 800620a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800620c:	e7b6      	b.n	800617c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800620e:	4b17      	ldr	r3, [pc, #92]	; (800626c <xTaskIncrementTick+0x164>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006214:	4914      	ldr	r1, [pc, #80]	; (8006268 <xTaskIncrementTick+0x160>)
 8006216:	4613      	mov	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4413      	add	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	440b      	add	r3, r1
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d901      	bls.n	800622a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006226:	2301      	movs	r3, #1
 8006228:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800622a:	4b11      	ldr	r3, [pc, #68]	; (8006270 <xTaskIncrementTick+0x168>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d007      	beq.n	8006242 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006232:	2301      	movs	r3, #1
 8006234:	617b      	str	r3, [r7, #20]
 8006236:	e004      	b.n	8006242 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006238:	4b0e      	ldr	r3, [pc, #56]	; (8006274 <xTaskIncrementTick+0x16c>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	3301      	adds	r3, #1
 800623e:	4a0d      	ldr	r2, [pc, #52]	; (8006274 <xTaskIncrementTick+0x16c>)
 8006240:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006242:	697b      	ldr	r3, [r7, #20]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3718      	adds	r7, #24
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	20000714 	.word	0x20000714
 8006250:	200006f0 	.word	0x200006f0
 8006254:	200006a4 	.word	0x200006a4
 8006258:	200006a8 	.word	0x200006a8
 800625c:	20000704 	.word	0x20000704
 8006260:	2000070c 	.word	0x2000070c
 8006264:	200006f4 	.word	0x200006f4
 8006268:	200005f0 	.word	0x200005f0
 800626c:	200005ec 	.word	0x200005ec
 8006270:	20000700 	.word	0x20000700
 8006274:	200006fc 	.word	0x200006fc

08006278 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006278:	b480      	push	{r7}
 800627a:	b087      	sub	sp, #28
 800627c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800627e:	4b29      	ldr	r3, [pc, #164]	; (8006324 <vTaskSwitchContext+0xac>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d003      	beq.n	800628e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006286:	4b28      	ldr	r3, [pc, #160]	; (8006328 <vTaskSwitchContext+0xb0>)
 8006288:	2201      	movs	r2, #1
 800628a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800628c:	e044      	b.n	8006318 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800628e:	4b26      	ldr	r3, [pc, #152]	; (8006328 <vTaskSwitchContext+0xb0>)
 8006290:	2200      	movs	r2, #0
 8006292:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006294:	4b25      	ldr	r3, [pc, #148]	; (800632c <vTaskSwitchContext+0xb4>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	fab3 f383 	clz	r3, r3
 80062a0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80062a2:	7afb      	ldrb	r3, [r7, #11]
 80062a4:	f1c3 031f 	rsb	r3, r3, #31
 80062a8:	617b      	str	r3, [r7, #20]
 80062aa:	4921      	ldr	r1, [pc, #132]	; (8006330 <vTaskSwitchContext+0xb8>)
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	4613      	mov	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	440b      	add	r3, r1
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10a      	bne.n	80062d4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80062be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	607b      	str	r3, [r7, #4]
}
 80062d0:	bf00      	nop
 80062d2:	e7fe      	b.n	80062d2 <vTaskSwitchContext+0x5a>
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	4613      	mov	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4413      	add	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4a14      	ldr	r2, [pc, #80]	; (8006330 <vTaskSwitchContext+0xb8>)
 80062e0:	4413      	add	r3, r2
 80062e2:	613b      	str	r3, [r7, #16]
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	685a      	ldr	r2, [r3, #4]
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	605a      	str	r2, [r3, #4]
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	3308      	adds	r3, #8
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d104      	bne.n	8006304 <vTaskSwitchContext+0x8c>
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	605a      	str	r2, [r3, #4]
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	4a0a      	ldr	r2, [pc, #40]	; (8006334 <vTaskSwitchContext+0xbc>)
 800630c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800630e:	4b09      	ldr	r3, [pc, #36]	; (8006334 <vTaskSwitchContext+0xbc>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	334c      	adds	r3, #76	; 0x4c
 8006314:	4a08      	ldr	r2, [pc, #32]	; (8006338 <vTaskSwitchContext+0xc0>)
 8006316:	6013      	str	r3, [r2, #0]
}
 8006318:	bf00      	nop
 800631a:	371c      	adds	r7, #28
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	20000714 	.word	0x20000714
 8006328:	20000700 	.word	0x20000700
 800632c:	200006f4 	.word	0x200006f4
 8006330:	200005f0 	.word	0x200005f0
 8006334:	200005ec 	.word	0x200005ec
 8006338:	2000005c 	.word	0x2000005c

0800633c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006344:	f000 f852 	bl	80063ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006348:	4b06      	ldr	r3, [pc, #24]	; (8006364 <prvIdleTask+0x28>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d9f9      	bls.n	8006344 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006350:	4b05      	ldr	r3, [pc, #20]	; (8006368 <prvIdleTask+0x2c>)
 8006352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006356:	601a      	str	r2, [r3, #0]
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006360:	e7f0      	b.n	8006344 <prvIdleTask+0x8>
 8006362:	bf00      	nop
 8006364:	200005f0 	.word	0x200005f0
 8006368:	e000ed04 	.word	0xe000ed04

0800636c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006372:	2300      	movs	r3, #0
 8006374:	607b      	str	r3, [r7, #4]
 8006376:	e00c      	b.n	8006392 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	4613      	mov	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4a12      	ldr	r2, [pc, #72]	; (80063cc <prvInitialiseTaskLists+0x60>)
 8006384:	4413      	add	r3, r2
 8006386:	4618      	mov	r0, r3
 8006388:	f7ff fb17 	bl	80059ba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	3301      	adds	r3, #1
 8006390:	607b      	str	r3, [r7, #4]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2b06      	cmp	r3, #6
 8006396:	d9ef      	bls.n	8006378 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006398:	480d      	ldr	r0, [pc, #52]	; (80063d0 <prvInitialiseTaskLists+0x64>)
 800639a:	f7ff fb0e 	bl	80059ba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800639e:	480d      	ldr	r0, [pc, #52]	; (80063d4 <prvInitialiseTaskLists+0x68>)
 80063a0:	f7ff fb0b 	bl	80059ba <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80063a4:	480c      	ldr	r0, [pc, #48]	; (80063d8 <prvInitialiseTaskLists+0x6c>)
 80063a6:	f7ff fb08 	bl	80059ba <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80063aa:	480c      	ldr	r0, [pc, #48]	; (80063dc <prvInitialiseTaskLists+0x70>)
 80063ac:	f7ff fb05 	bl	80059ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80063b0:	480b      	ldr	r0, [pc, #44]	; (80063e0 <prvInitialiseTaskLists+0x74>)
 80063b2:	f7ff fb02 	bl	80059ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80063b6:	4b0b      	ldr	r3, [pc, #44]	; (80063e4 <prvInitialiseTaskLists+0x78>)
 80063b8:	4a05      	ldr	r2, [pc, #20]	; (80063d0 <prvInitialiseTaskLists+0x64>)
 80063ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80063bc:	4b0a      	ldr	r3, [pc, #40]	; (80063e8 <prvInitialiseTaskLists+0x7c>)
 80063be:	4a05      	ldr	r2, [pc, #20]	; (80063d4 <prvInitialiseTaskLists+0x68>)
 80063c0:	601a      	str	r2, [r3, #0]
}
 80063c2:	bf00      	nop
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	200005f0 	.word	0x200005f0
 80063d0:	2000067c 	.word	0x2000067c
 80063d4:	20000690 	.word	0x20000690
 80063d8:	200006ac 	.word	0x200006ac
 80063dc:	200006c0 	.word	0x200006c0
 80063e0:	200006d8 	.word	0x200006d8
 80063e4:	200006a4 	.word	0x200006a4
 80063e8:	200006a8 	.word	0x200006a8

080063ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063f2:	e019      	b.n	8006428 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80063f4:	f000 fa0e 	bl	8006814 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063f8:	4b10      	ldr	r3, [pc, #64]	; (800643c <prvCheckTasksWaitingTermination+0x50>)
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	3304      	adds	r3, #4
 8006404:	4618      	mov	r0, r3
 8006406:	f7ff fb62 	bl	8005ace <uxListRemove>
				--uxCurrentNumberOfTasks;
 800640a:	4b0d      	ldr	r3, [pc, #52]	; (8006440 <prvCheckTasksWaitingTermination+0x54>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	3b01      	subs	r3, #1
 8006410:	4a0b      	ldr	r2, [pc, #44]	; (8006440 <prvCheckTasksWaitingTermination+0x54>)
 8006412:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006414:	4b0b      	ldr	r3, [pc, #44]	; (8006444 <prvCheckTasksWaitingTermination+0x58>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	3b01      	subs	r3, #1
 800641a:	4a0a      	ldr	r2, [pc, #40]	; (8006444 <prvCheckTasksWaitingTermination+0x58>)
 800641c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800641e:	f000 fa29 	bl	8006874 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 f810 	bl	8006448 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006428:	4b06      	ldr	r3, [pc, #24]	; (8006444 <prvCheckTasksWaitingTermination+0x58>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1e1      	bne.n	80063f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006430:	bf00      	nop
 8006432:	bf00      	nop
 8006434:	3708      	adds	r7, #8
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	200006c0 	.word	0x200006c0
 8006440:	200006ec 	.word	0x200006ec
 8006444:	200006d4 	.word	0x200006d4

08006448 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	334c      	adds	r3, #76	; 0x4c
 8006454:	4618      	mov	r0, r3
 8006456:	f000 fd61 	bl	8006f1c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006460:	2b00      	cmp	r3, #0
 8006462:	d108      	bne.n	8006476 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006468:	4618      	mov	r0, r3
 800646a:	f000 fb81 	bl	8006b70 <vPortFree>
				vPortFree( pxTCB );
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fb7e 	bl	8006b70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006474:	e018      	b.n	80064a8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800647c:	2b01      	cmp	r3, #1
 800647e:	d103      	bne.n	8006488 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fb75 	bl	8006b70 <vPortFree>
	}
 8006486:	e00f      	b.n	80064a8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800648e:	2b02      	cmp	r3, #2
 8006490:	d00a      	beq.n	80064a8 <prvDeleteTCB+0x60>
	__asm volatile
 8006492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006496:	f383 8811 	msr	BASEPRI, r3
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	60fb      	str	r3, [r7, #12]
}
 80064a4:	bf00      	nop
 80064a6:	e7fe      	b.n	80064a6 <prvDeleteTCB+0x5e>
	}
 80064a8:	bf00      	nop
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064b6:	4b0c      	ldr	r3, [pc, #48]	; (80064e8 <prvResetNextTaskUnblockTime+0x38>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d104      	bne.n	80064ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80064c0:	4b0a      	ldr	r3, [pc, #40]	; (80064ec <prvResetNextTaskUnblockTime+0x3c>)
 80064c2:	f04f 32ff 	mov.w	r2, #4294967295
 80064c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80064c8:	e008      	b.n	80064dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064ca:	4b07      	ldr	r3, [pc, #28]	; (80064e8 <prvResetNextTaskUnblockTime+0x38>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	4a04      	ldr	r2, [pc, #16]	; (80064ec <prvResetNextTaskUnblockTime+0x3c>)
 80064da:	6013      	str	r3, [r2, #0]
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr
 80064e8:	200006a4 	.word	0x200006a4
 80064ec:	2000070c 	.word	0x2000070c

080064f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80064fa:	4b29      	ldr	r3, [pc, #164]	; (80065a0 <prvAddCurrentTaskToDelayedList+0xb0>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006500:	4b28      	ldr	r3, [pc, #160]	; (80065a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	3304      	adds	r3, #4
 8006506:	4618      	mov	r0, r3
 8006508:	f7ff fae1 	bl	8005ace <uxListRemove>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10b      	bne.n	800652a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006512:	4b24      	ldr	r3, [pc, #144]	; (80065a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006518:	2201      	movs	r2, #1
 800651a:	fa02 f303 	lsl.w	r3, r2, r3
 800651e:	43da      	mvns	r2, r3
 8006520:	4b21      	ldr	r3, [pc, #132]	; (80065a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4013      	ands	r3, r2
 8006526:	4a20      	ldr	r2, [pc, #128]	; (80065a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006528:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006530:	d10a      	bne.n	8006548 <prvAddCurrentTaskToDelayedList+0x58>
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d007      	beq.n	8006548 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006538:	4b1a      	ldr	r3, [pc, #104]	; (80065a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	3304      	adds	r3, #4
 800653e:	4619      	mov	r1, r3
 8006540:	481a      	ldr	r0, [pc, #104]	; (80065ac <prvAddCurrentTaskToDelayedList+0xbc>)
 8006542:	f7ff fa67 	bl	8005a14 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006546:	e026      	b.n	8006596 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4413      	add	r3, r2
 800654e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006550:	4b14      	ldr	r3, [pc, #80]	; (80065a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	429a      	cmp	r2, r3
 800655e:	d209      	bcs.n	8006574 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006560:	4b13      	ldr	r3, [pc, #76]	; (80065b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	4b0f      	ldr	r3, [pc, #60]	; (80065a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	3304      	adds	r3, #4
 800656a:	4619      	mov	r1, r3
 800656c:	4610      	mov	r0, r2
 800656e:	f7ff fa75 	bl	8005a5c <vListInsert>
}
 8006572:	e010      	b.n	8006596 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006574:	4b0f      	ldr	r3, [pc, #60]	; (80065b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	4b0a      	ldr	r3, [pc, #40]	; (80065a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	3304      	adds	r3, #4
 800657e:	4619      	mov	r1, r3
 8006580:	4610      	mov	r0, r2
 8006582:	f7ff fa6b 	bl	8005a5c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006586:	4b0c      	ldr	r3, [pc, #48]	; (80065b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	429a      	cmp	r2, r3
 800658e:	d202      	bcs.n	8006596 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006590:	4a09      	ldr	r2, [pc, #36]	; (80065b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	6013      	str	r3, [r2, #0]
}
 8006596:	bf00      	nop
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	200006f0 	.word	0x200006f0
 80065a4:	200005ec 	.word	0x200005ec
 80065a8:	200006f4 	.word	0x200006f4
 80065ac:	200006d8 	.word	0x200006d8
 80065b0:	200006a8 	.word	0x200006a8
 80065b4:	200006a4 	.word	0x200006a4
 80065b8:	2000070c 	.word	0x2000070c

080065bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	3b04      	subs	r3, #4
 80065cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80065d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	3b04      	subs	r3, #4
 80065da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	f023 0201 	bic.w	r2, r3, #1
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	3b04      	subs	r3, #4
 80065ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065ec:	4a0c      	ldr	r2, [pc, #48]	; (8006620 <pxPortInitialiseStack+0x64>)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	3b14      	subs	r3, #20
 80065f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3b04      	subs	r3, #4
 8006602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f06f 0202 	mvn.w	r2, #2
 800660a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	3b20      	subs	r3, #32
 8006610:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006612:	68fb      	ldr	r3, [r7, #12]
}
 8006614:	4618      	mov	r0, r3
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	08006625 	.word	0x08006625

08006624 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800662a:	2300      	movs	r3, #0
 800662c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800662e:	4b12      	ldr	r3, [pc, #72]	; (8006678 <prvTaskExitError+0x54>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006636:	d00a      	beq.n	800664e <prvTaskExitError+0x2a>
	__asm volatile
 8006638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663c:	f383 8811 	msr	BASEPRI, r3
 8006640:	f3bf 8f6f 	isb	sy
 8006644:	f3bf 8f4f 	dsb	sy
 8006648:	60fb      	str	r3, [r7, #12]
}
 800664a:	bf00      	nop
 800664c:	e7fe      	b.n	800664c <prvTaskExitError+0x28>
	__asm volatile
 800664e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006652:	f383 8811 	msr	BASEPRI, r3
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	60bb      	str	r3, [r7, #8]
}
 8006660:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006662:	bf00      	nop
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d0fc      	beq.n	8006664 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800666a:	bf00      	nop
 800666c:	bf00      	nop
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr
 8006678:	2000000c 	.word	0x2000000c
 800667c:	00000000 	.word	0x00000000

08006680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006680:	4b07      	ldr	r3, [pc, #28]	; (80066a0 <pxCurrentTCBConst2>)
 8006682:	6819      	ldr	r1, [r3, #0]
 8006684:	6808      	ldr	r0, [r1, #0]
 8006686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800668a:	f380 8809 	msr	PSP, r0
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f04f 0000 	mov.w	r0, #0
 8006696:	f380 8811 	msr	BASEPRI, r0
 800669a:	4770      	bx	lr
 800669c:	f3af 8000 	nop.w

080066a0 <pxCurrentTCBConst2>:
 80066a0:	200005ec 	.word	0x200005ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80066a4:	bf00      	nop
 80066a6:	bf00      	nop

080066a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80066a8:	4808      	ldr	r0, [pc, #32]	; (80066cc <prvPortStartFirstTask+0x24>)
 80066aa:	6800      	ldr	r0, [r0, #0]
 80066ac:	6800      	ldr	r0, [r0, #0]
 80066ae:	f380 8808 	msr	MSP, r0
 80066b2:	f04f 0000 	mov.w	r0, #0
 80066b6:	f380 8814 	msr	CONTROL, r0
 80066ba:	b662      	cpsie	i
 80066bc:	b661      	cpsie	f
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	df00      	svc	0
 80066c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80066ca:	bf00      	nop
 80066cc:	e000ed08 	.word	0xe000ed08

080066d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80066d6:	4b46      	ldr	r3, [pc, #280]	; (80067f0 <xPortStartScheduler+0x120>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a46      	ldr	r2, [pc, #280]	; (80067f4 <xPortStartScheduler+0x124>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d10a      	bne.n	80066f6 <xPortStartScheduler+0x26>
	__asm volatile
 80066e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	613b      	str	r3, [r7, #16]
}
 80066f2:	bf00      	nop
 80066f4:	e7fe      	b.n	80066f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80066f6:	4b3e      	ldr	r3, [pc, #248]	; (80067f0 <xPortStartScheduler+0x120>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a3f      	ldr	r2, [pc, #252]	; (80067f8 <xPortStartScheduler+0x128>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d10a      	bne.n	8006716 <xPortStartScheduler+0x46>
	__asm volatile
 8006700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006704:	f383 8811 	msr	BASEPRI, r3
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	60fb      	str	r3, [r7, #12]
}
 8006712:	bf00      	nop
 8006714:	e7fe      	b.n	8006714 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006716:	4b39      	ldr	r3, [pc, #228]	; (80067fc <xPortStartScheduler+0x12c>)
 8006718:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	b2db      	uxtb	r3, r3
 8006720:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	22ff      	movs	r2, #255	; 0xff
 8006726:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	b2db      	uxtb	r3, r3
 800672e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006730:	78fb      	ldrb	r3, [r7, #3]
 8006732:	b2db      	uxtb	r3, r3
 8006734:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006738:	b2da      	uxtb	r2, r3
 800673a:	4b31      	ldr	r3, [pc, #196]	; (8006800 <xPortStartScheduler+0x130>)
 800673c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800673e:	4b31      	ldr	r3, [pc, #196]	; (8006804 <xPortStartScheduler+0x134>)
 8006740:	2207      	movs	r2, #7
 8006742:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006744:	e009      	b.n	800675a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006746:	4b2f      	ldr	r3, [pc, #188]	; (8006804 <xPortStartScheduler+0x134>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3b01      	subs	r3, #1
 800674c:	4a2d      	ldr	r2, [pc, #180]	; (8006804 <xPortStartScheduler+0x134>)
 800674e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006750:	78fb      	ldrb	r3, [r7, #3]
 8006752:	b2db      	uxtb	r3, r3
 8006754:	005b      	lsls	r3, r3, #1
 8006756:	b2db      	uxtb	r3, r3
 8006758:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800675a:	78fb      	ldrb	r3, [r7, #3]
 800675c:	b2db      	uxtb	r3, r3
 800675e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006762:	2b80      	cmp	r3, #128	; 0x80
 8006764:	d0ef      	beq.n	8006746 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006766:	4b27      	ldr	r3, [pc, #156]	; (8006804 <xPortStartScheduler+0x134>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f1c3 0307 	rsb	r3, r3, #7
 800676e:	2b04      	cmp	r3, #4
 8006770:	d00a      	beq.n	8006788 <xPortStartScheduler+0xb8>
	__asm volatile
 8006772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	60bb      	str	r3, [r7, #8]
}
 8006784:	bf00      	nop
 8006786:	e7fe      	b.n	8006786 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006788:	4b1e      	ldr	r3, [pc, #120]	; (8006804 <xPortStartScheduler+0x134>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	021b      	lsls	r3, r3, #8
 800678e:	4a1d      	ldr	r2, [pc, #116]	; (8006804 <xPortStartScheduler+0x134>)
 8006790:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006792:	4b1c      	ldr	r3, [pc, #112]	; (8006804 <xPortStartScheduler+0x134>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800679a:	4a1a      	ldr	r2, [pc, #104]	; (8006804 <xPortStartScheduler+0x134>)
 800679c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80067a6:	4b18      	ldr	r3, [pc, #96]	; (8006808 <xPortStartScheduler+0x138>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a17      	ldr	r2, [pc, #92]	; (8006808 <xPortStartScheduler+0x138>)
 80067ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80067b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80067b2:	4b15      	ldr	r3, [pc, #84]	; (8006808 <xPortStartScheduler+0x138>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a14      	ldr	r2, [pc, #80]	; (8006808 <xPortStartScheduler+0x138>)
 80067b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80067bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80067be:	f000 f8dd 	bl	800697c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80067c2:	4b12      	ldr	r3, [pc, #72]	; (800680c <xPortStartScheduler+0x13c>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80067c8:	f000 f8fc 	bl	80069c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80067cc:	4b10      	ldr	r3, [pc, #64]	; (8006810 <xPortStartScheduler+0x140>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a0f      	ldr	r2, [pc, #60]	; (8006810 <xPortStartScheduler+0x140>)
 80067d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80067d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80067d8:	f7ff ff66 	bl	80066a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80067dc:	f7ff fd4c 	bl	8006278 <vTaskSwitchContext>
	prvTaskExitError();
 80067e0:	f7ff ff20 	bl	8006624 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3718      	adds	r7, #24
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	e000ed00 	.word	0xe000ed00
 80067f4:	410fc271 	.word	0x410fc271
 80067f8:	410fc270 	.word	0x410fc270
 80067fc:	e000e400 	.word	0xe000e400
 8006800:	20000718 	.word	0x20000718
 8006804:	2000071c 	.word	0x2000071c
 8006808:	e000ed20 	.word	0xe000ed20
 800680c:	2000000c 	.word	0x2000000c
 8006810:	e000ef34 	.word	0xe000ef34

08006814 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
	__asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	607b      	str	r3, [r7, #4]
}
 800682c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800682e:	4b0f      	ldr	r3, [pc, #60]	; (800686c <vPortEnterCritical+0x58>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	3301      	adds	r3, #1
 8006834:	4a0d      	ldr	r2, [pc, #52]	; (800686c <vPortEnterCritical+0x58>)
 8006836:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006838:	4b0c      	ldr	r3, [pc, #48]	; (800686c <vPortEnterCritical+0x58>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d10f      	bne.n	8006860 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006840:	4b0b      	ldr	r3, [pc, #44]	; (8006870 <vPortEnterCritical+0x5c>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <vPortEnterCritical+0x4c>
	__asm volatile
 800684a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	603b      	str	r3, [r7, #0]
}
 800685c:	bf00      	nop
 800685e:	e7fe      	b.n	800685e <vPortEnterCritical+0x4a>
	}
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr
 800686c:	2000000c 	.word	0x2000000c
 8006870:	e000ed04 	.word	0xe000ed04

08006874 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800687a:	4b12      	ldr	r3, [pc, #72]	; (80068c4 <vPortExitCritical+0x50>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10a      	bne.n	8006898 <vPortExitCritical+0x24>
	__asm volatile
 8006882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006886:	f383 8811 	msr	BASEPRI, r3
 800688a:	f3bf 8f6f 	isb	sy
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	607b      	str	r3, [r7, #4]
}
 8006894:	bf00      	nop
 8006896:	e7fe      	b.n	8006896 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006898:	4b0a      	ldr	r3, [pc, #40]	; (80068c4 <vPortExitCritical+0x50>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	3b01      	subs	r3, #1
 800689e:	4a09      	ldr	r2, [pc, #36]	; (80068c4 <vPortExitCritical+0x50>)
 80068a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80068a2:	4b08      	ldr	r3, [pc, #32]	; (80068c4 <vPortExitCritical+0x50>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d105      	bne.n	80068b6 <vPortExitCritical+0x42>
 80068aa:	2300      	movs	r3, #0
 80068ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80068b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80068b6:	bf00      	nop
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	2000000c 	.word	0x2000000c
	...

080068d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80068d0:	f3ef 8009 	mrs	r0, PSP
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	4b15      	ldr	r3, [pc, #84]	; (8006930 <pxCurrentTCBConst>)
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	f01e 0f10 	tst.w	lr, #16
 80068e0:	bf08      	it	eq
 80068e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80068e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ea:	6010      	str	r0, [r2, #0]
 80068ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80068f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80068f4:	f380 8811 	msr	BASEPRI, r0
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f7ff fcba 	bl	8006278 <vTaskSwitchContext>
 8006904:	f04f 0000 	mov.w	r0, #0
 8006908:	f380 8811 	msr	BASEPRI, r0
 800690c:	bc09      	pop	{r0, r3}
 800690e:	6819      	ldr	r1, [r3, #0]
 8006910:	6808      	ldr	r0, [r1, #0]
 8006912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006916:	f01e 0f10 	tst.w	lr, #16
 800691a:	bf08      	it	eq
 800691c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006920:	f380 8809 	msr	PSP, r0
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	f3af 8000 	nop.w

08006930 <pxCurrentTCBConst>:
 8006930:	200005ec 	.word	0x200005ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006934:	bf00      	nop
 8006936:	bf00      	nop

08006938 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	607b      	str	r3, [r7, #4]
}
 8006950:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006952:	f7ff fbd9 	bl	8006108 <xTaskIncrementTick>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d003      	beq.n	8006964 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800695c:	4b06      	ldr	r3, [pc, #24]	; (8006978 <SysTick_Handler+0x40>)
 800695e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006962:	601a      	str	r2, [r3, #0]
 8006964:	2300      	movs	r3, #0
 8006966:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	f383 8811 	msr	BASEPRI, r3
}
 800696e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006970:	bf00      	nop
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	e000ed04 	.word	0xe000ed04

0800697c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800697c:	b480      	push	{r7}
 800697e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006980:	4b0b      	ldr	r3, [pc, #44]	; (80069b0 <vPortSetupTimerInterrupt+0x34>)
 8006982:	2200      	movs	r2, #0
 8006984:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006986:	4b0b      	ldr	r3, [pc, #44]	; (80069b4 <vPortSetupTimerInterrupt+0x38>)
 8006988:	2200      	movs	r2, #0
 800698a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800698c:	4b0a      	ldr	r3, [pc, #40]	; (80069b8 <vPortSetupTimerInterrupt+0x3c>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a0a      	ldr	r2, [pc, #40]	; (80069bc <vPortSetupTimerInterrupt+0x40>)
 8006992:	fba2 2303 	umull	r2, r3, r2, r3
 8006996:	099b      	lsrs	r3, r3, #6
 8006998:	4a09      	ldr	r2, [pc, #36]	; (80069c0 <vPortSetupTimerInterrupt+0x44>)
 800699a:	3b01      	subs	r3, #1
 800699c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800699e:	4b04      	ldr	r3, [pc, #16]	; (80069b0 <vPortSetupTimerInterrupt+0x34>)
 80069a0:	2207      	movs	r2, #7
 80069a2:	601a      	str	r2, [r3, #0]
}
 80069a4:	bf00      	nop
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	e000e010 	.word	0xe000e010
 80069b4:	e000e018 	.word	0xe000e018
 80069b8:	20000000 	.word	0x20000000
 80069bc:	10624dd3 	.word	0x10624dd3
 80069c0:	e000e014 	.word	0xe000e014

080069c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80069c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80069d4 <vPortEnableVFP+0x10>
 80069c8:	6801      	ldr	r1, [r0, #0]
 80069ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80069ce:	6001      	str	r1, [r0, #0]
 80069d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80069d2:	bf00      	nop
 80069d4:	e000ed88 	.word	0xe000ed88

080069d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b08a      	sub	sp, #40	; 0x28
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80069e0:	2300      	movs	r3, #0
 80069e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80069e4:	f7ff fae6 	bl	8005fb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80069e8:	4b5b      	ldr	r3, [pc, #364]	; (8006b58 <pvPortMalloc+0x180>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d101      	bne.n	80069f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80069f0:	f000 f920 	bl	8006c34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80069f4:	4b59      	ldr	r3, [pc, #356]	; (8006b5c <pvPortMalloc+0x184>)
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4013      	ands	r3, r2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f040 8093 	bne.w	8006b28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d01d      	beq.n	8006a44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006a08:	2208      	movs	r2, #8
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f003 0307 	and.w	r3, r3, #7
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d014      	beq.n	8006a44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f023 0307 	bic.w	r3, r3, #7
 8006a20:	3308      	adds	r3, #8
 8006a22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f003 0307 	and.w	r3, r3, #7
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00a      	beq.n	8006a44 <pvPortMalloc+0x6c>
	__asm volatile
 8006a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	617b      	str	r3, [r7, #20]
}
 8006a40:	bf00      	nop
 8006a42:	e7fe      	b.n	8006a42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d06e      	beq.n	8006b28 <pvPortMalloc+0x150>
 8006a4a:	4b45      	ldr	r3, [pc, #276]	; (8006b60 <pvPortMalloc+0x188>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d869      	bhi.n	8006b28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a54:	4b43      	ldr	r3, [pc, #268]	; (8006b64 <pvPortMalloc+0x18c>)
 8006a56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a58:	4b42      	ldr	r3, [pc, #264]	; (8006b64 <pvPortMalloc+0x18c>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a5e:	e004      	b.n	8006a6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d903      	bls.n	8006a7c <pvPortMalloc+0xa4>
 8006a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1f1      	bne.n	8006a60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a7c:	4b36      	ldr	r3, [pc, #216]	; (8006b58 <pvPortMalloc+0x180>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d050      	beq.n	8006b28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a86:	6a3b      	ldr	r3, [r7, #32]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2208      	movs	r2, #8
 8006a8c:	4413      	add	r3, r2
 8006a8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	6a3b      	ldr	r3, [r7, #32]
 8006a96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	1ad2      	subs	r2, r2, r3
 8006aa0:	2308      	movs	r3, #8
 8006aa2:	005b      	lsls	r3, r3, #1
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d91f      	bls.n	8006ae8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4413      	add	r3, r2
 8006aae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	f003 0307 	and.w	r3, r3, #7
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00a      	beq.n	8006ad0 <pvPortMalloc+0xf8>
	__asm volatile
 8006aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006abe:	f383 8811 	msr	BASEPRI, r3
 8006ac2:	f3bf 8f6f 	isb	sy
 8006ac6:	f3bf 8f4f 	dsb	sy
 8006aca:	613b      	str	r3, [r7, #16]
}
 8006acc:	bf00      	nop
 8006ace:	e7fe      	b.n	8006ace <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad2:	685a      	ldr	r2, [r3, #4]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	1ad2      	subs	r2, r2, r3
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ae2:	69b8      	ldr	r0, [r7, #24]
 8006ae4:	f000 f908 	bl	8006cf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ae8:	4b1d      	ldr	r3, [pc, #116]	; (8006b60 <pvPortMalloc+0x188>)
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	4a1b      	ldr	r2, [pc, #108]	; (8006b60 <pvPortMalloc+0x188>)
 8006af4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006af6:	4b1a      	ldr	r3, [pc, #104]	; (8006b60 <pvPortMalloc+0x188>)
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	4b1b      	ldr	r3, [pc, #108]	; (8006b68 <pvPortMalloc+0x190>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d203      	bcs.n	8006b0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b02:	4b17      	ldr	r3, [pc, #92]	; (8006b60 <pvPortMalloc+0x188>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a18      	ldr	r2, [pc, #96]	; (8006b68 <pvPortMalloc+0x190>)
 8006b08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	685a      	ldr	r2, [r3, #4]
 8006b0e:	4b13      	ldr	r3, [pc, #76]	; (8006b5c <pvPortMalloc+0x184>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	431a      	orrs	r2, r3
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006b1e:	4b13      	ldr	r3, [pc, #76]	; (8006b6c <pvPortMalloc+0x194>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	3301      	adds	r3, #1
 8006b24:	4a11      	ldr	r2, [pc, #68]	; (8006b6c <pvPortMalloc+0x194>)
 8006b26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b28:	f7ff fa52 	bl	8005fd0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	f003 0307 	and.w	r3, r3, #7
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00a      	beq.n	8006b4c <pvPortMalloc+0x174>
	__asm volatile
 8006b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3a:	f383 8811 	msr	BASEPRI, r3
 8006b3e:	f3bf 8f6f 	isb	sy
 8006b42:	f3bf 8f4f 	dsb	sy
 8006b46:	60fb      	str	r3, [r7, #12]
}
 8006b48:	bf00      	nop
 8006b4a:	e7fe      	b.n	8006b4a <pvPortMalloc+0x172>
	return pvReturn;
 8006b4c:	69fb      	ldr	r3, [r7, #28]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3728      	adds	r7, #40	; 0x28
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	20004328 	.word	0x20004328
 8006b5c:	2000433c 	.word	0x2000433c
 8006b60:	2000432c 	.word	0x2000432c
 8006b64:	20004320 	.word	0x20004320
 8006b68:	20004330 	.word	0x20004330
 8006b6c:	20004334 	.word	0x20004334

08006b70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d04d      	beq.n	8006c1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b82:	2308      	movs	r3, #8
 8006b84:	425b      	negs	r3, r3
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	4413      	add	r3, r2
 8006b8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	685a      	ldr	r2, [r3, #4]
 8006b94:	4b24      	ldr	r3, [pc, #144]	; (8006c28 <vPortFree+0xb8>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4013      	ands	r3, r2
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10a      	bne.n	8006bb4 <vPortFree+0x44>
	__asm volatile
 8006b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	60fb      	str	r3, [r7, #12]
}
 8006bb0:	bf00      	nop
 8006bb2:	e7fe      	b.n	8006bb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00a      	beq.n	8006bd2 <vPortFree+0x62>
	__asm volatile
 8006bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc0:	f383 8811 	msr	BASEPRI, r3
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	60bb      	str	r3, [r7, #8]
}
 8006bce:	bf00      	nop
 8006bd0:	e7fe      	b.n	8006bd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	4b14      	ldr	r3, [pc, #80]	; (8006c28 <vPortFree+0xb8>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4013      	ands	r3, r2
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d01e      	beq.n	8006c1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d11a      	bne.n	8006c1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	4b0e      	ldr	r3, [pc, #56]	; (8006c28 <vPortFree+0xb8>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	43db      	mvns	r3, r3
 8006bf2:	401a      	ands	r2, r3
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006bf8:	f7ff f9dc 	bl	8005fb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	4b0a      	ldr	r3, [pc, #40]	; (8006c2c <vPortFree+0xbc>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4413      	add	r3, r2
 8006c06:	4a09      	ldr	r2, [pc, #36]	; (8006c2c <vPortFree+0xbc>)
 8006c08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c0a:	6938      	ldr	r0, [r7, #16]
 8006c0c:	f000 f874 	bl	8006cf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006c10:	4b07      	ldr	r3, [pc, #28]	; (8006c30 <vPortFree+0xc0>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3301      	adds	r3, #1
 8006c16:	4a06      	ldr	r2, [pc, #24]	; (8006c30 <vPortFree+0xc0>)
 8006c18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006c1a:	f7ff f9d9 	bl	8005fd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c1e:	bf00      	nop
 8006c20:	3718      	adds	r7, #24
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	2000433c 	.word	0x2000433c
 8006c2c:	2000432c 	.word	0x2000432c
 8006c30:	20004338 	.word	0x20004338

08006c34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006c3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c40:	4b27      	ldr	r3, [pc, #156]	; (8006ce0 <prvHeapInit+0xac>)
 8006c42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f003 0307 	and.w	r3, r3, #7
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00c      	beq.n	8006c68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	3307      	adds	r3, #7
 8006c52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f023 0307 	bic.w	r3, r3, #7
 8006c5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	4a1f      	ldr	r2, [pc, #124]	; (8006ce0 <prvHeapInit+0xac>)
 8006c64:	4413      	add	r3, r2
 8006c66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c6c:	4a1d      	ldr	r2, [pc, #116]	; (8006ce4 <prvHeapInit+0xb0>)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c72:	4b1c      	ldr	r3, [pc, #112]	; (8006ce4 <prvHeapInit+0xb0>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c80:	2208      	movs	r2, #8
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	1a9b      	subs	r3, r3, r2
 8006c86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f023 0307 	bic.w	r3, r3, #7
 8006c8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	4a15      	ldr	r2, [pc, #84]	; (8006ce8 <prvHeapInit+0xb4>)
 8006c94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c96:	4b14      	ldr	r3, [pc, #80]	; (8006ce8 <prvHeapInit+0xb4>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c9e:	4b12      	ldr	r3, [pc, #72]	; (8006ce8 <prvHeapInit+0xb4>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	1ad2      	subs	r2, r2, r3
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006cb4:	4b0c      	ldr	r3, [pc, #48]	; (8006ce8 <prvHeapInit+0xb4>)
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	4a0a      	ldr	r2, [pc, #40]	; (8006cec <prvHeapInit+0xb8>)
 8006cc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	4a09      	ldr	r2, [pc, #36]	; (8006cf0 <prvHeapInit+0xbc>)
 8006cca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ccc:	4b09      	ldr	r3, [pc, #36]	; (8006cf4 <prvHeapInit+0xc0>)
 8006cce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006cd2:	601a      	str	r2, [r3, #0]
}
 8006cd4:	bf00      	nop
 8006cd6:	3714      	adds	r7, #20
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr
 8006ce0:	20000720 	.word	0x20000720
 8006ce4:	20004320 	.word	0x20004320
 8006ce8:	20004328 	.word	0x20004328
 8006cec:	20004330 	.word	0x20004330
 8006cf0:	2000432c 	.word	0x2000432c
 8006cf4:	2000433c 	.word	0x2000433c

08006cf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d00:	4b28      	ldr	r3, [pc, #160]	; (8006da4 <prvInsertBlockIntoFreeList+0xac>)
 8006d02:	60fb      	str	r3, [r7, #12]
 8006d04:	e002      	b.n	8006d0c <prvInsertBlockIntoFreeList+0x14>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	60fb      	str	r3, [r7, #12]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d8f7      	bhi.n	8006d06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	4413      	add	r3, r2
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d108      	bne.n	8006d3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	685a      	ldr	r2, [r3, #4]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	441a      	add	r2, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	441a      	add	r2, r3
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d118      	bne.n	8006d80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	4b15      	ldr	r3, [pc, #84]	; (8006da8 <prvInsertBlockIntoFreeList+0xb0>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d00d      	beq.n	8006d76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685a      	ldr	r2, [r3, #4]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	441a      	add	r2, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	e008      	b.n	8006d88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d76:	4b0c      	ldr	r3, [pc, #48]	; (8006da8 <prvInsertBlockIntoFreeList+0xb0>)
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	601a      	str	r2, [r3, #0]
 8006d7e:	e003      	b.n	8006d88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d002      	beq.n	8006d96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d96:	bf00      	nop
 8006d98:	3714      	adds	r7, #20
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	20004320 	.word	0x20004320
 8006da8:	20004328 	.word	0x20004328

08006dac <atoi>:
 8006dac:	220a      	movs	r2, #10
 8006dae:	2100      	movs	r1, #0
 8006db0:	f000 b882 	b.w	8006eb8 <strtol>

08006db4 <_strtol_l.constprop.0>:
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dba:	d001      	beq.n	8006dc0 <_strtol_l.constprop.0+0xc>
 8006dbc:	2b24      	cmp	r3, #36	; 0x24
 8006dbe:	d906      	bls.n	8006dce <_strtol_l.constprop.0+0x1a>
 8006dc0:	f000 f902 	bl	8006fc8 <__errno>
 8006dc4:	2316      	movs	r3, #22
 8006dc6:	6003      	str	r3, [r0, #0]
 8006dc8:	2000      	movs	r0, #0
 8006dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dce:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006eb4 <_strtol_l.constprop.0+0x100>
 8006dd2:	460d      	mov	r5, r1
 8006dd4:	462e      	mov	r6, r5
 8006dd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006dda:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006dde:	f017 0708 	ands.w	r7, r7, #8
 8006de2:	d1f7      	bne.n	8006dd4 <_strtol_l.constprop.0+0x20>
 8006de4:	2c2d      	cmp	r4, #45	; 0x2d
 8006de6:	d132      	bne.n	8006e4e <_strtol_l.constprop.0+0x9a>
 8006de8:	782c      	ldrb	r4, [r5, #0]
 8006dea:	2701      	movs	r7, #1
 8006dec:	1cb5      	adds	r5, r6, #2
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d05b      	beq.n	8006eaa <_strtol_l.constprop.0+0xf6>
 8006df2:	2b10      	cmp	r3, #16
 8006df4:	d109      	bne.n	8006e0a <_strtol_l.constprop.0+0x56>
 8006df6:	2c30      	cmp	r4, #48	; 0x30
 8006df8:	d107      	bne.n	8006e0a <_strtol_l.constprop.0+0x56>
 8006dfa:	782c      	ldrb	r4, [r5, #0]
 8006dfc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006e00:	2c58      	cmp	r4, #88	; 0x58
 8006e02:	d14d      	bne.n	8006ea0 <_strtol_l.constprop.0+0xec>
 8006e04:	786c      	ldrb	r4, [r5, #1]
 8006e06:	2310      	movs	r3, #16
 8006e08:	3502      	adds	r5, #2
 8006e0a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006e0e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e12:	f04f 0e00 	mov.w	lr, #0
 8006e16:	fbb8 f9f3 	udiv	r9, r8, r3
 8006e1a:	4676      	mov	r6, lr
 8006e1c:	fb03 8a19 	mls	sl, r3, r9, r8
 8006e20:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006e24:	f1bc 0f09 	cmp.w	ip, #9
 8006e28:	d816      	bhi.n	8006e58 <_strtol_l.constprop.0+0xa4>
 8006e2a:	4664      	mov	r4, ip
 8006e2c:	42a3      	cmp	r3, r4
 8006e2e:	dd24      	ble.n	8006e7a <_strtol_l.constprop.0+0xc6>
 8006e30:	f1be 3fff 	cmp.w	lr, #4294967295
 8006e34:	d008      	beq.n	8006e48 <_strtol_l.constprop.0+0x94>
 8006e36:	45b1      	cmp	r9, r6
 8006e38:	d31c      	bcc.n	8006e74 <_strtol_l.constprop.0+0xc0>
 8006e3a:	d101      	bne.n	8006e40 <_strtol_l.constprop.0+0x8c>
 8006e3c:	45a2      	cmp	sl, r4
 8006e3e:	db19      	blt.n	8006e74 <_strtol_l.constprop.0+0xc0>
 8006e40:	fb06 4603 	mla	r6, r6, r3, r4
 8006e44:	f04f 0e01 	mov.w	lr, #1
 8006e48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e4c:	e7e8      	b.n	8006e20 <_strtol_l.constprop.0+0x6c>
 8006e4e:	2c2b      	cmp	r4, #43	; 0x2b
 8006e50:	bf04      	itt	eq
 8006e52:	782c      	ldrbeq	r4, [r5, #0]
 8006e54:	1cb5      	addeq	r5, r6, #2
 8006e56:	e7ca      	b.n	8006dee <_strtol_l.constprop.0+0x3a>
 8006e58:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006e5c:	f1bc 0f19 	cmp.w	ip, #25
 8006e60:	d801      	bhi.n	8006e66 <_strtol_l.constprop.0+0xb2>
 8006e62:	3c37      	subs	r4, #55	; 0x37
 8006e64:	e7e2      	b.n	8006e2c <_strtol_l.constprop.0+0x78>
 8006e66:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006e6a:	f1bc 0f19 	cmp.w	ip, #25
 8006e6e:	d804      	bhi.n	8006e7a <_strtol_l.constprop.0+0xc6>
 8006e70:	3c57      	subs	r4, #87	; 0x57
 8006e72:	e7db      	b.n	8006e2c <_strtol_l.constprop.0+0x78>
 8006e74:	f04f 3eff 	mov.w	lr, #4294967295
 8006e78:	e7e6      	b.n	8006e48 <_strtol_l.constprop.0+0x94>
 8006e7a:	f1be 3fff 	cmp.w	lr, #4294967295
 8006e7e:	d105      	bne.n	8006e8c <_strtol_l.constprop.0+0xd8>
 8006e80:	2322      	movs	r3, #34	; 0x22
 8006e82:	6003      	str	r3, [r0, #0]
 8006e84:	4646      	mov	r6, r8
 8006e86:	b942      	cbnz	r2, 8006e9a <_strtol_l.constprop.0+0xe6>
 8006e88:	4630      	mov	r0, r6
 8006e8a:	e79e      	b.n	8006dca <_strtol_l.constprop.0+0x16>
 8006e8c:	b107      	cbz	r7, 8006e90 <_strtol_l.constprop.0+0xdc>
 8006e8e:	4276      	negs	r6, r6
 8006e90:	2a00      	cmp	r2, #0
 8006e92:	d0f9      	beq.n	8006e88 <_strtol_l.constprop.0+0xd4>
 8006e94:	f1be 0f00 	cmp.w	lr, #0
 8006e98:	d000      	beq.n	8006e9c <_strtol_l.constprop.0+0xe8>
 8006e9a:	1e69      	subs	r1, r5, #1
 8006e9c:	6011      	str	r1, [r2, #0]
 8006e9e:	e7f3      	b.n	8006e88 <_strtol_l.constprop.0+0xd4>
 8006ea0:	2430      	movs	r4, #48	; 0x30
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1b1      	bne.n	8006e0a <_strtol_l.constprop.0+0x56>
 8006ea6:	2308      	movs	r3, #8
 8006ea8:	e7af      	b.n	8006e0a <_strtol_l.constprop.0+0x56>
 8006eaa:	2c30      	cmp	r4, #48	; 0x30
 8006eac:	d0a5      	beq.n	8006dfa <_strtol_l.constprop.0+0x46>
 8006eae:	230a      	movs	r3, #10
 8006eb0:	e7ab      	b.n	8006e0a <_strtol_l.constprop.0+0x56>
 8006eb2:	bf00      	nop
 8006eb4:	08007a19 	.word	0x08007a19

08006eb8 <strtol>:
 8006eb8:	4613      	mov	r3, r2
 8006eba:	460a      	mov	r2, r1
 8006ebc:	4601      	mov	r1, r0
 8006ebe:	4802      	ldr	r0, [pc, #8]	; (8006ec8 <strtol+0x10>)
 8006ec0:	6800      	ldr	r0, [r0, #0]
 8006ec2:	f7ff bf77 	b.w	8006db4 <_strtol_l.constprop.0>
 8006ec6:	bf00      	nop
 8006ec8:	2000005c 	.word	0x2000005c

08006ecc <siprintf>:
 8006ecc:	b40e      	push	{r1, r2, r3}
 8006ece:	b500      	push	{lr}
 8006ed0:	b09c      	sub	sp, #112	; 0x70
 8006ed2:	ab1d      	add	r3, sp, #116	; 0x74
 8006ed4:	9002      	str	r0, [sp, #8]
 8006ed6:	9006      	str	r0, [sp, #24]
 8006ed8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006edc:	4809      	ldr	r0, [pc, #36]	; (8006f04 <siprintf+0x38>)
 8006ede:	9107      	str	r1, [sp, #28]
 8006ee0:	9104      	str	r1, [sp, #16]
 8006ee2:	4909      	ldr	r1, [pc, #36]	; (8006f08 <siprintf+0x3c>)
 8006ee4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ee8:	9105      	str	r1, [sp, #20]
 8006eea:	6800      	ldr	r0, [r0, #0]
 8006eec:	9301      	str	r3, [sp, #4]
 8006eee:	a902      	add	r1, sp, #8
 8006ef0:	f000 f9f6 	bl	80072e0 <_svfiprintf_r>
 8006ef4:	9b02      	ldr	r3, [sp, #8]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	701a      	strb	r2, [r3, #0]
 8006efa:	b01c      	add	sp, #112	; 0x70
 8006efc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f00:	b003      	add	sp, #12
 8006f02:	4770      	bx	lr
 8006f04:	2000005c 	.word	0x2000005c
 8006f08:	ffff0208 	.word	0xffff0208

08006f0c <memset>:
 8006f0c:	4402      	add	r2, r0
 8006f0e:	4603      	mov	r3, r0
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d100      	bne.n	8006f16 <memset+0xa>
 8006f14:	4770      	bx	lr
 8006f16:	f803 1b01 	strb.w	r1, [r3], #1
 8006f1a:	e7f9      	b.n	8006f10 <memset+0x4>

08006f1c <_reclaim_reent>:
 8006f1c:	4b29      	ldr	r3, [pc, #164]	; (8006fc4 <_reclaim_reent+0xa8>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4283      	cmp	r3, r0
 8006f22:	b570      	push	{r4, r5, r6, lr}
 8006f24:	4604      	mov	r4, r0
 8006f26:	d04b      	beq.n	8006fc0 <_reclaim_reent+0xa4>
 8006f28:	69c3      	ldr	r3, [r0, #28]
 8006f2a:	b143      	cbz	r3, 8006f3e <_reclaim_reent+0x22>
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d144      	bne.n	8006fbc <_reclaim_reent+0xa0>
 8006f32:	69e3      	ldr	r3, [r4, #28]
 8006f34:	6819      	ldr	r1, [r3, #0]
 8006f36:	b111      	cbz	r1, 8006f3e <_reclaim_reent+0x22>
 8006f38:	4620      	mov	r0, r4
 8006f3a:	f000 f87f 	bl	800703c <_free_r>
 8006f3e:	6961      	ldr	r1, [r4, #20]
 8006f40:	b111      	cbz	r1, 8006f48 <_reclaim_reent+0x2c>
 8006f42:	4620      	mov	r0, r4
 8006f44:	f000 f87a 	bl	800703c <_free_r>
 8006f48:	69e1      	ldr	r1, [r4, #28]
 8006f4a:	b111      	cbz	r1, 8006f52 <_reclaim_reent+0x36>
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	f000 f875 	bl	800703c <_free_r>
 8006f52:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006f54:	b111      	cbz	r1, 8006f5c <_reclaim_reent+0x40>
 8006f56:	4620      	mov	r0, r4
 8006f58:	f000 f870 	bl	800703c <_free_r>
 8006f5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f5e:	b111      	cbz	r1, 8006f66 <_reclaim_reent+0x4a>
 8006f60:	4620      	mov	r0, r4
 8006f62:	f000 f86b 	bl	800703c <_free_r>
 8006f66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006f68:	b111      	cbz	r1, 8006f70 <_reclaim_reent+0x54>
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f000 f866 	bl	800703c <_free_r>
 8006f70:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006f72:	b111      	cbz	r1, 8006f7a <_reclaim_reent+0x5e>
 8006f74:	4620      	mov	r0, r4
 8006f76:	f000 f861 	bl	800703c <_free_r>
 8006f7a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006f7c:	b111      	cbz	r1, 8006f84 <_reclaim_reent+0x68>
 8006f7e:	4620      	mov	r0, r4
 8006f80:	f000 f85c 	bl	800703c <_free_r>
 8006f84:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006f86:	b111      	cbz	r1, 8006f8e <_reclaim_reent+0x72>
 8006f88:	4620      	mov	r0, r4
 8006f8a:	f000 f857 	bl	800703c <_free_r>
 8006f8e:	6a23      	ldr	r3, [r4, #32]
 8006f90:	b1b3      	cbz	r3, 8006fc0 <_reclaim_reent+0xa4>
 8006f92:	4620      	mov	r0, r4
 8006f94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006f98:	4718      	bx	r3
 8006f9a:	5949      	ldr	r1, [r1, r5]
 8006f9c:	b941      	cbnz	r1, 8006fb0 <_reclaim_reent+0x94>
 8006f9e:	3504      	adds	r5, #4
 8006fa0:	69e3      	ldr	r3, [r4, #28]
 8006fa2:	2d80      	cmp	r5, #128	; 0x80
 8006fa4:	68d9      	ldr	r1, [r3, #12]
 8006fa6:	d1f8      	bne.n	8006f9a <_reclaim_reent+0x7e>
 8006fa8:	4620      	mov	r0, r4
 8006faa:	f000 f847 	bl	800703c <_free_r>
 8006fae:	e7c0      	b.n	8006f32 <_reclaim_reent+0x16>
 8006fb0:	680e      	ldr	r6, [r1, #0]
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f000 f842 	bl	800703c <_free_r>
 8006fb8:	4631      	mov	r1, r6
 8006fba:	e7ef      	b.n	8006f9c <_reclaim_reent+0x80>
 8006fbc:	2500      	movs	r5, #0
 8006fbe:	e7ef      	b.n	8006fa0 <_reclaim_reent+0x84>
 8006fc0:	bd70      	pop	{r4, r5, r6, pc}
 8006fc2:	bf00      	nop
 8006fc4:	2000005c 	.word	0x2000005c

08006fc8 <__errno>:
 8006fc8:	4b01      	ldr	r3, [pc, #4]	; (8006fd0 <__errno+0x8>)
 8006fca:	6818      	ldr	r0, [r3, #0]
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	2000005c 	.word	0x2000005c

08006fd4 <__libc_init_array>:
 8006fd4:	b570      	push	{r4, r5, r6, lr}
 8006fd6:	4d0d      	ldr	r5, [pc, #52]	; (800700c <__libc_init_array+0x38>)
 8006fd8:	4c0d      	ldr	r4, [pc, #52]	; (8007010 <__libc_init_array+0x3c>)
 8006fda:	1b64      	subs	r4, r4, r5
 8006fdc:	10a4      	asrs	r4, r4, #2
 8006fde:	2600      	movs	r6, #0
 8006fe0:	42a6      	cmp	r6, r4
 8006fe2:	d109      	bne.n	8006ff8 <__libc_init_array+0x24>
 8006fe4:	4d0b      	ldr	r5, [pc, #44]	; (8007014 <__libc_init_array+0x40>)
 8006fe6:	4c0c      	ldr	r4, [pc, #48]	; (8007018 <__libc_init_array+0x44>)
 8006fe8:	f000 fc6a 	bl	80078c0 <_init>
 8006fec:	1b64      	subs	r4, r4, r5
 8006fee:	10a4      	asrs	r4, r4, #2
 8006ff0:	2600      	movs	r6, #0
 8006ff2:	42a6      	cmp	r6, r4
 8006ff4:	d105      	bne.n	8007002 <__libc_init_array+0x2e>
 8006ff6:	bd70      	pop	{r4, r5, r6, pc}
 8006ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ffc:	4798      	blx	r3
 8006ffe:	3601      	adds	r6, #1
 8007000:	e7ee      	b.n	8006fe0 <__libc_init_array+0xc>
 8007002:	f855 3b04 	ldr.w	r3, [r5], #4
 8007006:	4798      	blx	r3
 8007008:	3601      	adds	r6, #1
 800700a:	e7f2      	b.n	8006ff2 <__libc_init_array+0x1e>
 800700c:	08007b54 	.word	0x08007b54
 8007010:	08007b54 	.word	0x08007b54
 8007014:	08007b54 	.word	0x08007b54
 8007018:	08007b58 	.word	0x08007b58

0800701c <__retarget_lock_acquire_recursive>:
 800701c:	4770      	bx	lr

0800701e <__retarget_lock_release_recursive>:
 800701e:	4770      	bx	lr

08007020 <memcpy>:
 8007020:	440a      	add	r2, r1
 8007022:	4291      	cmp	r1, r2
 8007024:	f100 33ff 	add.w	r3, r0, #4294967295
 8007028:	d100      	bne.n	800702c <memcpy+0xc>
 800702a:	4770      	bx	lr
 800702c:	b510      	push	{r4, lr}
 800702e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007032:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007036:	4291      	cmp	r1, r2
 8007038:	d1f9      	bne.n	800702e <memcpy+0xe>
 800703a:	bd10      	pop	{r4, pc}

0800703c <_free_r>:
 800703c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800703e:	2900      	cmp	r1, #0
 8007040:	d044      	beq.n	80070cc <_free_r+0x90>
 8007042:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007046:	9001      	str	r0, [sp, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	f1a1 0404 	sub.w	r4, r1, #4
 800704e:	bfb8      	it	lt
 8007050:	18e4      	addlt	r4, r4, r3
 8007052:	f000 f8df 	bl	8007214 <__malloc_lock>
 8007056:	4a1e      	ldr	r2, [pc, #120]	; (80070d0 <_free_r+0x94>)
 8007058:	9801      	ldr	r0, [sp, #4]
 800705a:	6813      	ldr	r3, [r2, #0]
 800705c:	b933      	cbnz	r3, 800706c <_free_r+0x30>
 800705e:	6063      	str	r3, [r4, #4]
 8007060:	6014      	str	r4, [r2, #0]
 8007062:	b003      	add	sp, #12
 8007064:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007068:	f000 b8da 	b.w	8007220 <__malloc_unlock>
 800706c:	42a3      	cmp	r3, r4
 800706e:	d908      	bls.n	8007082 <_free_r+0x46>
 8007070:	6825      	ldr	r5, [r4, #0]
 8007072:	1961      	adds	r1, r4, r5
 8007074:	428b      	cmp	r3, r1
 8007076:	bf01      	itttt	eq
 8007078:	6819      	ldreq	r1, [r3, #0]
 800707a:	685b      	ldreq	r3, [r3, #4]
 800707c:	1949      	addeq	r1, r1, r5
 800707e:	6021      	streq	r1, [r4, #0]
 8007080:	e7ed      	b.n	800705e <_free_r+0x22>
 8007082:	461a      	mov	r2, r3
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	b10b      	cbz	r3, 800708c <_free_r+0x50>
 8007088:	42a3      	cmp	r3, r4
 800708a:	d9fa      	bls.n	8007082 <_free_r+0x46>
 800708c:	6811      	ldr	r1, [r2, #0]
 800708e:	1855      	adds	r5, r2, r1
 8007090:	42a5      	cmp	r5, r4
 8007092:	d10b      	bne.n	80070ac <_free_r+0x70>
 8007094:	6824      	ldr	r4, [r4, #0]
 8007096:	4421      	add	r1, r4
 8007098:	1854      	adds	r4, r2, r1
 800709a:	42a3      	cmp	r3, r4
 800709c:	6011      	str	r1, [r2, #0]
 800709e:	d1e0      	bne.n	8007062 <_free_r+0x26>
 80070a0:	681c      	ldr	r4, [r3, #0]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	6053      	str	r3, [r2, #4]
 80070a6:	440c      	add	r4, r1
 80070a8:	6014      	str	r4, [r2, #0]
 80070aa:	e7da      	b.n	8007062 <_free_r+0x26>
 80070ac:	d902      	bls.n	80070b4 <_free_r+0x78>
 80070ae:	230c      	movs	r3, #12
 80070b0:	6003      	str	r3, [r0, #0]
 80070b2:	e7d6      	b.n	8007062 <_free_r+0x26>
 80070b4:	6825      	ldr	r5, [r4, #0]
 80070b6:	1961      	adds	r1, r4, r5
 80070b8:	428b      	cmp	r3, r1
 80070ba:	bf04      	itt	eq
 80070bc:	6819      	ldreq	r1, [r3, #0]
 80070be:	685b      	ldreq	r3, [r3, #4]
 80070c0:	6063      	str	r3, [r4, #4]
 80070c2:	bf04      	itt	eq
 80070c4:	1949      	addeq	r1, r1, r5
 80070c6:	6021      	streq	r1, [r4, #0]
 80070c8:	6054      	str	r4, [r2, #4]
 80070ca:	e7ca      	b.n	8007062 <_free_r+0x26>
 80070cc:	b003      	add	sp, #12
 80070ce:	bd30      	pop	{r4, r5, pc}
 80070d0:	20004480 	.word	0x20004480

080070d4 <sbrk_aligned>:
 80070d4:	b570      	push	{r4, r5, r6, lr}
 80070d6:	4e0e      	ldr	r6, [pc, #56]	; (8007110 <sbrk_aligned+0x3c>)
 80070d8:	460c      	mov	r4, r1
 80070da:	6831      	ldr	r1, [r6, #0]
 80070dc:	4605      	mov	r5, r0
 80070de:	b911      	cbnz	r1, 80070e6 <sbrk_aligned+0x12>
 80070e0:	f000 fba6 	bl	8007830 <_sbrk_r>
 80070e4:	6030      	str	r0, [r6, #0]
 80070e6:	4621      	mov	r1, r4
 80070e8:	4628      	mov	r0, r5
 80070ea:	f000 fba1 	bl	8007830 <_sbrk_r>
 80070ee:	1c43      	adds	r3, r0, #1
 80070f0:	d00a      	beq.n	8007108 <sbrk_aligned+0x34>
 80070f2:	1cc4      	adds	r4, r0, #3
 80070f4:	f024 0403 	bic.w	r4, r4, #3
 80070f8:	42a0      	cmp	r0, r4
 80070fa:	d007      	beq.n	800710c <sbrk_aligned+0x38>
 80070fc:	1a21      	subs	r1, r4, r0
 80070fe:	4628      	mov	r0, r5
 8007100:	f000 fb96 	bl	8007830 <_sbrk_r>
 8007104:	3001      	adds	r0, #1
 8007106:	d101      	bne.n	800710c <sbrk_aligned+0x38>
 8007108:	f04f 34ff 	mov.w	r4, #4294967295
 800710c:	4620      	mov	r0, r4
 800710e:	bd70      	pop	{r4, r5, r6, pc}
 8007110:	20004484 	.word	0x20004484

08007114 <_malloc_r>:
 8007114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007118:	1ccd      	adds	r5, r1, #3
 800711a:	f025 0503 	bic.w	r5, r5, #3
 800711e:	3508      	adds	r5, #8
 8007120:	2d0c      	cmp	r5, #12
 8007122:	bf38      	it	cc
 8007124:	250c      	movcc	r5, #12
 8007126:	2d00      	cmp	r5, #0
 8007128:	4607      	mov	r7, r0
 800712a:	db01      	blt.n	8007130 <_malloc_r+0x1c>
 800712c:	42a9      	cmp	r1, r5
 800712e:	d905      	bls.n	800713c <_malloc_r+0x28>
 8007130:	230c      	movs	r3, #12
 8007132:	603b      	str	r3, [r7, #0]
 8007134:	2600      	movs	r6, #0
 8007136:	4630      	mov	r0, r6
 8007138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800713c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007210 <_malloc_r+0xfc>
 8007140:	f000 f868 	bl	8007214 <__malloc_lock>
 8007144:	f8d8 3000 	ldr.w	r3, [r8]
 8007148:	461c      	mov	r4, r3
 800714a:	bb5c      	cbnz	r4, 80071a4 <_malloc_r+0x90>
 800714c:	4629      	mov	r1, r5
 800714e:	4638      	mov	r0, r7
 8007150:	f7ff ffc0 	bl	80070d4 <sbrk_aligned>
 8007154:	1c43      	adds	r3, r0, #1
 8007156:	4604      	mov	r4, r0
 8007158:	d155      	bne.n	8007206 <_malloc_r+0xf2>
 800715a:	f8d8 4000 	ldr.w	r4, [r8]
 800715e:	4626      	mov	r6, r4
 8007160:	2e00      	cmp	r6, #0
 8007162:	d145      	bne.n	80071f0 <_malloc_r+0xdc>
 8007164:	2c00      	cmp	r4, #0
 8007166:	d048      	beq.n	80071fa <_malloc_r+0xe6>
 8007168:	6823      	ldr	r3, [r4, #0]
 800716a:	4631      	mov	r1, r6
 800716c:	4638      	mov	r0, r7
 800716e:	eb04 0903 	add.w	r9, r4, r3
 8007172:	f000 fb5d 	bl	8007830 <_sbrk_r>
 8007176:	4581      	cmp	r9, r0
 8007178:	d13f      	bne.n	80071fa <_malloc_r+0xe6>
 800717a:	6821      	ldr	r1, [r4, #0]
 800717c:	1a6d      	subs	r5, r5, r1
 800717e:	4629      	mov	r1, r5
 8007180:	4638      	mov	r0, r7
 8007182:	f7ff ffa7 	bl	80070d4 <sbrk_aligned>
 8007186:	3001      	adds	r0, #1
 8007188:	d037      	beq.n	80071fa <_malloc_r+0xe6>
 800718a:	6823      	ldr	r3, [r4, #0]
 800718c:	442b      	add	r3, r5
 800718e:	6023      	str	r3, [r4, #0]
 8007190:	f8d8 3000 	ldr.w	r3, [r8]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d038      	beq.n	800720a <_malloc_r+0xf6>
 8007198:	685a      	ldr	r2, [r3, #4]
 800719a:	42a2      	cmp	r2, r4
 800719c:	d12b      	bne.n	80071f6 <_malloc_r+0xe2>
 800719e:	2200      	movs	r2, #0
 80071a0:	605a      	str	r2, [r3, #4]
 80071a2:	e00f      	b.n	80071c4 <_malloc_r+0xb0>
 80071a4:	6822      	ldr	r2, [r4, #0]
 80071a6:	1b52      	subs	r2, r2, r5
 80071a8:	d41f      	bmi.n	80071ea <_malloc_r+0xd6>
 80071aa:	2a0b      	cmp	r2, #11
 80071ac:	d917      	bls.n	80071de <_malloc_r+0xca>
 80071ae:	1961      	adds	r1, r4, r5
 80071b0:	42a3      	cmp	r3, r4
 80071b2:	6025      	str	r5, [r4, #0]
 80071b4:	bf18      	it	ne
 80071b6:	6059      	strne	r1, [r3, #4]
 80071b8:	6863      	ldr	r3, [r4, #4]
 80071ba:	bf08      	it	eq
 80071bc:	f8c8 1000 	streq.w	r1, [r8]
 80071c0:	5162      	str	r2, [r4, r5]
 80071c2:	604b      	str	r3, [r1, #4]
 80071c4:	4638      	mov	r0, r7
 80071c6:	f104 060b 	add.w	r6, r4, #11
 80071ca:	f000 f829 	bl	8007220 <__malloc_unlock>
 80071ce:	f026 0607 	bic.w	r6, r6, #7
 80071d2:	1d23      	adds	r3, r4, #4
 80071d4:	1af2      	subs	r2, r6, r3
 80071d6:	d0ae      	beq.n	8007136 <_malloc_r+0x22>
 80071d8:	1b9b      	subs	r3, r3, r6
 80071da:	50a3      	str	r3, [r4, r2]
 80071dc:	e7ab      	b.n	8007136 <_malloc_r+0x22>
 80071de:	42a3      	cmp	r3, r4
 80071e0:	6862      	ldr	r2, [r4, #4]
 80071e2:	d1dd      	bne.n	80071a0 <_malloc_r+0x8c>
 80071e4:	f8c8 2000 	str.w	r2, [r8]
 80071e8:	e7ec      	b.n	80071c4 <_malloc_r+0xb0>
 80071ea:	4623      	mov	r3, r4
 80071ec:	6864      	ldr	r4, [r4, #4]
 80071ee:	e7ac      	b.n	800714a <_malloc_r+0x36>
 80071f0:	4634      	mov	r4, r6
 80071f2:	6876      	ldr	r6, [r6, #4]
 80071f4:	e7b4      	b.n	8007160 <_malloc_r+0x4c>
 80071f6:	4613      	mov	r3, r2
 80071f8:	e7cc      	b.n	8007194 <_malloc_r+0x80>
 80071fa:	230c      	movs	r3, #12
 80071fc:	603b      	str	r3, [r7, #0]
 80071fe:	4638      	mov	r0, r7
 8007200:	f000 f80e 	bl	8007220 <__malloc_unlock>
 8007204:	e797      	b.n	8007136 <_malloc_r+0x22>
 8007206:	6025      	str	r5, [r4, #0]
 8007208:	e7dc      	b.n	80071c4 <_malloc_r+0xb0>
 800720a:	605b      	str	r3, [r3, #4]
 800720c:	deff      	udf	#255	; 0xff
 800720e:	bf00      	nop
 8007210:	20004480 	.word	0x20004480

08007214 <__malloc_lock>:
 8007214:	4801      	ldr	r0, [pc, #4]	; (800721c <__malloc_lock+0x8>)
 8007216:	f7ff bf01 	b.w	800701c <__retarget_lock_acquire_recursive>
 800721a:	bf00      	nop
 800721c:	2000447c 	.word	0x2000447c

08007220 <__malloc_unlock>:
 8007220:	4801      	ldr	r0, [pc, #4]	; (8007228 <__malloc_unlock+0x8>)
 8007222:	f7ff befc 	b.w	800701e <__retarget_lock_release_recursive>
 8007226:	bf00      	nop
 8007228:	2000447c 	.word	0x2000447c

0800722c <__ssputs_r>:
 800722c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007230:	688e      	ldr	r6, [r1, #8]
 8007232:	461f      	mov	r7, r3
 8007234:	42be      	cmp	r6, r7
 8007236:	680b      	ldr	r3, [r1, #0]
 8007238:	4682      	mov	sl, r0
 800723a:	460c      	mov	r4, r1
 800723c:	4690      	mov	r8, r2
 800723e:	d82c      	bhi.n	800729a <__ssputs_r+0x6e>
 8007240:	898a      	ldrh	r2, [r1, #12]
 8007242:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007246:	d026      	beq.n	8007296 <__ssputs_r+0x6a>
 8007248:	6965      	ldr	r5, [r4, #20]
 800724a:	6909      	ldr	r1, [r1, #16]
 800724c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007250:	eba3 0901 	sub.w	r9, r3, r1
 8007254:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007258:	1c7b      	adds	r3, r7, #1
 800725a:	444b      	add	r3, r9
 800725c:	106d      	asrs	r5, r5, #1
 800725e:	429d      	cmp	r5, r3
 8007260:	bf38      	it	cc
 8007262:	461d      	movcc	r5, r3
 8007264:	0553      	lsls	r3, r2, #21
 8007266:	d527      	bpl.n	80072b8 <__ssputs_r+0x8c>
 8007268:	4629      	mov	r1, r5
 800726a:	f7ff ff53 	bl	8007114 <_malloc_r>
 800726e:	4606      	mov	r6, r0
 8007270:	b360      	cbz	r0, 80072cc <__ssputs_r+0xa0>
 8007272:	6921      	ldr	r1, [r4, #16]
 8007274:	464a      	mov	r2, r9
 8007276:	f7ff fed3 	bl	8007020 <memcpy>
 800727a:	89a3      	ldrh	r3, [r4, #12]
 800727c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007284:	81a3      	strh	r3, [r4, #12]
 8007286:	6126      	str	r6, [r4, #16]
 8007288:	6165      	str	r5, [r4, #20]
 800728a:	444e      	add	r6, r9
 800728c:	eba5 0509 	sub.w	r5, r5, r9
 8007290:	6026      	str	r6, [r4, #0]
 8007292:	60a5      	str	r5, [r4, #8]
 8007294:	463e      	mov	r6, r7
 8007296:	42be      	cmp	r6, r7
 8007298:	d900      	bls.n	800729c <__ssputs_r+0x70>
 800729a:	463e      	mov	r6, r7
 800729c:	6820      	ldr	r0, [r4, #0]
 800729e:	4632      	mov	r2, r6
 80072a0:	4641      	mov	r1, r8
 80072a2:	f000 faab 	bl	80077fc <memmove>
 80072a6:	68a3      	ldr	r3, [r4, #8]
 80072a8:	1b9b      	subs	r3, r3, r6
 80072aa:	60a3      	str	r3, [r4, #8]
 80072ac:	6823      	ldr	r3, [r4, #0]
 80072ae:	4433      	add	r3, r6
 80072b0:	6023      	str	r3, [r4, #0]
 80072b2:	2000      	movs	r0, #0
 80072b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072b8:	462a      	mov	r2, r5
 80072ba:	f000 fac9 	bl	8007850 <_realloc_r>
 80072be:	4606      	mov	r6, r0
 80072c0:	2800      	cmp	r0, #0
 80072c2:	d1e0      	bne.n	8007286 <__ssputs_r+0x5a>
 80072c4:	6921      	ldr	r1, [r4, #16]
 80072c6:	4650      	mov	r0, sl
 80072c8:	f7ff feb8 	bl	800703c <_free_r>
 80072cc:	230c      	movs	r3, #12
 80072ce:	f8ca 3000 	str.w	r3, [sl]
 80072d2:	89a3      	ldrh	r3, [r4, #12]
 80072d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072d8:	81a3      	strh	r3, [r4, #12]
 80072da:	f04f 30ff 	mov.w	r0, #4294967295
 80072de:	e7e9      	b.n	80072b4 <__ssputs_r+0x88>

080072e0 <_svfiprintf_r>:
 80072e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e4:	4698      	mov	r8, r3
 80072e6:	898b      	ldrh	r3, [r1, #12]
 80072e8:	061b      	lsls	r3, r3, #24
 80072ea:	b09d      	sub	sp, #116	; 0x74
 80072ec:	4607      	mov	r7, r0
 80072ee:	460d      	mov	r5, r1
 80072f0:	4614      	mov	r4, r2
 80072f2:	d50e      	bpl.n	8007312 <_svfiprintf_r+0x32>
 80072f4:	690b      	ldr	r3, [r1, #16]
 80072f6:	b963      	cbnz	r3, 8007312 <_svfiprintf_r+0x32>
 80072f8:	2140      	movs	r1, #64	; 0x40
 80072fa:	f7ff ff0b 	bl	8007114 <_malloc_r>
 80072fe:	6028      	str	r0, [r5, #0]
 8007300:	6128      	str	r0, [r5, #16]
 8007302:	b920      	cbnz	r0, 800730e <_svfiprintf_r+0x2e>
 8007304:	230c      	movs	r3, #12
 8007306:	603b      	str	r3, [r7, #0]
 8007308:	f04f 30ff 	mov.w	r0, #4294967295
 800730c:	e0d0      	b.n	80074b0 <_svfiprintf_r+0x1d0>
 800730e:	2340      	movs	r3, #64	; 0x40
 8007310:	616b      	str	r3, [r5, #20]
 8007312:	2300      	movs	r3, #0
 8007314:	9309      	str	r3, [sp, #36]	; 0x24
 8007316:	2320      	movs	r3, #32
 8007318:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800731c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007320:	2330      	movs	r3, #48	; 0x30
 8007322:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80074c8 <_svfiprintf_r+0x1e8>
 8007326:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800732a:	f04f 0901 	mov.w	r9, #1
 800732e:	4623      	mov	r3, r4
 8007330:	469a      	mov	sl, r3
 8007332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007336:	b10a      	cbz	r2, 800733c <_svfiprintf_r+0x5c>
 8007338:	2a25      	cmp	r2, #37	; 0x25
 800733a:	d1f9      	bne.n	8007330 <_svfiprintf_r+0x50>
 800733c:	ebba 0b04 	subs.w	fp, sl, r4
 8007340:	d00b      	beq.n	800735a <_svfiprintf_r+0x7a>
 8007342:	465b      	mov	r3, fp
 8007344:	4622      	mov	r2, r4
 8007346:	4629      	mov	r1, r5
 8007348:	4638      	mov	r0, r7
 800734a:	f7ff ff6f 	bl	800722c <__ssputs_r>
 800734e:	3001      	adds	r0, #1
 8007350:	f000 80a9 	beq.w	80074a6 <_svfiprintf_r+0x1c6>
 8007354:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007356:	445a      	add	r2, fp
 8007358:	9209      	str	r2, [sp, #36]	; 0x24
 800735a:	f89a 3000 	ldrb.w	r3, [sl]
 800735e:	2b00      	cmp	r3, #0
 8007360:	f000 80a1 	beq.w	80074a6 <_svfiprintf_r+0x1c6>
 8007364:	2300      	movs	r3, #0
 8007366:	f04f 32ff 	mov.w	r2, #4294967295
 800736a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800736e:	f10a 0a01 	add.w	sl, sl, #1
 8007372:	9304      	str	r3, [sp, #16]
 8007374:	9307      	str	r3, [sp, #28]
 8007376:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800737a:	931a      	str	r3, [sp, #104]	; 0x68
 800737c:	4654      	mov	r4, sl
 800737e:	2205      	movs	r2, #5
 8007380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007384:	4850      	ldr	r0, [pc, #320]	; (80074c8 <_svfiprintf_r+0x1e8>)
 8007386:	f7f8 ff2b 	bl	80001e0 <memchr>
 800738a:	9a04      	ldr	r2, [sp, #16]
 800738c:	b9d8      	cbnz	r0, 80073c6 <_svfiprintf_r+0xe6>
 800738e:	06d0      	lsls	r0, r2, #27
 8007390:	bf44      	itt	mi
 8007392:	2320      	movmi	r3, #32
 8007394:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007398:	0711      	lsls	r1, r2, #28
 800739a:	bf44      	itt	mi
 800739c:	232b      	movmi	r3, #43	; 0x2b
 800739e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073a2:	f89a 3000 	ldrb.w	r3, [sl]
 80073a6:	2b2a      	cmp	r3, #42	; 0x2a
 80073a8:	d015      	beq.n	80073d6 <_svfiprintf_r+0xf6>
 80073aa:	9a07      	ldr	r2, [sp, #28]
 80073ac:	4654      	mov	r4, sl
 80073ae:	2000      	movs	r0, #0
 80073b0:	f04f 0c0a 	mov.w	ip, #10
 80073b4:	4621      	mov	r1, r4
 80073b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073ba:	3b30      	subs	r3, #48	; 0x30
 80073bc:	2b09      	cmp	r3, #9
 80073be:	d94d      	bls.n	800745c <_svfiprintf_r+0x17c>
 80073c0:	b1b0      	cbz	r0, 80073f0 <_svfiprintf_r+0x110>
 80073c2:	9207      	str	r2, [sp, #28]
 80073c4:	e014      	b.n	80073f0 <_svfiprintf_r+0x110>
 80073c6:	eba0 0308 	sub.w	r3, r0, r8
 80073ca:	fa09 f303 	lsl.w	r3, r9, r3
 80073ce:	4313      	orrs	r3, r2
 80073d0:	9304      	str	r3, [sp, #16]
 80073d2:	46a2      	mov	sl, r4
 80073d4:	e7d2      	b.n	800737c <_svfiprintf_r+0x9c>
 80073d6:	9b03      	ldr	r3, [sp, #12]
 80073d8:	1d19      	adds	r1, r3, #4
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	9103      	str	r1, [sp, #12]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	bfbb      	ittet	lt
 80073e2:	425b      	neglt	r3, r3
 80073e4:	f042 0202 	orrlt.w	r2, r2, #2
 80073e8:	9307      	strge	r3, [sp, #28]
 80073ea:	9307      	strlt	r3, [sp, #28]
 80073ec:	bfb8      	it	lt
 80073ee:	9204      	strlt	r2, [sp, #16]
 80073f0:	7823      	ldrb	r3, [r4, #0]
 80073f2:	2b2e      	cmp	r3, #46	; 0x2e
 80073f4:	d10c      	bne.n	8007410 <_svfiprintf_r+0x130>
 80073f6:	7863      	ldrb	r3, [r4, #1]
 80073f8:	2b2a      	cmp	r3, #42	; 0x2a
 80073fa:	d134      	bne.n	8007466 <_svfiprintf_r+0x186>
 80073fc:	9b03      	ldr	r3, [sp, #12]
 80073fe:	1d1a      	adds	r2, r3, #4
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	9203      	str	r2, [sp, #12]
 8007404:	2b00      	cmp	r3, #0
 8007406:	bfb8      	it	lt
 8007408:	f04f 33ff 	movlt.w	r3, #4294967295
 800740c:	3402      	adds	r4, #2
 800740e:	9305      	str	r3, [sp, #20]
 8007410:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80074d8 <_svfiprintf_r+0x1f8>
 8007414:	7821      	ldrb	r1, [r4, #0]
 8007416:	2203      	movs	r2, #3
 8007418:	4650      	mov	r0, sl
 800741a:	f7f8 fee1 	bl	80001e0 <memchr>
 800741e:	b138      	cbz	r0, 8007430 <_svfiprintf_r+0x150>
 8007420:	9b04      	ldr	r3, [sp, #16]
 8007422:	eba0 000a 	sub.w	r0, r0, sl
 8007426:	2240      	movs	r2, #64	; 0x40
 8007428:	4082      	lsls	r2, r0
 800742a:	4313      	orrs	r3, r2
 800742c:	3401      	adds	r4, #1
 800742e:	9304      	str	r3, [sp, #16]
 8007430:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007434:	4825      	ldr	r0, [pc, #148]	; (80074cc <_svfiprintf_r+0x1ec>)
 8007436:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800743a:	2206      	movs	r2, #6
 800743c:	f7f8 fed0 	bl	80001e0 <memchr>
 8007440:	2800      	cmp	r0, #0
 8007442:	d038      	beq.n	80074b6 <_svfiprintf_r+0x1d6>
 8007444:	4b22      	ldr	r3, [pc, #136]	; (80074d0 <_svfiprintf_r+0x1f0>)
 8007446:	bb1b      	cbnz	r3, 8007490 <_svfiprintf_r+0x1b0>
 8007448:	9b03      	ldr	r3, [sp, #12]
 800744a:	3307      	adds	r3, #7
 800744c:	f023 0307 	bic.w	r3, r3, #7
 8007450:	3308      	adds	r3, #8
 8007452:	9303      	str	r3, [sp, #12]
 8007454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007456:	4433      	add	r3, r6
 8007458:	9309      	str	r3, [sp, #36]	; 0x24
 800745a:	e768      	b.n	800732e <_svfiprintf_r+0x4e>
 800745c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007460:	460c      	mov	r4, r1
 8007462:	2001      	movs	r0, #1
 8007464:	e7a6      	b.n	80073b4 <_svfiprintf_r+0xd4>
 8007466:	2300      	movs	r3, #0
 8007468:	3401      	adds	r4, #1
 800746a:	9305      	str	r3, [sp, #20]
 800746c:	4619      	mov	r1, r3
 800746e:	f04f 0c0a 	mov.w	ip, #10
 8007472:	4620      	mov	r0, r4
 8007474:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007478:	3a30      	subs	r2, #48	; 0x30
 800747a:	2a09      	cmp	r2, #9
 800747c:	d903      	bls.n	8007486 <_svfiprintf_r+0x1a6>
 800747e:	2b00      	cmp	r3, #0
 8007480:	d0c6      	beq.n	8007410 <_svfiprintf_r+0x130>
 8007482:	9105      	str	r1, [sp, #20]
 8007484:	e7c4      	b.n	8007410 <_svfiprintf_r+0x130>
 8007486:	fb0c 2101 	mla	r1, ip, r1, r2
 800748a:	4604      	mov	r4, r0
 800748c:	2301      	movs	r3, #1
 800748e:	e7f0      	b.n	8007472 <_svfiprintf_r+0x192>
 8007490:	ab03      	add	r3, sp, #12
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	462a      	mov	r2, r5
 8007496:	4b0f      	ldr	r3, [pc, #60]	; (80074d4 <_svfiprintf_r+0x1f4>)
 8007498:	a904      	add	r1, sp, #16
 800749a:	4638      	mov	r0, r7
 800749c:	f3af 8000 	nop.w
 80074a0:	1c42      	adds	r2, r0, #1
 80074a2:	4606      	mov	r6, r0
 80074a4:	d1d6      	bne.n	8007454 <_svfiprintf_r+0x174>
 80074a6:	89ab      	ldrh	r3, [r5, #12]
 80074a8:	065b      	lsls	r3, r3, #25
 80074aa:	f53f af2d 	bmi.w	8007308 <_svfiprintf_r+0x28>
 80074ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074b0:	b01d      	add	sp, #116	; 0x74
 80074b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074b6:	ab03      	add	r3, sp, #12
 80074b8:	9300      	str	r3, [sp, #0]
 80074ba:	462a      	mov	r2, r5
 80074bc:	4b05      	ldr	r3, [pc, #20]	; (80074d4 <_svfiprintf_r+0x1f4>)
 80074be:	a904      	add	r1, sp, #16
 80074c0:	4638      	mov	r0, r7
 80074c2:	f000 f879 	bl	80075b8 <_printf_i>
 80074c6:	e7eb      	b.n	80074a0 <_svfiprintf_r+0x1c0>
 80074c8:	08007b19 	.word	0x08007b19
 80074cc:	08007b23 	.word	0x08007b23
 80074d0:	00000000 	.word	0x00000000
 80074d4:	0800722d 	.word	0x0800722d
 80074d8:	08007b1f 	.word	0x08007b1f

080074dc <_printf_common>:
 80074dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074e0:	4616      	mov	r6, r2
 80074e2:	4699      	mov	r9, r3
 80074e4:	688a      	ldr	r2, [r1, #8]
 80074e6:	690b      	ldr	r3, [r1, #16]
 80074e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074ec:	4293      	cmp	r3, r2
 80074ee:	bfb8      	it	lt
 80074f0:	4613      	movlt	r3, r2
 80074f2:	6033      	str	r3, [r6, #0]
 80074f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074f8:	4607      	mov	r7, r0
 80074fa:	460c      	mov	r4, r1
 80074fc:	b10a      	cbz	r2, 8007502 <_printf_common+0x26>
 80074fe:	3301      	adds	r3, #1
 8007500:	6033      	str	r3, [r6, #0]
 8007502:	6823      	ldr	r3, [r4, #0]
 8007504:	0699      	lsls	r1, r3, #26
 8007506:	bf42      	ittt	mi
 8007508:	6833      	ldrmi	r3, [r6, #0]
 800750a:	3302      	addmi	r3, #2
 800750c:	6033      	strmi	r3, [r6, #0]
 800750e:	6825      	ldr	r5, [r4, #0]
 8007510:	f015 0506 	ands.w	r5, r5, #6
 8007514:	d106      	bne.n	8007524 <_printf_common+0x48>
 8007516:	f104 0a19 	add.w	sl, r4, #25
 800751a:	68e3      	ldr	r3, [r4, #12]
 800751c:	6832      	ldr	r2, [r6, #0]
 800751e:	1a9b      	subs	r3, r3, r2
 8007520:	42ab      	cmp	r3, r5
 8007522:	dc26      	bgt.n	8007572 <_printf_common+0x96>
 8007524:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007528:	1e13      	subs	r3, r2, #0
 800752a:	6822      	ldr	r2, [r4, #0]
 800752c:	bf18      	it	ne
 800752e:	2301      	movne	r3, #1
 8007530:	0692      	lsls	r2, r2, #26
 8007532:	d42b      	bmi.n	800758c <_printf_common+0xb0>
 8007534:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007538:	4649      	mov	r1, r9
 800753a:	4638      	mov	r0, r7
 800753c:	47c0      	blx	r8
 800753e:	3001      	adds	r0, #1
 8007540:	d01e      	beq.n	8007580 <_printf_common+0xa4>
 8007542:	6823      	ldr	r3, [r4, #0]
 8007544:	6922      	ldr	r2, [r4, #16]
 8007546:	f003 0306 	and.w	r3, r3, #6
 800754a:	2b04      	cmp	r3, #4
 800754c:	bf02      	ittt	eq
 800754e:	68e5      	ldreq	r5, [r4, #12]
 8007550:	6833      	ldreq	r3, [r6, #0]
 8007552:	1aed      	subeq	r5, r5, r3
 8007554:	68a3      	ldr	r3, [r4, #8]
 8007556:	bf0c      	ite	eq
 8007558:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800755c:	2500      	movne	r5, #0
 800755e:	4293      	cmp	r3, r2
 8007560:	bfc4      	itt	gt
 8007562:	1a9b      	subgt	r3, r3, r2
 8007564:	18ed      	addgt	r5, r5, r3
 8007566:	2600      	movs	r6, #0
 8007568:	341a      	adds	r4, #26
 800756a:	42b5      	cmp	r5, r6
 800756c:	d11a      	bne.n	80075a4 <_printf_common+0xc8>
 800756e:	2000      	movs	r0, #0
 8007570:	e008      	b.n	8007584 <_printf_common+0xa8>
 8007572:	2301      	movs	r3, #1
 8007574:	4652      	mov	r2, sl
 8007576:	4649      	mov	r1, r9
 8007578:	4638      	mov	r0, r7
 800757a:	47c0      	blx	r8
 800757c:	3001      	adds	r0, #1
 800757e:	d103      	bne.n	8007588 <_printf_common+0xac>
 8007580:	f04f 30ff 	mov.w	r0, #4294967295
 8007584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007588:	3501      	adds	r5, #1
 800758a:	e7c6      	b.n	800751a <_printf_common+0x3e>
 800758c:	18e1      	adds	r1, r4, r3
 800758e:	1c5a      	adds	r2, r3, #1
 8007590:	2030      	movs	r0, #48	; 0x30
 8007592:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007596:	4422      	add	r2, r4
 8007598:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800759c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075a0:	3302      	adds	r3, #2
 80075a2:	e7c7      	b.n	8007534 <_printf_common+0x58>
 80075a4:	2301      	movs	r3, #1
 80075a6:	4622      	mov	r2, r4
 80075a8:	4649      	mov	r1, r9
 80075aa:	4638      	mov	r0, r7
 80075ac:	47c0      	blx	r8
 80075ae:	3001      	adds	r0, #1
 80075b0:	d0e6      	beq.n	8007580 <_printf_common+0xa4>
 80075b2:	3601      	adds	r6, #1
 80075b4:	e7d9      	b.n	800756a <_printf_common+0x8e>
	...

080075b8 <_printf_i>:
 80075b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075bc:	7e0f      	ldrb	r7, [r1, #24]
 80075be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075c0:	2f78      	cmp	r7, #120	; 0x78
 80075c2:	4691      	mov	r9, r2
 80075c4:	4680      	mov	r8, r0
 80075c6:	460c      	mov	r4, r1
 80075c8:	469a      	mov	sl, r3
 80075ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80075ce:	d807      	bhi.n	80075e0 <_printf_i+0x28>
 80075d0:	2f62      	cmp	r7, #98	; 0x62
 80075d2:	d80a      	bhi.n	80075ea <_printf_i+0x32>
 80075d4:	2f00      	cmp	r7, #0
 80075d6:	f000 80d4 	beq.w	8007782 <_printf_i+0x1ca>
 80075da:	2f58      	cmp	r7, #88	; 0x58
 80075dc:	f000 80c0 	beq.w	8007760 <_printf_i+0x1a8>
 80075e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075e8:	e03a      	b.n	8007660 <_printf_i+0xa8>
 80075ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075ee:	2b15      	cmp	r3, #21
 80075f0:	d8f6      	bhi.n	80075e0 <_printf_i+0x28>
 80075f2:	a101      	add	r1, pc, #4	; (adr r1, 80075f8 <_printf_i+0x40>)
 80075f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075f8:	08007651 	.word	0x08007651
 80075fc:	08007665 	.word	0x08007665
 8007600:	080075e1 	.word	0x080075e1
 8007604:	080075e1 	.word	0x080075e1
 8007608:	080075e1 	.word	0x080075e1
 800760c:	080075e1 	.word	0x080075e1
 8007610:	08007665 	.word	0x08007665
 8007614:	080075e1 	.word	0x080075e1
 8007618:	080075e1 	.word	0x080075e1
 800761c:	080075e1 	.word	0x080075e1
 8007620:	080075e1 	.word	0x080075e1
 8007624:	08007769 	.word	0x08007769
 8007628:	08007691 	.word	0x08007691
 800762c:	08007723 	.word	0x08007723
 8007630:	080075e1 	.word	0x080075e1
 8007634:	080075e1 	.word	0x080075e1
 8007638:	0800778b 	.word	0x0800778b
 800763c:	080075e1 	.word	0x080075e1
 8007640:	08007691 	.word	0x08007691
 8007644:	080075e1 	.word	0x080075e1
 8007648:	080075e1 	.word	0x080075e1
 800764c:	0800772b 	.word	0x0800772b
 8007650:	682b      	ldr	r3, [r5, #0]
 8007652:	1d1a      	adds	r2, r3, #4
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	602a      	str	r2, [r5, #0]
 8007658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800765c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007660:	2301      	movs	r3, #1
 8007662:	e09f      	b.n	80077a4 <_printf_i+0x1ec>
 8007664:	6820      	ldr	r0, [r4, #0]
 8007666:	682b      	ldr	r3, [r5, #0]
 8007668:	0607      	lsls	r7, r0, #24
 800766a:	f103 0104 	add.w	r1, r3, #4
 800766e:	6029      	str	r1, [r5, #0]
 8007670:	d501      	bpl.n	8007676 <_printf_i+0xbe>
 8007672:	681e      	ldr	r6, [r3, #0]
 8007674:	e003      	b.n	800767e <_printf_i+0xc6>
 8007676:	0646      	lsls	r6, r0, #25
 8007678:	d5fb      	bpl.n	8007672 <_printf_i+0xba>
 800767a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800767e:	2e00      	cmp	r6, #0
 8007680:	da03      	bge.n	800768a <_printf_i+0xd2>
 8007682:	232d      	movs	r3, #45	; 0x2d
 8007684:	4276      	negs	r6, r6
 8007686:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800768a:	485a      	ldr	r0, [pc, #360]	; (80077f4 <_printf_i+0x23c>)
 800768c:	230a      	movs	r3, #10
 800768e:	e012      	b.n	80076b6 <_printf_i+0xfe>
 8007690:	682b      	ldr	r3, [r5, #0]
 8007692:	6820      	ldr	r0, [r4, #0]
 8007694:	1d19      	adds	r1, r3, #4
 8007696:	6029      	str	r1, [r5, #0]
 8007698:	0605      	lsls	r5, r0, #24
 800769a:	d501      	bpl.n	80076a0 <_printf_i+0xe8>
 800769c:	681e      	ldr	r6, [r3, #0]
 800769e:	e002      	b.n	80076a6 <_printf_i+0xee>
 80076a0:	0641      	lsls	r1, r0, #25
 80076a2:	d5fb      	bpl.n	800769c <_printf_i+0xe4>
 80076a4:	881e      	ldrh	r6, [r3, #0]
 80076a6:	4853      	ldr	r0, [pc, #332]	; (80077f4 <_printf_i+0x23c>)
 80076a8:	2f6f      	cmp	r7, #111	; 0x6f
 80076aa:	bf0c      	ite	eq
 80076ac:	2308      	moveq	r3, #8
 80076ae:	230a      	movne	r3, #10
 80076b0:	2100      	movs	r1, #0
 80076b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076b6:	6865      	ldr	r5, [r4, #4]
 80076b8:	60a5      	str	r5, [r4, #8]
 80076ba:	2d00      	cmp	r5, #0
 80076bc:	bfa2      	ittt	ge
 80076be:	6821      	ldrge	r1, [r4, #0]
 80076c0:	f021 0104 	bicge.w	r1, r1, #4
 80076c4:	6021      	strge	r1, [r4, #0]
 80076c6:	b90e      	cbnz	r6, 80076cc <_printf_i+0x114>
 80076c8:	2d00      	cmp	r5, #0
 80076ca:	d04b      	beq.n	8007764 <_printf_i+0x1ac>
 80076cc:	4615      	mov	r5, r2
 80076ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80076d2:	fb03 6711 	mls	r7, r3, r1, r6
 80076d6:	5dc7      	ldrb	r7, [r0, r7]
 80076d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80076dc:	4637      	mov	r7, r6
 80076de:	42bb      	cmp	r3, r7
 80076e0:	460e      	mov	r6, r1
 80076e2:	d9f4      	bls.n	80076ce <_printf_i+0x116>
 80076e4:	2b08      	cmp	r3, #8
 80076e6:	d10b      	bne.n	8007700 <_printf_i+0x148>
 80076e8:	6823      	ldr	r3, [r4, #0]
 80076ea:	07de      	lsls	r6, r3, #31
 80076ec:	d508      	bpl.n	8007700 <_printf_i+0x148>
 80076ee:	6923      	ldr	r3, [r4, #16]
 80076f0:	6861      	ldr	r1, [r4, #4]
 80076f2:	4299      	cmp	r1, r3
 80076f4:	bfde      	ittt	le
 80076f6:	2330      	movle	r3, #48	; 0x30
 80076f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80076fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007700:	1b52      	subs	r2, r2, r5
 8007702:	6122      	str	r2, [r4, #16]
 8007704:	f8cd a000 	str.w	sl, [sp]
 8007708:	464b      	mov	r3, r9
 800770a:	aa03      	add	r2, sp, #12
 800770c:	4621      	mov	r1, r4
 800770e:	4640      	mov	r0, r8
 8007710:	f7ff fee4 	bl	80074dc <_printf_common>
 8007714:	3001      	adds	r0, #1
 8007716:	d14a      	bne.n	80077ae <_printf_i+0x1f6>
 8007718:	f04f 30ff 	mov.w	r0, #4294967295
 800771c:	b004      	add	sp, #16
 800771e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007722:	6823      	ldr	r3, [r4, #0]
 8007724:	f043 0320 	orr.w	r3, r3, #32
 8007728:	6023      	str	r3, [r4, #0]
 800772a:	4833      	ldr	r0, [pc, #204]	; (80077f8 <_printf_i+0x240>)
 800772c:	2778      	movs	r7, #120	; 0x78
 800772e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007732:	6823      	ldr	r3, [r4, #0]
 8007734:	6829      	ldr	r1, [r5, #0]
 8007736:	061f      	lsls	r7, r3, #24
 8007738:	f851 6b04 	ldr.w	r6, [r1], #4
 800773c:	d402      	bmi.n	8007744 <_printf_i+0x18c>
 800773e:	065f      	lsls	r7, r3, #25
 8007740:	bf48      	it	mi
 8007742:	b2b6      	uxthmi	r6, r6
 8007744:	07df      	lsls	r7, r3, #31
 8007746:	bf48      	it	mi
 8007748:	f043 0320 	orrmi.w	r3, r3, #32
 800774c:	6029      	str	r1, [r5, #0]
 800774e:	bf48      	it	mi
 8007750:	6023      	strmi	r3, [r4, #0]
 8007752:	b91e      	cbnz	r6, 800775c <_printf_i+0x1a4>
 8007754:	6823      	ldr	r3, [r4, #0]
 8007756:	f023 0320 	bic.w	r3, r3, #32
 800775a:	6023      	str	r3, [r4, #0]
 800775c:	2310      	movs	r3, #16
 800775e:	e7a7      	b.n	80076b0 <_printf_i+0xf8>
 8007760:	4824      	ldr	r0, [pc, #144]	; (80077f4 <_printf_i+0x23c>)
 8007762:	e7e4      	b.n	800772e <_printf_i+0x176>
 8007764:	4615      	mov	r5, r2
 8007766:	e7bd      	b.n	80076e4 <_printf_i+0x12c>
 8007768:	682b      	ldr	r3, [r5, #0]
 800776a:	6826      	ldr	r6, [r4, #0]
 800776c:	6961      	ldr	r1, [r4, #20]
 800776e:	1d18      	adds	r0, r3, #4
 8007770:	6028      	str	r0, [r5, #0]
 8007772:	0635      	lsls	r5, r6, #24
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	d501      	bpl.n	800777c <_printf_i+0x1c4>
 8007778:	6019      	str	r1, [r3, #0]
 800777a:	e002      	b.n	8007782 <_printf_i+0x1ca>
 800777c:	0670      	lsls	r0, r6, #25
 800777e:	d5fb      	bpl.n	8007778 <_printf_i+0x1c0>
 8007780:	8019      	strh	r1, [r3, #0]
 8007782:	2300      	movs	r3, #0
 8007784:	6123      	str	r3, [r4, #16]
 8007786:	4615      	mov	r5, r2
 8007788:	e7bc      	b.n	8007704 <_printf_i+0x14c>
 800778a:	682b      	ldr	r3, [r5, #0]
 800778c:	1d1a      	adds	r2, r3, #4
 800778e:	602a      	str	r2, [r5, #0]
 8007790:	681d      	ldr	r5, [r3, #0]
 8007792:	6862      	ldr	r2, [r4, #4]
 8007794:	2100      	movs	r1, #0
 8007796:	4628      	mov	r0, r5
 8007798:	f7f8 fd22 	bl	80001e0 <memchr>
 800779c:	b108      	cbz	r0, 80077a2 <_printf_i+0x1ea>
 800779e:	1b40      	subs	r0, r0, r5
 80077a0:	6060      	str	r0, [r4, #4]
 80077a2:	6863      	ldr	r3, [r4, #4]
 80077a4:	6123      	str	r3, [r4, #16]
 80077a6:	2300      	movs	r3, #0
 80077a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077ac:	e7aa      	b.n	8007704 <_printf_i+0x14c>
 80077ae:	6923      	ldr	r3, [r4, #16]
 80077b0:	462a      	mov	r2, r5
 80077b2:	4649      	mov	r1, r9
 80077b4:	4640      	mov	r0, r8
 80077b6:	47d0      	blx	sl
 80077b8:	3001      	adds	r0, #1
 80077ba:	d0ad      	beq.n	8007718 <_printf_i+0x160>
 80077bc:	6823      	ldr	r3, [r4, #0]
 80077be:	079b      	lsls	r3, r3, #30
 80077c0:	d413      	bmi.n	80077ea <_printf_i+0x232>
 80077c2:	68e0      	ldr	r0, [r4, #12]
 80077c4:	9b03      	ldr	r3, [sp, #12]
 80077c6:	4298      	cmp	r0, r3
 80077c8:	bfb8      	it	lt
 80077ca:	4618      	movlt	r0, r3
 80077cc:	e7a6      	b.n	800771c <_printf_i+0x164>
 80077ce:	2301      	movs	r3, #1
 80077d0:	4632      	mov	r2, r6
 80077d2:	4649      	mov	r1, r9
 80077d4:	4640      	mov	r0, r8
 80077d6:	47d0      	blx	sl
 80077d8:	3001      	adds	r0, #1
 80077da:	d09d      	beq.n	8007718 <_printf_i+0x160>
 80077dc:	3501      	adds	r5, #1
 80077de:	68e3      	ldr	r3, [r4, #12]
 80077e0:	9903      	ldr	r1, [sp, #12]
 80077e2:	1a5b      	subs	r3, r3, r1
 80077e4:	42ab      	cmp	r3, r5
 80077e6:	dcf2      	bgt.n	80077ce <_printf_i+0x216>
 80077e8:	e7eb      	b.n	80077c2 <_printf_i+0x20a>
 80077ea:	2500      	movs	r5, #0
 80077ec:	f104 0619 	add.w	r6, r4, #25
 80077f0:	e7f5      	b.n	80077de <_printf_i+0x226>
 80077f2:	bf00      	nop
 80077f4:	08007b2a 	.word	0x08007b2a
 80077f8:	08007b3b 	.word	0x08007b3b

080077fc <memmove>:
 80077fc:	4288      	cmp	r0, r1
 80077fe:	b510      	push	{r4, lr}
 8007800:	eb01 0402 	add.w	r4, r1, r2
 8007804:	d902      	bls.n	800780c <memmove+0x10>
 8007806:	4284      	cmp	r4, r0
 8007808:	4623      	mov	r3, r4
 800780a:	d807      	bhi.n	800781c <memmove+0x20>
 800780c:	1e43      	subs	r3, r0, #1
 800780e:	42a1      	cmp	r1, r4
 8007810:	d008      	beq.n	8007824 <memmove+0x28>
 8007812:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007816:	f803 2f01 	strb.w	r2, [r3, #1]!
 800781a:	e7f8      	b.n	800780e <memmove+0x12>
 800781c:	4402      	add	r2, r0
 800781e:	4601      	mov	r1, r0
 8007820:	428a      	cmp	r2, r1
 8007822:	d100      	bne.n	8007826 <memmove+0x2a>
 8007824:	bd10      	pop	{r4, pc}
 8007826:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800782a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800782e:	e7f7      	b.n	8007820 <memmove+0x24>

08007830 <_sbrk_r>:
 8007830:	b538      	push	{r3, r4, r5, lr}
 8007832:	4d06      	ldr	r5, [pc, #24]	; (800784c <_sbrk_r+0x1c>)
 8007834:	2300      	movs	r3, #0
 8007836:	4604      	mov	r4, r0
 8007838:	4608      	mov	r0, r1
 800783a:	602b      	str	r3, [r5, #0]
 800783c:	f7f9 fc9a 	bl	8001174 <_sbrk>
 8007840:	1c43      	adds	r3, r0, #1
 8007842:	d102      	bne.n	800784a <_sbrk_r+0x1a>
 8007844:	682b      	ldr	r3, [r5, #0]
 8007846:	b103      	cbz	r3, 800784a <_sbrk_r+0x1a>
 8007848:	6023      	str	r3, [r4, #0]
 800784a:	bd38      	pop	{r3, r4, r5, pc}
 800784c:	20004478 	.word	0x20004478

08007850 <_realloc_r>:
 8007850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007854:	4680      	mov	r8, r0
 8007856:	4614      	mov	r4, r2
 8007858:	460e      	mov	r6, r1
 800785a:	b921      	cbnz	r1, 8007866 <_realloc_r+0x16>
 800785c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007860:	4611      	mov	r1, r2
 8007862:	f7ff bc57 	b.w	8007114 <_malloc_r>
 8007866:	b92a      	cbnz	r2, 8007874 <_realloc_r+0x24>
 8007868:	f7ff fbe8 	bl	800703c <_free_r>
 800786c:	4625      	mov	r5, r4
 800786e:	4628      	mov	r0, r5
 8007870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007874:	f000 f81b 	bl	80078ae <_malloc_usable_size_r>
 8007878:	4284      	cmp	r4, r0
 800787a:	4607      	mov	r7, r0
 800787c:	d802      	bhi.n	8007884 <_realloc_r+0x34>
 800787e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007882:	d812      	bhi.n	80078aa <_realloc_r+0x5a>
 8007884:	4621      	mov	r1, r4
 8007886:	4640      	mov	r0, r8
 8007888:	f7ff fc44 	bl	8007114 <_malloc_r>
 800788c:	4605      	mov	r5, r0
 800788e:	2800      	cmp	r0, #0
 8007890:	d0ed      	beq.n	800786e <_realloc_r+0x1e>
 8007892:	42bc      	cmp	r4, r7
 8007894:	4622      	mov	r2, r4
 8007896:	4631      	mov	r1, r6
 8007898:	bf28      	it	cs
 800789a:	463a      	movcs	r2, r7
 800789c:	f7ff fbc0 	bl	8007020 <memcpy>
 80078a0:	4631      	mov	r1, r6
 80078a2:	4640      	mov	r0, r8
 80078a4:	f7ff fbca 	bl	800703c <_free_r>
 80078a8:	e7e1      	b.n	800786e <_realloc_r+0x1e>
 80078aa:	4635      	mov	r5, r6
 80078ac:	e7df      	b.n	800786e <_realloc_r+0x1e>

080078ae <_malloc_usable_size_r>:
 80078ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078b2:	1f18      	subs	r0, r3, #4
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	bfbc      	itt	lt
 80078b8:	580b      	ldrlt	r3, [r1, r0]
 80078ba:	18c0      	addlt	r0, r0, r3
 80078bc:	4770      	bx	lr
	...

080078c0 <_init>:
 80078c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078c2:	bf00      	nop
 80078c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078c6:	bc08      	pop	{r3}
 80078c8:	469e      	mov	lr, r3
 80078ca:	4770      	bx	lr

080078cc <_fini>:
 80078cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ce:	bf00      	nop
 80078d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078d2:	bc08      	pop	{r3}
 80078d4:	469e      	mov	lr, r3
 80078d6:	4770      	bx	lr
