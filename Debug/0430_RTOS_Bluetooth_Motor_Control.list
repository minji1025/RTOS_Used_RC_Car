
0430_RTOS_Bluetooth_Motor_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007478  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08007618  08007618  00017618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007860  08007860  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08007860  08007860  00017860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007868  08007868  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007868  08007868  00017868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800786c  0800786c  0001786c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000440c  20000060  080078d0  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000446c  080078d0  0002446c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018eba  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c94  00000000  00000000  00038f8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001688  00000000  00000000  0003cc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001175  00000000  00000000  0003e2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000054e5  00000000  00000000  0003f425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c74a  00000000  00000000  0004490a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099f73  00000000  00000000  00061054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000624c  00000000  00000000  000fafc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00101214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007600 	.word	0x08007600

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08007600 	.word	0x08007600

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <Que_init>:
 *      Author: kccistc
 */
#include "Queue.h"

void Que_init(Que_t *Que)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	Que->head = 0;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2200      	movs	r2, #0
 8000588:	669a      	str	r2, [r3, #104]	; 0x68
	Que->tail = 0;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2200      	movs	r2, #0
 800058e:	665a      	str	r2, [r3, #100]	; 0x64
	Que->QueCounter = 0;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2200      	movs	r2, #0
 8000594:	66da      	str	r2, [r3, #108]	; 0x6c
	Que->cmpltFlag = 0;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2200      	movs	r2, #0
 800059a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <setQueFlag>:

void setQueFlag(Que_t *Que, int flagState){
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
	Que->cmpltFlag = flagState;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	683a      	ldr	r2, [r7, #0]
 80005b6:	671a      	str	r2, [r3, #112]	; 0x70
}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <getQueFlag>:

int getQueFlag(Que_t *Que){
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	return Que->cmpltFlag;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <QueFull>:


int QueFull(Que_t *Que)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	//if(head == ((tail+1) % BUF_SIZE))
	if(Que->QueCounter == BUF_SIZE)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80005e8:	2b64      	cmp	r3, #100	; 0x64
 80005ea:	d101      	bne.n	80005f0 <QueFull+0x14>
		return 1;
 80005ec:	2301      	movs	r3, #1
 80005ee:	e000      	b.n	80005f2 <QueFull+0x16>
	else
		return 0;
 80005f0:	2300      	movs	r3, #0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <QueEmpty>:
int QueEmpty(Que_t *Que)
{
 80005fe:	b480      	push	{r7}
 8000600:	b083      	sub	sp, #12
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
	//if(head == tail)
	if(Que->QueCounter == 0)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800060a:	2b00      	cmp	r3, #0
 800060c:	d101      	bne.n	8000612 <QueEmpty+0x14>
		return 1;
 800060e:	2301      	movs	r3, #1
 8000610:	e000      	b.n	8000614 <QueEmpty+0x16>
	else
		return 0;
 8000612:	2300      	movs	r3, #0
}
 8000614:	4618      	mov	r0, r3
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr

08000620 <enQue>:

void enQue(Que_t *Que, uint8_t data)			// push(write)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	460b      	mov	r3, r1
 800062a:	70fb      	strb	r3, [r7, #3]
	if(QueFull(Que)) return;
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f7ff ffd5 	bl	80005dc <QueFull>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d119      	bne.n	800066c <enQue+0x4c>

	Que->QueBuff[Que->tail] = data;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	78f9      	ldrb	r1, [r7, #3]
 8000640:	54d1      	strb	r1, [r2, r3]
	Que->tail = (Que->tail+1) % BUF_SIZE;			// tail : 0~3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000646:	1c5a      	adds	r2, r3, #1
 8000648:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <enQue+0x54>)
 800064a:	fb83 1302 	smull	r1, r3, r3, r2
 800064e:	1159      	asrs	r1, r3, #5
 8000650:	17d3      	asrs	r3, r2, #31
 8000652:	1acb      	subs	r3, r1, r3
 8000654:	2164      	movs	r1, #100	; 0x64
 8000656:	fb01 f303 	mul.w	r3, r1, r3
 800065a:	1ad3      	subs	r3, r2, r3
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	6653      	str	r3, [r2, #100]	; 0x64
	Que->QueCounter++;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000664:	1c5a      	adds	r2, r3, #1
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	66da      	str	r2, [r3, #108]	; 0x6c
 800066a:	e000      	b.n	800066e <enQue+0x4e>
	if(QueFull(Que)) return;
 800066c:	bf00      	nop
}
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	51eb851f 	.word	0x51eb851f

08000678 <deQue>:

uint8_t deQue(Que_t *Que)			// pop(read)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	if(QueEmpty(Que)) return -1;
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f7ff ffbc 	bl	80005fe <QueEmpty>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <deQue+0x18>
 800068c:	23ff      	movs	r3, #255	; 0xff
 800068e:	e019      	b.n	80006c4 <deQue+0x4c>

	uint8_t temp = Que->QueBuff[Que->head];
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	5cd3      	ldrb	r3, [r2, r3]
 8000698:	73fb      	strb	r3, [r7, #15]
	Que->head = (Que->head+1) % BUF_SIZE;			// head : 0~3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800069e:	1c5a      	adds	r2, r3, #1
 80006a0:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <deQue+0x54>)
 80006a2:	fb83 1302 	smull	r1, r3, r3, r2
 80006a6:	1159      	asrs	r1, r3, #5
 80006a8:	17d3      	asrs	r3, r2, #31
 80006aa:	1acb      	subs	r3, r1, r3
 80006ac:	2164      	movs	r1, #100	; 0x64
 80006ae:	fb01 f303 	mul.w	r3, r1, r3
 80006b2:	1ad3      	subs	r3, r2, r3
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	6693      	str	r3, [r2, #104]	; 0x68
	Que->QueCounter--;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80006bc:	1e5a      	subs	r2, r3, #1
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	66da      	str	r2, [r3, #108]	; 0x6c

	return temp;
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	51eb851f 	.word	0x51eb851f

080006d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	4a07      	ldr	r2, [pc, #28]	; (80006fc <vApplicationGetIdleTaskMemory+0x2c>)
 80006e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	4a06      	ldr	r2, [pc, #24]	; (8000700 <vApplicationGetIdleTaskMemory+0x30>)
 80006e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2280      	movs	r2, #128	; 0x80
 80006ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006ee:	bf00      	nop
 80006f0:	3714      	adds	r7, #20
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	2000007c 	.word	0x2000007c
 8000700:	2000011c 	.word	0x2000011c

08000704 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t uart1RxData,uart2RxData;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a15      	ldr	r2, [pc, #84]	; (8000768 <HAL_UART_RxCpltCallback+0x64>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d10f      	bne.n	8000736 <HAL_UART_RxCpltCallback+0x32>
		Listener_ISR_Process(uart1RxData);
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <HAL_UART_RxCpltCallback+0x68>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	4618      	mov	r0, r3
 800071c:	f000 fe0d 	bl	800133a <Listener_ISR_Process>
		HAL_UART_Transmit(&huart1, &uart1RxData, 1, 100);
 8000720:	2364      	movs	r3, #100	; 0x64
 8000722:	2201      	movs	r2, #1
 8000724:	4911      	ldr	r1, [pc, #68]	; (800076c <HAL_UART_RxCpltCallback+0x68>)
 8000726:	4812      	ldr	r0, [pc, #72]	; (8000770 <HAL_UART_RxCpltCallback+0x6c>)
 8000728:	f003 ff5e 	bl	80045e8 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart1, &uart1RxData, 1);
 800072c:	2201      	movs	r2, #1
 800072e:	490f      	ldr	r1, [pc, #60]	; (800076c <HAL_UART_RxCpltCallback+0x68>)
 8000730:	480f      	ldr	r0, [pc, #60]	; (8000770 <HAL_UART_RxCpltCallback+0x6c>)
 8000732:	f003 ffe4 	bl	80046fe <HAL_UART_Receive_IT>
	}
	if (huart->Instance == USART2) {
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a0e      	ldr	r2, [pc, #56]	; (8000774 <HAL_UART_RxCpltCallback+0x70>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d10f      	bne.n	8000760 <HAL_UART_RxCpltCallback+0x5c>
		Listener_ISR_Process(uart2RxData);
 8000740:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <HAL_UART_RxCpltCallback+0x74>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	4618      	mov	r0, r3
 8000746:	f000 fdf8 	bl	800133a <Listener_ISR_Process>
		HAL_UART_Transmit(&huart2, &uart2RxData, 1, 100);
 800074a:	2364      	movs	r3, #100	; 0x64
 800074c:	2201      	movs	r2, #1
 800074e:	490a      	ldr	r1, [pc, #40]	; (8000778 <HAL_UART_RxCpltCallback+0x74>)
 8000750:	480a      	ldr	r0, [pc, #40]	; (800077c <HAL_UART_RxCpltCallback+0x78>)
 8000752:	f003 ff49 	bl	80045e8 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &uart2RxData, 1);
 8000756:	2201      	movs	r2, #1
 8000758:	4907      	ldr	r1, [pc, #28]	; (8000778 <HAL_UART_RxCpltCallback+0x74>)
 800075a:	4808      	ldr	r0, [pc, #32]	; (800077c <HAL_UART_RxCpltCallback+0x78>)
 800075c:	f003 ffcf 	bl	80046fe <HAL_UART_Receive_IT>
	}
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40011000 	.word	0x40011000
 800076c:	20000458 	.word	0x20000458
 8000770:	200003b8 	.word	0x200003b8
 8000774:	40004400 	.word	0x40004400
 8000778:	20000459 	.word	0x20000459
 800077c:	20000400 	.word	0x20000400

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b5b0      	push	{r4, r5, r7, lr}
 8000782:	b09c      	sub	sp, #112	; 0x70
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000786:	f001 f9c9 	bl	8001b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078a:	f000 f87f 	bl	800088c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078e:	f000 f9e9 	bl	8000b64 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000792:	f000 f9bd 	bl	8000b10 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000796:	f000 f8e1 	bl	800095c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800079a:	f000 f98f 	bl	8000abc <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800079e:	f000 f90b 	bl	80009b8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	LCD_init(&hi2c1);
 80007a2:	482d      	ldr	r0, [pc, #180]	; (8000858 <main+0xd8>)
 80007a4:	f000 ff88 	bl	80016b8 <LCD_init>
	HAL_UART_Receive_IT(&huart2, &uart2RxData, 1);
 80007a8:	2201      	movs	r2, #1
 80007aa:	492c      	ldr	r1, [pc, #176]	; (800085c <main+0xdc>)
 80007ac:	482c      	ldr	r0, [pc, #176]	; (8000860 <main+0xe0>)
 80007ae:	f003 ffa6 	bl	80046fe <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart1, &uart1RxData, 1);
 80007b2:	2201      	movs	r2, #1
 80007b4:	492b      	ldr	r1, [pc, #172]	; (8000864 <main+0xe4>)
 80007b6:	482c      	ldr	r0, [pc, #176]	; (8000868 <main+0xe8>)
 80007b8:	f003 ffa1 	bl	80046fe <HAL_UART_Receive_IT>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80007bc:	4b2b      	ldr	r3, [pc, #172]	; (800086c <main+0xec>)
 80007be:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80007c2:	461d      	mov	r5, r3
 80007c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f004 ff2b 	bl	8005632 <osThreadCreate>
 80007dc:	4603      	mov	r3, r0
 80007de:	4a24      	ldr	r2, [pc, #144]	; (8000870 <main+0xf0>)
 80007e0:	6013      	str	r3, [r2, #0]

  /* definition and creation of listenerTask */
  osThreadDef(listenerTask, ListenerTask, osPriorityNormal, 0, 128);
 80007e2:	4b24      	ldr	r3, [pc, #144]	; (8000874 <main+0xf4>)
 80007e4:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80007e8:	461d      	mov	r5, r3
 80007ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  listenerTaskHandle = osThreadCreate(osThread(listenerTask), NULL);
 80007f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007fa:	2100      	movs	r1, #0
 80007fc:	4618      	mov	r0, r3
 80007fe:	f004 ff18 	bl	8005632 <osThreadCreate>
 8000802:	4603      	mov	r3, r0
 8000804:	4a1c      	ldr	r2, [pc, #112]	; (8000878 <main+0xf8>)
 8000806:	6013      	str	r3, [r2, #0]

  /* definition and creation of controllerTask */
  osThreadDef(controllerTask, ControllerTask, osPriorityNormal, 0, 128);
 8000808:	4b1c      	ldr	r3, [pc, #112]	; (800087c <main+0xfc>)
 800080a:	f107 041c 	add.w	r4, r7, #28
 800080e:	461d      	mov	r5, r3
 8000810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000814:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000818:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controllerTaskHandle = osThreadCreate(osThread(controllerTask), NULL);
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f004 ff05 	bl	8005632 <osThreadCreate>
 8000828:	4603      	mov	r3, r0
 800082a:	4a15      	ldr	r2, [pc, #84]	; (8000880 <main+0x100>)
 800082c:	6013      	str	r3, [r2, #0]

  /* definition and creation of presenterTask */
  osThreadDef(presenterTask, PresenterTask, osPriorityNormal, 0, 128);
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <main+0x104>)
 8000830:	463c      	mov	r4, r7
 8000832:	461d      	mov	r5, r3
 8000834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000838:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800083c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  presenterTaskHandle = osThreadCreate(osThread(presenterTask), NULL);
 8000840:	463b      	mov	r3, r7
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f004 fef4 	bl	8005632 <osThreadCreate>
 800084a:	4603      	mov	r3, r0
 800084c:	4a0e      	ldr	r2, [pc, #56]	; (8000888 <main+0x108>)
 800084e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000850:	f004 fee8 	bl	8005624 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000854:	e7fe      	b.n	8000854 <main+0xd4>
 8000856:	bf00      	nop
 8000858:	2000031c 	.word	0x2000031c
 800085c:	20000459 	.word	0x20000459
 8000860:	20000400 	.word	0x20000400
 8000864:	20000458 	.word	0x20000458
 8000868:	200003b8 	.word	0x200003b8
 800086c:	08007624 	.word	0x08007624
 8000870:	20000448 	.word	0x20000448
 8000874:	08007650 	.word	0x08007650
 8000878:	2000044c 	.word	0x2000044c
 800087c:	0800767c 	.word	0x0800767c
 8000880:	20000450 	.word	0x20000450
 8000884:	080076a8 	.word	0x080076a8
 8000888:	20000454 	.word	0x20000454

0800088c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b094      	sub	sp, #80	; 0x50
 8000890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000892:	f107 0320 	add.w	r3, r7, #32
 8000896:	2230      	movs	r2, #48	; 0x30
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f006 f9d6 	bl	8006c4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b0:	2300      	movs	r3, #0
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	4b27      	ldr	r3, [pc, #156]	; (8000954 <SystemClock_Config+0xc8>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b8:	4a26      	ldr	r2, [pc, #152]	; (8000954 <SystemClock_Config+0xc8>)
 80008ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008be:	6413      	str	r3, [r2, #64]	; 0x40
 80008c0:	4b24      	ldr	r3, [pc, #144]	; (8000954 <SystemClock_Config+0xc8>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008cc:	2300      	movs	r3, #0
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	4b21      	ldr	r3, [pc, #132]	; (8000958 <SystemClock_Config+0xcc>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a20      	ldr	r2, [pc, #128]	; (8000958 <SystemClock_Config+0xcc>)
 80008d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008da:	6013      	str	r3, [r2, #0]
 80008dc:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <SystemClock_Config+0xcc>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e8:	2301      	movs	r3, #1
 80008ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f2:	2302      	movs	r3, #2
 80008f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008fc:	2304      	movs	r3, #4
 80008fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000900:	2364      	movs	r3, #100	; 0x64
 8000902:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000904:	2302      	movs	r3, #2
 8000906:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000908:	2304      	movs	r3, #4
 800090a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090c:	f107 0320 	add.w	r3, r7, #32
 8000910:	4618      	mov	r0, r3
 8000912:	f002 f933 	bl	8002b7c <HAL_RCC_OscConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800091c:	f000 f9f0 	bl	8000d00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000920:	230f      	movs	r3, #15
 8000922:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000924:	2302      	movs	r3, #2
 8000926:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800092c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000930:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000936:	f107 030c 	add.w	r3, r7, #12
 800093a:	2103      	movs	r1, #3
 800093c:	4618      	mov	r0, r3
 800093e:	f002 fb95 	bl	800306c <HAL_RCC_ClockConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000948:	f000 f9da 	bl	8000d00 <Error_Handler>
  }
}
 800094c:	bf00      	nop
 800094e:	3750      	adds	r7, #80	; 0x50
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40023800 	.word	0x40023800
 8000958:	40007000 	.word	0x40007000

0800095c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <MX_I2C1_Init+0x50>)
 8000962:	4a13      	ldr	r2, [pc, #76]	; (80009b0 <MX_I2C1_Init+0x54>)
 8000964:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <MX_I2C1_Init+0x50>)
 8000968:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <MX_I2C1_Init+0x58>)
 800096a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <MX_I2C1_Init+0x50>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_I2C1_Init+0x50>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_I2C1_Init+0x50>)
 800097a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800097e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000980:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <MX_I2C1_Init+0x50>)
 8000982:	2200      	movs	r2, #0
 8000984:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_I2C1_Init+0x50>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800098c:	4b07      	ldr	r3, [pc, #28]	; (80009ac <MX_I2C1_Init+0x50>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <MX_I2C1_Init+0x50>)
 8000994:	2200      	movs	r2, #0
 8000996:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <MX_I2C1_Init+0x50>)
 800099a:	f001 fc51 	bl	8002240 <HAL_I2C_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009a4:	f000 f9ac 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	2000031c 	.word	0x2000031c
 80009b0:	40005400 	.word	0x40005400
 80009b4:	000186a0 	.word	0x000186a0

080009b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08e      	sub	sp, #56	; 0x38
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009cc:	f107 0320 	add.w	r3, r7, #32
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
 80009e4:	615a      	str	r2, [r3, #20]
 80009e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009e8:	4b32      	ldr	r3, [pc, #200]	; (8000ab4 <MX_TIM3_Init+0xfc>)
 80009ea:	4a33      	ldr	r2, [pc, #204]	; (8000ab8 <MX_TIM3_Init+0x100>)
 80009ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 80009ee:	4b31      	ldr	r3, [pc, #196]	; (8000ab4 <MX_TIM3_Init+0xfc>)
 80009f0:	2263      	movs	r2, #99	; 0x63
 80009f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f4:	4b2f      	ldr	r3, [pc, #188]	; (8000ab4 <MX_TIM3_Init+0xfc>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80009fa:	4b2e      	ldr	r3, [pc, #184]	; (8000ab4 <MX_TIM3_Init+0xfc>)
 80009fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a02:	4b2c      	ldr	r3, [pc, #176]	; (8000ab4 <MX_TIM3_Init+0xfc>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a08:	4b2a      	ldr	r3, [pc, #168]	; (8000ab4 <MX_TIM3_Init+0xfc>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a0e:	4829      	ldr	r0, [pc, #164]	; (8000ab4 <MX_TIM3_Init+0xfc>)
 8000a10:	f002 fd7e 	bl	8003510 <HAL_TIM_Base_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000a1a:	f000 f971 	bl	8000d00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a22:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4822      	ldr	r0, [pc, #136]	; (8000ab4 <MX_TIM3_Init+0xfc>)
 8000a2c:	f003 f942 	bl	8003cb4 <HAL_TIM_ConfigClockSource>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000a36:	f000 f963 	bl	8000d00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a3a:	481e      	ldr	r0, [pc, #120]	; (8000ab4 <MX_TIM3_Init+0xfc>)
 8000a3c:	f002 fe1a 	bl	8003674 <HAL_TIM_PWM_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000a46:	f000 f95b 	bl	8000d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a52:	f107 0320 	add.w	r3, r7, #32
 8000a56:	4619      	mov	r1, r3
 8000a58:	4816      	ldr	r0, [pc, #88]	; (8000ab4 <MX_TIM3_Init+0xfc>)
 8000a5a:	f003 fcf3 	bl	8004444 <HAL_TIMEx_MasterConfigSynchronization>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000a64:	f000 f94c 	bl	8000d00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a68:	2360      	movs	r3, #96	; 0x60
 8000a6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <MX_TIM3_Init+0xfc>)
 8000a80:	f003 f856 	bl	8003b30 <HAL_TIM_PWM_ConfigChannel>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000a8a:	f000 f939 	bl	8000d00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2204      	movs	r2, #4
 8000a92:	4619      	mov	r1, r3
 8000a94:	4807      	ldr	r0, [pc, #28]	; (8000ab4 <MX_TIM3_Init+0xfc>)
 8000a96:	f003 f84b 	bl	8003b30 <HAL_TIM_PWM_ConfigChannel>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000aa0:	f000 f92e 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000aa4:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <MX_TIM3_Init+0xfc>)
 8000aa6:	f000 f9c7 	bl	8000e38 <HAL_TIM_MspPostInit>

}
 8000aaa:	bf00      	nop
 8000aac:	3738      	adds	r7, #56	; 0x38
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000370 	.word	0x20000370
 8000ab8:	40000400 	.word	0x40000400

08000abc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000ac2:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <MX_USART1_UART_Init+0x50>)
 8000ac4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000ac8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000acc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000af4:	f003 fd28 	bl	8004548 <HAL_UART_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000afe:	f000 f8ff 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	200003b8 	.word	0x200003b8
 8000b0c:	40011000 	.word	0x40011000

08000b10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b16:	4a12      	ldr	r2, [pc, #72]	; (8000b60 <MX_USART2_UART_Init+0x50>)
 8000b18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b36:	220c      	movs	r2, #12
 8000b38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b48:	f003 fcfe 	bl	8004548 <HAL_UART_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b52:	f000 f8d5 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000400 	.word	0x20000400
 8000b60:	40004400 	.word	0x40004400

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
 8000b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	4b3b      	ldr	r3, [pc, #236]	; (8000c6c <MX_GPIO_Init+0x108>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a3a      	ldr	r2, [pc, #232]	; (8000c6c <MX_GPIO_Init+0x108>)
 8000b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b38      	ldr	r3, [pc, #224]	; (8000c6c <MX_GPIO_Init+0x108>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b34      	ldr	r3, [pc, #208]	; (8000c6c <MX_GPIO_Init+0x108>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a33      	ldr	r2, [pc, #204]	; (8000c6c <MX_GPIO_Init+0x108>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b31      	ldr	r3, [pc, #196]	; (8000c6c <MX_GPIO_Init+0x108>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <MX_GPIO_Init+0x108>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a2c      	ldr	r2, [pc, #176]	; (8000c6c <MX_GPIO_Init+0x108>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b2a      	ldr	r3, [pc, #168]	; (8000c6c <MX_GPIO_Init+0x108>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	4b26      	ldr	r3, [pc, #152]	; (8000c6c <MX_GPIO_Init+0x108>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a25      	ldr	r2, [pc, #148]	; (8000c6c <MX_GPIO_Init+0x108>)
 8000bd8:	f043 0304 	orr.w	r3, r3, #4
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <MX_GPIO_Init+0x108>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0304 	and.w	r3, r3, #4
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000bf0:	481f      	ldr	r0, [pc, #124]	; (8000c70 <MX_GPIO_Init+0x10c>)
 8000bf2:	f001 faf1 	bl	80021d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bfc:	481d      	ldr	r0, [pc, #116]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000bfe:	f001 faeb 	bl	80021d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2180      	movs	r1, #128	; 0x80
 8000c06:	481c      	ldr	r0, [pc, #112]	; (8000c78 <MX_GPIO_Init+0x114>)
 8000c08:	f001 fae6 	bl	80021d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8000c0c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	4812      	ldr	r0, [pc, #72]	; (8000c70 <MX_GPIO_Init+0x10c>)
 8000c26:	f001 f953 	bl	8001ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	480c      	ldr	r0, [pc, #48]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000c44:	f001 f944 	bl	8001ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c48:	2380      	movs	r3, #128	; 0x80
 8000c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4806      	ldr	r0, [pc, #24]	; (8000c78 <MX_GPIO_Init+0x114>)
 8000c60:	f001 f936 	bl	8001ed0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c64:	bf00      	nop
 8000c66:	3728      	adds	r7, #40	; 0x28
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020000 	.word	0x40020000
 8000c74:	40020400 	.word	0x40020400
 8000c78:	40020800 	.word	0x40020800

08000c7c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000c84:	2120      	movs	r1, #32
 8000c86:	4804      	ldr	r0, [pc, #16]	; (8000c98 <StartDefaultTask+0x1c>)
 8000c88:	f001 fabf 	bl	800220a <HAL_GPIO_TogglePin>
		osDelay(500);
 8000c8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c90:	f004 fd1b 	bl	80056ca <osDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000c94:	e7f6      	b.n	8000c84 <StartDefaultTask+0x8>
 8000c96:	bf00      	nop
 8000c98:	40020000 	.word	0x40020000

08000c9c <ListenerTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ListenerTask */
void ListenerTask(void const * argument)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ListenerTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f004 fd10 	bl	80056ca <osDelay>
 8000caa:	e7fb      	b.n	8000ca4 <ListenerTask+0x8>

08000cac <ControllerTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ControllerTask */
void ControllerTask(void const * argument)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ControllerTask */
	Controller_init();
 8000cb4:	f000 fabd 	bl	8001232 <Controller_init>
	/* Infinite loop */
	for (;;) {
		Controller_excuteTask();
 8000cb8:	f000 fac3 	bl	8001242 <Controller_excuteTask>
		osDelay(1);
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	f004 fd04 	bl	80056ca <osDelay>
		Controller_excuteTask();
 8000cc2:	e7f9      	b.n	8000cb8 <ControllerTask+0xc>

08000cc4 <PresenterTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_PresenterTask */
void PresenterTask(void const * argument)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PresenterTask */
	Presenter_Init();
 8000ccc:	f000 fbe6 	bl	800149c <Presenter_Init>
	/* Infinite loop */
	for (;;) {
		Presenter_excuteTask();
 8000cd0:	f000 fc1c 	bl	800150c <Presenter_excuteTask>
		osDelay(1);
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f004 fcf8 	bl	80056ca <osDelay>
		Presenter_excuteTask();
 8000cda:	e7f9      	b.n	8000cd0 <PresenterTask+0xc>

08000cdc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d101      	bne.n	8000cf2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cee:	f000 ff37 	bl	8001b60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40014800 	.word	0x40014800

08000d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d04:	b672      	cpsid	i
}
 8000d06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d08:	e7fe      	b.n	8000d08 <Error_Handler+0x8>
	...

08000d0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <HAL_MspInit+0x54>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	4a11      	ldr	r2, [pc, #68]	; (8000d60 <HAL_MspInit+0x54>)
 8000d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d20:	6453      	str	r3, [r2, #68]	; 0x44
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <HAL_MspInit+0x54>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	603b      	str	r3, [r7, #0]
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <HAL_MspInit+0x54>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <HAL_MspInit+0x54>)
 8000d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <HAL_MspInit+0x54>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	210f      	movs	r1, #15
 8000d4e:	f06f 0001 	mvn.w	r0, #1
 8000d52:	f001 f801 	bl	8001d58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40023800 	.word	0x40023800

08000d64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	; 0x28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a19      	ldr	r2, [pc, #100]	; (8000de8 <HAL_I2C_MspInit+0x84>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d12c      	bne.n	8000de0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	4b18      	ldr	r3, [pc, #96]	; (8000dec <HAL_I2C_MspInit+0x88>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a17      	ldr	r2, [pc, #92]	; (8000dec <HAL_I2C_MspInit+0x88>)
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <HAL_I2C_MspInit+0x88>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000da2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da8:	2312      	movs	r3, #18
 8000daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db0:	2303      	movs	r3, #3
 8000db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000db4:	2304      	movs	r3, #4
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	480c      	ldr	r0, [pc, #48]	; (8000df0 <HAL_I2C_MspInit+0x8c>)
 8000dc0:	f001 f886 	bl	8001ed0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <HAL_I2C_MspInit+0x88>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	4a07      	ldr	r2, [pc, #28]	; (8000dec <HAL_I2C_MspInit+0x88>)
 8000dce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <HAL_I2C_MspInit+0x88>)
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000de0:	bf00      	nop
 8000de2:	3728      	adds	r7, #40	; 0x28
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40005400 	.word	0x40005400
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020400 	.word	0x40020400

08000df4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <HAL_TIM_Base_MspInit+0x3c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d10d      	bne.n	8000e22 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <HAL_TIM_Base_MspInit+0x40>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	4a09      	ldr	r2, [pc, #36]	; (8000e34 <HAL_TIM_Base_MspInit+0x40>)
 8000e10:	f043 0302 	orr.w	r3, r3, #2
 8000e14:	6413      	str	r3, [r2, #64]	; 0x40
 8000e16:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <HAL_TIM_Base_MspInit+0x40>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e22:	bf00      	nop
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	40000400 	.word	0x40000400
 8000e34:	40023800 	.word	0x40023800

08000e38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <HAL_TIM_MspPostInit+0x68>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d11d      	bne.n	8000e96 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <HAL_TIM_MspPostInit+0x6c>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a10      	ldr	r2, [pc, #64]	; (8000ea4 <HAL_TIM_MspPostInit+0x6c>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <HAL_TIM_MspPostInit+0x6c>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e76:	23c0      	movs	r3, #192	; 0xc0
 8000e78:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e86:	2302      	movs	r3, #2
 8000e88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8a:	f107 030c 	add.w	r3, r7, #12
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <HAL_TIM_MspPostInit+0x70>)
 8000e92:	f001 f81d 	bl	8001ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e96:	bf00      	nop
 8000e98:	3720      	adds	r7, #32
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40000400 	.word	0x40000400
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020000 	.word	0x40020000

08000eac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08c      	sub	sp, #48	; 0x30
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 031c 	add.w	r3, r7, #28
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a49      	ldr	r2, [pc, #292]	; (8000ff0 <HAL_UART_MspInit+0x144>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d153      	bne.n	8000f76 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61bb      	str	r3, [r7, #24]
 8000ed2:	4b48      	ldr	r3, [pc, #288]	; (8000ff4 <HAL_UART_MspInit+0x148>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	4a47      	ldr	r2, [pc, #284]	; (8000ff4 <HAL_UART_MspInit+0x148>)
 8000ed8:	f043 0310 	orr.w	r3, r3, #16
 8000edc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ede:	4b45      	ldr	r3, [pc, #276]	; (8000ff4 <HAL_UART_MspInit+0x148>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	f003 0310 	and.w	r3, r3, #16
 8000ee6:	61bb      	str	r3, [r7, #24]
 8000ee8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	4b41      	ldr	r3, [pc, #260]	; (8000ff4 <HAL_UART_MspInit+0x148>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a40      	ldr	r2, [pc, #256]	; (8000ff4 <HAL_UART_MspInit+0x148>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b3e      	ldr	r3, [pc, #248]	; (8000ff4 <HAL_UART_MspInit+0x148>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	4b3a      	ldr	r3, [pc, #232]	; (8000ff4 <HAL_UART_MspInit+0x148>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a39      	ldr	r2, [pc, #228]	; (8000ff4 <HAL_UART_MspInit+0x148>)
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b37      	ldr	r3, [pc, #220]	; (8000ff4 <HAL_UART_MspInit+0x148>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f30:	2303      	movs	r3, #3
 8000f32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f34:	2307      	movs	r3, #7
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f38:	f107 031c 	add.w	r3, r7, #28
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	482e      	ldr	r0, [pc, #184]	; (8000ff8 <HAL_UART_MspInit+0x14c>)
 8000f40:	f000 ffc6 	bl	8001ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f44:	2340      	movs	r3, #64	; 0x40
 8000f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f50:	2303      	movs	r3, #3
 8000f52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f54:	2307      	movs	r3, #7
 8000f56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f58:	f107 031c 	add.w	r3, r7, #28
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4827      	ldr	r0, [pc, #156]	; (8000ffc <HAL_UART_MspInit+0x150>)
 8000f60:	f000 ffb6 	bl	8001ed0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2105      	movs	r1, #5
 8000f68:	2025      	movs	r0, #37	; 0x25
 8000f6a:	f000 fef5 	bl	8001d58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f6e:	2025      	movs	r0, #37	; 0x25
 8000f70:	f000 ff0e 	bl	8001d90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f74:	e038      	b.n	8000fe8 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a21      	ldr	r2, [pc, #132]	; (8001000 <HAL_UART_MspInit+0x154>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d133      	bne.n	8000fe8 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <HAL_UART_MspInit+0x148>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	4a1a      	ldr	r2, [pc, #104]	; (8000ff4 <HAL_UART_MspInit+0x148>)
 8000f8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f90:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <HAL_UART_MspInit+0x148>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <HAL_UART_MspInit+0x148>)
 8000fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa4:	4a13      	ldr	r2, [pc, #76]	; (8000ff4 <HAL_UART_MspInit+0x148>)
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	6313      	str	r3, [r2, #48]	; 0x30
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <HAL_UART_MspInit+0x148>)
 8000fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fb8:	230c      	movs	r3, #12
 8000fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fc8:	2307      	movs	r3, #7
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fcc:	f107 031c 	add.w	r3, r7, #28
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4809      	ldr	r0, [pc, #36]	; (8000ff8 <HAL_UART_MspInit+0x14c>)
 8000fd4:	f000 ff7c 	bl	8001ed0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2105      	movs	r1, #5
 8000fdc:	2026      	movs	r0, #38	; 0x26
 8000fde:	f000 febb 	bl	8001d58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fe2:	2026      	movs	r0, #38	; 0x26
 8000fe4:	f000 fed4 	bl	8001d90 <HAL_NVIC_EnableIRQ>
}
 8000fe8:	bf00      	nop
 8000fea:	3730      	adds	r7, #48	; 0x30
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40011000 	.word	0x40011000
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40020000 	.word	0x40020000
 8000ffc:	40020400 	.word	0x40020400
 8001000:	40004400 	.word	0x40004400

08001004 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08c      	sub	sp, #48	; 0x30
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800100c:	2300      	movs	r3, #0
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001014:	2300      	movs	r3, #0
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	4b2e      	ldr	r3, [pc, #184]	; (80010d4 <HAL_InitTick+0xd0>)
 800101a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101c:	4a2d      	ldr	r2, [pc, #180]	; (80010d4 <HAL_InitTick+0xd0>)
 800101e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001022:	6453      	str	r3, [r2, #68]	; 0x44
 8001024:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <HAL_InitTick+0xd0>)
 8001026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001028:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001030:	f107 020c 	add.w	r2, r7, #12
 8001034:	f107 0310 	add.w	r3, r7, #16
 8001038:	4611      	mov	r1, r2
 800103a:	4618      	mov	r0, r3
 800103c:	f002 fa36 	bl	80034ac <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001040:	f002 fa20 	bl	8003484 <HAL_RCC_GetPCLK2Freq>
 8001044:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001048:	4a23      	ldr	r2, [pc, #140]	; (80010d8 <HAL_InitTick+0xd4>)
 800104a:	fba2 2303 	umull	r2, r3, r2, r3
 800104e:	0c9b      	lsrs	r3, r3, #18
 8001050:	3b01      	subs	r3, #1
 8001052:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001054:	4b21      	ldr	r3, [pc, #132]	; (80010dc <HAL_InitTick+0xd8>)
 8001056:	4a22      	ldr	r2, [pc, #136]	; (80010e0 <HAL_InitTick+0xdc>)
 8001058:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800105a:	4b20      	ldr	r3, [pc, #128]	; (80010dc <HAL_InitTick+0xd8>)
 800105c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001060:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8001062:	4a1e      	ldr	r2, [pc, #120]	; (80010dc <HAL_InitTick+0xd8>)
 8001064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001066:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001068:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <HAL_InitTick+0xd8>)
 800106a:	2200      	movs	r2, #0
 800106c:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106e:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <HAL_InitTick+0xd8>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001074:	4b19      	ldr	r3, [pc, #100]	; (80010dc <HAL_InitTick+0xd8>)
 8001076:	2200      	movs	r2, #0
 8001078:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 800107a:	4818      	ldr	r0, [pc, #96]	; (80010dc <HAL_InitTick+0xd8>)
 800107c:	f002 fa48 	bl	8003510 <HAL_TIM_Base_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001086:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800108a:	2b00      	cmp	r3, #0
 800108c:	d11b      	bne.n	80010c6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 800108e:	4813      	ldr	r0, [pc, #76]	; (80010dc <HAL_InitTick+0xd8>)
 8001090:	f002 fa8e 	bl	80035b0 <HAL_TIM_Base_Start_IT>
 8001094:	4603      	mov	r3, r0
 8001096:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800109a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d111      	bne.n	80010c6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80010a2:	201a      	movs	r0, #26
 80010a4:	f000 fe74 	bl	8001d90 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b0f      	cmp	r3, #15
 80010ac:	d808      	bhi.n	80010c0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 80010ae:	2200      	movs	r2, #0
 80010b0:	6879      	ldr	r1, [r7, #4]
 80010b2:	201a      	movs	r0, #26
 80010b4:	f000 fe50 	bl	8001d58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010b8:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <HAL_InitTick+0xe0>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	e002      	b.n	80010c6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80010c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3730      	adds	r7, #48	; 0x30
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800
 80010d8:	431bde83 	.word	0x431bde83
 80010dc:	2000045c 	.word	0x2000045c
 80010e0:	40014800 	.word	0x40014800
 80010e4:	20000004 	.word	0x20000004

080010e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010ec:	e7fe      	b.n	80010ec <NMI_Handler+0x4>

080010ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <HardFault_Handler+0x4>

080010f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <MemManage_Handler+0x4>

080010fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <BusFault_Handler+0x4>

08001100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <UsageFault_Handler+0x4>

08001106 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001118:	4802      	ldr	r0, [pc, #8]	; (8001124 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800111a:	f002 fc19 	bl	8003950 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	2000045c 	.word	0x2000045c

08001128 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <USART1_IRQHandler+0x10>)
 800112e:	f003 fb0b 	bl	8004748 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200003b8 	.word	0x200003b8

0800113c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <USART2_IRQHandler+0x10>)
 8001142:	f003 fb01 	bl	8004748 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000400 	.word	0x20000400

08001150 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001158:	4a14      	ldr	r2, [pc, #80]	; (80011ac <_sbrk+0x5c>)
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <_sbrk+0x60>)
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001164:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <_sbrk+0x64>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d102      	bne.n	8001172 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <_sbrk+0x64>)
 800116e:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <_sbrk+0x68>)
 8001170:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <_sbrk+0x64>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	429a      	cmp	r2, r3
 800117e:	d207      	bcs.n	8001190 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001180:	f005 fdc2 	bl	8006d08 <__errno>
 8001184:	4603      	mov	r3, r0
 8001186:	220c      	movs	r2, #12
 8001188:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
 800118e:	e009      	b.n	80011a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <_sbrk+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <_sbrk+0x64>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <_sbrk+0x64>)
 80011a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011a2:	68fb      	ldr	r3, [r7, #12]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20020000 	.word	0x20020000
 80011b0:	00000400 	.word	0x00000400
 80011b4:	200004a4 	.word	0x200004a4
 80011b8:	20004470 	.word	0x20004470

080011bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <SystemInit+0x20>)
 80011c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011c6:	4a05      	ldr	r2, [pc, #20]	; (80011dc <SystemInit+0x20>)
 80011c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001218 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011e4:	f7ff ffea 	bl	80011bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011e8:	480c      	ldr	r0, [pc, #48]	; (800121c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ea:	490d      	ldr	r1, [pc, #52]	; (8001220 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011ec:	4a0d      	ldr	r2, [pc, #52]	; (8001224 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f0:	e002      	b.n	80011f8 <LoopCopyDataInit>

080011f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011f6:	3304      	adds	r3, #4

080011f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011fc:	d3f9      	bcc.n	80011f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011fe:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001200:	4c0a      	ldr	r4, [pc, #40]	; (800122c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001202:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001204:	e001      	b.n	800120a <LoopFillZerobss>

08001206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001208:	3204      	adds	r2, #4

0800120a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800120c:	d3fb      	bcc.n	8001206 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800120e:	f005 fd81 	bl	8006d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001212:	f7ff fab5 	bl	8000780 <main>
  bx  lr    
 8001216:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001218:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800121c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001220:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001224:	08007870 	.word	0x08007870
  ldr r2, =_sbss
 8001228:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800122c:	2000446c 	.word	0x2000446c

08001230 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001230:	e7fe      	b.n	8001230 <ADC_IRQHandler>

08001232 <Controller_init>:
 */

#include "Controller.h"
#include <stdlib.h>

void Controller_init(){
 8001232:	b580      	push	{r7, lr}
 8001234:	af00      	add	r7, sp, #0
	BT_init();
 8001236:	f000 f89b 	bl	8001370 <BT_init>
	MotorState_init();
 800123a:	f000 f8d5 	bl	80013e8 <MotorState_init>
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}

08001242 <Controller_excuteTask>:

void Controller_excuteTask() {
 8001242:	b580      	push	{r7, lr}
 8001244:	b084      	sub	sp, #16
 8001246:	af00      	add	r7, sp, #0
	int flag = BT_getFlag();
 8001248:	f000 f8c4 	bl	80013d4 <BT_getFlag>
 800124c:	60f8      	str	r0, [r7, #12]
	if (!flag) return;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00e      	beq.n	8001272 <Controller_excuteTask+0x30>

	uint8_t rxBuff[10];

	Controller_getData(rxBuff);
 8001254:	463b      	mov	r3, r7
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f80f 	bl	800127a <Controller_getData>
	Controller_parsingData(rxBuff);
 800125c:	463b      	mov	r3, r7
 800125e:	4618      	mov	r0, r3
 8001260:	f000 f828 	bl	80012b4 <Controller_parsingData>
	MotorState_setFlag(SET);
 8001264:	2001      	movs	r0, #1
 8001266:	f000 f901 	bl	800146c <MotorState_setFlag>
	BT_setFlag(RESET);
 800126a:	2000      	movs	r0, #0
 800126c:	f000 f8a4 	bl	80013b8 <BT_setFlag>
 8001270:	e000      	b.n	8001274 <Controller_excuteTask+0x32>
	if (!flag) return;
 8001272:	bf00      	nop
}
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <Controller_getData>:

void Controller_getData(uint8_t *Buff) {
 800127a:	b580      	push	{r7, lr}
 800127c:	b084      	sub	sp, #16
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
	uint8_t rxData = 1;
 8001282:	2301      	movs	r3, #1
 8001284:	73fb      	strb	r3, [r7, #15]

	for (int i = 0; rxData; i++) {
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	e00b      	b.n	80012a4 <Controller_getData+0x2a>
		rxData = BT_deQue();
 800128c:	f000 f88a 	bl	80013a4 <BT_deQue>
 8001290:	4603      	mov	r3, r0
 8001292:	73fb      	strb	r3, [r7, #15]
		Buff[i] = rxData;
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	7bfa      	ldrb	r2, [r7, #15]
 800129c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; rxData; i++) {
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	3301      	adds	r3, #1
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1f0      	bne.n	800128c <Controller_getData+0x12>
	}
}
 80012aa:	bf00      	nop
 80012ac:	bf00      	nop
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <Controller_parsingData>:

void Controller_parsingData(uint8_t *Buff) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	if (Buff[0] == 'g') {	//go
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b67      	cmp	r3, #103	; 0x67
 80012c2:	d103      	bne.n	80012cc <Controller_parsingData+0x18>
		MotorState_enQue(GO);
 80012c4:	2001      	movs	r0, #1
 80012c6:	f000 f8b7 	bl	8001438 <MotorState_enQue>
 80012ca:	e02f      	b.n	800132c <Controller_parsingData+0x78>
	}
	else if (Buff[0] == 'b') {	//back
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b62      	cmp	r3, #98	; 0x62
 80012d2:	d103      	bne.n	80012dc <Controller_parsingData+0x28>
		MotorState_enQue(BACK);
 80012d4:	2004      	movs	r0, #4
 80012d6:	f000 f8af 	bl	8001438 <MotorState_enQue>
 80012da:	e027      	b.n	800132c <Controller_parsingData+0x78>
	}
	else if (Buff[0] == 'l') {	//left
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b6c      	cmp	r3, #108	; 0x6c
 80012e2:	d103      	bne.n	80012ec <Controller_parsingData+0x38>
		MotorState_enQue(LEFT);
 80012e4:	2002      	movs	r0, #2
 80012e6:	f000 f8a7 	bl	8001438 <MotorState_enQue>
 80012ea:	e01f      	b.n	800132c <Controller_parsingData+0x78>
	}
	else if (Buff[0] == 'r') {	//right
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b72      	cmp	r3, #114	; 0x72
 80012f2:	d103      	bne.n	80012fc <Controller_parsingData+0x48>
		MotorState_enQue(RIGHT);
 80012f4:	2003      	movs	r0, #3
 80012f6:	f000 f89f 	bl	8001438 <MotorState_enQue>
 80012fa:	e017      	b.n	800132c <Controller_parsingData+0x78>
	}
	else if (Buff[0] == 's') {	//stop
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b73      	cmp	r3, #115	; 0x73
 8001302:	d103      	bne.n	800130c <Controller_parsingData+0x58>
		MotorState_enQue(STOP);
 8001304:	2000      	movs	r0, #0
 8001306:	f000 f897 	bl	8001438 <MotorState_enQue>
 800130a:	e00f      	b.n	800132c <Controller_parsingData+0x78>
	}
	else if (Buff[0] == 'p') {	//speed p98'0'
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b70      	cmp	r3, #112	; 0x70
 8001312:	d10b      	bne.n	800132c <Controller_parsingData+0x78>
		MotorState_enQue(SPEED);
 8001314:	2005      	movs	r0, #5
 8001316:	f000 f88f 	bl	8001438 <MotorState_enQue>
		int speed = atoi(&Buff[1]);	//해당 주소부터 숫자가 아닌 것까지 계산
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3301      	adds	r3, #1
 800131e:	4618      	mov	r0, r3
 8001320:	f005 fbe4 	bl	8006aec <atoi>
 8001324:	60f8      	str	r0, [r7, #12]
		MotorState_setSpeed(speed);
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f000 f86a 	bl	8001400 <MotorState_setSpeed>
	}
	MotorState_setFlag(SET);
 800132c:	2001      	movs	r0, #1
 800132e:	f000 f89d 	bl	800146c <MotorState_setFlag>
}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <Listener_ISR_Process>:
 *      Author: kccistc
 */

#include "Listener.h"

void Listener_ISR_Process(uint8_t rxData) {
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	71fb      	strb	r3, [r7, #7]
	if (rxData == ';') {
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	2b3b      	cmp	r3, #59	; 0x3b
 8001348:	d106      	bne.n	8001358 <Listener_ISR_Process+0x1e>
		BT_enQue('\0');
 800134a:	2000      	movs	r0, #0
 800134c:	f000 f81a 	bl	8001384 <BT_enQue>
		BT_setFlag(SET);
 8001350:	2001      	movs	r0, #1
 8001352:	f000 f831 	bl	80013b8 <BT_setFlag>
	} else {
		BT_enQue(rxData);
		BT_setFlag(RESET);
	}
}
 8001356:	e006      	b.n	8001366 <Listener_ISR_Process+0x2c>
		BT_enQue(rxData);
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	4618      	mov	r0, r3
 800135c:	f000 f812 	bl	8001384 <BT_enQue>
		BT_setFlag(RESET);
 8001360:	2000      	movs	r0, #0
 8001362:	f000 f829 	bl	80013b8 <BT_setFlag>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <BT_init>:
 */

#include "BT_dataQue.h"
Que_t BTQue;

void BT_init(){
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	Que_init(&BTQue);
 8001374:	4802      	ldr	r0, [pc, #8]	; (8001380 <BT_init+0x10>)
 8001376:	f7ff f901 	bl	800057c <Que_init>
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200004a8 	.word	0x200004a8

08001384 <BT_enQue>:

void BT_enQue(uint8_t rxData){
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
	enQue(&BTQue,rxData);
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	4619      	mov	r1, r3
 8001392:	4803      	ldr	r0, [pc, #12]	; (80013a0 <BT_enQue+0x1c>)
 8001394:	f7ff f944 	bl	8000620 <enQue>
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200004a8 	.word	0x200004a8

080013a4 <BT_deQue>:

uint8_t BT_deQue(){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	return deQue(&BTQue);
 80013a8:	4802      	ldr	r0, [pc, #8]	; (80013b4 <BT_deQue+0x10>)
 80013aa:	f7ff f965 	bl	8000678 <deQue>
 80013ae:	4603      	mov	r3, r0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200004a8 	.word	0x200004a8

080013b8 <BT_setFlag>:
void BT_setFlag(int flagState){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	setQueFlag(&BTQue, flagState);
 80013c0:	6879      	ldr	r1, [r7, #4]
 80013c2:	4803      	ldr	r0, [pc, #12]	; (80013d0 <BT_setFlag+0x18>)
 80013c4:	f7ff f8f0 	bl	80005a8 <setQueFlag>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	200004a8 	.word	0x200004a8

080013d4 <BT_getFlag>:

int BT_getFlag(){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	return getQueFlag(&BTQue);
 80013d8:	4802      	ldr	r0, [pc, #8]	; (80013e4 <BT_getFlag+0x10>)
 80013da:	f7ff f8f3 	bl	80005c4 <getQueFlag>
 80013de:	4603      	mov	r3, r0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	200004a8 	.word	0x200004a8

080013e8 <MotorState_init>:
	Que_t state;
	int speed;
}MotorState_t;
MotorState_t MotorStateQue;

void MotorState_init(){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
	Que_init(&MotorStateQue.state);
 80013ec:	4803      	ldr	r0, [pc, #12]	; (80013fc <MotorState_init+0x14>)
 80013ee:	f7ff f8c5 	bl	800057c <Que_init>
	MotorStateQue.speed = 0;
 80013f2:	4b02      	ldr	r3, [pc, #8]	; (80013fc <MotorState_init+0x14>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	2000051c 	.word	0x2000051c

08001400 <MotorState_setSpeed>:

void MotorState_setSpeed(int speed){
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	MotorStateQue.speed = speed;
 8001408:	4a04      	ldr	r2, [pc, #16]	; (800141c <MotorState_setSpeed+0x1c>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6753      	str	r3, [r2, #116]	; 0x74
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	2000051c 	.word	0x2000051c

08001420 <MotorState_getSpeed>:
int MotorState_getSpeed(){
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
	return MotorStateQue.speed;
 8001424:	4b03      	ldr	r3, [pc, #12]	; (8001434 <MotorState_getSpeed+0x14>)
 8001426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	2000051c 	.word	0x2000051c

08001438 <MotorState_enQue>:


void MotorState_enQue(uint8_t rxData){
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
	enQue(&MotorStateQue.state,rxData);
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	4619      	mov	r1, r3
 8001446:	4803      	ldr	r0, [pc, #12]	; (8001454 <MotorState_enQue+0x1c>)
 8001448:	f7ff f8ea 	bl	8000620 <enQue>
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2000051c 	.word	0x2000051c

08001458 <MotorState_deQue>:
uint8_t MotorState_deQue(){
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	return deQue(&MotorStateQue.state);
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <MotorState_deQue+0x10>)
 800145e:	f7ff f90b 	bl	8000678 <deQue>
 8001462:	4603      	mov	r3, r0
}
 8001464:	4618      	mov	r0, r3
 8001466:	bd80      	pop	{r7, pc}
 8001468:	2000051c 	.word	0x2000051c

0800146c <MotorState_setFlag>:

void MotorState_setFlag(int flagState){
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	setQueFlag(&MotorStateQue.state, flagState);
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	4803      	ldr	r0, [pc, #12]	; (8001484 <MotorState_setFlag+0x18>)
 8001478:	f7ff f896 	bl	80005a8 <setQueFlag>
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	2000051c 	.word	0x2000051c

08001488 <MotorState_getFlag>:
int MotorState_getFlag(){
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	return getQueFlag(&MotorStateQue.state);
 800148c:	4802      	ldr	r0, [pc, #8]	; (8001498 <MotorState_getFlag+0x10>)
 800148e:	f7ff f899 	bl	80005c4 <getQueFlag>
 8001492:	4603      	mov	r3, r0
}
 8001494:	4618      	mov	r0, r3
 8001496:	bd80      	pop	{r7, pc}
 8001498:	2000051c 	.word	0x2000051c

0800149c <Presenter_Init>:

#include "Presenter.h"
#include <stdio.h>
Motor_t leftMotor, rightMotor;

void Presenter_Init() {
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af04      	add	r7, sp, #16
	Motor_init(&leftMotor, &htim3, TIM_CHANNEL_1,
 80014a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014a6:	9302      	str	r3, [sp, #8]
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <Presenter_Init+0x58>)
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <Presenter_Init+0x5c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	4911      	ldr	r1, [pc, #68]	; (80014fc <Presenter_Init+0x60>)
 80014b6:	4812      	ldr	r0, [pc, #72]	; (8001500 <Presenter_Init+0x64>)
 80014b8:	f000 fa92 	bl	80019e0 <Motor_init>
	LEFT_DIR1_GPIO, LEFT_DIR1_GPIO_PIN, LEFT_DIR2_GPIO, LEFT_DIR2_GPIO_PIN);
	Motor_init(&rightMotor, &htim3, TIM_CHANNEL_2,
 80014bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014c0:	9302      	str	r3, [sp, #8]
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <Presenter_Init+0x58>)
 80014c4:	9301      	str	r3, [sp, #4]
 80014c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <Presenter_Init+0x68>)
 80014ce:	2204      	movs	r2, #4
 80014d0:	490a      	ldr	r1, [pc, #40]	; (80014fc <Presenter_Init+0x60>)
 80014d2:	480d      	ldr	r0, [pc, #52]	; (8001508 <Presenter_Init+0x6c>)
 80014d4:	f000 fa84 	bl	80019e0 <Motor_init>
	RIGHT_DIR1_GPIO, RIGHT_DIR1_GPIO_PIN, RIGHT_DIR2_GPIO, RIGHT_DIR2_GPIO_PIN);
	Motor_setSpeed(&leftMotor, 900);
 80014d8:	f44f 7161 	mov.w	r1, #900	; 0x384
 80014dc:	4808      	ldr	r0, [pc, #32]	; (8001500 <Presenter_Init+0x64>)
 80014de:	f000 faee 	bl	8001abe <Motor_setSpeed>
	Motor_setSpeed(&rightMotor, 900);
 80014e2:	f44f 7161 	mov.w	r1, #900	; 0x384
 80014e6:	4808      	ldr	r0, [pc, #32]	; (8001508 <Presenter_Init+0x6c>)
 80014e8:	f000 fae9 	bl	8001abe <Motor_setSpeed>
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40020000 	.word	0x40020000
 80014f8:	40020800 	.word	0x40020800
 80014fc:	20000370 	.word	0x20000370
 8001500:	20000594 	.word	0x20000594
 8001504:	40020400 	.word	0x40020400
 8001508:	200005ac 	.word	0x200005ac

0800150c <Presenter_excuteTask>:

void Presenter_excuteTask() {
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
	int MotorQueFlag;
	MotorQueFlag = MotorState_getFlag();
 8001512:	f7ff ffb9 	bl	8001488 <MotorState_getFlag>
 8001516:	6078      	str	r0, [r7, #4]

	if (!MotorQueFlag) return;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d005      	beq.n	800152a <Presenter_excuteTask+0x1e>

	Presenter_setState();
 800151e:	f000 f809 	bl	8001534 <Presenter_setState>
	MotorState_setFlag(RESET);
 8001522:	2000      	movs	r0, #0
 8001524:	f7ff ffa2 	bl	800146c <MotorState_setFlag>
 8001528:	e000      	b.n	800152c <Presenter_excuteTask+0x20>
	if (!MotorQueFlag) return;
 800152a:	bf00      	nop
}
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <Presenter_setState>:

void Presenter_setState() {
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
	uint8_t MotorState = MotorState_deQue();
 800153a:	f7ff ff8d 	bl	8001458 <MotorState_deQue>
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
	switch (MotorState) {
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	2b05      	cmp	r3, #5
 8001546:	d821      	bhi.n	800158c <Presenter_setState+0x58>
 8001548:	a201      	add	r2, pc, #4	; (adr r2, 8001550 <Presenter_setState+0x1c>)
 800154a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154e:	bf00      	nop
 8001550:	08001581 	.word	0x08001581
 8001554:	08001569 	.word	0x08001569
 8001558:	08001575 	.word	0x08001575
 800155c:	0800157b 	.word	0x0800157b
 8001560:	0800156f 	.word	0x0800156f
 8001564:	08001587 	.word	0x08001587
		case GO:
			Presenter_CarGo();
 8001568:	f000 f814 	bl	8001594 <Presenter_CarGo>
			break;
 800156c:	e00e      	b.n	800158c <Presenter_setState+0x58>
		case BACK:
			Presenter_CarBack();
 800156e:	f000 f869 	bl	8001644 <Presenter_CarBack>
			break;
 8001572:	e00b      	b.n	800158c <Presenter_setState+0x58>
		case LEFT:
			Presenter_CarLeft();
 8001574:	f000 f83a 	bl	80015ec <Presenter_CarLeft>
			break;
 8001578:	e008      	b.n	800158c <Presenter_setState+0x58>
		case RIGHT:
			Presenter_CarRight();
 800157a:	f000 f84d 	bl	8001618 <Presenter_CarRight>
			break;
 800157e:	e005      	b.n	800158c <Presenter_setState+0x58>
		case STOP:
			Presenter_CarStop();
 8001580:	f000 f81e 	bl	80015c0 <Presenter_CarStop>
			break;
 8001584:	e002      	b.n	800158c <Presenter_setState+0x58>
		case SPEED:
			Presenter_CarSpeed();
 8001586:	f000 f873 	bl	8001670 <Presenter_CarSpeed>
			break;
 800158a:	bf00      	nop
//		default: //Stop
//			Presenter_CarStop();
//			break;
	}
}
 800158c:	bf00      	nop
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <Presenter_CarGo>:
void Presenter_CarGo() {
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
	LCD_writeStringXY(0, 0, "Car Go!");
 8001598:	4a06      	ldr	r2, [pc, #24]	; (80015b4 <Presenter_CarGo+0x20>)
 800159a:	2100      	movs	r1, #0
 800159c:	2000      	movs	r0, #0
 800159e:	f000 fa0a 	bl	80019b6 <LCD_writeStringXY>
	Motor_forward(&leftMotor);
 80015a2:	4805      	ldr	r0, [pc, #20]	; (80015b8 <Presenter_CarGo+0x24>)
 80015a4:	f000 fa4b 	bl	8001a3e <Motor_forward>
	Motor_forward(&rightMotor);
 80015a8:	4804      	ldr	r0, [pc, #16]	; (80015bc <Presenter_CarGo+0x28>)
 80015aa:	f000 fa48 	bl	8001a3e <Motor_forward>
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	080076c4 	.word	0x080076c4
 80015b8:	20000594 	.word	0x20000594
 80015bc:	200005ac 	.word	0x200005ac

080015c0 <Presenter_CarStop>:
void Presenter_CarStop() {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
	LCD_writeStringXY(0, 0, "Car Stop!");
 80015c4:	4a06      	ldr	r2, [pc, #24]	; (80015e0 <Presenter_CarStop+0x20>)
 80015c6:	2100      	movs	r1, #0
 80015c8:	2000      	movs	r0, #0
 80015ca:	f000 f9f4 	bl	80019b6 <LCD_writeStringXY>
	Motor_stop(&leftMotor);
 80015ce:	4805      	ldr	r0, [pc, #20]	; (80015e4 <Presenter_CarStop+0x24>)
 80015d0:	f000 fa25 	bl	8001a1e <Motor_stop>
	Motor_stop(&rightMotor);
 80015d4:	4804      	ldr	r0, [pc, #16]	; (80015e8 <Presenter_CarStop+0x28>)
 80015d6:	f000 fa22 	bl	8001a1e <Motor_stop>
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	080076cc 	.word	0x080076cc
 80015e4:	20000594 	.word	0x20000594
 80015e8:	200005ac 	.word	0x200005ac

080015ec <Presenter_CarLeft>:
void Presenter_CarLeft() {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	LCD_writeStringXY(0, 0, "Car Left!");
 80015f0:	4a06      	ldr	r2, [pc, #24]	; (800160c <Presenter_CarLeft+0x20>)
 80015f2:	2100      	movs	r1, #0
 80015f4:	2000      	movs	r0, #0
 80015f6:	f000 f9de 	bl	80019b6 <LCD_writeStringXY>
	Motor_backward(&leftMotor);
 80015fa:	4805      	ldr	r0, [pc, #20]	; (8001610 <Presenter_CarLeft+0x24>)
 80015fc:	f000 fa3f 	bl	8001a7e <Motor_backward>
	Motor_forward(&rightMotor);
 8001600:	4804      	ldr	r0, [pc, #16]	; (8001614 <Presenter_CarLeft+0x28>)
 8001602:	f000 fa1c 	bl	8001a3e <Motor_forward>

}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	080076d8 	.word	0x080076d8
 8001610:	20000594 	.word	0x20000594
 8001614:	200005ac 	.word	0x200005ac

08001618 <Presenter_CarRight>:
void Presenter_CarRight() {
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
	LCD_writeStringXY(0, 0, "Car Right!");
 800161c:	4a06      	ldr	r2, [pc, #24]	; (8001638 <Presenter_CarRight+0x20>)
 800161e:	2100      	movs	r1, #0
 8001620:	2000      	movs	r0, #0
 8001622:	f000 f9c8 	bl	80019b6 <LCD_writeStringXY>
	Motor_backward(&rightMotor);
 8001626:	4805      	ldr	r0, [pc, #20]	; (800163c <Presenter_CarRight+0x24>)
 8001628:	f000 fa29 	bl	8001a7e <Motor_backward>
	Motor_forward(&leftMotor);
 800162c:	4804      	ldr	r0, [pc, #16]	; (8001640 <Presenter_CarRight+0x28>)
 800162e:	f000 fa06 	bl	8001a3e <Motor_forward>

}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	080076e4 	.word	0x080076e4
 800163c:	200005ac 	.word	0x200005ac
 8001640:	20000594 	.word	0x20000594

08001644 <Presenter_CarBack>:
void Presenter_CarBack() {
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	LCD_writeStringXY(0, 0, "Car Back!");
 8001648:	4a06      	ldr	r2, [pc, #24]	; (8001664 <Presenter_CarBack+0x20>)
 800164a:	2100      	movs	r1, #0
 800164c:	2000      	movs	r0, #0
 800164e:	f000 f9b2 	bl	80019b6 <LCD_writeStringXY>
	Motor_backward(&leftMotor);
 8001652:	4805      	ldr	r0, [pc, #20]	; (8001668 <Presenter_CarBack+0x24>)
 8001654:	f000 fa13 	bl	8001a7e <Motor_backward>
	Motor_backward(&rightMotor);
 8001658:	4804      	ldr	r0, [pc, #16]	; (800166c <Presenter_CarBack+0x28>)
 800165a:	f000 fa10 	bl	8001a7e <Motor_backward>

}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	080076f0 	.word	0x080076f0
 8001668:	20000594 	.word	0x20000594
 800166c:	200005ac 	.word	0x200005ac

08001670 <Presenter_CarSpeed>:
void Presenter_CarSpeed() {
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af00      	add	r7, sp, #0
	char buff[30];
	sprintf(buff, "Car Speed!:%d", MotorState_getSpeed());
 8001676:	f7ff fed3 	bl	8001420 <MotorState_getSpeed>
 800167a:	4602      	mov	r2, r0
 800167c:	463b      	mov	r3, r7
 800167e:	4907      	ldr	r1, [pc, #28]	; (800169c <Presenter_CarSpeed+0x2c>)
 8001680:	4618      	mov	r0, r3
 8001682:	f005 fac3 	bl	8006c0c <siprintf>
	LCD_writeStringXY(1, 0, buff);
 8001686:	463b      	mov	r3, r7
 8001688:	461a      	mov	r2, r3
 800168a:	2100      	movs	r1, #0
 800168c:	2001      	movs	r0, #1
 800168e:	f000 f992 	bl	80019b6 <LCD_writeStringXY>

}
 8001692:	bf00      	nop
 8001694:	3720      	adds	r7, #32
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	080076fc 	.word	0x080076fc

080016a0 <LCD_delay>:
#include "LCD.h"

I2C_HandleTypeDef *hLCDI2C;
uint8_t lcdData = 0;

void LCD_delay(uint32_t Delay){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	HAL_Delay(Delay);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 fa79 	bl	8001ba0 <HAL_Delay>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <LCD_init>:

void LCD_init(I2C_HandleTypeDef *hi2c1){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	hLCDI2C = hi2c1;
 80016c0:	4a18      	ldr	r2, [pc, #96]	; (8001724 <LCD_init+0x6c>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6013      	str	r3, [r2, #0]
	LCD_delay(15);
 80016c6:	200f      	movs	r0, #15
 80016c8:	f7ff ffea 	bl	80016a0 <LCD_delay>
	LCD_cmdMode();
 80016cc:	f000 f83e 	bl	800174c <LCD_cmdMode>
	LCD_writeMode();
 80016d0:	f000 f85c 	bl	800178c <LCD_writeMode>
	LCD_sendHighNibble(0x30);
 80016d4:	2030      	movs	r0, #48	; 0x30
 80016d6:	f000 f8b1 	bl	800183c <LCD_sendHighNibble>
	LCD_delay(5);
 80016da:	2005      	movs	r0, #5
 80016dc:	f7ff ffe0 	bl	80016a0 <LCD_delay>
	LCD_sendHighNibble(0x30);
 80016e0:	2030      	movs	r0, #48	; 0x30
 80016e2:	f000 f8ab 	bl	800183c <LCD_sendHighNibble>
	LCD_delay(1);
 80016e6:	2001      	movs	r0, #1
 80016e8:	f7ff ffda 	bl	80016a0 <LCD_delay>
	LCD_sendHighNibble(0x30);
 80016ec:	2030      	movs	r0, #48	; 0x30
 80016ee:	f000 f8a5 	bl	800183c <LCD_sendHighNibble>
	LCD_sendHighNibble(0x20);
 80016f2:	2020      	movs	r0, #32
 80016f4:	f000 f8a2 	bl	800183c <LCD_sendHighNibble>
	LCD_sendByte(LCD_4BIT_FUNCTION_SET);	//Function Set: 4Bit Interface, 2Line, 5x8 Font
 80016f8:	2028      	movs	r0, #40	; 0x28
 80016fa:	f000 f88d 	bl	8001818 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_OFF); 				//Display Off
 80016fe:	2008      	movs	r0, #8
 8001700:	f000 f88a 	bl	8001818 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_CLEAR);			//Display Clear
 8001704:	2001      	movs	r0, #1
 8001706:	f000 f887 	bl	8001818 <LCD_sendByte>
	LCD_sendByte(LCD_ENTRY_MODE_SET);			//Entry Mode Set
 800170a:	2006      	movs	r0, #6
 800170c:	f000 f884 	bl	8001818 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_ON);					//Display On
 8001710:	200c      	movs	r0, #12
 8001712:	f000 f881 	bl	8001818 <LCD_sendByte>
	LCD_backLightOn();										//backLightOn
 8001716:	f000 f807 	bl	8001728 <LCD_backLightOn>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200005c4 	.word	0x200005c4

08001728 <LCD_backLightOn>:

void LCD_backLightOn(){
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	lcdData |=(1<<LCD_BACKLIGHT);
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <LCD_backLightOn+0x20>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	f043 0308 	orr.w	r3, r3, #8
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4b04      	ldr	r3, [pc, #16]	; (8001748 <LCD_backLightOn+0x20>)
 8001738:	701a      	strb	r2, [r3, #0]
	LCD_sendData(lcdData);
 800173a:	4b03      	ldr	r3, [pc, #12]	; (8001748 <LCD_backLightOn+0x20>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f000 f854 	bl	80017ec <LCD_sendData>
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	200005c8 	.word	0x200005c8

0800174c <LCD_cmdMode>:

void LCD_cmdMode() {
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RS);
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <LCD_cmdMode+0x1c>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	f023 0301 	bic.w	r3, r3, #1
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4b03      	ldr	r3, [pc, #12]	; (8001768 <LCD_cmdMode+0x1c>)
 800175c:	701a      	strb	r2, [r3, #0]
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	200005c8 	.word	0x200005c8

0800176c <LCD_charMode>:
void LCD_charMode() {
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_RS);
 8001770:	4b05      	ldr	r3, [pc, #20]	; (8001788 <LCD_charMode+0x1c>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4b03      	ldr	r3, [pc, #12]	; (8001788 <LCD_charMode+0x1c>)
 800177c:	701a      	strb	r2, [r3, #0]
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	200005c8 	.word	0x200005c8

0800178c <LCD_writeMode>:
void LCD_writeMode() {
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RW);
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <LCD_writeMode+0x1c>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	f023 0302 	bic.w	r3, r3, #2
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <LCD_writeMode+0x1c>)
 800179c:	701a      	strb	r2, [r3, #0]
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	200005c8 	.word	0x200005c8

080017ac <LCD_E_High>:

void LCD_E_High() {
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_E);
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <LCD_E_High+0x1c>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	f043 0304 	orr.w	r3, r3, #4
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <LCD_E_High+0x1c>)
 80017bc:	701a      	strb	r2, [r3, #0]
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	200005c8 	.word	0x200005c8

080017cc <LCD_E_Low>:
void LCD_E_Low() {
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_E);
 80017d0:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <LCD_E_Low+0x1c>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	f023 0304 	bic.w	r3, r3, #4
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4b03      	ldr	r3, [pc, #12]	; (80017e8 <LCD_E_Low+0x1c>)
 80017dc:	701a      	strb	r2, [r3, #0]
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	200005c8 	.word	0x200005c8

080017ec <LCD_sendData>:

void LCD_sendData(uint8_t data) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af02      	add	r7, sp, #8
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hLCDI2C, lcdDevAddr_w, &data, 1, 1000);
 80017f6:	4b07      	ldr	r3, [pc, #28]	; (8001814 <LCD_sendData+0x28>)
 80017f8:	6818      	ldr	r0, [r3, #0]
 80017fa:	1dfa      	adds	r2, r7, #7
 80017fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	2301      	movs	r3, #1
 8001804:	214e      	movs	r1, #78	; 0x4e
 8001806:	f000 fe5f 	bl	80024c8 <HAL_I2C_Master_Transmit>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200005c4 	.word	0x200005c4

08001818 <LCD_sendByte>:

void LCD_sendByte(uint8_t data) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
	LCD_sendHighNibble(data); //상위 4bit 전송
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	4618      	mov	r0, r3
 8001826:	f000 f809 	bl	800183c <LCD_sendHighNibble>
	LCD_sendLowNibble(data); //하위 4bit 전송
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	4618      	mov	r0, r3
 800182e:	f000 f835 	bl	800189c <LCD_sendLowNibble>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <LCD_sendHighNibble>:

void LCD_sendHighNibble(uint8_t data) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
	LCD_E_High();
 8001846:	f7ff ffb1 	bl	80017ac <LCD_E_High>
	lcdData = (lcdData & 0x0f) | (data & 0xf0);	//상위 4bit data
 800184a:	4b13      	ldr	r3, [pc, #76]	; (8001898 <LCD_sendHighNibble+0x5c>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	b25b      	sxtb	r3, r3
 8001850:	f003 030f 	and.w	r3, r3, #15
 8001854:	b25a      	sxtb	r2, r3
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	f023 030f 	bic.w	r3, r3, #15
 800185e:	b25b      	sxtb	r3, r3
 8001860:	4313      	orrs	r3, r2
 8001862:	b25b      	sxtb	r3, r3
 8001864:	b2da      	uxtb	r2, r3
 8001866:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <LCD_sendHighNibble+0x5c>)
 8001868:	701a      	strb	r2, [r3, #0]
	LCD_sendData(lcdData); //MCU send to LCD
 800186a:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <LCD_sendHighNibble+0x5c>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff ffbc 	bl	80017ec <LCD_sendData>
	HAL_Delay(1);
 8001874:	2001      	movs	r0, #1
 8001876:	f000 f993 	bl	8001ba0 <HAL_Delay>
	LCD_E_Low();
 800187a:	f7ff ffa7 	bl	80017cc <LCD_E_Low>
	LCD_sendData(lcdData); //MCU send to LCD
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <LCD_sendHighNibble+0x5c>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff ffb2 	bl	80017ec <LCD_sendData>
	HAL_Delay(1);
 8001888:	2001      	movs	r0, #1
 800188a:	f000 f989 	bl	8001ba0 <HAL_Delay>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200005c8 	.word	0x200005c8

0800189c <LCD_sendLowNibble>:

void LCD_sendLowNibble(uint8_t data) {
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
	LCD_E_High();
 80018a6:	f7ff ff81 	bl	80017ac <LCD_E_High>
	lcdData = (lcdData & 0x0f) | ((data & 0x0f)<<4);	//하위 4bit data
 80018aa:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <LCD_sendLowNibble+0x58>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	b25b      	sxtb	r3, r3
 80018b0:	f003 030f 	and.w	r3, r3, #15
 80018b4:	b25a      	sxtb	r2, r3
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	b25b      	sxtb	r3, r3
 80018bc:	4313      	orrs	r3, r2
 80018be:	b25b      	sxtb	r3, r3
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <LCD_sendLowNibble+0x58>)
 80018c4:	701a      	strb	r2, [r3, #0]
	LCD_sendData(lcdData); //MCU send to LCD
 80018c6:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <LCD_sendLowNibble+0x58>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff ff8e 	bl	80017ec <LCD_sendData>
	HAL_Delay(1);
 80018d0:	2001      	movs	r0, #1
 80018d2:	f000 f965 	bl	8001ba0 <HAL_Delay>
	LCD_E_Low();
 80018d6:	f7ff ff79 	bl	80017cc <LCD_E_Low>
	LCD_sendData(lcdData); //MCU send to LCD
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <LCD_sendLowNibble+0x58>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff ff84 	bl	80017ec <LCD_sendData>
	HAL_Delay(1);
 80018e4:	2001      	movs	r0, #1
 80018e6:	f000 f95b 	bl	8001ba0 <HAL_Delay>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200005c8 	.word	0x200005c8

080018f8 <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
	LCD_cmdMode();
 8001902:	f7ff ff23 	bl	800174c <LCD_cmdMode>
	LCD_writeMode();
 8001906:	f7ff ff41 	bl	800178c <LCD_writeMode>
	LCD_sendByte(data);
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ff83 	bl	8001818 <LCD_sendByte>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data) {
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	4603      	mov	r3, r0
 8001922:	71fb      	strb	r3, [r7, #7]
	LCD_charMode();
 8001924:	f7ff ff22 	bl	800176c <LCD_charMode>
	LCD_writeMode();
 8001928:	f7ff ff30 	bl	800178c <LCD_writeMode>
	LCD_sendByte(data);
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff ff72 	bl	8001818 <LCD_sendByte>
}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col){
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	460a      	mov	r2, r1
 8001946:	71fb      	strb	r3, [r7, #7]
 8001948:	4613      	mov	r3, r2
 800194a:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 800194c:	79bb      	ldrb	r3, [r7, #6]
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	71bb      	strb	r3, [r7, #6]
	row %=2;
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = (0x40 * row) +col;
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	019b      	lsls	r3, r3, #6
 8001960:	b2da      	uxtb	r2, r3
 8001962:	79bb      	ldrb	r3, [r7, #6]
 8001964:	4413      	add	r3, r2
 8001966:	73fb      	strb	r3, [r7, #15]
	uint8_t command = 0x80 + lcdRegAddr;
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	3b80      	subs	r3, #128	; 0x80
 800196c:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 800196e:	7bbb      	ldrb	r3, [r7, #14]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ffc1 	bl	80018f8 <LCD_writeCmdData>
}
 8001976:	bf00      	nop
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <LCD_writeString>:

void LCD_writeString(char *str){
 800197e:	b580      	push	{r7, lr}
 8001980:	b084      	sub	sp, #16
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
	for(int i=0; str[i]; i++){ //str[i] == 0 for문 탈출
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	e009      	b.n	80019a0 <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ffc0 	bl	800191a <LCD_writeCharData>
	for(int i=0; str[i]; i++){ //str[i] == 0 for문 탈출
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	3301      	adds	r3, #1
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1ef      	bne.n	800198c <LCD_writeString+0xe>
	}
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col,char *str){
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4603      	mov	r3, r0
 80019be:	603a      	str	r2, [r7, #0]
 80019c0:	71fb      	strb	r3, [r7, #7]
 80019c2:	460b      	mov	r3, r1
 80019c4:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 80019c6:	79ba      	ldrb	r2, [r7, #6]
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	4611      	mov	r1, r2
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ffb5 	bl	800193c <LCD_gotoXY>
	LCD_writeString(str);
 80019d2:	6838      	ldr	r0, [r7, #0]
 80019d4:	f7ff ffd3 	bl	800197e <LCD_writeString>
}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <Motor_init>:
#include "Motor.h"


void Motor_init(Motor_t *Motor, TIM_HandleTypeDef *htim, uint32_t Channel,
		GPIO_TypeDef *dir1_GPIO, uint16_t dir1_GPIO_Pin, GPIO_TypeDef *dir2_GPIO,
		uint16_t dir2_GPIO_Pin) {
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
 80019ec:	603b      	str	r3, [r7, #0]
	Motor-> htim = htim;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	68ba      	ldr	r2, [r7, #8]
 80019f2:	601a      	str	r2, [r3, #0]
	Motor-> Channel = Channel;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	605a      	str	r2, [r3, #4]
	Motor-> dir1_GPIO = dir1_GPIO;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	609a      	str	r2, [r3, #8]
	Motor-> dir1_GPIO_Pin = dir1_GPIO_Pin;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	8b3a      	ldrh	r2, [r7, #24]
 8001a04:	819a      	strh	r2, [r3, #12]
	Motor-> dir2_GPIO = dir2_GPIO;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	69fa      	ldr	r2, [r7, #28]
 8001a0a:	611a      	str	r2, [r3, #16]
	Motor-> dir2_GPIO_Pin = dir2_GPIO_Pin;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	8c3a      	ldrh	r2, [r7, #32]
 8001a10:	829a      	strh	r2, [r3, #20]
}
 8001a12:	bf00      	nop
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <Motor_stop>:

void Motor_stop(Motor_t *Motor) {
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(Motor->htim, Motor->Channel);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4610      	mov	r0, r2
 8001a32:	f001 ff29 	bl	8003888 <HAL_TIM_PWM_Stop>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <Motor_forward>:

void Motor_forward(Motor_t *Motor) {
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Motor->dir1_GPIO, Motor->dir1_GPIO_Pin, SET);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6898      	ldr	r0, [r3, #8]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	899b      	ldrh	r3, [r3, #12]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	4619      	mov	r1, r3
 8001a52:	f000 fbc1 	bl	80021d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor->dir2_GPIO, Motor->dir2_GPIO_Pin, RESET);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6918      	ldr	r0, [r3, #16]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	8a9b      	ldrh	r3, [r3, #20]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	4619      	mov	r1, r3
 8001a62:	f000 fbb9 	bl	80021d8 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(Motor->htim, Motor->Channel);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4610      	mov	r0, r2
 8001a72:	f001 fe59 	bl	8003728 <HAL_TIM_PWM_Start>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <Motor_backward>:
void Motor_backward(Motor_t *Motor) {
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Motor->dir1_GPIO, Motor->dir1_GPIO_Pin, RESET);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6898      	ldr	r0, [r3, #8]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	899b      	ldrh	r3, [r3, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	4619      	mov	r1, r3
 8001a92:	f000 fba1 	bl	80021d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor->dir2_GPIO, Motor->dir2_GPIO_Pin, SET);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6918      	ldr	r0, [r3, #16]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	8a9b      	ldrh	r3, [r3, #20]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f000 fb99 	bl	80021d8 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(Motor->htim, Motor->Channel);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	f001 fe39 	bl	8003728 <HAL_TIM_PWM_Start>

}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <Motor_setSpeed>:
void Motor_setSpeed(Motor_t *Motor,int speedVal) {
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, speedVal);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d105      	bne.n	8001adc <Motor_setSpeed+0x1e>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001ada:	e018      	b.n	8001b0e <Motor_setSpeed+0x50>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, speedVal);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b04      	cmp	r3, #4
 8001ae2:	d105      	bne.n	8001af0 <Motor_setSpeed+0x32>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001aee:	e00e      	b.n	8001b0e <Motor_setSpeed+0x50>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, speedVal);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d105      	bne.n	8001b04 <Motor_setSpeed+0x46>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001b02:	e004      	b.n	8001b0e <Motor_setSpeed+0x50>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, speedVal);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
	...

08001b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b20:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <HAL_Init+0x40>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a0d      	ldr	r2, [pc, #52]	; (8001b5c <HAL_Init+0x40>)
 8001b26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <HAL_Init+0x40>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <HAL_Init+0x40>)
 8001b32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b38:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <HAL_Init+0x40>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a07      	ldr	r2, [pc, #28]	; (8001b5c <HAL_Init+0x40>)
 8001b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b44:	2003      	movs	r0, #3
 8001b46:	f000 f8fc 	bl	8001d42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b4a:	2005      	movs	r0, #5
 8001b4c:	f7ff fa5a 	bl	8001004 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b50:	f7ff f8dc 	bl	8000d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023c00 	.word	0x40023c00

08001b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_IncTick+0x20>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_IncTick+0x24>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <HAL_IncTick+0x24>)
 8001b72:	6013      	str	r3, [r2, #0]
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20000008 	.word	0x20000008
 8001b84:	200005cc 	.word	0x200005cc

08001b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b8c:	4b03      	ldr	r3, [pc, #12]	; (8001b9c <HAL_GetTick+0x14>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	200005cc 	.word	0x200005cc

08001ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba8:	f7ff ffee 	bl	8001b88 <HAL_GetTick>
 8001bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb8:	d005      	beq.n	8001bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bba:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_Delay+0x44>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bc6:	bf00      	nop
 8001bc8:	f7ff ffde 	bl	8001b88 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d8f7      	bhi.n	8001bc8 <HAL_Delay+0x28>
  {
  }
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000008 	.word	0x20000008

08001be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c04:	4013      	ands	r3, r2
 8001c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1a:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	60d3      	str	r3, [r2, #12]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <__NVIC_GetPriorityGrouping+0x18>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	0a1b      	lsrs	r3, r3, #8
 8001c3a:	f003 0307 	and.w	r3, r3, #7
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	db0b      	blt.n	8001c76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	f003 021f 	and.w	r2, r3, #31
 8001c64:	4907      	ldr	r1, [pc, #28]	; (8001c84 <__NVIC_EnableIRQ+0x38>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000e100 	.word	0xe000e100

08001c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	6039      	str	r1, [r7, #0]
 8001c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	db0a      	blt.n	8001cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	490c      	ldr	r1, [pc, #48]	; (8001cd4 <__NVIC_SetPriority+0x4c>)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	0112      	lsls	r2, r2, #4
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	440b      	add	r3, r1
 8001cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb0:	e00a      	b.n	8001cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	4908      	ldr	r1, [pc, #32]	; (8001cd8 <__NVIC_SetPriority+0x50>)
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	3b04      	subs	r3, #4
 8001cc0:	0112      	lsls	r2, r2, #4
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	761a      	strb	r2, [r3, #24]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000e100 	.word	0xe000e100
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b089      	sub	sp, #36	; 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f1c3 0307 	rsb	r3, r3, #7
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	bf28      	it	cs
 8001cfa:	2304      	movcs	r3, #4
 8001cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3304      	adds	r3, #4
 8001d02:	2b06      	cmp	r3, #6
 8001d04:	d902      	bls.n	8001d0c <NVIC_EncodePriority+0x30>
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3b03      	subs	r3, #3
 8001d0a:	e000      	b.n	8001d0e <NVIC_EncodePriority+0x32>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	f04f 32ff 	mov.w	r2, #4294967295
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43da      	mvns	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	401a      	ands	r2, r3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d24:	f04f 31ff 	mov.w	r1, #4294967295
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2e:	43d9      	mvns	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	4313      	orrs	r3, r2
         );
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3724      	adds	r7, #36	; 0x24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff ff4c 	bl	8001be8 <__NVIC_SetPriorityGrouping>
}
 8001d50:	bf00      	nop
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
 8001d64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d6a:	f7ff ff61 	bl	8001c30 <__NVIC_GetPriorityGrouping>
 8001d6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	68b9      	ldr	r1, [r7, #8]
 8001d74:	6978      	ldr	r0, [r7, #20]
 8001d76:	f7ff ffb1 	bl	8001cdc <NVIC_EncodePriority>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d80:	4611      	mov	r1, r2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff ff80 	bl	8001c88 <__NVIC_SetPriority>
}
 8001d88:	bf00      	nop
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff ff54 	bl	8001c4c <__NVIC_EnableIRQ>
}
 8001da4:	bf00      	nop
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001dba:	f7ff fee5 	bl	8001b88 <HAL_GetTick>
 8001dbe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d008      	beq.n	8001dde <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2280      	movs	r2, #128	; 0x80
 8001dd0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e052      	b.n	8001e84 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0216 	bic.w	r2, r2, #22
 8001dec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	695a      	ldr	r2, [r3, #20]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dfc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d103      	bne.n	8001e0e <HAL_DMA_Abort+0x62>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d007      	beq.n	8001e1e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0208 	bic.w	r2, r2, #8
 8001e1c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0201 	bic.w	r2, r2, #1
 8001e2c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e2e:	e013      	b.n	8001e58 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e30:	f7ff feaa 	bl	8001b88 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b05      	cmp	r3, #5
 8001e3c:	d90c      	bls.n	8001e58 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2220      	movs	r2, #32
 8001e42:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2203      	movs	r2, #3
 8001e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e015      	b.n	8001e84 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1e4      	bne.n	8001e30 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6a:	223f      	movs	r2, #63	; 0x3f
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d004      	beq.n	8001eaa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2280      	movs	r2, #128	; 0x80
 8001ea4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e00c      	b.n	8001ec4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2205      	movs	r2, #5
 8001eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0201 	bic.w	r2, r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b089      	sub	sp, #36	; 0x24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
 8001eea:	e159      	b.n	80021a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001eec:	2201      	movs	r2, #1
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	f040 8148 	bne.w	800219a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d005      	beq.n	8001f22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d130      	bne.n	8001f84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f58:	2201      	movs	r2, #1
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	091b      	lsrs	r3, r3, #4
 8001f6e:	f003 0201 	and.w	r2, r3, #1
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	2b03      	cmp	r3, #3
 8001f8e:	d017      	beq.n	8001fc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d123      	bne.n	8002014 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	08da      	lsrs	r2, r3, #3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3208      	adds	r2, #8
 8001fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	220f      	movs	r2, #15
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	08da      	lsrs	r2, r3, #3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3208      	adds	r2, #8
 800200e:	69b9      	ldr	r1, [r7, #24]
 8002010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	2203      	movs	r2, #3
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0203 	and.w	r2, r3, #3
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 80a2 	beq.w	800219a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	4b57      	ldr	r3, [pc, #348]	; (80021b8 <HAL_GPIO_Init+0x2e8>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	4a56      	ldr	r2, [pc, #344]	; (80021b8 <HAL_GPIO_Init+0x2e8>)
 8002060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002064:	6453      	str	r3, [r2, #68]	; 0x44
 8002066:	4b54      	ldr	r3, [pc, #336]	; (80021b8 <HAL_GPIO_Init+0x2e8>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002072:	4a52      	ldr	r2, [pc, #328]	; (80021bc <HAL_GPIO_Init+0x2ec>)
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	089b      	lsrs	r3, r3, #2
 8002078:	3302      	adds	r3, #2
 800207a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	220f      	movs	r2, #15
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a49      	ldr	r2, [pc, #292]	; (80021c0 <HAL_GPIO_Init+0x2f0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d019      	beq.n	80020d2 <HAL_GPIO_Init+0x202>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a48      	ldr	r2, [pc, #288]	; (80021c4 <HAL_GPIO_Init+0x2f4>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d013      	beq.n	80020ce <HAL_GPIO_Init+0x1fe>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a47      	ldr	r2, [pc, #284]	; (80021c8 <HAL_GPIO_Init+0x2f8>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d00d      	beq.n	80020ca <HAL_GPIO_Init+0x1fa>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a46      	ldr	r2, [pc, #280]	; (80021cc <HAL_GPIO_Init+0x2fc>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d007      	beq.n	80020c6 <HAL_GPIO_Init+0x1f6>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a45      	ldr	r2, [pc, #276]	; (80021d0 <HAL_GPIO_Init+0x300>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d101      	bne.n	80020c2 <HAL_GPIO_Init+0x1f2>
 80020be:	2304      	movs	r3, #4
 80020c0:	e008      	b.n	80020d4 <HAL_GPIO_Init+0x204>
 80020c2:	2307      	movs	r3, #7
 80020c4:	e006      	b.n	80020d4 <HAL_GPIO_Init+0x204>
 80020c6:	2303      	movs	r3, #3
 80020c8:	e004      	b.n	80020d4 <HAL_GPIO_Init+0x204>
 80020ca:	2302      	movs	r3, #2
 80020cc:	e002      	b.n	80020d4 <HAL_GPIO_Init+0x204>
 80020ce:	2301      	movs	r3, #1
 80020d0:	e000      	b.n	80020d4 <HAL_GPIO_Init+0x204>
 80020d2:	2300      	movs	r3, #0
 80020d4:	69fa      	ldr	r2, [r7, #28]
 80020d6:	f002 0203 	and.w	r2, r2, #3
 80020da:	0092      	lsls	r2, r2, #2
 80020dc:	4093      	lsls	r3, r2
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020e4:	4935      	ldr	r1, [pc, #212]	; (80021bc <HAL_GPIO_Init+0x2ec>)
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	089b      	lsrs	r3, r3, #2
 80020ea:	3302      	adds	r3, #2
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020f2:	4b38      	ldr	r3, [pc, #224]	; (80021d4 <HAL_GPIO_Init+0x304>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002116:	4a2f      	ldr	r2, [pc, #188]	; (80021d4 <HAL_GPIO_Init+0x304>)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800211c:	4b2d      	ldr	r3, [pc, #180]	; (80021d4 <HAL_GPIO_Init+0x304>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002140:	4a24      	ldr	r2, [pc, #144]	; (80021d4 <HAL_GPIO_Init+0x304>)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002146:	4b23      	ldr	r3, [pc, #140]	; (80021d4 <HAL_GPIO_Init+0x304>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	43db      	mvns	r3, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4013      	ands	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800216a:	4a1a      	ldr	r2, [pc, #104]	; (80021d4 <HAL_GPIO_Init+0x304>)
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002170:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <HAL_GPIO_Init+0x304>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4313      	orrs	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002194:	4a0f      	ldr	r2, [pc, #60]	; (80021d4 <HAL_GPIO_Init+0x304>)
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3301      	adds	r3, #1
 800219e:	61fb      	str	r3, [r7, #28]
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	2b0f      	cmp	r3, #15
 80021a4:	f67f aea2 	bls.w	8001eec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	3724      	adds	r7, #36	; 0x24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40013800 	.word	0x40013800
 80021c0:	40020000 	.word	0x40020000
 80021c4:	40020400 	.word	0x40020400
 80021c8:	40020800 	.word	0x40020800
 80021cc:	40020c00 	.word	0x40020c00
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40013c00 	.word	0x40013c00

080021d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	460b      	mov	r3, r1
 80021e2:	807b      	strh	r3, [r7, #2]
 80021e4:	4613      	mov	r3, r2
 80021e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021e8:	787b      	ldrb	r3, [r7, #1]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ee:	887a      	ldrh	r2, [r7, #2]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021f4:	e003      	b.n	80021fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021f6:	887b      	ldrh	r3, [r7, #2]
 80021f8:	041a      	lsls	r2, r3, #16
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	619a      	str	r2, [r3, #24]
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800220a:	b480      	push	{r7}
 800220c:	b085      	sub	sp, #20
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	460b      	mov	r3, r1
 8002214:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800221c:	887a      	ldrh	r2, [r7, #2]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	4013      	ands	r3, r2
 8002222:	041a      	lsls	r2, r3, #16
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	43d9      	mvns	r1, r3
 8002228:	887b      	ldrh	r3, [r7, #2]
 800222a:	400b      	ands	r3, r1
 800222c:	431a      	orrs	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	619a      	str	r2, [r3, #24]
}
 8002232:	bf00      	nop
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
	...

08002240 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e12b      	b.n	80024aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d106      	bne.n	800226c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7fe fd7c 	bl	8000d64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2224      	movs	r2, #36	; 0x24
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0201 	bic.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002292:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022a4:	f001 f8da 	bl	800345c <HAL_RCC_GetPCLK1Freq>
 80022a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	4a81      	ldr	r2, [pc, #516]	; (80024b4 <HAL_I2C_Init+0x274>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d807      	bhi.n	80022c4 <HAL_I2C_Init+0x84>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4a80      	ldr	r2, [pc, #512]	; (80024b8 <HAL_I2C_Init+0x278>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	bf94      	ite	ls
 80022bc:	2301      	movls	r3, #1
 80022be:	2300      	movhi	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	e006      	b.n	80022d2 <HAL_I2C_Init+0x92>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4a7d      	ldr	r2, [pc, #500]	; (80024bc <HAL_I2C_Init+0x27c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	bf94      	ite	ls
 80022cc:	2301      	movls	r3, #1
 80022ce:	2300      	movhi	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e0e7      	b.n	80024aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4a78      	ldr	r2, [pc, #480]	; (80024c0 <HAL_I2C_Init+0x280>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	0c9b      	lsrs	r3, r3, #18
 80022e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	4a6a      	ldr	r2, [pc, #424]	; (80024b4 <HAL_I2C_Init+0x274>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d802      	bhi.n	8002314 <HAL_I2C_Init+0xd4>
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	3301      	adds	r3, #1
 8002312:	e009      	b.n	8002328 <HAL_I2C_Init+0xe8>
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800231a:	fb02 f303 	mul.w	r3, r2, r3
 800231e:	4a69      	ldr	r2, [pc, #420]	; (80024c4 <HAL_I2C_Init+0x284>)
 8002320:	fba2 2303 	umull	r2, r3, r2, r3
 8002324:	099b      	lsrs	r3, r3, #6
 8002326:	3301      	adds	r3, #1
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6812      	ldr	r2, [r2, #0]
 800232c:	430b      	orrs	r3, r1
 800232e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800233a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	495c      	ldr	r1, [pc, #368]	; (80024b4 <HAL_I2C_Init+0x274>)
 8002344:	428b      	cmp	r3, r1
 8002346:	d819      	bhi.n	800237c <HAL_I2C_Init+0x13c>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	1e59      	subs	r1, r3, #1
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	fbb1 f3f3 	udiv	r3, r1, r3
 8002356:	1c59      	adds	r1, r3, #1
 8002358:	f640 73fc 	movw	r3, #4092	; 0xffc
 800235c:	400b      	ands	r3, r1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <HAL_I2C_Init+0x138>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1e59      	subs	r1, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002370:	3301      	adds	r3, #1
 8002372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002376:	e051      	b.n	800241c <HAL_I2C_Init+0x1dc>
 8002378:	2304      	movs	r3, #4
 800237a:	e04f      	b.n	800241c <HAL_I2C_Init+0x1dc>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d111      	bne.n	80023a8 <HAL_I2C_Init+0x168>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1e58      	subs	r0, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6859      	ldr	r1, [r3, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	440b      	add	r3, r1
 8002392:	fbb0 f3f3 	udiv	r3, r0, r3
 8002396:	3301      	adds	r3, #1
 8002398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800239c:	2b00      	cmp	r3, #0
 800239e:	bf0c      	ite	eq
 80023a0:	2301      	moveq	r3, #1
 80023a2:	2300      	movne	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	e012      	b.n	80023ce <HAL_I2C_Init+0x18e>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	1e58      	subs	r0, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6859      	ldr	r1, [r3, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	0099      	lsls	r1, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80023be:	3301      	adds	r3, #1
 80023c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	bf0c      	ite	eq
 80023c8:	2301      	moveq	r3, #1
 80023ca:	2300      	movne	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_I2C_Init+0x196>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e022      	b.n	800241c <HAL_I2C_Init+0x1dc>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10e      	bne.n	80023fc <HAL_I2C_Init+0x1bc>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1e58      	subs	r0, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6859      	ldr	r1, [r3, #4]
 80023e6:	460b      	mov	r3, r1
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	440b      	add	r3, r1
 80023ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f0:	3301      	adds	r3, #1
 80023f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023fa:	e00f      	b.n	800241c <HAL_I2C_Init+0x1dc>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	1e58      	subs	r0, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6859      	ldr	r1, [r3, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	0099      	lsls	r1, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002412:	3301      	adds	r3, #1
 8002414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002418:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	6809      	ldr	r1, [r1, #0]
 8002420:	4313      	orrs	r3, r2
 8002422:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69da      	ldr	r2, [r3, #28]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800244a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6911      	ldr	r1, [r2, #16]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68d2      	ldr	r2, [r2, #12]
 8002456:	4311      	orrs	r1, r2
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	430b      	orrs	r3, r1
 800245e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	695a      	ldr	r2, [r3, #20]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2220      	movs	r2, #32
 8002496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	000186a0 	.word	0x000186a0
 80024b8:	001e847f 	.word	0x001e847f
 80024bc:	003d08ff 	.word	0x003d08ff
 80024c0:	431bde83 	.word	0x431bde83
 80024c4:	10624dd3 	.word	0x10624dd3

080024c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af02      	add	r7, sp, #8
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	607a      	str	r2, [r7, #4]
 80024d2:	461a      	mov	r2, r3
 80024d4:	460b      	mov	r3, r1
 80024d6:	817b      	strh	r3, [r7, #10]
 80024d8:	4613      	mov	r3, r2
 80024da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024dc:	f7ff fb54 	bl	8001b88 <HAL_GetTick>
 80024e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b20      	cmp	r3, #32
 80024ec:	f040 80e0 	bne.w	80026b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	2319      	movs	r3, #25
 80024f6:	2201      	movs	r2, #1
 80024f8:	4970      	ldr	r1, [pc, #448]	; (80026bc <HAL_I2C_Master_Transmit+0x1f4>)
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 f964 	bl	80027c8 <I2C_WaitOnFlagUntilTimeout>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002506:	2302      	movs	r3, #2
 8002508:	e0d3      	b.n	80026b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <HAL_I2C_Master_Transmit+0x50>
 8002514:	2302      	movs	r3, #2
 8002516:	e0cc      	b.n	80026b2 <HAL_I2C_Master_Transmit+0x1ea>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b01      	cmp	r3, #1
 800252c:	d007      	beq.n	800253e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f042 0201 	orr.w	r2, r2, #1
 800253c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800254c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2221      	movs	r2, #33	; 0x21
 8002552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2210      	movs	r2, #16
 800255a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	893a      	ldrh	r2, [r7, #8]
 800256e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	4a50      	ldr	r2, [pc, #320]	; (80026c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800257e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002580:	8979      	ldrh	r1, [r7, #10]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	6a3a      	ldr	r2, [r7, #32]
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 f89c 	bl	80026c4 <I2C_MasterRequestWrite>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e08d      	b.n	80026b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002596:	2300      	movs	r3, #0
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025ac:	e066      	b.n	800267c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	6a39      	ldr	r1, [r7, #32]
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 fa22 	bl	80029fc <I2C_WaitOnTXEFlagUntilTimeout>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00d      	beq.n	80025da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d107      	bne.n	80025d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e06b      	b.n	80026b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	781a      	ldrb	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002602:	3b01      	subs	r3, #1
 8002604:	b29a      	uxth	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b04      	cmp	r3, #4
 8002616:	d11b      	bne.n	8002650 <HAL_I2C_Master_Transmit+0x188>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261c:	2b00      	cmp	r3, #0
 800261e:	d017      	beq.n	8002650 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	781a      	ldrb	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263a:	b29b      	uxth	r3, r3
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002648:	3b01      	subs	r3, #1
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	6a39      	ldr	r1, [r7, #32]
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f000 fa19 	bl	8002a8c <I2C_WaitOnBTFFlagUntilTimeout>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00d      	beq.n	800267c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	2b04      	cmp	r3, #4
 8002666:	d107      	bne.n	8002678 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002676:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e01a      	b.n	80026b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002680:	2b00      	cmp	r3, #0
 8002682:	d194      	bne.n	80025ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002692:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2220      	movs	r2, #32
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	e000      	b.n	80026b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026b0:	2302      	movs	r3, #2
  }
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	00100002 	.word	0x00100002
 80026c0:	ffff0000 	.word	0xffff0000

080026c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b088      	sub	sp, #32
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	607a      	str	r2, [r7, #4]
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	460b      	mov	r3, r1
 80026d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d006      	beq.n	80026ee <I2C_MasterRequestWrite+0x2a>
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d003      	beq.n	80026ee <I2C_MasterRequestWrite+0x2a>
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026ec:	d108      	bne.n	8002700 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	e00b      	b.n	8002718 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	2b12      	cmp	r3, #18
 8002706:	d107      	bne.n	8002718 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002716:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 f84f 	bl	80027c8 <I2C_WaitOnFlagUntilTimeout>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00d      	beq.n	800274c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800273e:	d103      	bne.n	8002748 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002746:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e035      	b.n	80027b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002754:	d108      	bne.n	8002768 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002756:	897b      	ldrh	r3, [r7, #10]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	461a      	mov	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002764:	611a      	str	r2, [r3, #16]
 8002766:	e01b      	b.n	80027a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002768:	897b      	ldrh	r3, [r7, #10]
 800276a:	11db      	asrs	r3, r3, #7
 800276c:	b2db      	uxtb	r3, r3
 800276e:	f003 0306 	and.w	r3, r3, #6
 8002772:	b2db      	uxtb	r3, r3
 8002774:	f063 030f 	orn	r3, r3, #15
 8002778:	b2da      	uxtb	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	490e      	ldr	r1, [pc, #56]	; (80027c0 <I2C_MasterRequestWrite+0xfc>)
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 f898 	bl	80028bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e010      	b.n	80027b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002796:	897b      	ldrh	r3, [r7, #10]
 8002798:	b2da      	uxtb	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	4907      	ldr	r1, [pc, #28]	; (80027c4 <I2C_MasterRequestWrite+0x100>)
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 f888 	bl	80028bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	00010008 	.word	0x00010008
 80027c4:	00010002 	.word	0x00010002

080027c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	603b      	str	r3, [r7, #0]
 80027d4:	4613      	mov	r3, r2
 80027d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027d8:	e048      	b.n	800286c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e0:	d044      	beq.n	800286c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027e2:	f7ff f9d1 	bl	8001b88 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d302      	bcc.n	80027f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d139      	bne.n	800286c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	0c1b      	lsrs	r3, r3, #16
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d10d      	bne.n	800281e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	43da      	mvns	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	4013      	ands	r3, r2
 800280e:	b29b      	uxth	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	bf0c      	ite	eq
 8002814:	2301      	moveq	r3, #1
 8002816:	2300      	movne	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	461a      	mov	r2, r3
 800281c:	e00c      	b.n	8002838 <I2C_WaitOnFlagUntilTimeout+0x70>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	43da      	mvns	r2, r3
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	4013      	ands	r3, r2
 800282a:	b29b      	uxth	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	bf0c      	ite	eq
 8002830:	2301      	moveq	r3, #1
 8002832:	2300      	movne	r3, #0
 8002834:	b2db      	uxtb	r3, r3
 8002836:	461a      	mov	r2, r3
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	429a      	cmp	r2, r3
 800283c:	d116      	bne.n	800286c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2220      	movs	r2, #32
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	f043 0220 	orr.w	r2, r3, #32
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e023      	b.n	80028b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	0c1b      	lsrs	r3, r3, #16
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b01      	cmp	r3, #1
 8002874:	d10d      	bne.n	8002892 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	43da      	mvns	r2, r3
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	4013      	ands	r3, r2
 8002882:	b29b      	uxth	r3, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	bf0c      	ite	eq
 8002888:	2301      	moveq	r3, #1
 800288a:	2300      	movne	r3, #0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	461a      	mov	r2, r3
 8002890:	e00c      	b.n	80028ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	43da      	mvns	r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	4013      	ands	r3, r2
 800289e:	b29b      	uxth	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bf0c      	ite	eq
 80028a4:	2301      	moveq	r3, #1
 80028a6:	2300      	movne	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	461a      	mov	r2, r3
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d093      	beq.n	80027da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
 80028c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028ca:	e071      	b.n	80029b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028da:	d123      	bne.n	8002924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2220      	movs	r2, #32
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	f043 0204 	orr.w	r2, r3, #4
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e067      	b.n	80029f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292a:	d041      	beq.n	80029b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800292c:	f7ff f92c 	bl	8001b88 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	429a      	cmp	r2, r3
 800293a:	d302      	bcc.n	8002942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d136      	bne.n	80029b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	0c1b      	lsrs	r3, r3, #16
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b01      	cmp	r3, #1
 800294a:	d10c      	bne.n	8002966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	43da      	mvns	r2, r3
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	4013      	ands	r3, r2
 8002958:	b29b      	uxth	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	bf14      	ite	ne
 800295e:	2301      	movne	r3, #1
 8002960:	2300      	moveq	r3, #0
 8002962:	b2db      	uxtb	r3, r3
 8002964:	e00b      	b.n	800297e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	43da      	mvns	r2, r3
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	4013      	ands	r3, r2
 8002972:	b29b      	uxth	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	bf14      	ite	ne
 8002978:	2301      	movne	r3, #1
 800297a:	2300      	moveq	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d016      	beq.n	80029b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	f043 0220 	orr.w	r2, r3, #32
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e021      	b.n	80029f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	0c1b      	lsrs	r3, r3, #16
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d10c      	bne.n	80029d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	43da      	mvns	r2, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	4013      	ands	r3, r2
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	bf14      	ite	ne
 80029cc:	2301      	movne	r3, #1
 80029ce:	2300      	moveq	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	e00b      	b.n	80029ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	43da      	mvns	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	4013      	ands	r3, r2
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	bf14      	ite	ne
 80029e6:	2301      	movne	r3, #1
 80029e8:	2300      	moveq	r3, #0
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f47f af6d 	bne.w	80028cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a08:	e034      	b.n	8002a74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f886 	bl	8002b1c <I2C_IsAcknowledgeFailed>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e034      	b.n	8002a84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a20:	d028      	beq.n	8002a74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a22:	f7ff f8b1 	bl	8001b88 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d302      	bcc.n	8002a38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d11d      	bne.n	8002a74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a42:	2b80      	cmp	r3, #128	; 0x80
 8002a44:	d016      	beq.n	8002a74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	f043 0220 	orr.w	r2, r3, #32
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e007      	b.n	8002a84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7e:	2b80      	cmp	r3, #128	; 0x80
 8002a80:	d1c3      	bne.n	8002a0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a98:	e034      	b.n	8002b04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 f83e 	bl	8002b1c <I2C_IsAcknowledgeFailed>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e034      	b.n	8002b14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab0:	d028      	beq.n	8002b04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab2:	f7ff f869 	bl	8001b88 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d302      	bcc.n	8002ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d11d      	bne.n	8002b04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d016      	beq.n	8002b04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	f043 0220 	orr.w	r2, r3, #32
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e007      	b.n	8002b14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	f003 0304 	and.w	r3, r3, #4
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d1c3      	bne.n	8002a9a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b32:	d11b      	bne.n	8002b6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	f043 0204 	orr.w	r2, r3, #4
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e000      	b.n	8002b6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
	...

08002b7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e267      	b.n	800305e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d075      	beq.n	8002c86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b9a:	4b88      	ldr	r3, [pc, #544]	; (8002dbc <HAL_RCC_OscConfig+0x240>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d00c      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ba6:	4b85      	ldr	r3, [pc, #532]	; (8002dbc <HAL_RCC_OscConfig+0x240>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d112      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bb2:	4b82      	ldr	r3, [pc, #520]	; (8002dbc <HAL_RCC_OscConfig+0x240>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bbe:	d10b      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc0:	4b7e      	ldr	r3, [pc, #504]	; (8002dbc <HAL_RCC_OscConfig+0x240>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d05b      	beq.n	8002c84 <HAL_RCC_OscConfig+0x108>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d157      	bne.n	8002c84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e242      	b.n	800305e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be0:	d106      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x74>
 8002be2:	4b76      	ldr	r3, [pc, #472]	; (8002dbc <HAL_RCC_OscConfig+0x240>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a75      	ldr	r2, [pc, #468]	; (8002dbc <HAL_RCC_OscConfig+0x240>)
 8002be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	e01d      	b.n	8002c2c <HAL_RCC_OscConfig+0xb0>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bf8:	d10c      	bne.n	8002c14 <HAL_RCC_OscConfig+0x98>
 8002bfa:	4b70      	ldr	r3, [pc, #448]	; (8002dbc <HAL_RCC_OscConfig+0x240>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a6f      	ldr	r2, [pc, #444]	; (8002dbc <HAL_RCC_OscConfig+0x240>)
 8002c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	4b6d      	ldr	r3, [pc, #436]	; (8002dbc <HAL_RCC_OscConfig+0x240>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a6c      	ldr	r2, [pc, #432]	; (8002dbc <HAL_RCC_OscConfig+0x240>)
 8002c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	e00b      	b.n	8002c2c <HAL_RCC_OscConfig+0xb0>
 8002c14:	4b69      	ldr	r3, [pc, #420]	; (8002dbc <HAL_RCC_OscConfig+0x240>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a68      	ldr	r2, [pc, #416]	; (8002dbc <HAL_RCC_OscConfig+0x240>)
 8002c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	4b66      	ldr	r3, [pc, #408]	; (8002dbc <HAL_RCC_OscConfig+0x240>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a65      	ldr	r2, [pc, #404]	; (8002dbc <HAL_RCC_OscConfig+0x240>)
 8002c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d013      	beq.n	8002c5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c34:	f7fe ffa8 	bl	8001b88 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c3c:	f7fe ffa4 	bl	8001b88 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b64      	cmp	r3, #100	; 0x64
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e207      	b.n	800305e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4e:	4b5b      	ldr	r3, [pc, #364]	; (8002dbc <HAL_RCC_OscConfig+0x240>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0xc0>
 8002c5a:	e014      	b.n	8002c86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5c:	f7fe ff94 	bl	8001b88 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c64:	f7fe ff90 	bl	8001b88 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b64      	cmp	r3, #100	; 0x64
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e1f3      	b.n	800305e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c76:	4b51      	ldr	r3, [pc, #324]	; (8002dbc <HAL_RCC_OscConfig+0x240>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f0      	bne.n	8002c64 <HAL_RCC_OscConfig+0xe8>
 8002c82:	e000      	b.n	8002c86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d063      	beq.n	8002d5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c92:	4b4a      	ldr	r3, [pc, #296]	; (8002dbc <HAL_RCC_OscConfig+0x240>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 030c 	and.w	r3, r3, #12
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00b      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c9e:	4b47      	ldr	r3, [pc, #284]	; (8002dbc <HAL_RCC_OscConfig+0x240>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ca6:	2b08      	cmp	r3, #8
 8002ca8:	d11c      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002caa:	4b44      	ldr	r3, [pc, #272]	; (8002dbc <HAL_RCC_OscConfig+0x240>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d116      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cb6:	4b41      	ldr	r3, [pc, #260]	; (8002dbc <HAL_RCC_OscConfig+0x240>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d005      	beq.n	8002cce <HAL_RCC_OscConfig+0x152>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d001      	beq.n	8002cce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e1c7      	b.n	800305e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cce:	4b3b      	ldr	r3, [pc, #236]	; (8002dbc <HAL_RCC_OscConfig+0x240>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	4937      	ldr	r1, [pc, #220]	; (8002dbc <HAL_RCC_OscConfig+0x240>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce2:	e03a      	b.n	8002d5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d020      	beq.n	8002d2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cec:	4b34      	ldr	r3, [pc, #208]	; (8002dc0 <HAL_RCC_OscConfig+0x244>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf2:	f7fe ff49 	bl	8001b88 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cfa:	f7fe ff45 	bl	8001b88 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e1a8      	b.n	800305e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0c:	4b2b      	ldr	r3, [pc, #172]	; (8002dbc <HAL_RCC_OscConfig+0x240>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0f0      	beq.n	8002cfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d18:	4b28      	ldr	r3, [pc, #160]	; (8002dbc <HAL_RCC_OscConfig+0x240>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	4925      	ldr	r1, [pc, #148]	; (8002dbc <HAL_RCC_OscConfig+0x240>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	600b      	str	r3, [r1, #0]
 8002d2c:	e015      	b.n	8002d5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d2e:	4b24      	ldr	r3, [pc, #144]	; (8002dc0 <HAL_RCC_OscConfig+0x244>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d34:	f7fe ff28 	bl	8001b88 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d3c:	f7fe ff24 	bl	8001b88 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e187      	b.n	800305e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d4e:	4b1b      	ldr	r3, [pc, #108]	; (8002dbc <HAL_RCC_OscConfig+0x240>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f0      	bne.n	8002d3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d036      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d016      	beq.n	8002d9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d6e:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <HAL_RCC_OscConfig+0x248>)
 8002d70:	2201      	movs	r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d74:	f7fe ff08 	bl	8001b88 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d7c:	f7fe ff04 	bl	8001b88 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e167      	b.n	800305e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d8e:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <HAL_RCC_OscConfig+0x240>)
 8002d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCC_OscConfig+0x200>
 8002d9a:	e01b      	b.n	8002dd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d9c:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <HAL_RCC_OscConfig+0x248>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da2:	f7fe fef1 	bl	8001b88 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da8:	e00e      	b.n	8002dc8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002daa:	f7fe feed 	bl	8001b88 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d907      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e150      	b.n	800305e <HAL_RCC_OscConfig+0x4e2>
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	42470000 	.word	0x42470000
 8002dc4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc8:	4b88      	ldr	r3, [pc, #544]	; (8002fec <HAL_RCC_OscConfig+0x470>)
 8002dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1ea      	bne.n	8002daa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 8097 	beq.w	8002f10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de2:	2300      	movs	r3, #0
 8002de4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002de6:	4b81      	ldr	r3, [pc, #516]	; (8002fec <HAL_RCC_OscConfig+0x470>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10f      	bne.n	8002e12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	4b7d      	ldr	r3, [pc, #500]	; (8002fec <HAL_RCC_OscConfig+0x470>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	4a7c      	ldr	r2, [pc, #496]	; (8002fec <HAL_RCC_OscConfig+0x470>)
 8002dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e00:	6413      	str	r3, [r2, #64]	; 0x40
 8002e02:	4b7a      	ldr	r3, [pc, #488]	; (8002fec <HAL_RCC_OscConfig+0x470>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	60bb      	str	r3, [r7, #8]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e12:	4b77      	ldr	r3, [pc, #476]	; (8002ff0 <HAL_RCC_OscConfig+0x474>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d118      	bne.n	8002e50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e1e:	4b74      	ldr	r3, [pc, #464]	; (8002ff0 <HAL_RCC_OscConfig+0x474>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a73      	ldr	r2, [pc, #460]	; (8002ff0 <HAL_RCC_OscConfig+0x474>)
 8002e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e2a:	f7fe fead 	bl	8001b88 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e32:	f7fe fea9 	bl	8001b88 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e10c      	b.n	800305e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e44:	4b6a      	ldr	r3, [pc, #424]	; (8002ff0 <HAL_RCC_OscConfig+0x474>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0f0      	beq.n	8002e32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d106      	bne.n	8002e66 <HAL_RCC_OscConfig+0x2ea>
 8002e58:	4b64      	ldr	r3, [pc, #400]	; (8002fec <HAL_RCC_OscConfig+0x470>)
 8002e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5c:	4a63      	ldr	r2, [pc, #396]	; (8002fec <HAL_RCC_OscConfig+0x470>)
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	6713      	str	r3, [r2, #112]	; 0x70
 8002e64:	e01c      	b.n	8002ea0 <HAL_RCC_OscConfig+0x324>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	2b05      	cmp	r3, #5
 8002e6c:	d10c      	bne.n	8002e88 <HAL_RCC_OscConfig+0x30c>
 8002e6e:	4b5f      	ldr	r3, [pc, #380]	; (8002fec <HAL_RCC_OscConfig+0x470>)
 8002e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e72:	4a5e      	ldr	r2, [pc, #376]	; (8002fec <HAL_RCC_OscConfig+0x470>)
 8002e74:	f043 0304 	orr.w	r3, r3, #4
 8002e78:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7a:	4b5c      	ldr	r3, [pc, #368]	; (8002fec <HAL_RCC_OscConfig+0x470>)
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7e:	4a5b      	ldr	r2, [pc, #364]	; (8002fec <HAL_RCC_OscConfig+0x470>)
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	6713      	str	r3, [r2, #112]	; 0x70
 8002e86:	e00b      	b.n	8002ea0 <HAL_RCC_OscConfig+0x324>
 8002e88:	4b58      	ldr	r3, [pc, #352]	; (8002fec <HAL_RCC_OscConfig+0x470>)
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8c:	4a57      	ldr	r2, [pc, #348]	; (8002fec <HAL_RCC_OscConfig+0x470>)
 8002e8e:	f023 0301 	bic.w	r3, r3, #1
 8002e92:	6713      	str	r3, [r2, #112]	; 0x70
 8002e94:	4b55      	ldr	r3, [pc, #340]	; (8002fec <HAL_RCC_OscConfig+0x470>)
 8002e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e98:	4a54      	ldr	r2, [pc, #336]	; (8002fec <HAL_RCC_OscConfig+0x470>)
 8002e9a:	f023 0304 	bic.w	r3, r3, #4
 8002e9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d015      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea8:	f7fe fe6e 	bl	8001b88 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eae:	e00a      	b.n	8002ec6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb0:	f7fe fe6a 	bl	8001b88 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e0cb      	b.n	800305e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec6:	4b49      	ldr	r3, [pc, #292]	; (8002fec <HAL_RCC_OscConfig+0x470>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0ee      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x334>
 8002ed2:	e014      	b.n	8002efe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed4:	f7fe fe58 	bl	8001b88 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eda:	e00a      	b.n	8002ef2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002edc:	f7fe fe54 	bl	8001b88 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e0b5      	b.n	800305e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef2:	4b3e      	ldr	r3, [pc, #248]	; (8002fec <HAL_RCC_OscConfig+0x470>)
 8002ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1ee      	bne.n	8002edc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d105      	bne.n	8002f10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f04:	4b39      	ldr	r3, [pc, #228]	; (8002fec <HAL_RCC_OscConfig+0x470>)
 8002f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f08:	4a38      	ldr	r2, [pc, #224]	; (8002fec <HAL_RCC_OscConfig+0x470>)
 8002f0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 80a1 	beq.w	800305c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f1a:	4b34      	ldr	r3, [pc, #208]	; (8002fec <HAL_RCC_OscConfig+0x470>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d05c      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d141      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f2e:	4b31      	ldr	r3, [pc, #196]	; (8002ff4 <HAL_RCC_OscConfig+0x478>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7fe fe28 	bl	8001b88 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f3c:	f7fe fe24 	bl	8001b88 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e087      	b.n	800305e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4e:	4b27      	ldr	r3, [pc, #156]	; (8002fec <HAL_RCC_OscConfig+0x470>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69da      	ldr	r2, [r3, #28]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	431a      	orrs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	019b      	lsls	r3, r3, #6
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f70:	085b      	lsrs	r3, r3, #1
 8002f72:	3b01      	subs	r3, #1
 8002f74:	041b      	lsls	r3, r3, #16
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7c:	061b      	lsls	r3, r3, #24
 8002f7e:	491b      	ldr	r1, [pc, #108]	; (8002fec <HAL_RCC_OscConfig+0x470>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f84:	4b1b      	ldr	r3, [pc, #108]	; (8002ff4 <HAL_RCC_OscConfig+0x478>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8a:	f7fe fdfd 	bl	8001b88 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f92:	f7fe fdf9 	bl	8001b88 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e05c      	b.n	800305e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa4:	4b11      	ldr	r3, [pc, #68]	; (8002fec <HAL_RCC_OscConfig+0x470>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d0f0      	beq.n	8002f92 <HAL_RCC_OscConfig+0x416>
 8002fb0:	e054      	b.n	800305c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb2:	4b10      	ldr	r3, [pc, #64]	; (8002ff4 <HAL_RCC_OscConfig+0x478>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb8:	f7fe fde6 	bl	8001b88 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc0:	f7fe fde2 	bl	8001b88 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e045      	b.n	800305e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd2:	4b06      	ldr	r3, [pc, #24]	; (8002fec <HAL_RCC_OscConfig+0x470>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f0      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x444>
 8002fde:	e03d      	b.n	800305c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d107      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e038      	b.n	800305e <HAL_RCC_OscConfig+0x4e2>
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	40007000 	.word	0x40007000
 8002ff4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ff8:	4b1b      	ldr	r3, [pc, #108]	; (8003068 <HAL_RCC_OscConfig+0x4ec>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d028      	beq.n	8003058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003010:	429a      	cmp	r2, r3
 8003012:	d121      	bne.n	8003058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800301e:	429a      	cmp	r2, r3
 8003020:	d11a      	bne.n	8003058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003028:	4013      	ands	r3, r2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800302e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003030:	4293      	cmp	r3, r2
 8003032:	d111      	bne.n	8003058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303e:	085b      	lsrs	r3, r3, #1
 8003040:	3b01      	subs	r3, #1
 8003042:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003044:	429a      	cmp	r2, r3
 8003046:	d107      	bne.n	8003058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003052:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003054:	429a      	cmp	r2, r3
 8003056:	d001      	beq.n	800305c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40023800 	.word	0x40023800

0800306c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e0cc      	b.n	800321a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003080:	4b68      	ldr	r3, [pc, #416]	; (8003224 <HAL_RCC_ClockConfig+0x1b8>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d90c      	bls.n	80030a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308e:	4b65      	ldr	r3, [pc, #404]	; (8003224 <HAL_RCC_ClockConfig+0x1b8>)
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003096:	4b63      	ldr	r3, [pc, #396]	; (8003224 <HAL_RCC_ClockConfig+0x1b8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d001      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e0b8      	b.n	800321a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d020      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d005      	beq.n	80030cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030c0:	4b59      	ldr	r3, [pc, #356]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	4a58      	ldr	r2, [pc, #352]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0308 	and.w	r3, r3, #8
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030d8:	4b53      	ldr	r3, [pc, #332]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	4a52      	ldr	r2, [pc, #328]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e4:	4b50      	ldr	r3, [pc, #320]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	494d      	ldr	r1, [pc, #308]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d044      	beq.n	800318c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d107      	bne.n	800311a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310a:	4b47      	ldr	r3, [pc, #284]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d119      	bne.n	800314a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e07f      	b.n	800321a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b02      	cmp	r3, #2
 8003120:	d003      	beq.n	800312a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003126:	2b03      	cmp	r3, #3
 8003128:	d107      	bne.n	800313a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312a:	4b3f      	ldr	r3, [pc, #252]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d109      	bne.n	800314a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e06f      	b.n	800321a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313a:	4b3b      	ldr	r3, [pc, #236]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e067      	b.n	800321a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800314a:	4b37      	ldr	r3, [pc, #220]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f023 0203 	bic.w	r2, r3, #3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	4934      	ldr	r1, [pc, #208]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 8003158:	4313      	orrs	r3, r2
 800315a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800315c:	f7fe fd14 	bl	8001b88 <HAL_GetTick>
 8003160:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003162:	e00a      	b.n	800317a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003164:	f7fe fd10 	bl	8001b88 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003172:	4293      	cmp	r3, r2
 8003174:	d901      	bls.n	800317a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e04f      	b.n	800321a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317a:	4b2b      	ldr	r3, [pc, #172]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 020c 	and.w	r2, r3, #12
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	429a      	cmp	r2, r3
 800318a:	d1eb      	bne.n	8003164 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800318c:	4b25      	ldr	r3, [pc, #148]	; (8003224 <HAL_RCC_ClockConfig+0x1b8>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d20c      	bcs.n	80031b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319a:	4b22      	ldr	r3, [pc, #136]	; (8003224 <HAL_RCC_ClockConfig+0x1b8>)
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a2:	4b20      	ldr	r3, [pc, #128]	; (8003224 <HAL_RCC_ClockConfig+0x1b8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d001      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e032      	b.n	800321a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d008      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031c0:	4b19      	ldr	r3, [pc, #100]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	4916      	ldr	r1, [pc, #88]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d009      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031de:	4b12      	ldr	r3, [pc, #72]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	490e      	ldr	r1, [pc, #56]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031f2:	f000 f821 	bl	8003238 <HAL_RCC_GetSysClockFreq>
 80031f6:	4602      	mov	r2, r0
 80031f8:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	091b      	lsrs	r3, r3, #4
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	490a      	ldr	r1, [pc, #40]	; (800322c <HAL_RCC_ClockConfig+0x1c0>)
 8003204:	5ccb      	ldrb	r3, [r1, r3]
 8003206:	fa22 f303 	lsr.w	r3, r2, r3
 800320a:	4a09      	ldr	r2, [pc, #36]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 800320c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800320e:	4b09      	ldr	r3, [pc, #36]	; (8003234 <HAL_RCC_ClockConfig+0x1c8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f7fd fef6 	bl	8001004 <HAL_InitTick>

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40023c00 	.word	0x40023c00
 8003228:	40023800 	.word	0x40023800
 800322c:	08007714 	.word	0x08007714
 8003230:	20000000 	.word	0x20000000
 8003234:	20000004 	.word	0x20000004

08003238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800323c:	b094      	sub	sp, #80	; 0x50
 800323e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	647b      	str	r3, [r7, #68]	; 0x44
 8003244:	2300      	movs	r3, #0
 8003246:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003248:	2300      	movs	r3, #0
 800324a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003250:	4b79      	ldr	r3, [pc, #484]	; (8003438 <HAL_RCC_GetSysClockFreq+0x200>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 030c 	and.w	r3, r3, #12
 8003258:	2b08      	cmp	r3, #8
 800325a:	d00d      	beq.n	8003278 <HAL_RCC_GetSysClockFreq+0x40>
 800325c:	2b08      	cmp	r3, #8
 800325e:	f200 80e1 	bhi.w	8003424 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <HAL_RCC_GetSysClockFreq+0x34>
 8003266:	2b04      	cmp	r3, #4
 8003268:	d003      	beq.n	8003272 <HAL_RCC_GetSysClockFreq+0x3a>
 800326a:	e0db      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800326c:	4b73      	ldr	r3, [pc, #460]	; (800343c <HAL_RCC_GetSysClockFreq+0x204>)
 800326e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003270:	e0db      	b.n	800342a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003272:	4b73      	ldr	r3, [pc, #460]	; (8003440 <HAL_RCC_GetSysClockFreq+0x208>)
 8003274:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003276:	e0d8      	b.n	800342a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003278:	4b6f      	ldr	r3, [pc, #444]	; (8003438 <HAL_RCC_GetSysClockFreq+0x200>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003280:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003282:	4b6d      	ldr	r3, [pc, #436]	; (8003438 <HAL_RCC_GetSysClockFreq+0x200>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d063      	beq.n	8003356 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800328e:	4b6a      	ldr	r3, [pc, #424]	; (8003438 <HAL_RCC_GetSysClockFreq+0x200>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	099b      	lsrs	r3, r3, #6
 8003294:	2200      	movs	r2, #0
 8003296:	63bb      	str	r3, [r7, #56]	; 0x38
 8003298:	63fa      	str	r2, [r7, #60]	; 0x3c
 800329a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800329c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032a0:	633b      	str	r3, [r7, #48]	; 0x30
 80032a2:	2300      	movs	r3, #0
 80032a4:	637b      	str	r3, [r7, #52]	; 0x34
 80032a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80032aa:	4622      	mov	r2, r4
 80032ac:	462b      	mov	r3, r5
 80032ae:	f04f 0000 	mov.w	r0, #0
 80032b2:	f04f 0100 	mov.w	r1, #0
 80032b6:	0159      	lsls	r1, r3, #5
 80032b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032bc:	0150      	lsls	r0, r2, #5
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	4621      	mov	r1, r4
 80032c4:	1a51      	subs	r1, r2, r1
 80032c6:	6139      	str	r1, [r7, #16]
 80032c8:	4629      	mov	r1, r5
 80032ca:	eb63 0301 	sbc.w	r3, r3, r1
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	f04f 0200 	mov.w	r2, #0
 80032d4:	f04f 0300 	mov.w	r3, #0
 80032d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032dc:	4659      	mov	r1, fp
 80032de:	018b      	lsls	r3, r1, #6
 80032e0:	4651      	mov	r1, sl
 80032e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032e6:	4651      	mov	r1, sl
 80032e8:	018a      	lsls	r2, r1, #6
 80032ea:	4651      	mov	r1, sl
 80032ec:	ebb2 0801 	subs.w	r8, r2, r1
 80032f0:	4659      	mov	r1, fp
 80032f2:	eb63 0901 	sbc.w	r9, r3, r1
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	f04f 0300 	mov.w	r3, #0
 80032fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003302:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003306:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800330a:	4690      	mov	r8, r2
 800330c:	4699      	mov	r9, r3
 800330e:	4623      	mov	r3, r4
 8003310:	eb18 0303 	adds.w	r3, r8, r3
 8003314:	60bb      	str	r3, [r7, #8]
 8003316:	462b      	mov	r3, r5
 8003318:	eb49 0303 	adc.w	r3, r9, r3
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800332a:	4629      	mov	r1, r5
 800332c:	024b      	lsls	r3, r1, #9
 800332e:	4621      	mov	r1, r4
 8003330:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003334:	4621      	mov	r1, r4
 8003336:	024a      	lsls	r2, r1, #9
 8003338:	4610      	mov	r0, r2
 800333a:	4619      	mov	r1, r3
 800333c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800333e:	2200      	movs	r2, #0
 8003340:	62bb      	str	r3, [r7, #40]	; 0x28
 8003342:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003344:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003348:	f7fc ff9a 	bl	8000280 <__aeabi_uldivmod>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4613      	mov	r3, r2
 8003352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003354:	e058      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003356:	4b38      	ldr	r3, [pc, #224]	; (8003438 <HAL_RCC_GetSysClockFreq+0x200>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	099b      	lsrs	r3, r3, #6
 800335c:	2200      	movs	r2, #0
 800335e:	4618      	mov	r0, r3
 8003360:	4611      	mov	r1, r2
 8003362:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003366:	623b      	str	r3, [r7, #32]
 8003368:	2300      	movs	r3, #0
 800336a:	627b      	str	r3, [r7, #36]	; 0x24
 800336c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003370:	4642      	mov	r2, r8
 8003372:	464b      	mov	r3, r9
 8003374:	f04f 0000 	mov.w	r0, #0
 8003378:	f04f 0100 	mov.w	r1, #0
 800337c:	0159      	lsls	r1, r3, #5
 800337e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003382:	0150      	lsls	r0, r2, #5
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4641      	mov	r1, r8
 800338a:	ebb2 0a01 	subs.w	sl, r2, r1
 800338e:	4649      	mov	r1, r9
 8003390:	eb63 0b01 	sbc.w	fp, r3, r1
 8003394:	f04f 0200 	mov.w	r2, #0
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033a8:	ebb2 040a 	subs.w	r4, r2, sl
 80033ac:	eb63 050b 	sbc.w	r5, r3, fp
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	00eb      	lsls	r3, r5, #3
 80033ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033be:	00e2      	lsls	r2, r4, #3
 80033c0:	4614      	mov	r4, r2
 80033c2:	461d      	mov	r5, r3
 80033c4:	4643      	mov	r3, r8
 80033c6:	18e3      	adds	r3, r4, r3
 80033c8:	603b      	str	r3, [r7, #0]
 80033ca:	464b      	mov	r3, r9
 80033cc:	eb45 0303 	adc.w	r3, r5, r3
 80033d0:	607b      	str	r3, [r7, #4]
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	f04f 0300 	mov.w	r3, #0
 80033da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033de:	4629      	mov	r1, r5
 80033e0:	028b      	lsls	r3, r1, #10
 80033e2:	4621      	mov	r1, r4
 80033e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033e8:	4621      	mov	r1, r4
 80033ea:	028a      	lsls	r2, r1, #10
 80033ec:	4610      	mov	r0, r2
 80033ee:	4619      	mov	r1, r3
 80033f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033f2:	2200      	movs	r2, #0
 80033f4:	61bb      	str	r3, [r7, #24]
 80033f6:	61fa      	str	r2, [r7, #28]
 80033f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033fc:	f7fc ff40 	bl	8000280 <__aeabi_uldivmod>
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	4613      	mov	r3, r2
 8003406:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003408:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <HAL_RCC_GetSysClockFreq+0x200>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	0c1b      	lsrs	r3, r3, #16
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	3301      	adds	r3, #1
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003418:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800341a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800341c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003420:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003422:	e002      	b.n	800342a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003424:	4b05      	ldr	r3, [pc, #20]	; (800343c <HAL_RCC_GetSysClockFreq+0x204>)
 8003426:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003428:	bf00      	nop
    }
  }
  return sysclockfreq;
 800342a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800342c:	4618      	mov	r0, r3
 800342e:	3750      	adds	r7, #80	; 0x50
 8003430:	46bd      	mov	sp, r7
 8003432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003436:	bf00      	nop
 8003438:	40023800 	.word	0x40023800
 800343c:	00f42400 	.word	0x00f42400
 8003440:	007a1200 	.word	0x007a1200

08003444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003448:	4b03      	ldr	r3, [pc, #12]	; (8003458 <HAL_RCC_GetHCLKFreq+0x14>)
 800344a:	681b      	ldr	r3, [r3, #0]
}
 800344c:	4618      	mov	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	20000000 	.word	0x20000000

0800345c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003460:	f7ff fff0 	bl	8003444 <HAL_RCC_GetHCLKFreq>
 8003464:	4602      	mov	r2, r0
 8003466:	4b05      	ldr	r3, [pc, #20]	; (800347c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	0a9b      	lsrs	r3, r3, #10
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	4903      	ldr	r1, [pc, #12]	; (8003480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003472:	5ccb      	ldrb	r3, [r1, r3]
 8003474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003478:	4618      	mov	r0, r3
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40023800 	.word	0x40023800
 8003480:	08007724 	.word	0x08007724

08003484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003488:	f7ff ffdc 	bl	8003444 <HAL_RCC_GetHCLKFreq>
 800348c:	4602      	mov	r2, r0
 800348e:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	0b5b      	lsrs	r3, r3, #13
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	4903      	ldr	r1, [pc, #12]	; (80034a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800349a:	5ccb      	ldrb	r3, [r1, r3]
 800349c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40023800 	.word	0x40023800
 80034a8:	08007724 	.word	0x08007724

080034ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	220f      	movs	r2, #15
 80034ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80034bc:	4b12      	ldr	r3, [pc, #72]	; (8003508 <HAL_RCC_GetClockConfig+0x5c>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 0203 	and.w	r2, r3, #3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80034c8:	4b0f      	ldr	r3, [pc, #60]	; (8003508 <HAL_RCC_GetClockConfig+0x5c>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80034d4:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <HAL_RCC_GetClockConfig+0x5c>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80034e0:	4b09      	ldr	r3, [pc, #36]	; (8003508 <HAL_RCC_GetClockConfig+0x5c>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	08db      	lsrs	r3, r3, #3
 80034e6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80034ee:	4b07      	ldr	r3, [pc, #28]	; (800350c <HAL_RCC_GetClockConfig+0x60>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0207 	and.w	r2, r3, #7
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	601a      	str	r2, [r3, #0]
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	40023800 	.word	0x40023800
 800350c:	40023c00 	.word	0x40023c00

08003510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e041      	b.n	80035a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d106      	bne.n	800353c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7fd fc5c 	bl	8000df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3304      	adds	r3, #4
 800354c:	4619      	mov	r1, r3
 800354e:	4610      	mov	r0, r2
 8003550:	f000 fca0 	bl	8003e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d001      	beq.n	80035c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e044      	b.n	8003652 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a1e      	ldr	r2, [pc, #120]	; (8003660 <HAL_TIM_Base_Start_IT+0xb0>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d018      	beq.n	800361c <HAL_TIM_Base_Start_IT+0x6c>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f2:	d013      	beq.n	800361c <HAL_TIM_Base_Start_IT+0x6c>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a1a      	ldr	r2, [pc, #104]	; (8003664 <HAL_TIM_Base_Start_IT+0xb4>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00e      	beq.n	800361c <HAL_TIM_Base_Start_IT+0x6c>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a19      	ldr	r2, [pc, #100]	; (8003668 <HAL_TIM_Base_Start_IT+0xb8>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d009      	beq.n	800361c <HAL_TIM_Base_Start_IT+0x6c>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a17      	ldr	r2, [pc, #92]	; (800366c <HAL_TIM_Base_Start_IT+0xbc>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d004      	beq.n	800361c <HAL_TIM_Base_Start_IT+0x6c>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a16      	ldr	r2, [pc, #88]	; (8003670 <HAL_TIM_Base_Start_IT+0xc0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d111      	bne.n	8003640 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2b06      	cmp	r3, #6
 800362c:	d010      	beq.n	8003650 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 0201 	orr.w	r2, r2, #1
 800363c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800363e:	e007      	b.n	8003650 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	40010000 	.word	0x40010000
 8003664:	40000400 	.word	0x40000400
 8003668:	40000800 	.word	0x40000800
 800366c:	40000c00 	.word	0x40000c00
 8003670:	40014000 	.word	0x40014000

08003674 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e041      	b.n	800370a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d106      	bne.n	80036a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f839 	bl	8003712 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3304      	adds	r3, #4
 80036b0:	4619      	mov	r1, r3
 80036b2:	4610      	mov	r0, r2
 80036b4:	f000 fbee 	bl	8003e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
	...

08003728 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d109      	bne.n	800374c <HAL_TIM_PWM_Start+0x24>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b01      	cmp	r3, #1
 8003742:	bf14      	ite	ne
 8003744:	2301      	movne	r3, #1
 8003746:	2300      	moveq	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	e022      	b.n	8003792 <HAL_TIM_PWM_Start+0x6a>
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	2b04      	cmp	r3, #4
 8003750:	d109      	bne.n	8003766 <HAL_TIM_PWM_Start+0x3e>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b01      	cmp	r3, #1
 800375c:	bf14      	ite	ne
 800375e:	2301      	movne	r3, #1
 8003760:	2300      	moveq	r3, #0
 8003762:	b2db      	uxtb	r3, r3
 8003764:	e015      	b.n	8003792 <HAL_TIM_PWM_Start+0x6a>
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2b08      	cmp	r3, #8
 800376a:	d109      	bne.n	8003780 <HAL_TIM_PWM_Start+0x58>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b01      	cmp	r3, #1
 8003776:	bf14      	ite	ne
 8003778:	2301      	movne	r3, #1
 800377a:	2300      	moveq	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	e008      	b.n	8003792 <HAL_TIM_PWM_Start+0x6a>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b01      	cmp	r3, #1
 800378a:	bf14      	ite	ne
 800378c:	2301      	movne	r3, #1
 800378e:	2300      	moveq	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e068      	b.n	800386c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d104      	bne.n	80037aa <HAL_TIM_PWM_Start+0x82>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2202      	movs	r2, #2
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037a8:	e013      	b.n	80037d2 <HAL_TIM_PWM_Start+0xaa>
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	2b04      	cmp	r3, #4
 80037ae:	d104      	bne.n	80037ba <HAL_TIM_PWM_Start+0x92>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037b8:	e00b      	b.n	80037d2 <HAL_TIM_PWM_Start+0xaa>
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d104      	bne.n	80037ca <HAL_TIM_PWM_Start+0xa2>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037c8:	e003      	b.n	80037d2 <HAL_TIM_PWM_Start+0xaa>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2202      	movs	r2, #2
 80037ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2201      	movs	r2, #1
 80037d8:	6839      	ldr	r1, [r7, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 fe0c 	bl	80043f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a23      	ldr	r2, [pc, #140]	; (8003874 <HAL_TIM_PWM_Start+0x14c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d107      	bne.n	80037fa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a1d      	ldr	r2, [pc, #116]	; (8003874 <HAL_TIM_PWM_Start+0x14c>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d018      	beq.n	8003836 <HAL_TIM_PWM_Start+0x10e>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800380c:	d013      	beq.n	8003836 <HAL_TIM_PWM_Start+0x10e>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a19      	ldr	r2, [pc, #100]	; (8003878 <HAL_TIM_PWM_Start+0x150>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d00e      	beq.n	8003836 <HAL_TIM_PWM_Start+0x10e>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a17      	ldr	r2, [pc, #92]	; (800387c <HAL_TIM_PWM_Start+0x154>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d009      	beq.n	8003836 <HAL_TIM_PWM_Start+0x10e>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a16      	ldr	r2, [pc, #88]	; (8003880 <HAL_TIM_PWM_Start+0x158>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d004      	beq.n	8003836 <HAL_TIM_PWM_Start+0x10e>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a14      	ldr	r2, [pc, #80]	; (8003884 <HAL_TIM_PWM_Start+0x15c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d111      	bne.n	800385a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2b06      	cmp	r3, #6
 8003846:	d010      	beq.n	800386a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0201 	orr.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003858:	e007      	b.n	800386a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0201 	orr.w	r2, r2, #1
 8003868:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40010000 	.word	0x40010000
 8003878:	40000400 	.word	0x40000400
 800387c:	40000800 	.word	0x40000800
 8003880:	40000c00 	.word	0x40000c00
 8003884:	40014000 	.word	0x40014000

08003888 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2200      	movs	r2, #0
 8003898:	6839      	ldr	r1, [r7, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fdac 	bl	80043f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a29      	ldr	r2, [pc, #164]	; (800394c <HAL_TIM_PWM_Stop+0xc4>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d117      	bne.n	80038da <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6a1a      	ldr	r2, [r3, #32]
 80038b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80038b4:	4013      	ands	r3, r2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10f      	bne.n	80038da <HAL_TIM_PWM_Stop+0x52>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6a1a      	ldr	r2, [r3, #32]
 80038c0:	f240 4344 	movw	r3, #1092	; 0x444
 80038c4:	4013      	ands	r3, r2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d107      	bne.n	80038da <HAL_TIM_PWM_Stop+0x52>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6a1a      	ldr	r2, [r3, #32]
 80038e0:	f241 1311 	movw	r3, #4369	; 0x1111
 80038e4:	4013      	ands	r3, r2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10f      	bne.n	800390a <HAL_TIM_PWM_Stop+0x82>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	6a1a      	ldr	r2, [r3, #32]
 80038f0:	f240 4344 	movw	r3, #1092	; 0x444
 80038f4:	4013      	ands	r3, r2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d107      	bne.n	800390a <HAL_TIM_PWM_Stop+0x82>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0201 	bic.w	r2, r2, #1
 8003908:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d104      	bne.n	800391a <HAL_TIM_PWM_Stop+0x92>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003918:	e013      	b.n	8003942 <HAL_TIM_PWM_Stop+0xba>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	2b04      	cmp	r3, #4
 800391e:	d104      	bne.n	800392a <HAL_TIM_PWM_Stop+0xa2>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003928:	e00b      	b.n	8003942 <HAL_TIM_PWM_Stop+0xba>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2b08      	cmp	r3, #8
 800392e:	d104      	bne.n	800393a <HAL_TIM_PWM_Stop+0xb2>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003938:	e003      	b.n	8003942 <HAL_TIM_PWM_Stop+0xba>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40010000 	.word	0x40010000

08003950 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d020      	beq.n	80039b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d01b      	beq.n	80039b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f06f 0202 	mvn.w	r2, #2
 8003984:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 fa5b 	bl	8003e56 <HAL_TIM_IC_CaptureCallback>
 80039a0:	e005      	b.n	80039ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 fa4d 	bl	8003e42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 fa5e 	bl	8003e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	f003 0304 	and.w	r3, r3, #4
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d020      	beq.n	8003a00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d01b      	beq.n	8003a00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f06f 0204 	mvn.w	r2, #4
 80039d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2202      	movs	r2, #2
 80039d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 fa35 	bl	8003e56 <HAL_TIM_IC_CaptureCallback>
 80039ec:	e005      	b.n	80039fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 fa27 	bl	8003e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 fa38 	bl	8003e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d020      	beq.n	8003a4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f003 0308 	and.w	r3, r3, #8
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d01b      	beq.n	8003a4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f06f 0208 	mvn.w	r2, #8
 8003a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2204      	movs	r2, #4
 8003a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 fa0f 	bl	8003e56 <HAL_TIM_IC_CaptureCallback>
 8003a38:	e005      	b.n	8003a46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 fa01 	bl	8003e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 fa12 	bl	8003e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f003 0310 	and.w	r3, r3, #16
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d020      	beq.n	8003a98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f003 0310 	and.w	r3, r3, #16
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d01b      	beq.n	8003a98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f06f 0210 	mvn.w	r2, #16
 8003a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2208      	movs	r2, #8
 8003a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f9e9 	bl	8003e56 <HAL_TIM_IC_CaptureCallback>
 8003a84:	e005      	b.n	8003a92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f9db 	bl	8003e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f9ec 	bl	8003e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00c      	beq.n	8003abc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d007      	beq.n	8003abc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f06f 0201 	mvn.w	r2, #1
 8003ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fd f910 	bl	8000cdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00c      	beq.n	8003ae0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d007      	beq.n	8003ae0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 fd2a 	bl	8004534 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00c      	beq.n	8003b04 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d007      	beq.n	8003b04 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f9bd 	bl	8003e7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f003 0320 	and.w	r3, r3, #32
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00c      	beq.n	8003b28 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f003 0320 	and.w	r3, r3, #32
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d007      	beq.n	8003b28 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f06f 0220 	mvn.w	r2, #32
 8003b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 fcfc 	bl	8004520 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b28:	bf00      	nop
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d101      	bne.n	8003b4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	e0ae      	b.n	8003cac <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b0c      	cmp	r3, #12
 8003b5a:	f200 809f 	bhi.w	8003c9c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b5e:	a201      	add	r2, pc, #4	; (adr r2, 8003b64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b64:	08003b99 	.word	0x08003b99
 8003b68:	08003c9d 	.word	0x08003c9d
 8003b6c:	08003c9d 	.word	0x08003c9d
 8003b70:	08003c9d 	.word	0x08003c9d
 8003b74:	08003bd9 	.word	0x08003bd9
 8003b78:	08003c9d 	.word	0x08003c9d
 8003b7c:	08003c9d 	.word	0x08003c9d
 8003b80:	08003c9d 	.word	0x08003c9d
 8003b84:	08003c1b 	.word	0x08003c1b
 8003b88:	08003c9d 	.word	0x08003c9d
 8003b8c:	08003c9d 	.word	0x08003c9d
 8003b90:	08003c9d 	.word	0x08003c9d
 8003b94:	08003c5b 	.word	0x08003c5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68b9      	ldr	r1, [r7, #8]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 fa04 	bl	8003fac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699a      	ldr	r2, [r3, #24]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0208 	orr.w	r2, r2, #8
 8003bb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699a      	ldr	r2, [r3, #24]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0204 	bic.w	r2, r2, #4
 8003bc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6999      	ldr	r1, [r3, #24]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	691a      	ldr	r2, [r3, #16]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	619a      	str	r2, [r3, #24]
      break;
 8003bd6:	e064      	b.n	8003ca2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68b9      	ldr	r1, [r7, #8]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fa4a 	bl	8004078 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	699a      	ldr	r2, [r3, #24]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699a      	ldr	r2, [r3, #24]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6999      	ldr	r1, [r3, #24]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	021a      	lsls	r2, r3, #8
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	619a      	str	r2, [r3, #24]
      break;
 8003c18:	e043      	b.n	8003ca2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68b9      	ldr	r1, [r7, #8]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 fa95 	bl	8004150 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	69da      	ldr	r2, [r3, #28]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f042 0208 	orr.w	r2, r2, #8
 8003c34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	69da      	ldr	r2, [r3, #28]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0204 	bic.w	r2, r2, #4
 8003c44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	69d9      	ldr	r1, [r3, #28]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	61da      	str	r2, [r3, #28]
      break;
 8003c58:	e023      	b.n	8003ca2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68b9      	ldr	r1, [r7, #8]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f000 fadf 	bl	8004224 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	69da      	ldr	r2, [r3, #28]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	69da      	ldr	r2, [r3, #28]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	69d9      	ldr	r1, [r3, #28]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	021a      	lsls	r2, r3, #8
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	61da      	str	r2, [r3, #28]
      break;
 8003c9a:	e002      	b.n	8003ca2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	75fb      	strb	r3, [r7, #23]
      break;
 8003ca0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_TIM_ConfigClockSource+0x1c>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e0b4      	b.n	8003e3a <HAL_TIM_ConfigClockSource+0x186>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cf6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d08:	d03e      	beq.n	8003d88 <HAL_TIM_ConfigClockSource+0xd4>
 8003d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d0e:	f200 8087 	bhi.w	8003e20 <HAL_TIM_ConfigClockSource+0x16c>
 8003d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d16:	f000 8086 	beq.w	8003e26 <HAL_TIM_ConfigClockSource+0x172>
 8003d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d1e:	d87f      	bhi.n	8003e20 <HAL_TIM_ConfigClockSource+0x16c>
 8003d20:	2b70      	cmp	r3, #112	; 0x70
 8003d22:	d01a      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0xa6>
 8003d24:	2b70      	cmp	r3, #112	; 0x70
 8003d26:	d87b      	bhi.n	8003e20 <HAL_TIM_ConfigClockSource+0x16c>
 8003d28:	2b60      	cmp	r3, #96	; 0x60
 8003d2a:	d050      	beq.n	8003dce <HAL_TIM_ConfigClockSource+0x11a>
 8003d2c:	2b60      	cmp	r3, #96	; 0x60
 8003d2e:	d877      	bhi.n	8003e20 <HAL_TIM_ConfigClockSource+0x16c>
 8003d30:	2b50      	cmp	r3, #80	; 0x50
 8003d32:	d03c      	beq.n	8003dae <HAL_TIM_ConfigClockSource+0xfa>
 8003d34:	2b50      	cmp	r3, #80	; 0x50
 8003d36:	d873      	bhi.n	8003e20 <HAL_TIM_ConfigClockSource+0x16c>
 8003d38:	2b40      	cmp	r3, #64	; 0x40
 8003d3a:	d058      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x13a>
 8003d3c:	2b40      	cmp	r3, #64	; 0x40
 8003d3e:	d86f      	bhi.n	8003e20 <HAL_TIM_ConfigClockSource+0x16c>
 8003d40:	2b30      	cmp	r3, #48	; 0x30
 8003d42:	d064      	beq.n	8003e0e <HAL_TIM_ConfigClockSource+0x15a>
 8003d44:	2b30      	cmp	r3, #48	; 0x30
 8003d46:	d86b      	bhi.n	8003e20 <HAL_TIM_ConfigClockSource+0x16c>
 8003d48:	2b20      	cmp	r3, #32
 8003d4a:	d060      	beq.n	8003e0e <HAL_TIM_ConfigClockSource+0x15a>
 8003d4c:	2b20      	cmp	r3, #32
 8003d4e:	d867      	bhi.n	8003e20 <HAL_TIM_ConfigClockSource+0x16c>
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d05c      	beq.n	8003e0e <HAL_TIM_ConfigClockSource+0x15a>
 8003d54:	2b10      	cmp	r3, #16
 8003d56:	d05a      	beq.n	8003e0e <HAL_TIM_ConfigClockSource+0x15a>
 8003d58:	e062      	b.n	8003e20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d6a:	f000 fb25 	bl	80043b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	609a      	str	r2, [r3, #8]
      break;
 8003d86:	e04f      	b.n	8003e28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d98:	f000 fb0e 	bl	80043b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003daa:	609a      	str	r2, [r3, #8]
      break;
 8003dac:	e03c      	b.n	8003e28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dba:	461a      	mov	r2, r3
 8003dbc:	f000 fa82 	bl	80042c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2150      	movs	r1, #80	; 0x50
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 fadb 	bl	8004382 <TIM_ITRx_SetConfig>
      break;
 8003dcc:	e02c      	b.n	8003e28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dda:	461a      	mov	r2, r3
 8003ddc:	f000 faa1 	bl	8004322 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2160      	movs	r1, #96	; 0x60
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 facb 	bl	8004382 <TIM_ITRx_SetConfig>
      break;
 8003dec:	e01c      	b.n	8003e28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	f000 fa62 	bl	80042c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2140      	movs	r1, #64	; 0x40
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 fabb 	bl	8004382 <TIM_ITRx_SetConfig>
      break;
 8003e0c:	e00c      	b.n	8003e28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4619      	mov	r1, r3
 8003e18:	4610      	mov	r0, r2
 8003e1a:	f000 fab2 	bl	8004382 <TIM_ITRx_SetConfig>
      break;
 8003e1e:	e003      	b.n	8003e28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	73fb      	strb	r3, [r7, #15]
      break;
 8003e24:	e000      	b.n	8003e28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
	...

08003e94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a3a      	ldr	r2, [pc, #232]	; (8003f90 <TIM_Base_SetConfig+0xfc>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d00f      	beq.n	8003ecc <TIM_Base_SetConfig+0x38>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb2:	d00b      	beq.n	8003ecc <TIM_Base_SetConfig+0x38>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a37      	ldr	r2, [pc, #220]	; (8003f94 <TIM_Base_SetConfig+0x100>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d007      	beq.n	8003ecc <TIM_Base_SetConfig+0x38>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a36      	ldr	r2, [pc, #216]	; (8003f98 <TIM_Base_SetConfig+0x104>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d003      	beq.n	8003ecc <TIM_Base_SetConfig+0x38>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a35      	ldr	r2, [pc, #212]	; (8003f9c <TIM_Base_SetConfig+0x108>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d108      	bne.n	8003ede <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a2b      	ldr	r2, [pc, #172]	; (8003f90 <TIM_Base_SetConfig+0xfc>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d01b      	beq.n	8003f1e <TIM_Base_SetConfig+0x8a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eec:	d017      	beq.n	8003f1e <TIM_Base_SetConfig+0x8a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a28      	ldr	r2, [pc, #160]	; (8003f94 <TIM_Base_SetConfig+0x100>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d013      	beq.n	8003f1e <TIM_Base_SetConfig+0x8a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a27      	ldr	r2, [pc, #156]	; (8003f98 <TIM_Base_SetConfig+0x104>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00f      	beq.n	8003f1e <TIM_Base_SetConfig+0x8a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a26      	ldr	r2, [pc, #152]	; (8003f9c <TIM_Base_SetConfig+0x108>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00b      	beq.n	8003f1e <TIM_Base_SetConfig+0x8a>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a25      	ldr	r2, [pc, #148]	; (8003fa0 <TIM_Base_SetConfig+0x10c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d007      	beq.n	8003f1e <TIM_Base_SetConfig+0x8a>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a24      	ldr	r2, [pc, #144]	; (8003fa4 <TIM_Base_SetConfig+0x110>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d003      	beq.n	8003f1e <TIM_Base_SetConfig+0x8a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a23      	ldr	r2, [pc, #140]	; (8003fa8 <TIM_Base_SetConfig+0x114>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d108      	bne.n	8003f30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a0e      	ldr	r2, [pc, #56]	; (8003f90 <TIM_Base_SetConfig+0xfc>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d103      	bne.n	8003f64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d105      	bne.n	8003f82 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	f023 0201 	bic.w	r2, r3, #1
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	611a      	str	r2, [r3, #16]
  }
}
 8003f82:	bf00      	nop
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	40010000 	.word	0x40010000
 8003f94:	40000400 	.word	0x40000400
 8003f98:	40000800 	.word	0x40000800
 8003f9c:	40000c00 	.word	0x40000c00
 8003fa0:	40014000 	.word	0x40014000
 8003fa4:	40014400 	.word	0x40014400
 8003fa8:	40014800 	.word	0x40014800

08003fac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	f023 0201 	bic.w	r2, r3, #1
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0303 	bic.w	r3, r3, #3
 8003fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f023 0302 	bic.w	r3, r3, #2
 8003ff4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a1c      	ldr	r2, [pc, #112]	; (8004074 <TIM_OC1_SetConfig+0xc8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d10c      	bne.n	8004022 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f023 0308 	bic.w	r3, r3, #8
 800400e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	4313      	orrs	r3, r2
 8004018:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f023 0304 	bic.w	r3, r3, #4
 8004020:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a13      	ldr	r2, [pc, #76]	; (8004074 <TIM_OC1_SetConfig+0xc8>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d111      	bne.n	800404e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4313      	orrs	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	621a      	str	r2, [r3, #32]
}
 8004068:	bf00      	nop
 800406a:	371c      	adds	r7, #28
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	40010000 	.word	0x40010000

08004078 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004078:	b480      	push	{r7}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	f023 0210 	bic.w	r2, r3, #16
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	021b      	lsls	r3, r3, #8
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f023 0320 	bic.w	r3, r3, #32
 80040c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a1e      	ldr	r2, [pc, #120]	; (800414c <TIM_OC2_SetConfig+0xd4>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d10d      	bne.n	80040f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a15      	ldr	r2, [pc, #84]	; (800414c <TIM_OC2_SetConfig+0xd4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d113      	bne.n	8004124 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004102:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800410a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4313      	orrs	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	621a      	str	r2, [r3, #32]
}
 800413e:	bf00      	nop
 8004140:	371c      	adds	r7, #28
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40010000 	.word	0x40010000

08004150 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800417e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0303 	bic.w	r3, r3, #3
 8004186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a1d      	ldr	r2, [pc, #116]	; (8004220 <TIM_OC3_SetConfig+0xd0>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d10d      	bne.n	80041ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	021b      	lsls	r3, r3, #8
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a14      	ldr	r2, [pc, #80]	; (8004220 <TIM_OC3_SetConfig+0xd0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d113      	bne.n	80041fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	011b      	lsls	r3, r3, #4
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	621a      	str	r2, [r3, #32]
}
 8004214:	bf00      	nop
 8004216:	371c      	adds	r7, #28
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	40010000 	.word	0x40010000

08004224 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800425a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	021b      	lsls	r3, r3, #8
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	4313      	orrs	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800426e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	031b      	lsls	r3, r3, #12
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	4313      	orrs	r3, r2
 800427a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a10      	ldr	r2, [pc, #64]	; (80042c0 <TIM_OC4_SetConfig+0x9c>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d109      	bne.n	8004298 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800428a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	019b      	lsls	r3, r3, #6
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	4313      	orrs	r3, r2
 8004296:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	621a      	str	r2, [r3, #32]
}
 80042b2:	bf00      	nop
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40010000 	.word	0x40010000

080042c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	f023 0201 	bic.w	r2, r3, #1
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f023 030a 	bic.w	r3, r3, #10
 8004300:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	4313      	orrs	r3, r2
 8004308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	621a      	str	r2, [r3, #32]
}
 8004316:	bf00      	nop
 8004318:	371c      	adds	r7, #28
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004322:	b480      	push	{r7}
 8004324:	b087      	sub	sp, #28
 8004326:	af00      	add	r7, sp, #0
 8004328:	60f8      	str	r0, [r7, #12]
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	f023 0210 	bic.w	r2, r3, #16
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800434c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	031b      	lsls	r3, r3, #12
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800435e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	4313      	orrs	r3, r2
 8004368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	621a      	str	r2, [r3, #32]
}
 8004376:	bf00      	nop
 8004378:	371c      	adds	r7, #28
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004382:	b480      	push	{r7}
 8004384:	b085      	sub	sp, #20
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
 800438a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004398:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4313      	orrs	r3, r2
 80043a0:	f043 0307 	orr.w	r3, r3, #7
 80043a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	609a      	str	r2, [r3, #8]
}
 80043ac:	bf00      	nop
 80043ae:	3714      	adds	r7, #20
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
 80043c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	021a      	lsls	r2, r3, #8
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	431a      	orrs	r2, r3
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	4313      	orrs	r3, r2
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	609a      	str	r2, [r3, #8]
}
 80043ec:	bf00      	nop
 80043ee:	371c      	adds	r7, #28
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	f003 031f 	and.w	r3, r3, #31
 800440a:	2201      	movs	r2, #1
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a1a      	ldr	r2, [r3, #32]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	43db      	mvns	r3, r3
 800441a:	401a      	ands	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a1a      	ldr	r2, [r3, #32]
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	f003 031f 	and.w	r3, r3, #31
 800442a:	6879      	ldr	r1, [r7, #4]
 800442c:	fa01 f303 	lsl.w	r3, r1, r3
 8004430:	431a      	orrs	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	621a      	str	r2, [r3, #32]
}
 8004436:	bf00      	nop
 8004438:	371c      	adds	r7, #28
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
	...

08004444 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004454:	2b01      	cmp	r3, #1
 8004456:	d101      	bne.n	800445c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004458:	2302      	movs	r3, #2
 800445a:	e050      	b.n	80044fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004482:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a1c      	ldr	r2, [pc, #112]	; (800450c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d018      	beq.n	80044d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a8:	d013      	beq.n	80044d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a18      	ldr	r2, [pc, #96]	; (8004510 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d00e      	beq.n	80044d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a16      	ldr	r2, [pc, #88]	; (8004514 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d009      	beq.n	80044d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a15      	ldr	r2, [pc, #84]	; (8004518 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d004      	beq.n	80044d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a13      	ldr	r2, [pc, #76]	; (800451c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d10c      	bne.n	80044ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	40010000 	.word	0x40010000
 8004510:	40000400 	.word	0x40000400
 8004514:	40000800 	.word	0x40000800
 8004518:	40000c00 	.word	0x40000c00
 800451c:	40014000 	.word	0x40014000

08004520 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e042      	b.n	80045e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d106      	bne.n	8004574 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7fc fc9c 	bl	8000eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2224      	movs	r2, #36	; 0x24
 8004578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68da      	ldr	r2, [r3, #12]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800458a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 fdbd 	bl	800510c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	691a      	ldr	r2, [r3, #16]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	695a      	ldr	r2, [r3, #20]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68da      	ldr	r2, [r3, #12]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2220      	movs	r2, #32
 80045cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08a      	sub	sp, #40	; 0x28
 80045ec:	af02      	add	r7, sp, #8
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	603b      	str	r3, [r7, #0]
 80045f4:	4613      	mov	r3, r2
 80045f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b20      	cmp	r3, #32
 8004606:	d175      	bne.n	80046f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <HAL_UART_Transmit+0x2c>
 800460e:	88fb      	ldrh	r3, [r7, #6]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e06e      	b.n	80046f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2221      	movs	r2, #33	; 0x21
 8004622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004626:	f7fd faaf 	bl	8001b88 <HAL_GetTick>
 800462a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	88fa      	ldrh	r2, [r7, #6]
 8004630:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	88fa      	ldrh	r2, [r7, #6]
 8004636:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004640:	d108      	bne.n	8004654 <HAL_UART_Transmit+0x6c>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d104      	bne.n	8004654 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800464a:	2300      	movs	r3, #0
 800464c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	61bb      	str	r3, [r7, #24]
 8004652:	e003      	b.n	800465c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004658:	2300      	movs	r3, #0
 800465a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800465c:	e02e      	b.n	80046bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	2200      	movs	r2, #0
 8004666:	2180      	movs	r1, #128	; 0x80
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 fb1f 	bl	8004cac <UART_WaitOnFlagUntilTimeout>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d005      	beq.n	8004680 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2220      	movs	r2, #32
 8004678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e03a      	b.n	80046f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10b      	bne.n	800469e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	461a      	mov	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004694:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	3302      	adds	r3, #2
 800469a:	61bb      	str	r3, [r7, #24]
 800469c:	e007      	b.n	80046ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	781a      	ldrb	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	3301      	adds	r3, #1
 80046ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1cb      	bne.n	800465e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2200      	movs	r2, #0
 80046ce:	2140      	movs	r1, #64	; 0x40
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 faeb 	bl	8004cac <UART_WaitOnFlagUntilTimeout>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d005      	beq.n	80046e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e006      	b.n	80046f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80046f0:	2300      	movs	r3, #0
 80046f2:	e000      	b.n	80046f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80046f4:	2302      	movs	r3, #2
  }
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3720      	adds	r7, #32
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b084      	sub	sp, #16
 8004702:	af00      	add	r7, sp, #0
 8004704:	60f8      	str	r0, [r7, #12]
 8004706:	60b9      	str	r1, [r7, #8]
 8004708:	4613      	mov	r3, r2
 800470a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b20      	cmp	r3, #32
 8004716:	d112      	bne.n	800473e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <HAL_UART_Receive_IT+0x26>
 800471e:	88fb      	ldrh	r3, [r7, #6]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e00b      	b.n	8004740 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800472e:	88fb      	ldrh	r3, [r7, #6]
 8004730:	461a      	mov	r2, r3
 8004732:	68b9      	ldr	r1, [r7, #8]
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 fb12 	bl	8004d5e <UART_Start_Receive_IT>
 800473a:	4603      	mov	r3, r0
 800473c:	e000      	b.n	8004740 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800473e:	2302      	movs	r3, #2
  }
}
 8004740:	4618      	mov	r0, r3
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b0ba      	sub	sp, #232	; 0xe8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800476e:	2300      	movs	r3, #0
 8004770:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004774:	2300      	movs	r3, #0
 8004776:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800477a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800477e:	f003 030f 	and.w	r3, r3, #15
 8004782:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004786:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10f      	bne.n	80047ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800478e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004792:	f003 0320 	and.w	r3, r3, #32
 8004796:	2b00      	cmp	r3, #0
 8004798:	d009      	beq.n	80047ae <HAL_UART_IRQHandler+0x66>
 800479a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800479e:	f003 0320 	and.w	r3, r3, #32
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 fbf2 	bl	8004f90 <UART_Receive_IT>
      return;
 80047ac:	e25b      	b.n	8004c66 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80047ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f000 80de 	beq.w	8004974 <HAL_UART_IRQHandler+0x22c>
 80047b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d106      	bne.n	80047d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 80d1 	beq.w	8004974 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00b      	beq.n	80047f6 <HAL_UART_IRQHandler+0xae>
 80047de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d005      	beq.n	80047f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ee:	f043 0201 	orr.w	r2, r3, #1
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00b      	beq.n	800481a <HAL_UART_IRQHandler+0xd2>
 8004802:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d005      	beq.n	800481a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004812:	f043 0202 	orr.w	r2, r3, #2
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800481a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00b      	beq.n	800483e <HAL_UART_IRQHandler+0xf6>
 8004826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	d005      	beq.n	800483e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004836:	f043 0204 	orr.w	r2, r3, #4
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800483e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004842:	f003 0308 	and.w	r3, r3, #8
 8004846:	2b00      	cmp	r3, #0
 8004848:	d011      	beq.n	800486e <HAL_UART_IRQHandler+0x126>
 800484a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800484e:	f003 0320 	and.w	r3, r3, #32
 8004852:	2b00      	cmp	r3, #0
 8004854:	d105      	bne.n	8004862 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d005      	beq.n	800486e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004866:	f043 0208 	orr.w	r2, r3, #8
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 81f2 	beq.w	8004c5c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800487c:	f003 0320 	and.w	r3, r3, #32
 8004880:	2b00      	cmp	r3, #0
 8004882:	d008      	beq.n	8004896 <HAL_UART_IRQHandler+0x14e>
 8004884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004888:	f003 0320 	and.w	r3, r3, #32
 800488c:	2b00      	cmp	r3, #0
 800488e:	d002      	beq.n	8004896 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 fb7d 	bl	8004f90 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a0:	2b40      	cmp	r3, #64	; 0x40
 80048a2:	bf0c      	ite	eq
 80048a4:	2301      	moveq	r3, #1
 80048a6:	2300      	movne	r3, #0
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d103      	bne.n	80048c2 <HAL_UART_IRQHandler+0x17a>
 80048ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d04f      	beq.n	8004962 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fa85 	bl	8004dd2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d2:	2b40      	cmp	r3, #64	; 0x40
 80048d4:	d141      	bne.n	800495a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	3314      	adds	r3, #20
 80048dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048e4:	e853 3f00 	ldrex	r3, [r3]
 80048e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80048ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	3314      	adds	r3, #20
 80048fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004902:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004906:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800490e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004912:	e841 2300 	strex	r3, r2, [r1]
 8004916:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800491a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1d9      	bne.n	80048d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004926:	2b00      	cmp	r3, #0
 8004928:	d013      	beq.n	8004952 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800492e:	4a7e      	ldr	r2, [pc, #504]	; (8004b28 <HAL_UART_IRQHandler+0x3e0>)
 8004930:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004936:	4618      	mov	r0, r3
 8004938:	f7fd faa8 	bl	8001e8c <HAL_DMA_Abort_IT>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d016      	beq.n	8004970 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800494c:	4610      	mov	r0, r2
 800494e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004950:	e00e      	b.n	8004970 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f994 	bl	8004c80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004958:	e00a      	b.n	8004970 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f990 	bl	8004c80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004960:	e006      	b.n	8004970 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f98c 	bl	8004c80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800496e:	e175      	b.n	8004c5c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004970:	bf00      	nop
    return;
 8004972:	e173      	b.n	8004c5c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004978:	2b01      	cmp	r3, #1
 800497a:	f040 814f 	bne.w	8004c1c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800497e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004982:	f003 0310 	and.w	r3, r3, #16
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 8148 	beq.w	8004c1c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800498c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004990:	f003 0310 	and.w	r3, r3, #16
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 8141 	beq.w	8004c1c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800499a:	2300      	movs	r3, #0
 800499c:	60bb      	str	r3, [r7, #8]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	60bb      	str	r3, [r7, #8]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	60bb      	str	r3, [r7, #8]
 80049ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ba:	2b40      	cmp	r3, #64	; 0x40
 80049bc:	f040 80b6 	bne.w	8004b2c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 8145 	beq.w	8004c60 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049de:	429a      	cmp	r2, r3
 80049e0:	f080 813e 	bcs.w	8004c60 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049f6:	f000 8088 	beq.w	8004b0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	330c      	adds	r3, #12
 8004a00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a08:	e853 3f00 	ldrex	r3, [r3]
 8004a0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	330c      	adds	r3, #12
 8004a22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004a26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a36:	e841 2300 	strex	r3, r2, [r1]
 8004a3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1d9      	bne.n	80049fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3314      	adds	r3, #20
 8004a4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a50:	e853 3f00 	ldrex	r3, [r3]
 8004a54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a58:	f023 0301 	bic.w	r3, r3, #1
 8004a5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	3314      	adds	r3, #20
 8004a66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a76:	e841 2300 	strex	r3, r2, [r1]
 8004a7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1e1      	bne.n	8004a46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3314      	adds	r3, #20
 8004a88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a8c:	e853 3f00 	ldrex	r3, [r3]
 8004a90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	3314      	adds	r3, #20
 8004aa2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004aa6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004aa8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aaa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004aac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004aae:	e841 2300 	strex	r3, r2, [r1]
 8004ab2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1e3      	bne.n	8004a82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2220      	movs	r2, #32
 8004abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	330c      	adds	r3, #12
 8004ace:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad2:	e853 3f00 	ldrex	r3, [r3]
 8004ad6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ada:	f023 0310 	bic.w	r3, r3, #16
 8004ade:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	330c      	adds	r3, #12
 8004ae8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004aec:	65ba      	str	r2, [r7, #88]	; 0x58
 8004aee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004af2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004af4:	e841 2300 	strex	r3, r2, [r1]
 8004af8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e3      	bne.n	8004ac8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7fd f951 	bl	8001dac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	4619      	mov	r1, r3
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f8b7 	bl	8004c94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b26:	e09b      	b.n	8004c60 <HAL_UART_IRQHandler+0x518>
 8004b28:	08004e99 	.word	0x08004e99
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f000 808e 	beq.w	8004c64 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004b48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 8089 	beq.w	8004c64 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	330c      	adds	r3, #12
 8004b58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5c:	e853 3f00 	ldrex	r3, [r3]
 8004b60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	330c      	adds	r3, #12
 8004b72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004b76:	647a      	str	r2, [r7, #68]	; 0x44
 8004b78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b7e:	e841 2300 	strex	r3, r2, [r1]
 8004b82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1e3      	bne.n	8004b52 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	3314      	adds	r3, #20
 8004b90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	e853 3f00 	ldrex	r3, [r3]
 8004b98:	623b      	str	r3, [r7, #32]
   return(result);
 8004b9a:	6a3b      	ldr	r3, [r7, #32]
 8004b9c:	f023 0301 	bic.w	r3, r3, #1
 8004ba0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3314      	adds	r3, #20
 8004baa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004bae:	633a      	str	r2, [r7, #48]	; 0x30
 8004bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bb6:	e841 2300 	strex	r3, r2, [r1]
 8004bba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1e3      	bne.n	8004b8a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	330c      	adds	r3, #12
 8004bd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	e853 3f00 	ldrex	r3, [r3]
 8004bde:	60fb      	str	r3, [r7, #12]
   return(result);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f023 0310 	bic.w	r3, r3, #16
 8004be6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	330c      	adds	r3, #12
 8004bf0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004bf4:	61fa      	str	r2, [r7, #28]
 8004bf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf8:	69b9      	ldr	r1, [r7, #24]
 8004bfa:	69fa      	ldr	r2, [r7, #28]
 8004bfc:	e841 2300 	strex	r3, r2, [r1]
 8004c00:	617b      	str	r3, [r7, #20]
   return(result);
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1e3      	bne.n	8004bd0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c12:	4619      	mov	r1, r3
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f83d 	bl	8004c94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c1a:	e023      	b.n	8004c64 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d009      	beq.n	8004c3c <HAL_UART_IRQHandler+0x4f4>
 8004c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d003      	beq.n	8004c3c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f943 	bl	8004ec0 <UART_Transmit_IT>
    return;
 8004c3a:	e014      	b.n	8004c66 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00e      	beq.n	8004c66 <HAL_UART_IRQHandler+0x51e>
 8004c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d008      	beq.n	8004c66 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f983 	bl	8004f60 <UART_EndTransmit_IT>
    return;
 8004c5a:	e004      	b.n	8004c66 <HAL_UART_IRQHandler+0x51e>
    return;
 8004c5c:	bf00      	nop
 8004c5e:	e002      	b.n	8004c66 <HAL_UART_IRQHandler+0x51e>
      return;
 8004c60:	bf00      	nop
 8004c62:	e000      	b.n	8004c66 <HAL_UART_IRQHandler+0x51e>
      return;
 8004c64:	bf00      	nop
  }
}
 8004c66:	37e8      	adds	r7, #232	; 0xe8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	603b      	str	r3, [r7, #0]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cbc:	e03b      	b.n	8004d36 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc4:	d037      	beq.n	8004d36 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc6:	f7fc ff5f 	bl	8001b88 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	6a3a      	ldr	r2, [r7, #32]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d302      	bcc.n	8004cdc <UART_WaitOnFlagUntilTimeout+0x30>
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e03a      	b.n	8004d56 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	f003 0304 	and.w	r3, r3, #4
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d023      	beq.n	8004d36 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2b80      	cmp	r3, #128	; 0x80
 8004cf2:	d020      	beq.n	8004d36 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2b40      	cmp	r3, #64	; 0x40
 8004cf8:	d01d      	beq.n	8004d36 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0308 	and.w	r3, r3, #8
 8004d04:	2b08      	cmp	r3, #8
 8004d06:	d116      	bne.n	8004d36 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004d08:	2300      	movs	r3, #0
 8004d0a:	617b      	str	r3, [r7, #20]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	617b      	str	r3, [r7, #20]
 8004d1c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f000 f857 	bl	8004dd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2208      	movs	r2, #8
 8004d28:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e00f      	b.n	8004d56 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	bf0c      	ite	eq
 8004d46:	2301      	moveq	r3, #1
 8004d48:	2300      	movne	r3, #0
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	79fb      	ldrb	r3, [r7, #7]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d0b4      	beq.n	8004cbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3718      	adds	r7, #24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b085      	sub	sp, #20
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	60f8      	str	r0, [r7, #12]
 8004d66:	60b9      	str	r1, [r7, #8]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	88fa      	ldrh	r2, [r7, #6]
 8004d76:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	88fa      	ldrh	r2, [r7, #6]
 8004d7c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2222      	movs	r2, #34	; 0x22
 8004d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d007      	beq.n	8004da4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68da      	ldr	r2, [r3, #12]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004da2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	695a      	ldr	r2, [r3, #20]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0201 	orr.w	r2, r2, #1
 8004db2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68da      	ldr	r2, [r3, #12]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 0220 	orr.w	r2, r2, #32
 8004dc2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b095      	sub	sp, #84	; 0x54
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	330c      	adds	r3, #12
 8004de0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de4:	e853 3f00 	ldrex	r3, [r3]
 8004de8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004df0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	330c      	adds	r3, #12
 8004df8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dfa:	643a      	str	r2, [r7, #64]	; 0x40
 8004dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e02:	e841 2300 	strex	r3, r2, [r1]
 8004e06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1e5      	bne.n	8004dda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3314      	adds	r3, #20
 8004e14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	e853 3f00 	ldrex	r3, [r3]
 8004e1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	f023 0301 	bic.w	r3, r3, #1
 8004e24:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3314      	adds	r3, #20
 8004e2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e36:	e841 2300 	strex	r3, r2, [r1]
 8004e3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1e5      	bne.n	8004e0e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d119      	bne.n	8004e7e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	330c      	adds	r3, #12
 8004e50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	e853 3f00 	ldrex	r3, [r3]
 8004e58:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	f023 0310 	bic.w	r3, r3, #16
 8004e60:	647b      	str	r3, [r7, #68]	; 0x44
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	330c      	adds	r3, #12
 8004e68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e6a:	61ba      	str	r2, [r7, #24]
 8004e6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6e:	6979      	ldr	r1, [r7, #20]
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	e841 2300 	strex	r3, r2, [r1]
 8004e76:	613b      	str	r3, [r7, #16]
   return(result);
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1e5      	bne.n	8004e4a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2220      	movs	r2, #32
 8004e82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e8c:	bf00      	nop
 8004e8e:	3754      	adds	r7, #84	; 0x54
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f7ff fee4 	bl	8004c80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004eb8:	bf00      	nop
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b21      	cmp	r3, #33	; 0x21
 8004ed2:	d13e      	bne.n	8004f52 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004edc:	d114      	bne.n	8004f08 <UART_Transmit_IT+0x48>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d110      	bne.n	8004f08 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004efa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	1c9a      	adds	r2, r3, #2
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	621a      	str	r2, [r3, #32]
 8004f06:	e008      	b.n	8004f1a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	1c59      	adds	r1, r3, #1
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	6211      	str	r1, [r2, #32]
 8004f12:	781a      	ldrb	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	4619      	mov	r1, r3
 8004f28:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10f      	bne.n	8004f4e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68da      	ldr	r2, [r3, #12]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f3c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68da      	ldr	r2, [r3, #12]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f4c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	e000      	b.n	8004f54 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f52:	2302      	movs	r3, #2
  }
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f76:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f7ff fe73 	bl	8004c6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b08c      	sub	sp, #48	; 0x30
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b22      	cmp	r3, #34	; 0x22
 8004fa2:	f040 80ae 	bne.w	8005102 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fae:	d117      	bne.n	8004fe0 <UART_Receive_IT+0x50>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d113      	bne.n	8004fe0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd8:	1c9a      	adds	r2, r3, #2
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	629a      	str	r2, [r3, #40]	; 0x28
 8004fde:	e026      	b.n	800502e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff2:	d007      	beq.n	8005004 <UART_Receive_IT+0x74>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10a      	bne.n	8005012 <UART_Receive_IT+0x82>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d106      	bne.n	8005012 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	b2da      	uxtb	r2, r3
 800500c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500e:	701a      	strb	r2, [r3, #0]
 8005010:	e008      	b.n	8005024 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	b2db      	uxtb	r3, r3
 800501a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800501e:	b2da      	uxtb	r2, r3
 8005020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005022:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005028:	1c5a      	adds	r2, r3, #1
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005032:	b29b      	uxth	r3, r3
 8005034:	3b01      	subs	r3, #1
 8005036:	b29b      	uxth	r3, r3
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	4619      	mov	r1, r3
 800503c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800503e:	2b00      	cmp	r3, #0
 8005040:	d15d      	bne.n	80050fe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68da      	ldr	r2, [r3, #12]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0220 	bic.w	r2, r2, #32
 8005050:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68da      	ldr	r2, [r3, #12]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005060:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	695a      	ldr	r2, [r3, #20]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0201 	bic.w	r2, r2, #1
 8005070:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2220      	movs	r2, #32
 8005076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005084:	2b01      	cmp	r3, #1
 8005086:	d135      	bne.n	80050f4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	330c      	adds	r3, #12
 8005094:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	e853 3f00 	ldrex	r3, [r3]
 800509c:	613b      	str	r3, [r7, #16]
   return(result);
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	f023 0310 	bic.w	r3, r3, #16
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	330c      	adds	r3, #12
 80050ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ae:	623a      	str	r2, [r7, #32]
 80050b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b2:	69f9      	ldr	r1, [r7, #28]
 80050b4:	6a3a      	ldr	r2, [r7, #32]
 80050b6:	e841 2300 	strex	r3, r2, [r1]
 80050ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1e5      	bne.n	800508e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0310 	and.w	r3, r3, #16
 80050cc:	2b10      	cmp	r3, #16
 80050ce:	d10a      	bne.n	80050e6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050d0:	2300      	movs	r3, #0
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050ea:	4619      	mov	r1, r3
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7ff fdd1 	bl	8004c94 <HAL_UARTEx_RxEventCallback>
 80050f2:	e002      	b.n	80050fa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f7fb fb05 	bl	8000704 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80050fa:	2300      	movs	r3, #0
 80050fc:	e002      	b.n	8005104 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	e000      	b.n	8005104 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005102:	2302      	movs	r3, #2
  }
}
 8005104:	4618      	mov	r0, r3
 8005106:	3730      	adds	r7, #48	; 0x30
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800510c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005110:	b0c0      	sub	sp, #256	; 0x100
 8005112:	af00      	add	r7, sp, #0
 8005114:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005128:	68d9      	ldr	r1, [r3, #12]
 800512a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	ea40 0301 	orr.w	r3, r0, r1
 8005134:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	431a      	orrs	r2, r3
 8005144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	431a      	orrs	r2, r3
 800514c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	4313      	orrs	r3, r2
 8005154:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005164:	f021 010c 	bic.w	r1, r1, #12
 8005168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005172:	430b      	orrs	r3, r1
 8005174:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005186:	6999      	ldr	r1, [r3, #24]
 8005188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	ea40 0301 	orr.w	r3, r0, r1
 8005192:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	4b8f      	ldr	r3, [pc, #572]	; (80053d8 <UART_SetConfig+0x2cc>)
 800519c:	429a      	cmp	r2, r3
 800519e:	d005      	beq.n	80051ac <UART_SetConfig+0xa0>
 80051a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	4b8d      	ldr	r3, [pc, #564]	; (80053dc <UART_SetConfig+0x2d0>)
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d104      	bne.n	80051b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051ac:	f7fe f96a 	bl	8003484 <HAL_RCC_GetPCLK2Freq>
 80051b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80051b4:	e003      	b.n	80051be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051b6:	f7fe f951 	bl	800345c <HAL_RCC_GetPCLK1Freq>
 80051ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051c8:	f040 810c 	bne.w	80053e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051d0:	2200      	movs	r2, #0
 80051d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80051d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80051da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80051de:	4622      	mov	r2, r4
 80051e0:	462b      	mov	r3, r5
 80051e2:	1891      	adds	r1, r2, r2
 80051e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80051e6:	415b      	adcs	r3, r3
 80051e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80051ee:	4621      	mov	r1, r4
 80051f0:	eb12 0801 	adds.w	r8, r2, r1
 80051f4:	4629      	mov	r1, r5
 80051f6:	eb43 0901 	adc.w	r9, r3, r1
 80051fa:	f04f 0200 	mov.w	r2, #0
 80051fe:	f04f 0300 	mov.w	r3, #0
 8005202:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005206:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800520a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800520e:	4690      	mov	r8, r2
 8005210:	4699      	mov	r9, r3
 8005212:	4623      	mov	r3, r4
 8005214:	eb18 0303 	adds.w	r3, r8, r3
 8005218:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800521c:	462b      	mov	r3, r5
 800521e:	eb49 0303 	adc.w	r3, r9, r3
 8005222:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005232:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005236:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800523a:	460b      	mov	r3, r1
 800523c:	18db      	adds	r3, r3, r3
 800523e:	653b      	str	r3, [r7, #80]	; 0x50
 8005240:	4613      	mov	r3, r2
 8005242:	eb42 0303 	adc.w	r3, r2, r3
 8005246:	657b      	str	r3, [r7, #84]	; 0x54
 8005248:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800524c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005250:	f7fb f816 	bl	8000280 <__aeabi_uldivmod>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	4b61      	ldr	r3, [pc, #388]	; (80053e0 <UART_SetConfig+0x2d4>)
 800525a:	fba3 2302 	umull	r2, r3, r3, r2
 800525e:	095b      	lsrs	r3, r3, #5
 8005260:	011c      	lsls	r4, r3, #4
 8005262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005266:	2200      	movs	r2, #0
 8005268:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800526c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005270:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005274:	4642      	mov	r2, r8
 8005276:	464b      	mov	r3, r9
 8005278:	1891      	adds	r1, r2, r2
 800527a:	64b9      	str	r1, [r7, #72]	; 0x48
 800527c:	415b      	adcs	r3, r3
 800527e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005280:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005284:	4641      	mov	r1, r8
 8005286:	eb12 0a01 	adds.w	sl, r2, r1
 800528a:	4649      	mov	r1, r9
 800528c:	eb43 0b01 	adc.w	fp, r3, r1
 8005290:	f04f 0200 	mov.w	r2, #0
 8005294:	f04f 0300 	mov.w	r3, #0
 8005298:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800529c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052a4:	4692      	mov	sl, r2
 80052a6:	469b      	mov	fp, r3
 80052a8:	4643      	mov	r3, r8
 80052aa:	eb1a 0303 	adds.w	r3, sl, r3
 80052ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052b2:	464b      	mov	r3, r9
 80052b4:	eb4b 0303 	adc.w	r3, fp, r3
 80052b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80052bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80052cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80052d0:	460b      	mov	r3, r1
 80052d2:	18db      	adds	r3, r3, r3
 80052d4:	643b      	str	r3, [r7, #64]	; 0x40
 80052d6:	4613      	mov	r3, r2
 80052d8:	eb42 0303 	adc.w	r3, r2, r3
 80052dc:	647b      	str	r3, [r7, #68]	; 0x44
 80052de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80052e6:	f7fa ffcb 	bl	8000280 <__aeabi_uldivmod>
 80052ea:	4602      	mov	r2, r0
 80052ec:	460b      	mov	r3, r1
 80052ee:	4611      	mov	r1, r2
 80052f0:	4b3b      	ldr	r3, [pc, #236]	; (80053e0 <UART_SetConfig+0x2d4>)
 80052f2:	fba3 2301 	umull	r2, r3, r3, r1
 80052f6:	095b      	lsrs	r3, r3, #5
 80052f8:	2264      	movs	r2, #100	; 0x64
 80052fa:	fb02 f303 	mul.w	r3, r2, r3
 80052fe:	1acb      	subs	r3, r1, r3
 8005300:	00db      	lsls	r3, r3, #3
 8005302:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005306:	4b36      	ldr	r3, [pc, #216]	; (80053e0 <UART_SetConfig+0x2d4>)
 8005308:	fba3 2302 	umull	r2, r3, r3, r2
 800530c:	095b      	lsrs	r3, r3, #5
 800530e:	005b      	lsls	r3, r3, #1
 8005310:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005314:	441c      	add	r4, r3
 8005316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800531a:	2200      	movs	r2, #0
 800531c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005320:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005324:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005328:	4642      	mov	r2, r8
 800532a:	464b      	mov	r3, r9
 800532c:	1891      	adds	r1, r2, r2
 800532e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005330:	415b      	adcs	r3, r3
 8005332:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005334:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005338:	4641      	mov	r1, r8
 800533a:	1851      	adds	r1, r2, r1
 800533c:	6339      	str	r1, [r7, #48]	; 0x30
 800533e:	4649      	mov	r1, r9
 8005340:	414b      	adcs	r3, r1
 8005342:	637b      	str	r3, [r7, #52]	; 0x34
 8005344:	f04f 0200 	mov.w	r2, #0
 8005348:	f04f 0300 	mov.w	r3, #0
 800534c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005350:	4659      	mov	r1, fp
 8005352:	00cb      	lsls	r3, r1, #3
 8005354:	4651      	mov	r1, sl
 8005356:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800535a:	4651      	mov	r1, sl
 800535c:	00ca      	lsls	r2, r1, #3
 800535e:	4610      	mov	r0, r2
 8005360:	4619      	mov	r1, r3
 8005362:	4603      	mov	r3, r0
 8005364:	4642      	mov	r2, r8
 8005366:	189b      	adds	r3, r3, r2
 8005368:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800536c:	464b      	mov	r3, r9
 800536e:	460a      	mov	r2, r1
 8005370:	eb42 0303 	adc.w	r3, r2, r3
 8005374:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005384:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005388:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800538c:	460b      	mov	r3, r1
 800538e:	18db      	adds	r3, r3, r3
 8005390:	62bb      	str	r3, [r7, #40]	; 0x28
 8005392:	4613      	mov	r3, r2
 8005394:	eb42 0303 	adc.w	r3, r2, r3
 8005398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800539a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800539e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80053a2:	f7fa ff6d 	bl	8000280 <__aeabi_uldivmod>
 80053a6:	4602      	mov	r2, r0
 80053a8:	460b      	mov	r3, r1
 80053aa:	4b0d      	ldr	r3, [pc, #52]	; (80053e0 <UART_SetConfig+0x2d4>)
 80053ac:	fba3 1302 	umull	r1, r3, r3, r2
 80053b0:	095b      	lsrs	r3, r3, #5
 80053b2:	2164      	movs	r1, #100	; 0x64
 80053b4:	fb01 f303 	mul.w	r3, r1, r3
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	3332      	adds	r3, #50	; 0x32
 80053be:	4a08      	ldr	r2, [pc, #32]	; (80053e0 <UART_SetConfig+0x2d4>)
 80053c0:	fba2 2303 	umull	r2, r3, r2, r3
 80053c4:	095b      	lsrs	r3, r3, #5
 80053c6:	f003 0207 	and.w	r2, r3, #7
 80053ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4422      	add	r2, r4
 80053d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053d4:	e106      	b.n	80055e4 <UART_SetConfig+0x4d8>
 80053d6:	bf00      	nop
 80053d8:	40011000 	.word	0x40011000
 80053dc:	40011400 	.word	0x40011400
 80053e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053e8:	2200      	movs	r2, #0
 80053ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80053ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80053f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80053f6:	4642      	mov	r2, r8
 80053f8:	464b      	mov	r3, r9
 80053fa:	1891      	adds	r1, r2, r2
 80053fc:	6239      	str	r1, [r7, #32]
 80053fe:	415b      	adcs	r3, r3
 8005400:	627b      	str	r3, [r7, #36]	; 0x24
 8005402:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005406:	4641      	mov	r1, r8
 8005408:	1854      	adds	r4, r2, r1
 800540a:	4649      	mov	r1, r9
 800540c:	eb43 0501 	adc.w	r5, r3, r1
 8005410:	f04f 0200 	mov.w	r2, #0
 8005414:	f04f 0300 	mov.w	r3, #0
 8005418:	00eb      	lsls	r3, r5, #3
 800541a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800541e:	00e2      	lsls	r2, r4, #3
 8005420:	4614      	mov	r4, r2
 8005422:	461d      	mov	r5, r3
 8005424:	4643      	mov	r3, r8
 8005426:	18e3      	adds	r3, r4, r3
 8005428:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800542c:	464b      	mov	r3, r9
 800542e:	eb45 0303 	adc.w	r3, r5, r3
 8005432:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005442:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005446:	f04f 0200 	mov.w	r2, #0
 800544a:	f04f 0300 	mov.w	r3, #0
 800544e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005452:	4629      	mov	r1, r5
 8005454:	008b      	lsls	r3, r1, #2
 8005456:	4621      	mov	r1, r4
 8005458:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800545c:	4621      	mov	r1, r4
 800545e:	008a      	lsls	r2, r1, #2
 8005460:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005464:	f7fa ff0c 	bl	8000280 <__aeabi_uldivmod>
 8005468:	4602      	mov	r2, r0
 800546a:	460b      	mov	r3, r1
 800546c:	4b60      	ldr	r3, [pc, #384]	; (80055f0 <UART_SetConfig+0x4e4>)
 800546e:	fba3 2302 	umull	r2, r3, r3, r2
 8005472:	095b      	lsrs	r3, r3, #5
 8005474:	011c      	lsls	r4, r3, #4
 8005476:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800547a:	2200      	movs	r2, #0
 800547c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005480:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005484:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005488:	4642      	mov	r2, r8
 800548a:	464b      	mov	r3, r9
 800548c:	1891      	adds	r1, r2, r2
 800548e:	61b9      	str	r1, [r7, #24]
 8005490:	415b      	adcs	r3, r3
 8005492:	61fb      	str	r3, [r7, #28]
 8005494:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005498:	4641      	mov	r1, r8
 800549a:	1851      	adds	r1, r2, r1
 800549c:	6139      	str	r1, [r7, #16]
 800549e:	4649      	mov	r1, r9
 80054a0:	414b      	adcs	r3, r1
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	f04f 0200 	mov.w	r2, #0
 80054a8:	f04f 0300 	mov.w	r3, #0
 80054ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054b0:	4659      	mov	r1, fp
 80054b2:	00cb      	lsls	r3, r1, #3
 80054b4:	4651      	mov	r1, sl
 80054b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054ba:	4651      	mov	r1, sl
 80054bc:	00ca      	lsls	r2, r1, #3
 80054be:	4610      	mov	r0, r2
 80054c0:	4619      	mov	r1, r3
 80054c2:	4603      	mov	r3, r0
 80054c4:	4642      	mov	r2, r8
 80054c6:	189b      	adds	r3, r3, r2
 80054c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054cc:	464b      	mov	r3, r9
 80054ce:	460a      	mov	r2, r1
 80054d0:	eb42 0303 	adc.w	r3, r2, r3
 80054d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80054e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80054e4:	f04f 0200 	mov.w	r2, #0
 80054e8:	f04f 0300 	mov.w	r3, #0
 80054ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80054f0:	4649      	mov	r1, r9
 80054f2:	008b      	lsls	r3, r1, #2
 80054f4:	4641      	mov	r1, r8
 80054f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054fa:	4641      	mov	r1, r8
 80054fc:	008a      	lsls	r2, r1, #2
 80054fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005502:	f7fa febd 	bl	8000280 <__aeabi_uldivmod>
 8005506:	4602      	mov	r2, r0
 8005508:	460b      	mov	r3, r1
 800550a:	4611      	mov	r1, r2
 800550c:	4b38      	ldr	r3, [pc, #224]	; (80055f0 <UART_SetConfig+0x4e4>)
 800550e:	fba3 2301 	umull	r2, r3, r3, r1
 8005512:	095b      	lsrs	r3, r3, #5
 8005514:	2264      	movs	r2, #100	; 0x64
 8005516:	fb02 f303 	mul.w	r3, r2, r3
 800551a:	1acb      	subs	r3, r1, r3
 800551c:	011b      	lsls	r3, r3, #4
 800551e:	3332      	adds	r3, #50	; 0x32
 8005520:	4a33      	ldr	r2, [pc, #204]	; (80055f0 <UART_SetConfig+0x4e4>)
 8005522:	fba2 2303 	umull	r2, r3, r2, r3
 8005526:	095b      	lsrs	r3, r3, #5
 8005528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800552c:	441c      	add	r4, r3
 800552e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005532:	2200      	movs	r2, #0
 8005534:	673b      	str	r3, [r7, #112]	; 0x70
 8005536:	677a      	str	r2, [r7, #116]	; 0x74
 8005538:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800553c:	4642      	mov	r2, r8
 800553e:	464b      	mov	r3, r9
 8005540:	1891      	adds	r1, r2, r2
 8005542:	60b9      	str	r1, [r7, #8]
 8005544:	415b      	adcs	r3, r3
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800554c:	4641      	mov	r1, r8
 800554e:	1851      	adds	r1, r2, r1
 8005550:	6039      	str	r1, [r7, #0]
 8005552:	4649      	mov	r1, r9
 8005554:	414b      	adcs	r3, r1
 8005556:	607b      	str	r3, [r7, #4]
 8005558:	f04f 0200 	mov.w	r2, #0
 800555c:	f04f 0300 	mov.w	r3, #0
 8005560:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005564:	4659      	mov	r1, fp
 8005566:	00cb      	lsls	r3, r1, #3
 8005568:	4651      	mov	r1, sl
 800556a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800556e:	4651      	mov	r1, sl
 8005570:	00ca      	lsls	r2, r1, #3
 8005572:	4610      	mov	r0, r2
 8005574:	4619      	mov	r1, r3
 8005576:	4603      	mov	r3, r0
 8005578:	4642      	mov	r2, r8
 800557a:	189b      	adds	r3, r3, r2
 800557c:	66bb      	str	r3, [r7, #104]	; 0x68
 800557e:	464b      	mov	r3, r9
 8005580:	460a      	mov	r2, r1
 8005582:	eb42 0303 	adc.w	r3, r2, r3
 8005586:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	663b      	str	r3, [r7, #96]	; 0x60
 8005592:	667a      	str	r2, [r7, #100]	; 0x64
 8005594:	f04f 0200 	mov.w	r2, #0
 8005598:	f04f 0300 	mov.w	r3, #0
 800559c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80055a0:	4649      	mov	r1, r9
 80055a2:	008b      	lsls	r3, r1, #2
 80055a4:	4641      	mov	r1, r8
 80055a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055aa:	4641      	mov	r1, r8
 80055ac:	008a      	lsls	r2, r1, #2
 80055ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80055b2:	f7fa fe65 	bl	8000280 <__aeabi_uldivmod>
 80055b6:	4602      	mov	r2, r0
 80055b8:	460b      	mov	r3, r1
 80055ba:	4b0d      	ldr	r3, [pc, #52]	; (80055f0 <UART_SetConfig+0x4e4>)
 80055bc:	fba3 1302 	umull	r1, r3, r3, r2
 80055c0:	095b      	lsrs	r3, r3, #5
 80055c2:	2164      	movs	r1, #100	; 0x64
 80055c4:	fb01 f303 	mul.w	r3, r1, r3
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	011b      	lsls	r3, r3, #4
 80055cc:	3332      	adds	r3, #50	; 0x32
 80055ce:	4a08      	ldr	r2, [pc, #32]	; (80055f0 <UART_SetConfig+0x4e4>)
 80055d0:	fba2 2303 	umull	r2, r3, r2, r3
 80055d4:	095b      	lsrs	r3, r3, #5
 80055d6:	f003 020f 	and.w	r2, r3, #15
 80055da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4422      	add	r2, r4
 80055e2:	609a      	str	r2, [r3, #8]
}
 80055e4:	bf00      	nop
 80055e6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80055ea:	46bd      	mov	sp, r7
 80055ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055f0:	51eb851f 	.word	0x51eb851f

080055f4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	4603      	mov	r3, r0
 80055fc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80055fe:	2300      	movs	r3, #0
 8005600:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005602:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005606:	2b84      	cmp	r3, #132	; 0x84
 8005608:	d005      	beq.n	8005616 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800560a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	4413      	add	r3, r2
 8005612:	3303      	adds	r3, #3
 8005614:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005616:	68fb      	ldr	r3, [r7, #12]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3714      	adds	r7, #20
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005628:	f000 faf6 	bl	8005c18 <vTaskStartScheduler>
  
  return osOK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	bd80      	pop	{r7, pc}

08005632 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005632:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005634:	b089      	sub	sp, #36	; 0x24
 8005636:	af04      	add	r7, sp, #16
 8005638:	6078      	str	r0, [r7, #4]
 800563a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d020      	beq.n	8005686 <osThreadCreate+0x54>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d01c      	beq.n	8005686 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685c      	ldr	r4, [r3, #4]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691e      	ldr	r6, [r3, #16]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800565e:	4618      	mov	r0, r3
 8005660:	f7ff ffc8 	bl	80055f4 <makeFreeRtosPriority>
 8005664:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800566e:	9202      	str	r2, [sp, #8]
 8005670:	9301      	str	r3, [sp, #4]
 8005672:	9100      	str	r1, [sp, #0]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	4632      	mov	r2, r6
 8005678:	4629      	mov	r1, r5
 800567a:	4620      	mov	r0, r4
 800567c:	f000 f8ed 	bl	800585a <xTaskCreateStatic>
 8005680:	4603      	mov	r3, r0
 8005682:	60fb      	str	r3, [r7, #12]
 8005684:	e01c      	b.n	80056c0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685c      	ldr	r4, [r3, #4]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005692:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800569a:	4618      	mov	r0, r3
 800569c:	f7ff ffaa 	bl	80055f4 <makeFreeRtosPriority>
 80056a0:	4602      	mov	r2, r0
 80056a2:	f107 030c 	add.w	r3, r7, #12
 80056a6:	9301      	str	r3, [sp, #4]
 80056a8:	9200      	str	r2, [sp, #0]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	4632      	mov	r2, r6
 80056ae:	4629      	mov	r1, r5
 80056b0:	4620      	mov	r0, r4
 80056b2:	f000 f92f 	bl	8005914 <xTaskCreate>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d001      	beq.n	80056c0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80056bc:	2300      	movs	r3, #0
 80056be:	e000      	b.n	80056c2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80056c0:	68fb      	ldr	r3, [r7, #12]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056ca <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b084      	sub	sp, #16
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <osDelay+0x16>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	e000      	b.n	80056e2 <osDelay+0x18>
 80056e0:	2301      	movs	r3, #1
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 fa64 	bl	8005bb0 <vTaskDelay>
  
  return osOK;
 80056e8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056f2:	b480      	push	{r7}
 80056f4:	b083      	sub	sp, #12
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f103 0208 	add.w	r2, r3, #8
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f04f 32ff 	mov.w	r2, #4294967295
 800570a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f103 0208 	add.w	r2, r3, #8
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f103 0208 	add.w	r2, r3, #8
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005726:	bf00      	nop
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005732:	b480      	push	{r7}
 8005734:	b083      	sub	sp, #12
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	689a      	ldr	r2, [r3, #8]
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	1c5a      	adds	r2, r3, #1
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	601a      	str	r2, [r3, #0]
}
 8005788:	bf00      	nop
 800578a:	3714      	adds	r7, #20
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057aa:	d103      	bne.n	80057b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	e00c      	b.n	80057ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	3308      	adds	r3, #8
 80057b8:	60fb      	str	r3, [r7, #12]
 80057ba:	e002      	b.n	80057c2 <vListInsert+0x2e>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	60fb      	str	r3, [r7, #12]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d2f6      	bcs.n	80057bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	1c5a      	adds	r2, r3, #1
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	601a      	str	r2, [r3, #0]
}
 80057fa:	bf00      	nop
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005806:	b480      	push	{r7}
 8005808:	b085      	sub	sp, #20
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6892      	ldr	r2, [r2, #8]
 800581c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	6852      	ldr	r2, [r2, #4]
 8005826:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	429a      	cmp	r2, r3
 8005830:	d103      	bne.n	800583a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	689a      	ldr	r2, [r3, #8]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	1e5a      	subs	r2, r3, #1
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3714      	adds	r7, #20
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800585a:	b580      	push	{r7, lr}
 800585c:	b08e      	sub	sp, #56	; 0x38
 800585e:	af04      	add	r7, sp, #16
 8005860:	60f8      	str	r0, [r7, #12]
 8005862:	60b9      	str	r1, [r7, #8]
 8005864:	607a      	str	r2, [r7, #4]
 8005866:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10a      	bne.n	8005884 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800586e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005872:	f383 8811 	msr	BASEPRI, r3
 8005876:	f3bf 8f6f 	isb	sy
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005880:	bf00      	nop
 8005882:	e7fe      	b.n	8005882 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10a      	bne.n	80058a0 <xTaskCreateStatic+0x46>
	__asm volatile
 800588a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588e:	f383 8811 	msr	BASEPRI, r3
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	f3bf 8f4f 	dsb	sy
 800589a:	61fb      	str	r3, [r7, #28]
}
 800589c:	bf00      	nop
 800589e:	e7fe      	b.n	800589e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80058a0:	23a0      	movs	r3, #160	; 0xa0
 80058a2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	2ba0      	cmp	r3, #160	; 0xa0
 80058a8:	d00a      	beq.n	80058c0 <xTaskCreateStatic+0x66>
	__asm volatile
 80058aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ae:	f383 8811 	msr	BASEPRI, r3
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	61bb      	str	r3, [r7, #24]
}
 80058bc:	bf00      	nop
 80058be:	e7fe      	b.n	80058be <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80058c0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80058c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d01e      	beq.n	8005906 <xTaskCreateStatic+0xac>
 80058c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d01b      	beq.n	8005906 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80058d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058d6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80058e0:	2300      	movs	r3, #0
 80058e2:	9303      	str	r3, [sp, #12]
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	9302      	str	r3, [sp, #8]
 80058e8:	f107 0314 	add.w	r3, r7, #20
 80058ec:	9301      	str	r3, [sp, #4]
 80058ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	68b9      	ldr	r1, [r7, #8]
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f000 f851 	bl	80059a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005900:	f000 f8ec 	bl	8005adc <prvAddNewTaskToReadyList>
 8005904:	e001      	b.n	800590a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005906:	2300      	movs	r3, #0
 8005908:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800590a:	697b      	ldr	r3, [r7, #20]
	}
 800590c:	4618      	mov	r0, r3
 800590e:	3728      	adds	r7, #40	; 0x28
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005914:	b580      	push	{r7, lr}
 8005916:	b08c      	sub	sp, #48	; 0x30
 8005918:	af04      	add	r7, sp, #16
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	603b      	str	r3, [r7, #0]
 8005920:	4613      	mov	r3, r2
 8005922:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005924:	88fb      	ldrh	r3, [r7, #6]
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4618      	mov	r0, r3
 800592a:	f000 fef5 	bl	8006718 <pvPortMalloc>
 800592e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00e      	beq.n	8005954 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005936:	20a0      	movs	r0, #160	; 0xa0
 8005938:	f000 feee 	bl	8006718 <pvPortMalloc>
 800593c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d003      	beq.n	800594c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	631a      	str	r2, [r3, #48]	; 0x30
 800594a:	e005      	b.n	8005958 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800594c:	6978      	ldr	r0, [r7, #20]
 800594e:	f000 ffaf 	bl	80068b0 <vPortFree>
 8005952:	e001      	b.n	8005958 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005954:	2300      	movs	r3, #0
 8005956:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d017      	beq.n	800598e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005966:	88fa      	ldrh	r2, [r7, #6]
 8005968:	2300      	movs	r3, #0
 800596a:	9303      	str	r3, [sp, #12]
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	9302      	str	r3, [sp, #8]
 8005970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005972:	9301      	str	r3, [sp, #4]
 8005974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	68b9      	ldr	r1, [r7, #8]
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 f80f 	bl	80059a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005982:	69f8      	ldr	r0, [r7, #28]
 8005984:	f000 f8aa 	bl	8005adc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005988:	2301      	movs	r3, #1
 800598a:	61bb      	str	r3, [r7, #24]
 800598c:	e002      	b.n	8005994 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800598e:	f04f 33ff 	mov.w	r3, #4294967295
 8005992:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005994:	69bb      	ldr	r3, [r7, #24]
	}
 8005996:	4618      	mov	r0, r3
 8005998:	3720      	adds	r7, #32
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
	...

080059a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b088      	sub	sp, #32
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
 80059ac:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80059ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80059b8:	3b01      	subs	r3, #1
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4413      	add	r3, r2
 80059be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	f023 0307 	bic.w	r3, r3, #7
 80059c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	f003 0307 	and.w	r3, r3, #7
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80059d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d6:	f383 8811 	msr	BASEPRI, r3
 80059da:	f3bf 8f6f 	isb	sy
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	617b      	str	r3, [r7, #20]
}
 80059e4:	bf00      	nop
 80059e6:	e7fe      	b.n	80059e6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d01f      	beq.n	8005a2e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059ee:	2300      	movs	r3, #0
 80059f0:	61fb      	str	r3, [r7, #28]
 80059f2:	e012      	b.n	8005a1a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	4413      	add	r3, r2
 80059fa:	7819      	ldrb	r1, [r3, #0]
 80059fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	4413      	add	r3, r2
 8005a02:	3334      	adds	r3, #52	; 0x34
 8005a04:	460a      	mov	r2, r1
 8005a06:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d006      	beq.n	8005a22 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	3301      	adds	r3, #1
 8005a18:	61fb      	str	r3, [r7, #28]
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	2b0f      	cmp	r3, #15
 8005a1e:	d9e9      	bls.n	80059f4 <prvInitialiseNewTask+0x54>
 8005a20:	e000      	b.n	8005a24 <prvInitialiseNewTask+0x84>
			{
				break;
 8005a22:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a2c:	e003      	b.n	8005a36 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a38:	2b06      	cmp	r3, #6
 8005a3a:	d901      	bls.n	8005a40 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a3c:	2306      	movs	r3, #6
 8005a3e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a44:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a4a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4e:	2200      	movs	r2, #0
 8005a50:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a54:	3304      	adds	r3, #4
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7ff fe6b 	bl	8005732 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5e:	3318      	adds	r3, #24
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7ff fe66 	bl	8005732 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6e:	f1c3 0207 	rsb	r2, r3, #7
 8005a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a7a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8e:	334c      	adds	r3, #76	; 0x4c
 8005a90:	224c      	movs	r2, #76	; 0x4c
 8005a92:	2100      	movs	r1, #0
 8005a94:	4618      	mov	r0, r3
 8005a96:	f001 f8d9 	bl	8006c4c <memset>
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9c:	4a0c      	ldr	r2, [pc, #48]	; (8005ad0 <prvInitialiseNewTask+0x130>)
 8005a9e:	651a      	str	r2, [r3, #80]	; 0x50
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa2:	4a0c      	ldr	r2, [pc, #48]	; (8005ad4 <prvInitialiseNewTask+0x134>)
 8005aa4:	655a      	str	r2, [r3, #84]	; 0x54
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa8:	4a0b      	ldr	r2, [pc, #44]	; (8005ad8 <prvInitialiseNewTask+0x138>)
 8005aaa:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	68f9      	ldr	r1, [r7, #12]
 8005ab0:	69b8      	ldr	r0, [r7, #24]
 8005ab2:	f000 fc1f 	bl	80062f4 <pxPortInitialiseStack>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d002      	beq.n	8005ac8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ac6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ac8:	bf00      	nop
 8005aca:	3720      	adds	r7, #32
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	20004324 	.word	0x20004324
 8005ad4:	2000438c 	.word	0x2000438c
 8005ad8:	200043f4 	.word	0x200043f4

08005adc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ae4:	f000 fd36 	bl	8006554 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ae8:	4b2a      	ldr	r3, [pc, #168]	; (8005b94 <prvAddNewTaskToReadyList+0xb8>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3301      	adds	r3, #1
 8005aee:	4a29      	ldr	r2, [pc, #164]	; (8005b94 <prvAddNewTaskToReadyList+0xb8>)
 8005af0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005af2:	4b29      	ldr	r3, [pc, #164]	; (8005b98 <prvAddNewTaskToReadyList+0xbc>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d109      	bne.n	8005b0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005afa:	4a27      	ldr	r2, [pc, #156]	; (8005b98 <prvAddNewTaskToReadyList+0xbc>)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b00:	4b24      	ldr	r3, [pc, #144]	; (8005b94 <prvAddNewTaskToReadyList+0xb8>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d110      	bne.n	8005b2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b08:	f000 facc 	bl	80060a4 <prvInitialiseTaskLists>
 8005b0c:	e00d      	b.n	8005b2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b0e:	4b23      	ldr	r3, [pc, #140]	; (8005b9c <prvAddNewTaskToReadyList+0xc0>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d109      	bne.n	8005b2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b16:	4b20      	ldr	r3, [pc, #128]	; (8005b98 <prvAddNewTaskToReadyList+0xbc>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d802      	bhi.n	8005b2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b24:	4a1c      	ldr	r2, [pc, #112]	; (8005b98 <prvAddNewTaskToReadyList+0xbc>)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b2a:	4b1d      	ldr	r3, [pc, #116]	; (8005ba0 <prvAddNewTaskToReadyList+0xc4>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	4a1b      	ldr	r2, [pc, #108]	; (8005ba0 <prvAddNewTaskToReadyList+0xc4>)
 8005b32:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b38:	2201      	movs	r2, #1
 8005b3a:	409a      	lsls	r2, r3
 8005b3c:	4b19      	ldr	r3, [pc, #100]	; (8005ba4 <prvAddNewTaskToReadyList+0xc8>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	4a18      	ldr	r2, [pc, #96]	; (8005ba4 <prvAddNewTaskToReadyList+0xc8>)
 8005b44:	6013      	str	r3, [r2, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4a15      	ldr	r2, [pc, #84]	; (8005ba8 <prvAddNewTaskToReadyList+0xcc>)
 8005b54:	441a      	add	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	3304      	adds	r3, #4
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	4610      	mov	r0, r2
 8005b5e:	f7ff fdf5 	bl	800574c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b62:	f000 fd27 	bl	80065b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b66:	4b0d      	ldr	r3, [pc, #52]	; (8005b9c <prvAddNewTaskToReadyList+0xc0>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00e      	beq.n	8005b8c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b6e:	4b0a      	ldr	r3, [pc, #40]	; (8005b98 <prvAddNewTaskToReadyList+0xbc>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d207      	bcs.n	8005b8c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b7c:	4b0b      	ldr	r3, [pc, #44]	; (8005bac <prvAddNewTaskToReadyList+0xd0>)
 8005b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	f3bf 8f4f 	dsb	sy
 8005b88:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b8c:	bf00      	nop
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	200006d0 	.word	0x200006d0
 8005b98:	200005d0 	.word	0x200005d0
 8005b9c:	200006dc 	.word	0x200006dc
 8005ba0:	200006ec 	.word	0x200006ec
 8005ba4:	200006d8 	.word	0x200006d8
 8005ba8:	200005d4 	.word	0x200005d4
 8005bac:	e000ed04 	.word	0xe000ed04

08005bb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d017      	beq.n	8005bf2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005bc2:	4b13      	ldr	r3, [pc, #76]	; (8005c10 <vTaskDelay+0x60>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00a      	beq.n	8005be0 <vTaskDelay+0x30>
	__asm volatile
 8005bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bce:	f383 8811 	msr	BASEPRI, r3
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	60bb      	str	r3, [r7, #8]
}
 8005bdc:	bf00      	nop
 8005bde:	e7fe      	b.n	8005bde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005be0:	f000 f884 	bl	8005cec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005be4:	2100      	movs	r1, #0
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fb1e 	bl	8006228 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005bec:	f000 f88c 	bl	8005d08 <xTaskResumeAll>
 8005bf0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d107      	bne.n	8005c08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005bf8:	4b06      	ldr	r3, [pc, #24]	; (8005c14 <vTaskDelay+0x64>)
 8005bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c08:	bf00      	nop
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	200006f8 	.word	0x200006f8
 8005c14:	e000ed04 	.word	0xe000ed04

08005c18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08a      	sub	sp, #40	; 0x28
 8005c1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c22:	2300      	movs	r3, #0
 8005c24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c26:	463a      	mov	r2, r7
 8005c28:	1d39      	adds	r1, r7, #4
 8005c2a:	f107 0308 	add.w	r3, r7, #8
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fa fd4e 	bl	80006d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c34:	6839      	ldr	r1, [r7, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	9202      	str	r2, [sp, #8]
 8005c3c:	9301      	str	r3, [sp, #4]
 8005c3e:	2300      	movs	r3, #0
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	2300      	movs	r3, #0
 8005c44:	460a      	mov	r2, r1
 8005c46:	4921      	ldr	r1, [pc, #132]	; (8005ccc <vTaskStartScheduler+0xb4>)
 8005c48:	4821      	ldr	r0, [pc, #132]	; (8005cd0 <vTaskStartScheduler+0xb8>)
 8005c4a:	f7ff fe06 	bl	800585a <xTaskCreateStatic>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	4a20      	ldr	r2, [pc, #128]	; (8005cd4 <vTaskStartScheduler+0xbc>)
 8005c52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c54:	4b1f      	ldr	r3, [pc, #124]	; (8005cd4 <vTaskStartScheduler+0xbc>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d002      	beq.n	8005c62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	617b      	str	r3, [r7, #20]
 8005c60:	e001      	b.n	8005c66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c62:	2300      	movs	r3, #0
 8005c64:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d11b      	bne.n	8005ca4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	613b      	str	r3, [r7, #16]
}
 8005c7e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c80:	4b15      	ldr	r3, [pc, #84]	; (8005cd8 <vTaskStartScheduler+0xc0>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	334c      	adds	r3, #76	; 0x4c
 8005c86:	4a15      	ldr	r2, [pc, #84]	; (8005cdc <vTaskStartScheduler+0xc4>)
 8005c88:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c8a:	4b15      	ldr	r3, [pc, #84]	; (8005ce0 <vTaskStartScheduler+0xc8>)
 8005c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c92:	4b14      	ldr	r3, [pc, #80]	; (8005ce4 <vTaskStartScheduler+0xcc>)
 8005c94:	2201      	movs	r2, #1
 8005c96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c98:	4b13      	ldr	r3, [pc, #76]	; (8005ce8 <vTaskStartScheduler+0xd0>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c9e:	f000 fbb7 	bl	8006410 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ca2:	e00e      	b.n	8005cc2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005caa:	d10a      	bne.n	8005cc2 <vTaskStartScheduler+0xaa>
	__asm volatile
 8005cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb0:	f383 8811 	msr	BASEPRI, r3
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	60fb      	str	r3, [r7, #12]
}
 8005cbe:	bf00      	nop
 8005cc0:	e7fe      	b.n	8005cc0 <vTaskStartScheduler+0xa8>
}
 8005cc2:	bf00      	nop
 8005cc4:	3718      	adds	r7, #24
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	0800770c 	.word	0x0800770c
 8005cd0:	08006075 	.word	0x08006075
 8005cd4:	200006f4 	.word	0x200006f4
 8005cd8:	200005d0 	.word	0x200005d0
 8005cdc:	2000005c 	.word	0x2000005c
 8005ce0:	200006f0 	.word	0x200006f0
 8005ce4:	200006dc 	.word	0x200006dc
 8005ce8:	200006d4 	.word	0x200006d4

08005cec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005cec:	b480      	push	{r7}
 8005cee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005cf0:	4b04      	ldr	r3, [pc, #16]	; (8005d04 <vTaskSuspendAll+0x18>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	4a03      	ldr	r2, [pc, #12]	; (8005d04 <vTaskSuspendAll+0x18>)
 8005cf8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005cfa:	bf00      	nop
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr
 8005d04:	200006f8 	.word	0x200006f8

08005d08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d12:	2300      	movs	r3, #0
 8005d14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d16:	4b41      	ldr	r3, [pc, #260]	; (8005e1c <xTaskResumeAll+0x114>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10a      	bne.n	8005d34 <xTaskResumeAll+0x2c>
	__asm volatile
 8005d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	603b      	str	r3, [r7, #0]
}
 8005d30:	bf00      	nop
 8005d32:	e7fe      	b.n	8005d32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d34:	f000 fc0e 	bl	8006554 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d38:	4b38      	ldr	r3, [pc, #224]	; (8005e1c <xTaskResumeAll+0x114>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	4a37      	ldr	r2, [pc, #220]	; (8005e1c <xTaskResumeAll+0x114>)
 8005d40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d42:	4b36      	ldr	r3, [pc, #216]	; (8005e1c <xTaskResumeAll+0x114>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d161      	bne.n	8005e0e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d4a:	4b35      	ldr	r3, [pc, #212]	; (8005e20 <xTaskResumeAll+0x118>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d05d      	beq.n	8005e0e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d52:	e02e      	b.n	8005db2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d54:	4b33      	ldr	r3, [pc, #204]	; (8005e24 <xTaskResumeAll+0x11c>)
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	3318      	adds	r3, #24
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7ff fd50 	bl	8005806 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	3304      	adds	r3, #4
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff fd4b 	bl	8005806 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d74:	2201      	movs	r2, #1
 8005d76:	409a      	lsls	r2, r3
 8005d78:	4b2b      	ldr	r3, [pc, #172]	; (8005e28 <xTaskResumeAll+0x120>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	4a2a      	ldr	r2, [pc, #168]	; (8005e28 <xTaskResumeAll+0x120>)
 8005d80:	6013      	str	r3, [r2, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d86:	4613      	mov	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4a27      	ldr	r2, [pc, #156]	; (8005e2c <xTaskResumeAll+0x124>)
 8005d90:	441a      	add	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	3304      	adds	r3, #4
 8005d96:	4619      	mov	r1, r3
 8005d98:	4610      	mov	r0, r2
 8005d9a:	f7ff fcd7 	bl	800574c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da2:	4b23      	ldr	r3, [pc, #140]	; (8005e30 <xTaskResumeAll+0x128>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d302      	bcc.n	8005db2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005dac:	4b21      	ldr	r3, [pc, #132]	; (8005e34 <xTaskResumeAll+0x12c>)
 8005dae:	2201      	movs	r2, #1
 8005db0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005db2:	4b1c      	ldr	r3, [pc, #112]	; (8005e24 <xTaskResumeAll+0x11c>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1cc      	bne.n	8005d54 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d001      	beq.n	8005dc4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005dc0:	f000 fa12 	bl	80061e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005dc4:	4b1c      	ldr	r3, [pc, #112]	; (8005e38 <xTaskResumeAll+0x130>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d010      	beq.n	8005df2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005dd0:	f000 f836 	bl	8005e40 <xTaskIncrementTick>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d002      	beq.n	8005de0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005dda:	4b16      	ldr	r3, [pc, #88]	; (8005e34 <xTaskResumeAll+0x12c>)
 8005ddc:	2201      	movs	r2, #1
 8005dde:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	3b01      	subs	r3, #1
 8005de4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1f1      	bne.n	8005dd0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005dec:	4b12      	ldr	r3, [pc, #72]	; (8005e38 <xTaskResumeAll+0x130>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005df2:	4b10      	ldr	r3, [pc, #64]	; (8005e34 <xTaskResumeAll+0x12c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d009      	beq.n	8005e0e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005dfe:	4b0f      	ldr	r3, [pc, #60]	; (8005e3c <xTaskResumeAll+0x134>)
 8005e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	f3bf 8f4f 	dsb	sy
 8005e0a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e0e:	f000 fbd1 	bl	80065b4 <vPortExitCritical>

	return xAlreadyYielded;
 8005e12:	68bb      	ldr	r3, [r7, #8]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	200006f8 	.word	0x200006f8
 8005e20:	200006d0 	.word	0x200006d0
 8005e24:	20000690 	.word	0x20000690
 8005e28:	200006d8 	.word	0x200006d8
 8005e2c:	200005d4 	.word	0x200005d4
 8005e30:	200005d0 	.word	0x200005d0
 8005e34:	200006e4 	.word	0x200006e4
 8005e38:	200006e0 	.word	0x200006e0
 8005e3c:	e000ed04 	.word	0xe000ed04

08005e40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e46:	2300      	movs	r3, #0
 8005e48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e4a:	4b4e      	ldr	r3, [pc, #312]	; (8005f84 <xTaskIncrementTick+0x144>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f040 808e 	bne.w	8005f70 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e54:	4b4c      	ldr	r3, [pc, #304]	; (8005f88 <xTaskIncrementTick+0x148>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e5c:	4a4a      	ldr	r2, [pc, #296]	; (8005f88 <xTaskIncrementTick+0x148>)
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d120      	bne.n	8005eaa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e68:	4b48      	ldr	r3, [pc, #288]	; (8005f8c <xTaskIncrementTick+0x14c>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00a      	beq.n	8005e88 <xTaskIncrementTick+0x48>
	__asm volatile
 8005e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e76:	f383 8811 	msr	BASEPRI, r3
 8005e7a:	f3bf 8f6f 	isb	sy
 8005e7e:	f3bf 8f4f 	dsb	sy
 8005e82:	603b      	str	r3, [r7, #0]
}
 8005e84:	bf00      	nop
 8005e86:	e7fe      	b.n	8005e86 <xTaskIncrementTick+0x46>
 8005e88:	4b40      	ldr	r3, [pc, #256]	; (8005f8c <xTaskIncrementTick+0x14c>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	60fb      	str	r3, [r7, #12]
 8005e8e:	4b40      	ldr	r3, [pc, #256]	; (8005f90 <xTaskIncrementTick+0x150>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a3e      	ldr	r2, [pc, #248]	; (8005f8c <xTaskIncrementTick+0x14c>)
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	4a3e      	ldr	r2, [pc, #248]	; (8005f90 <xTaskIncrementTick+0x150>)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6013      	str	r3, [r2, #0]
 8005e9c:	4b3d      	ldr	r3, [pc, #244]	; (8005f94 <xTaskIncrementTick+0x154>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	4a3c      	ldr	r2, [pc, #240]	; (8005f94 <xTaskIncrementTick+0x154>)
 8005ea4:	6013      	str	r3, [r2, #0]
 8005ea6:	f000 f99f 	bl	80061e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005eaa:	4b3b      	ldr	r3, [pc, #236]	; (8005f98 <xTaskIncrementTick+0x158>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d348      	bcc.n	8005f46 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eb4:	4b35      	ldr	r3, [pc, #212]	; (8005f8c <xTaskIncrementTick+0x14c>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d104      	bne.n	8005ec8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ebe:	4b36      	ldr	r3, [pc, #216]	; (8005f98 <xTaskIncrementTick+0x158>)
 8005ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec4:	601a      	str	r2, [r3, #0]
					break;
 8005ec6:	e03e      	b.n	8005f46 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ec8:	4b30      	ldr	r3, [pc, #192]	; (8005f8c <xTaskIncrementTick+0x14c>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d203      	bcs.n	8005ee8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ee0:	4a2d      	ldr	r2, [pc, #180]	; (8005f98 <xTaskIncrementTick+0x158>)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ee6:	e02e      	b.n	8005f46 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	3304      	adds	r3, #4
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7ff fc8a 	bl	8005806 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d004      	beq.n	8005f04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	3318      	adds	r3, #24
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7ff fc81 	bl	8005806 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f08:	2201      	movs	r2, #1
 8005f0a:	409a      	lsls	r2, r3
 8005f0c:	4b23      	ldr	r3, [pc, #140]	; (8005f9c <xTaskIncrementTick+0x15c>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	4a22      	ldr	r2, [pc, #136]	; (8005f9c <xTaskIncrementTick+0x15c>)
 8005f14:	6013      	str	r3, [r2, #0]
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	4a1f      	ldr	r2, [pc, #124]	; (8005fa0 <xTaskIncrementTick+0x160>)
 8005f24:	441a      	add	r2, r3
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	3304      	adds	r3, #4
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	4610      	mov	r0, r2
 8005f2e:	f7ff fc0d 	bl	800574c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f36:	4b1b      	ldr	r3, [pc, #108]	; (8005fa4 <xTaskIncrementTick+0x164>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d3b9      	bcc.n	8005eb4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005f40:	2301      	movs	r3, #1
 8005f42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f44:	e7b6      	b.n	8005eb4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f46:	4b17      	ldr	r3, [pc, #92]	; (8005fa4 <xTaskIncrementTick+0x164>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f4c:	4914      	ldr	r1, [pc, #80]	; (8005fa0 <xTaskIncrementTick+0x160>)
 8005f4e:	4613      	mov	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	440b      	add	r3, r1
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d901      	bls.n	8005f62 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005f62:	4b11      	ldr	r3, [pc, #68]	; (8005fa8 <xTaskIncrementTick+0x168>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d007      	beq.n	8005f7a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	617b      	str	r3, [r7, #20]
 8005f6e:	e004      	b.n	8005f7a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005f70:	4b0e      	ldr	r3, [pc, #56]	; (8005fac <xTaskIncrementTick+0x16c>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	3301      	adds	r3, #1
 8005f76:	4a0d      	ldr	r2, [pc, #52]	; (8005fac <xTaskIncrementTick+0x16c>)
 8005f78:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005f7a:	697b      	ldr	r3, [r7, #20]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3718      	adds	r7, #24
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	200006f8 	.word	0x200006f8
 8005f88:	200006d4 	.word	0x200006d4
 8005f8c:	20000688 	.word	0x20000688
 8005f90:	2000068c 	.word	0x2000068c
 8005f94:	200006e8 	.word	0x200006e8
 8005f98:	200006f0 	.word	0x200006f0
 8005f9c:	200006d8 	.word	0x200006d8
 8005fa0:	200005d4 	.word	0x200005d4
 8005fa4:	200005d0 	.word	0x200005d0
 8005fa8:	200006e4 	.word	0x200006e4
 8005fac:	200006e0 	.word	0x200006e0

08005fb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b087      	sub	sp, #28
 8005fb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005fb6:	4b29      	ldr	r3, [pc, #164]	; (800605c <vTaskSwitchContext+0xac>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d003      	beq.n	8005fc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005fbe:	4b28      	ldr	r3, [pc, #160]	; (8006060 <vTaskSwitchContext+0xb0>)
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005fc4:	e044      	b.n	8006050 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005fc6:	4b26      	ldr	r3, [pc, #152]	; (8006060 <vTaskSwitchContext+0xb0>)
 8005fc8:	2200      	movs	r2, #0
 8005fca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fcc:	4b25      	ldr	r3, [pc, #148]	; (8006064 <vTaskSwitchContext+0xb4>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	fab3 f383 	clz	r3, r3
 8005fd8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005fda:	7afb      	ldrb	r3, [r7, #11]
 8005fdc:	f1c3 031f 	rsb	r3, r3, #31
 8005fe0:	617b      	str	r3, [r7, #20]
 8005fe2:	4921      	ldr	r1, [pc, #132]	; (8006068 <vTaskSwitchContext+0xb8>)
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	440b      	add	r3, r1
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10a      	bne.n	800600c <vTaskSwitchContext+0x5c>
	__asm volatile
 8005ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffa:	f383 8811 	msr	BASEPRI, r3
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f3bf 8f4f 	dsb	sy
 8006006:	607b      	str	r3, [r7, #4]
}
 8006008:	bf00      	nop
 800600a:	e7fe      	b.n	800600a <vTaskSwitchContext+0x5a>
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	4613      	mov	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4a14      	ldr	r2, [pc, #80]	; (8006068 <vTaskSwitchContext+0xb8>)
 8006018:	4413      	add	r3, r2
 800601a:	613b      	str	r3, [r7, #16]
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	685a      	ldr	r2, [r3, #4]
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	605a      	str	r2, [r3, #4]
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	685a      	ldr	r2, [r3, #4]
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	3308      	adds	r3, #8
 800602e:	429a      	cmp	r2, r3
 8006030:	d104      	bne.n	800603c <vTaskSwitchContext+0x8c>
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	685a      	ldr	r2, [r3, #4]
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	605a      	str	r2, [r3, #4]
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	4a0a      	ldr	r2, [pc, #40]	; (800606c <vTaskSwitchContext+0xbc>)
 8006044:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006046:	4b09      	ldr	r3, [pc, #36]	; (800606c <vTaskSwitchContext+0xbc>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	334c      	adds	r3, #76	; 0x4c
 800604c:	4a08      	ldr	r2, [pc, #32]	; (8006070 <vTaskSwitchContext+0xc0>)
 800604e:	6013      	str	r3, [r2, #0]
}
 8006050:	bf00      	nop
 8006052:	371c      	adds	r7, #28
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr
 800605c:	200006f8 	.word	0x200006f8
 8006060:	200006e4 	.word	0x200006e4
 8006064:	200006d8 	.word	0x200006d8
 8006068:	200005d4 	.word	0x200005d4
 800606c:	200005d0 	.word	0x200005d0
 8006070:	2000005c 	.word	0x2000005c

08006074 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800607c:	f000 f852 	bl	8006124 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006080:	4b06      	ldr	r3, [pc, #24]	; (800609c <prvIdleTask+0x28>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d9f9      	bls.n	800607c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006088:	4b05      	ldr	r3, [pc, #20]	; (80060a0 <prvIdleTask+0x2c>)
 800608a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006098:	e7f0      	b.n	800607c <prvIdleTask+0x8>
 800609a:	bf00      	nop
 800609c:	200005d4 	.word	0x200005d4
 80060a0:	e000ed04 	.word	0xe000ed04

080060a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060aa:	2300      	movs	r3, #0
 80060ac:	607b      	str	r3, [r7, #4]
 80060ae:	e00c      	b.n	80060ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	4613      	mov	r3, r2
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	4413      	add	r3, r2
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4a12      	ldr	r2, [pc, #72]	; (8006104 <prvInitialiseTaskLists+0x60>)
 80060bc:	4413      	add	r3, r2
 80060be:	4618      	mov	r0, r3
 80060c0:	f7ff fb17 	bl	80056f2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	3301      	adds	r3, #1
 80060c8:	607b      	str	r3, [r7, #4]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2b06      	cmp	r3, #6
 80060ce:	d9ef      	bls.n	80060b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80060d0:	480d      	ldr	r0, [pc, #52]	; (8006108 <prvInitialiseTaskLists+0x64>)
 80060d2:	f7ff fb0e 	bl	80056f2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80060d6:	480d      	ldr	r0, [pc, #52]	; (800610c <prvInitialiseTaskLists+0x68>)
 80060d8:	f7ff fb0b 	bl	80056f2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80060dc:	480c      	ldr	r0, [pc, #48]	; (8006110 <prvInitialiseTaskLists+0x6c>)
 80060de:	f7ff fb08 	bl	80056f2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80060e2:	480c      	ldr	r0, [pc, #48]	; (8006114 <prvInitialiseTaskLists+0x70>)
 80060e4:	f7ff fb05 	bl	80056f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80060e8:	480b      	ldr	r0, [pc, #44]	; (8006118 <prvInitialiseTaskLists+0x74>)
 80060ea:	f7ff fb02 	bl	80056f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80060ee:	4b0b      	ldr	r3, [pc, #44]	; (800611c <prvInitialiseTaskLists+0x78>)
 80060f0:	4a05      	ldr	r2, [pc, #20]	; (8006108 <prvInitialiseTaskLists+0x64>)
 80060f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80060f4:	4b0a      	ldr	r3, [pc, #40]	; (8006120 <prvInitialiseTaskLists+0x7c>)
 80060f6:	4a05      	ldr	r2, [pc, #20]	; (800610c <prvInitialiseTaskLists+0x68>)
 80060f8:	601a      	str	r2, [r3, #0]
}
 80060fa:	bf00      	nop
 80060fc:	3708      	adds	r7, #8
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	200005d4 	.word	0x200005d4
 8006108:	20000660 	.word	0x20000660
 800610c:	20000674 	.word	0x20000674
 8006110:	20000690 	.word	0x20000690
 8006114:	200006a4 	.word	0x200006a4
 8006118:	200006bc 	.word	0x200006bc
 800611c:	20000688 	.word	0x20000688
 8006120:	2000068c 	.word	0x2000068c

08006124 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800612a:	e019      	b.n	8006160 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800612c:	f000 fa12 	bl	8006554 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006130:	4b10      	ldr	r3, [pc, #64]	; (8006174 <prvCheckTasksWaitingTermination+0x50>)
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	3304      	adds	r3, #4
 800613c:	4618      	mov	r0, r3
 800613e:	f7ff fb62 	bl	8005806 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006142:	4b0d      	ldr	r3, [pc, #52]	; (8006178 <prvCheckTasksWaitingTermination+0x54>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	3b01      	subs	r3, #1
 8006148:	4a0b      	ldr	r2, [pc, #44]	; (8006178 <prvCheckTasksWaitingTermination+0x54>)
 800614a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800614c:	4b0b      	ldr	r3, [pc, #44]	; (800617c <prvCheckTasksWaitingTermination+0x58>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	3b01      	subs	r3, #1
 8006152:	4a0a      	ldr	r2, [pc, #40]	; (800617c <prvCheckTasksWaitingTermination+0x58>)
 8006154:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006156:	f000 fa2d 	bl	80065b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f810 	bl	8006180 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006160:	4b06      	ldr	r3, [pc, #24]	; (800617c <prvCheckTasksWaitingTermination+0x58>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1e1      	bne.n	800612c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006168:	bf00      	nop
 800616a:	bf00      	nop
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	200006a4 	.word	0x200006a4
 8006178:	200006d0 	.word	0x200006d0
 800617c:	200006b8 	.word	0x200006b8

08006180 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	334c      	adds	r3, #76	; 0x4c
 800618c:	4618      	mov	r0, r3
 800618e:	f000 fd65 	bl	8006c5c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006198:	2b00      	cmp	r3, #0
 800619a:	d108      	bne.n	80061ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a0:	4618      	mov	r0, r3
 80061a2:	f000 fb85 	bl	80068b0 <vPortFree>
				vPortFree( pxTCB );
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 fb82 	bl	80068b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80061ac:	e018      	b.n	80061e0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d103      	bne.n	80061c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 fb79 	bl	80068b0 <vPortFree>
	}
 80061be:	e00f      	b.n	80061e0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d00a      	beq.n	80061e0 <prvDeleteTCB+0x60>
	__asm volatile
 80061ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	60fb      	str	r3, [r7, #12]
}
 80061dc:	bf00      	nop
 80061de:	e7fe      	b.n	80061de <prvDeleteTCB+0x5e>
	}
 80061e0:	bf00      	nop
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061ee:	4b0c      	ldr	r3, [pc, #48]	; (8006220 <prvResetNextTaskUnblockTime+0x38>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d104      	bne.n	8006202 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80061f8:	4b0a      	ldr	r3, [pc, #40]	; (8006224 <prvResetNextTaskUnblockTime+0x3c>)
 80061fa:	f04f 32ff 	mov.w	r2, #4294967295
 80061fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006200:	e008      	b.n	8006214 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006202:	4b07      	ldr	r3, [pc, #28]	; (8006220 <prvResetNextTaskUnblockTime+0x38>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	4a04      	ldr	r2, [pc, #16]	; (8006224 <prvResetNextTaskUnblockTime+0x3c>)
 8006212:	6013      	str	r3, [r2, #0]
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	20000688 	.word	0x20000688
 8006224:	200006f0 	.word	0x200006f0

08006228 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006232:	4b29      	ldr	r3, [pc, #164]	; (80062d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006238:	4b28      	ldr	r3, [pc, #160]	; (80062dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	3304      	adds	r3, #4
 800623e:	4618      	mov	r0, r3
 8006240:	f7ff fae1 	bl	8005806 <uxListRemove>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10b      	bne.n	8006262 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800624a:	4b24      	ldr	r3, [pc, #144]	; (80062dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006250:	2201      	movs	r2, #1
 8006252:	fa02 f303 	lsl.w	r3, r2, r3
 8006256:	43da      	mvns	r2, r3
 8006258:	4b21      	ldr	r3, [pc, #132]	; (80062e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4013      	ands	r3, r2
 800625e:	4a20      	ldr	r2, [pc, #128]	; (80062e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006260:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006268:	d10a      	bne.n	8006280 <prvAddCurrentTaskToDelayedList+0x58>
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d007      	beq.n	8006280 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006270:	4b1a      	ldr	r3, [pc, #104]	; (80062dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	3304      	adds	r3, #4
 8006276:	4619      	mov	r1, r3
 8006278:	481a      	ldr	r0, [pc, #104]	; (80062e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800627a:	f7ff fa67 	bl	800574c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800627e:	e026      	b.n	80062ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4413      	add	r3, r2
 8006286:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006288:	4b14      	ldr	r3, [pc, #80]	; (80062dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	429a      	cmp	r2, r3
 8006296:	d209      	bcs.n	80062ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006298:	4b13      	ldr	r3, [pc, #76]	; (80062e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	4b0f      	ldr	r3, [pc, #60]	; (80062dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	3304      	adds	r3, #4
 80062a2:	4619      	mov	r1, r3
 80062a4:	4610      	mov	r0, r2
 80062a6:	f7ff fa75 	bl	8005794 <vListInsert>
}
 80062aa:	e010      	b.n	80062ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062ac:	4b0f      	ldr	r3, [pc, #60]	; (80062ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	4b0a      	ldr	r3, [pc, #40]	; (80062dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	3304      	adds	r3, #4
 80062b6:	4619      	mov	r1, r3
 80062b8:	4610      	mov	r0, r2
 80062ba:	f7ff fa6b 	bl	8005794 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80062be:	4b0c      	ldr	r3, [pc, #48]	; (80062f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d202      	bcs.n	80062ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80062c8:	4a09      	ldr	r2, [pc, #36]	; (80062f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	6013      	str	r3, [r2, #0]
}
 80062ce:	bf00      	nop
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	200006d4 	.word	0x200006d4
 80062dc:	200005d0 	.word	0x200005d0
 80062e0:	200006d8 	.word	0x200006d8
 80062e4:	200006bc 	.word	0x200006bc
 80062e8:	2000068c 	.word	0x2000068c
 80062ec:	20000688 	.word	0x20000688
 80062f0:	200006f0 	.word	0x200006f0

080062f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	3b04      	subs	r3, #4
 8006304:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800630c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	3b04      	subs	r3, #4
 8006312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f023 0201 	bic.w	r2, r3, #1
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	3b04      	subs	r3, #4
 8006322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006324:	4a0c      	ldr	r2, [pc, #48]	; (8006358 <pxPortInitialiseStack+0x64>)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	3b14      	subs	r3, #20
 800632e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	3b04      	subs	r3, #4
 800633a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f06f 0202 	mvn.w	r2, #2
 8006342:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	3b20      	subs	r3, #32
 8006348:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800634a:	68fb      	ldr	r3, [r7, #12]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr
 8006358:	0800635d 	.word	0x0800635d

0800635c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006362:	2300      	movs	r3, #0
 8006364:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006366:	4b12      	ldr	r3, [pc, #72]	; (80063b0 <prvTaskExitError+0x54>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800636e:	d00a      	beq.n	8006386 <prvTaskExitError+0x2a>
	__asm volatile
 8006370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	60fb      	str	r3, [r7, #12]
}
 8006382:	bf00      	nop
 8006384:	e7fe      	b.n	8006384 <prvTaskExitError+0x28>
	__asm volatile
 8006386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638a:	f383 8811 	msr	BASEPRI, r3
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	60bb      	str	r3, [r7, #8]
}
 8006398:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800639a:	bf00      	nop
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d0fc      	beq.n	800639c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80063a2:	bf00      	nop
 80063a4:	bf00      	nop
 80063a6:	3714      	adds	r7, #20
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	2000000c 	.word	0x2000000c
	...

080063c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80063c0:	4b07      	ldr	r3, [pc, #28]	; (80063e0 <pxCurrentTCBConst2>)
 80063c2:	6819      	ldr	r1, [r3, #0]
 80063c4:	6808      	ldr	r0, [r1, #0]
 80063c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ca:	f380 8809 	msr	PSP, r0
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f04f 0000 	mov.w	r0, #0
 80063d6:	f380 8811 	msr	BASEPRI, r0
 80063da:	4770      	bx	lr
 80063dc:	f3af 8000 	nop.w

080063e0 <pxCurrentTCBConst2>:
 80063e0:	200005d0 	.word	0x200005d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80063e4:	bf00      	nop
 80063e6:	bf00      	nop

080063e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80063e8:	4808      	ldr	r0, [pc, #32]	; (800640c <prvPortStartFirstTask+0x24>)
 80063ea:	6800      	ldr	r0, [r0, #0]
 80063ec:	6800      	ldr	r0, [r0, #0]
 80063ee:	f380 8808 	msr	MSP, r0
 80063f2:	f04f 0000 	mov.w	r0, #0
 80063f6:	f380 8814 	msr	CONTROL, r0
 80063fa:	b662      	cpsie	i
 80063fc:	b661      	cpsie	f
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	df00      	svc	0
 8006408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800640a:	bf00      	nop
 800640c:	e000ed08 	.word	0xe000ed08

08006410 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006416:	4b46      	ldr	r3, [pc, #280]	; (8006530 <xPortStartScheduler+0x120>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a46      	ldr	r2, [pc, #280]	; (8006534 <xPortStartScheduler+0x124>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d10a      	bne.n	8006436 <xPortStartScheduler+0x26>
	__asm volatile
 8006420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006424:	f383 8811 	msr	BASEPRI, r3
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	613b      	str	r3, [r7, #16]
}
 8006432:	bf00      	nop
 8006434:	e7fe      	b.n	8006434 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006436:	4b3e      	ldr	r3, [pc, #248]	; (8006530 <xPortStartScheduler+0x120>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a3f      	ldr	r2, [pc, #252]	; (8006538 <xPortStartScheduler+0x128>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d10a      	bne.n	8006456 <xPortStartScheduler+0x46>
	__asm volatile
 8006440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006444:	f383 8811 	msr	BASEPRI, r3
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	f3bf 8f4f 	dsb	sy
 8006450:	60fb      	str	r3, [r7, #12]
}
 8006452:	bf00      	nop
 8006454:	e7fe      	b.n	8006454 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006456:	4b39      	ldr	r3, [pc, #228]	; (800653c <xPortStartScheduler+0x12c>)
 8006458:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	b2db      	uxtb	r3, r3
 8006460:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	22ff      	movs	r2, #255	; 0xff
 8006466:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	b2db      	uxtb	r3, r3
 800646e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006470:	78fb      	ldrb	r3, [r7, #3]
 8006472:	b2db      	uxtb	r3, r3
 8006474:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006478:	b2da      	uxtb	r2, r3
 800647a:	4b31      	ldr	r3, [pc, #196]	; (8006540 <xPortStartScheduler+0x130>)
 800647c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800647e:	4b31      	ldr	r3, [pc, #196]	; (8006544 <xPortStartScheduler+0x134>)
 8006480:	2207      	movs	r2, #7
 8006482:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006484:	e009      	b.n	800649a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006486:	4b2f      	ldr	r3, [pc, #188]	; (8006544 <xPortStartScheduler+0x134>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	3b01      	subs	r3, #1
 800648c:	4a2d      	ldr	r2, [pc, #180]	; (8006544 <xPortStartScheduler+0x134>)
 800648e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006490:	78fb      	ldrb	r3, [r7, #3]
 8006492:	b2db      	uxtb	r3, r3
 8006494:	005b      	lsls	r3, r3, #1
 8006496:	b2db      	uxtb	r3, r3
 8006498:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800649a:	78fb      	ldrb	r3, [r7, #3]
 800649c:	b2db      	uxtb	r3, r3
 800649e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a2:	2b80      	cmp	r3, #128	; 0x80
 80064a4:	d0ef      	beq.n	8006486 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80064a6:	4b27      	ldr	r3, [pc, #156]	; (8006544 <xPortStartScheduler+0x134>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f1c3 0307 	rsb	r3, r3, #7
 80064ae:	2b04      	cmp	r3, #4
 80064b0:	d00a      	beq.n	80064c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80064b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	60bb      	str	r3, [r7, #8]
}
 80064c4:	bf00      	nop
 80064c6:	e7fe      	b.n	80064c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80064c8:	4b1e      	ldr	r3, [pc, #120]	; (8006544 <xPortStartScheduler+0x134>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	021b      	lsls	r3, r3, #8
 80064ce:	4a1d      	ldr	r2, [pc, #116]	; (8006544 <xPortStartScheduler+0x134>)
 80064d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80064d2:	4b1c      	ldr	r3, [pc, #112]	; (8006544 <xPortStartScheduler+0x134>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064da:	4a1a      	ldr	r2, [pc, #104]	; (8006544 <xPortStartScheduler+0x134>)
 80064dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80064e6:	4b18      	ldr	r3, [pc, #96]	; (8006548 <xPortStartScheduler+0x138>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a17      	ldr	r2, [pc, #92]	; (8006548 <xPortStartScheduler+0x138>)
 80064ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80064f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80064f2:	4b15      	ldr	r3, [pc, #84]	; (8006548 <xPortStartScheduler+0x138>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a14      	ldr	r2, [pc, #80]	; (8006548 <xPortStartScheduler+0x138>)
 80064f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80064fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80064fe:	f000 f8dd 	bl	80066bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006502:	4b12      	ldr	r3, [pc, #72]	; (800654c <xPortStartScheduler+0x13c>)
 8006504:	2200      	movs	r2, #0
 8006506:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006508:	f000 f8fc 	bl	8006704 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800650c:	4b10      	ldr	r3, [pc, #64]	; (8006550 <xPortStartScheduler+0x140>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a0f      	ldr	r2, [pc, #60]	; (8006550 <xPortStartScheduler+0x140>)
 8006512:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006516:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006518:	f7ff ff66 	bl	80063e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800651c:	f7ff fd48 	bl	8005fb0 <vTaskSwitchContext>
	prvTaskExitError();
 8006520:	f7ff ff1c 	bl	800635c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3718      	adds	r7, #24
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	e000ed00 	.word	0xe000ed00
 8006534:	410fc271 	.word	0x410fc271
 8006538:	410fc270 	.word	0x410fc270
 800653c:	e000e400 	.word	0xe000e400
 8006540:	200006fc 	.word	0x200006fc
 8006544:	20000700 	.word	0x20000700
 8006548:	e000ed20 	.word	0xe000ed20
 800654c:	2000000c 	.word	0x2000000c
 8006550:	e000ef34 	.word	0xe000ef34

08006554 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
	__asm volatile
 800655a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	607b      	str	r3, [r7, #4]
}
 800656c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800656e:	4b0f      	ldr	r3, [pc, #60]	; (80065ac <vPortEnterCritical+0x58>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3301      	adds	r3, #1
 8006574:	4a0d      	ldr	r2, [pc, #52]	; (80065ac <vPortEnterCritical+0x58>)
 8006576:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006578:	4b0c      	ldr	r3, [pc, #48]	; (80065ac <vPortEnterCritical+0x58>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d10f      	bne.n	80065a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006580:	4b0b      	ldr	r3, [pc, #44]	; (80065b0 <vPortEnterCritical+0x5c>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00a      	beq.n	80065a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800658a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658e:	f383 8811 	msr	BASEPRI, r3
 8006592:	f3bf 8f6f 	isb	sy
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	603b      	str	r3, [r7, #0]
}
 800659c:	bf00      	nop
 800659e:	e7fe      	b.n	800659e <vPortEnterCritical+0x4a>
	}
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	2000000c 	.word	0x2000000c
 80065b0:	e000ed04 	.word	0xe000ed04

080065b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80065ba:	4b12      	ldr	r3, [pc, #72]	; (8006604 <vPortExitCritical+0x50>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10a      	bne.n	80065d8 <vPortExitCritical+0x24>
	__asm volatile
 80065c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	607b      	str	r3, [r7, #4]
}
 80065d4:	bf00      	nop
 80065d6:	e7fe      	b.n	80065d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80065d8:	4b0a      	ldr	r3, [pc, #40]	; (8006604 <vPortExitCritical+0x50>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	3b01      	subs	r3, #1
 80065de:	4a09      	ldr	r2, [pc, #36]	; (8006604 <vPortExitCritical+0x50>)
 80065e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80065e2:	4b08      	ldr	r3, [pc, #32]	; (8006604 <vPortExitCritical+0x50>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d105      	bne.n	80065f6 <vPortExitCritical+0x42>
 80065ea:	2300      	movs	r3, #0
 80065ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80065f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80065f6:	bf00      	nop
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	2000000c 	.word	0x2000000c
	...

08006610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006610:	f3ef 8009 	mrs	r0, PSP
 8006614:	f3bf 8f6f 	isb	sy
 8006618:	4b15      	ldr	r3, [pc, #84]	; (8006670 <pxCurrentTCBConst>)
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	f01e 0f10 	tst.w	lr, #16
 8006620:	bf08      	it	eq
 8006622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800662a:	6010      	str	r0, [r2, #0]
 800662c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006630:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006634:	f380 8811 	msr	BASEPRI, r0
 8006638:	f3bf 8f4f 	dsb	sy
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f7ff fcb6 	bl	8005fb0 <vTaskSwitchContext>
 8006644:	f04f 0000 	mov.w	r0, #0
 8006648:	f380 8811 	msr	BASEPRI, r0
 800664c:	bc09      	pop	{r0, r3}
 800664e:	6819      	ldr	r1, [r3, #0]
 8006650:	6808      	ldr	r0, [r1, #0]
 8006652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006656:	f01e 0f10 	tst.w	lr, #16
 800665a:	bf08      	it	eq
 800665c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006660:	f380 8809 	msr	PSP, r0
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	f3af 8000 	nop.w

08006670 <pxCurrentTCBConst>:
 8006670:	200005d0 	.word	0x200005d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006674:	bf00      	nop
 8006676:	bf00      	nop

08006678 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
	__asm volatile
 800667e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	607b      	str	r3, [r7, #4]
}
 8006690:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006692:	f7ff fbd5 	bl	8005e40 <xTaskIncrementTick>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d003      	beq.n	80066a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800669c:	4b06      	ldr	r3, [pc, #24]	; (80066b8 <SysTick_Handler+0x40>)
 800669e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	2300      	movs	r3, #0
 80066a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	f383 8811 	msr	BASEPRI, r3
}
 80066ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80066b0:	bf00      	nop
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	e000ed04 	.word	0xe000ed04

080066bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80066bc:	b480      	push	{r7}
 80066be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80066c0:	4b0b      	ldr	r3, [pc, #44]	; (80066f0 <vPortSetupTimerInterrupt+0x34>)
 80066c2:	2200      	movs	r2, #0
 80066c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80066c6:	4b0b      	ldr	r3, [pc, #44]	; (80066f4 <vPortSetupTimerInterrupt+0x38>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80066cc:	4b0a      	ldr	r3, [pc, #40]	; (80066f8 <vPortSetupTimerInterrupt+0x3c>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a0a      	ldr	r2, [pc, #40]	; (80066fc <vPortSetupTimerInterrupt+0x40>)
 80066d2:	fba2 2303 	umull	r2, r3, r2, r3
 80066d6:	099b      	lsrs	r3, r3, #6
 80066d8:	4a09      	ldr	r2, [pc, #36]	; (8006700 <vPortSetupTimerInterrupt+0x44>)
 80066da:	3b01      	subs	r3, #1
 80066dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80066de:	4b04      	ldr	r3, [pc, #16]	; (80066f0 <vPortSetupTimerInterrupt+0x34>)
 80066e0:	2207      	movs	r2, #7
 80066e2:	601a      	str	r2, [r3, #0]
}
 80066e4:	bf00      	nop
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	e000e010 	.word	0xe000e010
 80066f4:	e000e018 	.word	0xe000e018
 80066f8:	20000000 	.word	0x20000000
 80066fc:	10624dd3 	.word	0x10624dd3
 8006700:	e000e014 	.word	0xe000e014

08006704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006704:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006714 <vPortEnableVFP+0x10>
 8006708:	6801      	ldr	r1, [r0, #0]
 800670a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800670e:	6001      	str	r1, [r0, #0]
 8006710:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006712:	bf00      	nop
 8006714:	e000ed88 	.word	0xe000ed88

08006718 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b08a      	sub	sp, #40	; 0x28
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006720:	2300      	movs	r3, #0
 8006722:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006724:	f7ff fae2 	bl	8005cec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006728:	4b5b      	ldr	r3, [pc, #364]	; (8006898 <pvPortMalloc+0x180>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d101      	bne.n	8006734 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006730:	f000 f920 	bl	8006974 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006734:	4b59      	ldr	r3, [pc, #356]	; (800689c <pvPortMalloc+0x184>)
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4013      	ands	r3, r2
 800673c:	2b00      	cmp	r3, #0
 800673e:	f040 8093 	bne.w	8006868 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d01d      	beq.n	8006784 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006748:	2208      	movs	r2, #8
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4413      	add	r3, r2
 800674e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f003 0307 	and.w	r3, r3, #7
 8006756:	2b00      	cmp	r3, #0
 8006758:	d014      	beq.n	8006784 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f023 0307 	bic.w	r3, r3, #7
 8006760:	3308      	adds	r3, #8
 8006762:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f003 0307 	and.w	r3, r3, #7
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00a      	beq.n	8006784 <pvPortMalloc+0x6c>
	__asm volatile
 800676e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006772:	f383 8811 	msr	BASEPRI, r3
 8006776:	f3bf 8f6f 	isb	sy
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	617b      	str	r3, [r7, #20]
}
 8006780:	bf00      	nop
 8006782:	e7fe      	b.n	8006782 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d06e      	beq.n	8006868 <pvPortMalloc+0x150>
 800678a:	4b45      	ldr	r3, [pc, #276]	; (80068a0 <pvPortMalloc+0x188>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	429a      	cmp	r2, r3
 8006792:	d869      	bhi.n	8006868 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006794:	4b43      	ldr	r3, [pc, #268]	; (80068a4 <pvPortMalloc+0x18c>)
 8006796:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006798:	4b42      	ldr	r3, [pc, #264]	; (80068a4 <pvPortMalloc+0x18c>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800679e:	e004      	b.n	80067aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80067a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d903      	bls.n	80067bc <pvPortMalloc+0xa4>
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1f1      	bne.n	80067a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80067bc:	4b36      	ldr	r3, [pc, #216]	; (8006898 <pvPortMalloc+0x180>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d050      	beq.n	8006868 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2208      	movs	r2, #8
 80067cc:	4413      	add	r3, r2
 80067ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	6a3b      	ldr	r3, [r7, #32]
 80067d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80067d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	1ad2      	subs	r2, r2, r3
 80067e0:	2308      	movs	r3, #8
 80067e2:	005b      	lsls	r3, r3, #1
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d91f      	bls.n	8006828 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80067e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4413      	add	r3, r2
 80067ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00a      	beq.n	8006810 <pvPortMalloc+0xf8>
	__asm volatile
 80067fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fe:	f383 8811 	msr	BASEPRI, r3
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	613b      	str	r3, [r7, #16]
}
 800680c:	bf00      	nop
 800680e:	e7fe      	b.n	800680e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	1ad2      	subs	r2, r2, r3
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006822:	69b8      	ldr	r0, [r7, #24]
 8006824:	f000 f908 	bl	8006a38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006828:	4b1d      	ldr	r3, [pc, #116]	; (80068a0 <pvPortMalloc+0x188>)
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	4a1b      	ldr	r2, [pc, #108]	; (80068a0 <pvPortMalloc+0x188>)
 8006834:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006836:	4b1a      	ldr	r3, [pc, #104]	; (80068a0 <pvPortMalloc+0x188>)
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	4b1b      	ldr	r3, [pc, #108]	; (80068a8 <pvPortMalloc+0x190>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	429a      	cmp	r2, r3
 8006840:	d203      	bcs.n	800684a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006842:	4b17      	ldr	r3, [pc, #92]	; (80068a0 <pvPortMalloc+0x188>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a18      	ldr	r2, [pc, #96]	; (80068a8 <pvPortMalloc+0x190>)
 8006848:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	685a      	ldr	r2, [r3, #4]
 800684e:	4b13      	ldr	r3, [pc, #76]	; (800689c <pvPortMalloc+0x184>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	431a      	orrs	r2, r3
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685a:	2200      	movs	r2, #0
 800685c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800685e:	4b13      	ldr	r3, [pc, #76]	; (80068ac <pvPortMalloc+0x194>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	3301      	adds	r3, #1
 8006864:	4a11      	ldr	r2, [pc, #68]	; (80068ac <pvPortMalloc+0x194>)
 8006866:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006868:	f7ff fa4e 	bl	8005d08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	f003 0307 	and.w	r3, r3, #7
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00a      	beq.n	800688c <pvPortMalloc+0x174>
	__asm volatile
 8006876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687a:	f383 8811 	msr	BASEPRI, r3
 800687e:	f3bf 8f6f 	isb	sy
 8006882:	f3bf 8f4f 	dsb	sy
 8006886:	60fb      	str	r3, [r7, #12]
}
 8006888:	bf00      	nop
 800688a:	e7fe      	b.n	800688a <pvPortMalloc+0x172>
	return pvReturn;
 800688c:	69fb      	ldr	r3, [r7, #28]
}
 800688e:	4618      	mov	r0, r3
 8006890:	3728      	adds	r7, #40	; 0x28
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	2000430c 	.word	0x2000430c
 800689c:	20004320 	.word	0x20004320
 80068a0:	20004310 	.word	0x20004310
 80068a4:	20004304 	.word	0x20004304
 80068a8:	20004314 	.word	0x20004314
 80068ac:	20004318 	.word	0x20004318

080068b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d04d      	beq.n	800695e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80068c2:	2308      	movs	r3, #8
 80068c4:	425b      	negs	r3, r3
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	4413      	add	r3, r2
 80068ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	4b24      	ldr	r3, [pc, #144]	; (8006968 <vPortFree+0xb8>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4013      	ands	r3, r2
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10a      	bne.n	80068f4 <vPortFree+0x44>
	__asm volatile
 80068de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e2:	f383 8811 	msr	BASEPRI, r3
 80068e6:	f3bf 8f6f 	isb	sy
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	60fb      	str	r3, [r7, #12]
}
 80068f0:	bf00      	nop
 80068f2:	e7fe      	b.n	80068f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00a      	beq.n	8006912 <vPortFree+0x62>
	__asm volatile
 80068fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	60bb      	str	r3, [r7, #8]
}
 800690e:	bf00      	nop
 8006910:	e7fe      	b.n	8006910 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	4b14      	ldr	r3, [pc, #80]	; (8006968 <vPortFree+0xb8>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4013      	ands	r3, r2
 800691c:	2b00      	cmp	r3, #0
 800691e:	d01e      	beq.n	800695e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d11a      	bne.n	800695e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	4b0e      	ldr	r3, [pc, #56]	; (8006968 <vPortFree+0xb8>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	43db      	mvns	r3, r3
 8006932:	401a      	ands	r2, r3
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006938:	f7ff f9d8 	bl	8005cec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	4b0a      	ldr	r3, [pc, #40]	; (800696c <vPortFree+0xbc>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4413      	add	r3, r2
 8006946:	4a09      	ldr	r2, [pc, #36]	; (800696c <vPortFree+0xbc>)
 8006948:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800694a:	6938      	ldr	r0, [r7, #16]
 800694c:	f000 f874 	bl	8006a38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006950:	4b07      	ldr	r3, [pc, #28]	; (8006970 <vPortFree+0xc0>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3301      	adds	r3, #1
 8006956:	4a06      	ldr	r2, [pc, #24]	; (8006970 <vPortFree+0xc0>)
 8006958:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800695a:	f7ff f9d5 	bl	8005d08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800695e:	bf00      	nop
 8006960:	3718      	adds	r7, #24
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	20004320 	.word	0x20004320
 800696c:	20004310 	.word	0x20004310
 8006970:	2000431c 	.word	0x2000431c

08006974 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800697a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800697e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006980:	4b27      	ldr	r3, [pc, #156]	; (8006a20 <prvHeapInit+0xac>)
 8006982:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f003 0307 	and.w	r3, r3, #7
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00c      	beq.n	80069a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	3307      	adds	r3, #7
 8006992:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f023 0307 	bic.w	r3, r3, #7
 800699a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800699c:	68ba      	ldr	r2, [r7, #8]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	4a1f      	ldr	r2, [pc, #124]	; (8006a20 <prvHeapInit+0xac>)
 80069a4:	4413      	add	r3, r2
 80069a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80069ac:	4a1d      	ldr	r2, [pc, #116]	; (8006a24 <prvHeapInit+0xb0>)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80069b2:	4b1c      	ldr	r3, [pc, #112]	; (8006a24 <prvHeapInit+0xb0>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	4413      	add	r3, r2
 80069be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80069c0:	2208      	movs	r2, #8
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	1a9b      	subs	r3, r3, r2
 80069c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f023 0307 	bic.w	r3, r3, #7
 80069ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	4a15      	ldr	r2, [pc, #84]	; (8006a28 <prvHeapInit+0xb4>)
 80069d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80069d6:	4b14      	ldr	r3, [pc, #80]	; (8006a28 <prvHeapInit+0xb4>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2200      	movs	r2, #0
 80069dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80069de:	4b12      	ldr	r3, [pc, #72]	; (8006a28 <prvHeapInit+0xb4>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2200      	movs	r2, #0
 80069e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	1ad2      	subs	r2, r2, r3
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80069f4:	4b0c      	ldr	r3, [pc, #48]	; (8006a28 <prvHeapInit+0xb4>)
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	4a0a      	ldr	r2, [pc, #40]	; (8006a2c <prvHeapInit+0xb8>)
 8006a02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	4a09      	ldr	r2, [pc, #36]	; (8006a30 <prvHeapInit+0xbc>)
 8006a0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a0c:	4b09      	ldr	r3, [pc, #36]	; (8006a34 <prvHeapInit+0xc0>)
 8006a0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006a12:	601a      	str	r2, [r3, #0]
}
 8006a14:	bf00      	nop
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr
 8006a20:	20000704 	.word	0x20000704
 8006a24:	20004304 	.word	0x20004304
 8006a28:	2000430c 	.word	0x2000430c
 8006a2c:	20004314 	.word	0x20004314
 8006a30:	20004310 	.word	0x20004310
 8006a34:	20004320 	.word	0x20004320

08006a38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a40:	4b28      	ldr	r3, [pc, #160]	; (8006ae4 <prvInsertBlockIntoFreeList+0xac>)
 8006a42:	60fb      	str	r3, [r7, #12]
 8006a44:	e002      	b.n	8006a4c <prvInsertBlockIntoFreeList+0x14>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	60fb      	str	r3, [r7, #12]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d8f7      	bhi.n	8006a46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	4413      	add	r3, r2
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d108      	bne.n	8006a7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	441a      	add	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	441a      	add	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d118      	bne.n	8006ac0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	4b15      	ldr	r3, [pc, #84]	; (8006ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d00d      	beq.n	8006ab6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	441a      	add	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	e008      	b.n	8006ac8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ab6:	4b0c      	ldr	r3, [pc, #48]	; (8006ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	601a      	str	r2, [r3, #0]
 8006abe:	e003      	b.n	8006ac8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d002      	beq.n	8006ad6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ad6:	bf00      	nop
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	20004304 	.word	0x20004304
 8006ae8:	2000430c 	.word	0x2000430c

08006aec <atoi>:
 8006aec:	220a      	movs	r2, #10
 8006aee:	2100      	movs	r1, #0
 8006af0:	f000 b882 	b.w	8006bf8 <strtol>

08006af4 <_strtol_l.constprop.0>:
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006afa:	d001      	beq.n	8006b00 <_strtol_l.constprop.0+0xc>
 8006afc:	2b24      	cmp	r3, #36	; 0x24
 8006afe:	d906      	bls.n	8006b0e <_strtol_l.constprop.0+0x1a>
 8006b00:	f000 f902 	bl	8006d08 <__errno>
 8006b04:	2316      	movs	r3, #22
 8006b06:	6003      	str	r3, [r0, #0]
 8006b08:	2000      	movs	r0, #0
 8006b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b0e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006bf4 <_strtol_l.constprop.0+0x100>
 8006b12:	460d      	mov	r5, r1
 8006b14:	462e      	mov	r6, r5
 8006b16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b1a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006b1e:	f017 0708 	ands.w	r7, r7, #8
 8006b22:	d1f7      	bne.n	8006b14 <_strtol_l.constprop.0+0x20>
 8006b24:	2c2d      	cmp	r4, #45	; 0x2d
 8006b26:	d132      	bne.n	8006b8e <_strtol_l.constprop.0+0x9a>
 8006b28:	782c      	ldrb	r4, [r5, #0]
 8006b2a:	2701      	movs	r7, #1
 8006b2c:	1cb5      	adds	r5, r6, #2
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d05b      	beq.n	8006bea <_strtol_l.constprop.0+0xf6>
 8006b32:	2b10      	cmp	r3, #16
 8006b34:	d109      	bne.n	8006b4a <_strtol_l.constprop.0+0x56>
 8006b36:	2c30      	cmp	r4, #48	; 0x30
 8006b38:	d107      	bne.n	8006b4a <_strtol_l.constprop.0+0x56>
 8006b3a:	782c      	ldrb	r4, [r5, #0]
 8006b3c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006b40:	2c58      	cmp	r4, #88	; 0x58
 8006b42:	d14d      	bne.n	8006be0 <_strtol_l.constprop.0+0xec>
 8006b44:	786c      	ldrb	r4, [r5, #1]
 8006b46:	2310      	movs	r3, #16
 8006b48:	3502      	adds	r5, #2
 8006b4a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006b4e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b52:	f04f 0e00 	mov.w	lr, #0
 8006b56:	fbb8 f9f3 	udiv	r9, r8, r3
 8006b5a:	4676      	mov	r6, lr
 8006b5c:	fb03 8a19 	mls	sl, r3, r9, r8
 8006b60:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006b64:	f1bc 0f09 	cmp.w	ip, #9
 8006b68:	d816      	bhi.n	8006b98 <_strtol_l.constprop.0+0xa4>
 8006b6a:	4664      	mov	r4, ip
 8006b6c:	42a3      	cmp	r3, r4
 8006b6e:	dd24      	ble.n	8006bba <_strtol_l.constprop.0+0xc6>
 8006b70:	f1be 3fff 	cmp.w	lr, #4294967295
 8006b74:	d008      	beq.n	8006b88 <_strtol_l.constprop.0+0x94>
 8006b76:	45b1      	cmp	r9, r6
 8006b78:	d31c      	bcc.n	8006bb4 <_strtol_l.constprop.0+0xc0>
 8006b7a:	d101      	bne.n	8006b80 <_strtol_l.constprop.0+0x8c>
 8006b7c:	45a2      	cmp	sl, r4
 8006b7e:	db19      	blt.n	8006bb4 <_strtol_l.constprop.0+0xc0>
 8006b80:	fb06 4603 	mla	r6, r6, r3, r4
 8006b84:	f04f 0e01 	mov.w	lr, #1
 8006b88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b8c:	e7e8      	b.n	8006b60 <_strtol_l.constprop.0+0x6c>
 8006b8e:	2c2b      	cmp	r4, #43	; 0x2b
 8006b90:	bf04      	itt	eq
 8006b92:	782c      	ldrbeq	r4, [r5, #0]
 8006b94:	1cb5      	addeq	r5, r6, #2
 8006b96:	e7ca      	b.n	8006b2e <_strtol_l.constprop.0+0x3a>
 8006b98:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006b9c:	f1bc 0f19 	cmp.w	ip, #25
 8006ba0:	d801      	bhi.n	8006ba6 <_strtol_l.constprop.0+0xb2>
 8006ba2:	3c37      	subs	r4, #55	; 0x37
 8006ba4:	e7e2      	b.n	8006b6c <_strtol_l.constprop.0+0x78>
 8006ba6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006baa:	f1bc 0f19 	cmp.w	ip, #25
 8006bae:	d804      	bhi.n	8006bba <_strtol_l.constprop.0+0xc6>
 8006bb0:	3c57      	subs	r4, #87	; 0x57
 8006bb2:	e7db      	b.n	8006b6c <_strtol_l.constprop.0+0x78>
 8006bb4:	f04f 3eff 	mov.w	lr, #4294967295
 8006bb8:	e7e6      	b.n	8006b88 <_strtol_l.constprop.0+0x94>
 8006bba:	f1be 3fff 	cmp.w	lr, #4294967295
 8006bbe:	d105      	bne.n	8006bcc <_strtol_l.constprop.0+0xd8>
 8006bc0:	2322      	movs	r3, #34	; 0x22
 8006bc2:	6003      	str	r3, [r0, #0]
 8006bc4:	4646      	mov	r6, r8
 8006bc6:	b942      	cbnz	r2, 8006bda <_strtol_l.constprop.0+0xe6>
 8006bc8:	4630      	mov	r0, r6
 8006bca:	e79e      	b.n	8006b0a <_strtol_l.constprop.0+0x16>
 8006bcc:	b107      	cbz	r7, 8006bd0 <_strtol_l.constprop.0+0xdc>
 8006bce:	4276      	negs	r6, r6
 8006bd0:	2a00      	cmp	r2, #0
 8006bd2:	d0f9      	beq.n	8006bc8 <_strtol_l.constprop.0+0xd4>
 8006bd4:	f1be 0f00 	cmp.w	lr, #0
 8006bd8:	d000      	beq.n	8006bdc <_strtol_l.constprop.0+0xe8>
 8006bda:	1e69      	subs	r1, r5, #1
 8006bdc:	6011      	str	r1, [r2, #0]
 8006bde:	e7f3      	b.n	8006bc8 <_strtol_l.constprop.0+0xd4>
 8006be0:	2430      	movs	r4, #48	; 0x30
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1b1      	bne.n	8006b4a <_strtol_l.constprop.0+0x56>
 8006be6:	2308      	movs	r3, #8
 8006be8:	e7af      	b.n	8006b4a <_strtol_l.constprop.0+0x56>
 8006bea:	2c30      	cmp	r4, #48	; 0x30
 8006bec:	d0a5      	beq.n	8006b3a <_strtol_l.constprop.0+0x46>
 8006bee:	230a      	movs	r3, #10
 8006bf0:	e7ab      	b.n	8006b4a <_strtol_l.constprop.0+0x56>
 8006bf2:	bf00      	nop
 8006bf4:	0800772d 	.word	0x0800772d

08006bf8 <strtol>:
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	460a      	mov	r2, r1
 8006bfc:	4601      	mov	r1, r0
 8006bfe:	4802      	ldr	r0, [pc, #8]	; (8006c08 <strtol+0x10>)
 8006c00:	6800      	ldr	r0, [r0, #0]
 8006c02:	f7ff bf77 	b.w	8006af4 <_strtol_l.constprop.0>
 8006c06:	bf00      	nop
 8006c08:	2000005c 	.word	0x2000005c

08006c0c <siprintf>:
 8006c0c:	b40e      	push	{r1, r2, r3}
 8006c0e:	b500      	push	{lr}
 8006c10:	b09c      	sub	sp, #112	; 0x70
 8006c12:	ab1d      	add	r3, sp, #116	; 0x74
 8006c14:	9002      	str	r0, [sp, #8]
 8006c16:	9006      	str	r0, [sp, #24]
 8006c18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c1c:	4809      	ldr	r0, [pc, #36]	; (8006c44 <siprintf+0x38>)
 8006c1e:	9107      	str	r1, [sp, #28]
 8006c20:	9104      	str	r1, [sp, #16]
 8006c22:	4909      	ldr	r1, [pc, #36]	; (8006c48 <siprintf+0x3c>)
 8006c24:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c28:	9105      	str	r1, [sp, #20]
 8006c2a:	6800      	ldr	r0, [r0, #0]
 8006c2c:	9301      	str	r3, [sp, #4]
 8006c2e:	a902      	add	r1, sp, #8
 8006c30:	f000 f9f6 	bl	8007020 <_svfiprintf_r>
 8006c34:	9b02      	ldr	r3, [sp, #8]
 8006c36:	2200      	movs	r2, #0
 8006c38:	701a      	strb	r2, [r3, #0]
 8006c3a:	b01c      	add	sp, #112	; 0x70
 8006c3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c40:	b003      	add	sp, #12
 8006c42:	4770      	bx	lr
 8006c44:	2000005c 	.word	0x2000005c
 8006c48:	ffff0208 	.word	0xffff0208

08006c4c <memset>:
 8006c4c:	4402      	add	r2, r0
 8006c4e:	4603      	mov	r3, r0
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d100      	bne.n	8006c56 <memset+0xa>
 8006c54:	4770      	bx	lr
 8006c56:	f803 1b01 	strb.w	r1, [r3], #1
 8006c5a:	e7f9      	b.n	8006c50 <memset+0x4>

08006c5c <_reclaim_reent>:
 8006c5c:	4b29      	ldr	r3, [pc, #164]	; (8006d04 <_reclaim_reent+0xa8>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4283      	cmp	r3, r0
 8006c62:	b570      	push	{r4, r5, r6, lr}
 8006c64:	4604      	mov	r4, r0
 8006c66:	d04b      	beq.n	8006d00 <_reclaim_reent+0xa4>
 8006c68:	69c3      	ldr	r3, [r0, #28]
 8006c6a:	b143      	cbz	r3, 8006c7e <_reclaim_reent+0x22>
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d144      	bne.n	8006cfc <_reclaim_reent+0xa0>
 8006c72:	69e3      	ldr	r3, [r4, #28]
 8006c74:	6819      	ldr	r1, [r3, #0]
 8006c76:	b111      	cbz	r1, 8006c7e <_reclaim_reent+0x22>
 8006c78:	4620      	mov	r0, r4
 8006c7a:	f000 f87f 	bl	8006d7c <_free_r>
 8006c7e:	6961      	ldr	r1, [r4, #20]
 8006c80:	b111      	cbz	r1, 8006c88 <_reclaim_reent+0x2c>
 8006c82:	4620      	mov	r0, r4
 8006c84:	f000 f87a 	bl	8006d7c <_free_r>
 8006c88:	69e1      	ldr	r1, [r4, #28]
 8006c8a:	b111      	cbz	r1, 8006c92 <_reclaim_reent+0x36>
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	f000 f875 	bl	8006d7c <_free_r>
 8006c92:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006c94:	b111      	cbz	r1, 8006c9c <_reclaim_reent+0x40>
 8006c96:	4620      	mov	r0, r4
 8006c98:	f000 f870 	bl	8006d7c <_free_r>
 8006c9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c9e:	b111      	cbz	r1, 8006ca6 <_reclaim_reent+0x4a>
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f000 f86b 	bl	8006d7c <_free_r>
 8006ca6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006ca8:	b111      	cbz	r1, 8006cb0 <_reclaim_reent+0x54>
 8006caa:	4620      	mov	r0, r4
 8006cac:	f000 f866 	bl	8006d7c <_free_r>
 8006cb0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006cb2:	b111      	cbz	r1, 8006cba <_reclaim_reent+0x5e>
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	f000 f861 	bl	8006d7c <_free_r>
 8006cba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006cbc:	b111      	cbz	r1, 8006cc4 <_reclaim_reent+0x68>
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	f000 f85c 	bl	8006d7c <_free_r>
 8006cc4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006cc6:	b111      	cbz	r1, 8006cce <_reclaim_reent+0x72>
 8006cc8:	4620      	mov	r0, r4
 8006cca:	f000 f857 	bl	8006d7c <_free_r>
 8006cce:	6a23      	ldr	r3, [r4, #32]
 8006cd0:	b1b3      	cbz	r3, 8006d00 <_reclaim_reent+0xa4>
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006cd8:	4718      	bx	r3
 8006cda:	5949      	ldr	r1, [r1, r5]
 8006cdc:	b941      	cbnz	r1, 8006cf0 <_reclaim_reent+0x94>
 8006cde:	3504      	adds	r5, #4
 8006ce0:	69e3      	ldr	r3, [r4, #28]
 8006ce2:	2d80      	cmp	r5, #128	; 0x80
 8006ce4:	68d9      	ldr	r1, [r3, #12]
 8006ce6:	d1f8      	bne.n	8006cda <_reclaim_reent+0x7e>
 8006ce8:	4620      	mov	r0, r4
 8006cea:	f000 f847 	bl	8006d7c <_free_r>
 8006cee:	e7c0      	b.n	8006c72 <_reclaim_reent+0x16>
 8006cf0:	680e      	ldr	r6, [r1, #0]
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	f000 f842 	bl	8006d7c <_free_r>
 8006cf8:	4631      	mov	r1, r6
 8006cfa:	e7ef      	b.n	8006cdc <_reclaim_reent+0x80>
 8006cfc:	2500      	movs	r5, #0
 8006cfe:	e7ef      	b.n	8006ce0 <_reclaim_reent+0x84>
 8006d00:	bd70      	pop	{r4, r5, r6, pc}
 8006d02:	bf00      	nop
 8006d04:	2000005c 	.word	0x2000005c

08006d08 <__errno>:
 8006d08:	4b01      	ldr	r3, [pc, #4]	; (8006d10 <__errno+0x8>)
 8006d0a:	6818      	ldr	r0, [r3, #0]
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	2000005c 	.word	0x2000005c

08006d14 <__libc_init_array>:
 8006d14:	b570      	push	{r4, r5, r6, lr}
 8006d16:	4d0d      	ldr	r5, [pc, #52]	; (8006d4c <__libc_init_array+0x38>)
 8006d18:	4c0d      	ldr	r4, [pc, #52]	; (8006d50 <__libc_init_array+0x3c>)
 8006d1a:	1b64      	subs	r4, r4, r5
 8006d1c:	10a4      	asrs	r4, r4, #2
 8006d1e:	2600      	movs	r6, #0
 8006d20:	42a6      	cmp	r6, r4
 8006d22:	d109      	bne.n	8006d38 <__libc_init_array+0x24>
 8006d24:	4d0b      	ldr	r5, [pc, #44]	; (8006d54 <__libc_init_array+0x40>)
 8006d26:	4c0c      	ldr	r4, [pc, #48]	; (8006d58 <__libc_init_array+0x44>)
 8006d28:	f000 fc6a 	bl	8007600 <_init>
 8006d2c:	1b64      	subs	r4, r4, r5
 8006d2e:	10a4      	asrs	r4, r4, #2
 8006d30:	2600      	movs	r6, #0
 8006d32:	42a6      	cmp	r6, r4
 8006d34:	d105      	bne.n	8006d42 <__libc_init_array+0x2e>
 8006d36:	bd70      	pop	{r4, r5, r6, pc}
 8006d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d3c:	4798      	blx	r3
 8006d3e:	3601      	adds	r6, #1
 8006d40:	e7ee      	b.n	8006d20 <__libc_init_array+0xc>
 8006d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d46:	4798      	blx	r3
 8006d48:	3601      	adds	r6, #1
 8006d4a:	e7f2      	b.n	8006d32 <__libc_init_array+0x1e>
 8006d4c:	08007868 	.word	0x08007868
 8006d50:	08007868 	.word	0x08007868
 8006d54:	08007868 	.word	0x08007868
 8006d58:	0800786c 	.word	0x0800786c

08006d5c <__retarget_lock_acquire_recursive>:
 8006d5c:	4770      	bx	lr

08006d5e <__retarget_lock_release_recursive>:
 8006d5e:	4770      	bx	lr

08006d60 <memcpy>:
 8006d60:	440a      	add	r2, r1
 8006d62:	4291      	cmp	r1, r2
 8006d64:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d68:	d100      	bne.n	8006d6c <memcpy+0xc>
 8006d6a:	4770      	bx	lr
 8006d6c:	b510      	push	{r4, lr}
 8006d6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d76:	4291      	cmp	r1, r2
 8006d78:	d1f9      	bne.n	8006d6e <memcpy+0xe>
 8006d7a:	bd10      	pop	{r4, pc}

08006d7c <_free_r>:
 8006d7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d7e:	2900      	cmp	r1, #0
 8006d80:	d044      	beq.n	8006e0c <_free_r+0x90>
 8006d82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d86:	9001      	str	r0, [sp, #4]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f1a1 0404 	sub.w	r4, r1, #4
 8006d8e:	bfb8      	it	lt
 8006d90:	18e4      	addlt	r4, r4, r3
 8006d92:	f000 f8df 	bl	8006f54 <__malloc_lock>
 8006d96:	4a1e      	ldr	r2, [pc, #120]	; (8006e10 <_free_r+0x94>)
 8006d98:	9801      	ldr	r0, [sp, #4]
 8006d9a:	6813      	ldr	r3, [r2, #0]
 8006d9c:	b933      	cbnz	r3, 8006dac <_free_r+0x30>
 8006d9e:	6063      	str	r3, [r4, #4]
 8006da0:	6014      	str	r4, [r2, #0]
 8006da2:	b003      	add	sp, #12
 8006da4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006da8:	f000 b8da 	b.w	8006f60 <__malloc_unlock>
 8006dac:	42a3      	cmp	r3, r4
 8006dae:	d908      	bls.n	8006dc2 <_free_r+0x46>
 8006db0:	6825      	ldr	r5, [r4, #0]
 8006db2:	1961      	adds	r1, r4, r5
 8006db4:	428b      	cmp	r3, r1
 8006db6:	bf01      	itttt	eq
 8006db8:	6819      	ldreq	r1, [r3, #0]
 8006dba:	685b      	ldreq	r3, [r3, #4]
 8006dbc:	1949      	addeq	r1, r1, r5
 8006dbe:	6021      	streq	r1, [r4, #0]
 8006dc0:	e7ed      	b.n	8006d9e <_free_r+0x22>
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	b10b      	cbz	r3, 8006dcc <_free_r+0x50>
 8006dc8:	42a3      	cmp	r3, r4
 8006dca:	d9fa      	bls.n	8006dc2 <_free_r+0x46>
 8006dcc:	6811      	ldr	r1, [r2, #0]
 8006dce:	1855      	adds	r5, r2, r1
 8006dd0:	42a5      	cmp	r5, r4
 8006dd2:	d10b      	bne.n	8006dec <_free_r+0x70>
 8006dd4:	6824      	ldr	r4, [r4, #0]
 8006dd6:	4421      	add	r1, r4
 8006dd8:	1854      	adds	r4, r2, r1
 8006dda:	42a3      	cmp	r3, r4
 8006ddc:	6011      	str	r1, [r2, #0]
 8006dde:	d1e0      	bne.n	8006da2 <_free_r+0x26>
 8006de0:	681c      	ldr	r4, [r3, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	6053      	str	r3, [r2, #4]
 8006de6:	440c      	add	r4, r1
 8006de8:	6014      	str	r4, [r2, #0]
 8006dea:	e7da      	b.n	8006da2 <_free_r+0x26>
 8006dec:	d902      	bls.n	8006df4 <_free_r+0x78>
 8006dee:	230c      	movs	r3, #12
 8006df0:	6003      	str	r3, [r0, #0]
 8006df2:	e7d6      	b.n	8006da2 <_free_r+0x26>
 8006df4:	6825      	ldr	r5, [r4, #0]
 8006df6:	1961      	adds	r1, r4, r5
 8006df8:	428b      	cmp	r3, r1
 8006dfa:	bf04      	itt	eq
 8006dfc:	6819      	ldreq	r1, [r3, #0]
 8006dfe:	685b      	ldreq	r3, [r3, #4]
 8006e00:	6063      	str	r3, [r4, #4]
 8006e02:	bf04      	itt	eq
 8006e04:	1949      	addeq	r1, r1, r5
 8006e06:	6021      	streq	r1, [r4, #0]
 8006e08:	6054      	str	r4, [r2, #4]
 8006e0a:	e7ca      	b.n	8006da2 <_free_r+0x26>
 8006e0c:	b003      	add	sp, #12
 8006e0e:	bd30      	pop	{r4, r5, pc}
 8006e10:	20004464 	.word	0x20004464

08006e14 <sbrk_aligned>:
 8006e14:	b570      	push	{r4, r5, r6, lr}
 8006e16:	4e0e      	ldr	r6, [pc, #56]	; (8006e50 <sbrk_aligned+0x3c>)
 8006e18:	460c      	mov	r4, r1
 8006e1a:	6831      	ldr	r1, [r6, #0]
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	b911      	cbnz	r1, 8006e26 <sbrk_aligned+0x12>
 8006e20:	f000 fba6 	bl	8007570 <_sbrk_r>
 8006e24:	6030      	str	r0, [r6, #0]
 8006e26:	4621      	mov	r1, r4
 8006e28:	4628      	mov	r0, r5
 8006e2a:	f000 fba1 	bl	8007570 <_sbrk_r>
 8006e2e:	1c43      	adds	r3, r0, #1
 8006e30:	d00a      	beq.n	8006e48 <sbrk_aligned+0x34>
 8006e32:	1cc4      	adds	r4, r0, #3
 8006e34:	f024 0403 	bic.w	r4, r4, #3
 8006e38:	42a0      	cmp	r0, r4
 8006e3a:	d007      	beq.n	8006e4c <sbrk_aligned+0x38>
 8006e3c:	1a21      	subs	r1, r4, r0
 8006e3e:	4628      	mov	r0, r5
 8006e40:	f000 fb96 	bl	8007570 <_sbrk_r>
 8006e44:	3001      	adds	r0, #1
 8006e46:	d101      	bne.n	8006e4c <sbrk_aligned+0x38>
 8006e48:	f04f 34ff 	mov.w	r4, #4294967295
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	bd70      	pop	{r4, r5, r6, pc}
 8006e50:	20004468 	.word	0x20004468

08006e54 <_malloc_r>:
 8006e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e58:	1ccd      	adds	r5, r1, #3
 8006e5a:	f025 0503 	bic.w	r5, r5, #3
 8006e5e:	3508      	adds	r5, #8
 8006e60:	2d0c      	cmp	r5, #12
 8006e62:	bf38      	it	cc
 8006e64:	250c      	movcc	r5, #12
 8006e66:	2d00      	cmp	r5, #0
 8006e68:	4607      	mov	r7, r0
 8006e6a:	db01      	blt.n	8006e70 <_malloc_r+0x1c>
 8006e6c:	42a9      	cmp	r1, r5
 8006e6e:	d905      	bls.n	8006e7c <_malloc_r+0x28>
 8006e70:	230c      	movs	r3, #12
 8006e72:	603b      	str	r3, [r7, #0]
 8006e74:	2600      	movs	r6, #0
 8006e76:	4630      	mov	r0, r6
 8006e78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006f50 <_malloc_r+0xfc>
 8006e80:	f000 f868 	bl	8006f54 <__malloc_lock>
 8006e84:	f8d8 3000 	ldr.w	r3, [r8]
 8006e88:	461c      	mov	r4, r3
 8006e8a:	bb5c      	cbnz	r4, 8006ee4 <_malloc_r+0x90>
 8006e8c:	4629      	mov	r1, r5
 8006e8e:	4638      	mov	r0, r7
 8006e90:	f7ff ffc0 	bl	8006e14 <sbrk_aligned>
 8006e94:	1c43      	adds	r3, r0, #1
 8006e96:	4604      	mov	r4, r0
 8006e98:	d155      	bne.n	8006f46 <_malloc_r+0xf2>
 8006e9a:	f8d8 4000 	ldr.w	r4, [r8]
 8006e9e:	4626      	mov	r6, r4
 8006ea0:	2e00      	cmp	r6, #0
 8006ea2:	d145      	bne.n	8006f30 <_malloc_r+0xdc>
 8006ea4:	2c00      	cmp	r4, #0
 8006ea6:	d048      	beq.n	8006f3a <_malloc_r+0xe6>
 8006ea8:	6823      	ldr	r3, [r4, #0]
 8006eaa:	4631      	mov	r1, r6
 8006eac:	4638      	mov	r0, r7
 8006eae:	eb04 0903 	add.w	r9, r4, r3
 8006eb2:	f000 fb5d 	bl	8007570 <_sbrk_r>
 8006eb6:	4581      	cmp	r9, r0
 8006eb8:	d13f      	bne.n	8006f3a <_malloc_r+0xe6>
 8006eba:	6821      	ldr	r1, [r4, #0]
 8006ebc:	1a6d      	subs	r5, r5, r1
 8006ebe:	4629      	mov	r1, r5
 8006ec0:	4638      	mov	r0, r7
 8006ec2:	f7ff ffa7 	bl	8006e14 <sbrk_aligned>
 8006ec6:	3001      	adds	r0, #1
 8006ec8:	d037      	beq.n	8006f3a <_malloc_r+0xe6>
 8006eca:	6823      	ldr	r3, [r4, #0]
 8006ecc:	442b      	add	r3, r5
 8006ece:	6023      	str	r3, [r4, #0]
 8006ed0:	f8d8 3000 	ldr.w	r3, [r8]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d038      	beq.n	8006f4a <_malloc_r+0xf6>
 8006ed8:	685a      	ldr	r2, [r3, #4]
 8006eda:	42a2      	cmp	r2, r4
 8006edc:	d12b      	bne.n	8006f36 <_malloc_r+0xe2>
 8006ede:	2200      	movs	r2, #0
 8006ee0:	605a      	str	r2, [r3, #4]
 8006ee2:	e00f      	b.n	8006f04 <_malloc_r+0xb0>
 8006ee4:	6822      	ldr	r2, [r4, #0]
 8006ee6:	1b52      	subs	r2, r2, r5
 8006ee8:	d41f      	bmi.n	8006f2a <_malloc_r+0xd6>
 8006eea:	2a0b      	cmp	r2, #11
 8006eec:	d917      	bls.n	8006f1e <_malloc_r+0xca>
 8006eee:	1961      	adds	r1, r4, r5
 8006ef0:	42a3      	cmp	r3, r4
 8006ef2:	6025      	str	r5, [r4, #0]
 8006ef4:	bf18      	it	ne
 8006ef6:	6059      	strne	r1, [r3, #4]
 8006ef8:	6863      	ldr	r3, [r4, #4]
 8006efa:	bf08      	it	eq
 8006efc:	f8c8 1000 	streq.w	r1, [r8]
 8006f00:	5162      	str	r2, [r4, r5]
 8006f02:	604b      	str	r3, [r1, #4]
 8006f04:	4638      	mov	r0, r7
 8006f06:	f104 060b 	add.w	r6, r4, #11
 8006f0a:	f000 f829 	bl	8006f60 <__malloc_unlock>
 8006f0e:	f026 0607 	bic.w	r6, r6, #7
 8006f12:	1d23      	adds	r3, r4, #4
 8006f14:	1af2      	subs	r2, r6, r3
 8006f16:	d0ae      	beq.n	8006e76 <_malloc_r+0x22>
 8006f18:	1b9b      	subs	r3, r3, r6
 8006f1a:	50a3      	str	r3, [r4, r2]
 8006f1c:	e7ab      	b.n	8006e76 <_malloc_r+0x22>
 8006f1e:	42a3      	cmp	r3, r4
 8006f20:	6862      	ldr	r2, [r4, #4]
 8006f22:	d1dd      	bne.n	8006ee0 <_malloc_r+0x8c>
 8006f24:	f8c8 2000 	str.w	r2, [r8]
 8006f28:	e7ec      	b.n	8006f04 <_malloc_r+0xb0>
 8006f2a:	4623      	mov	r3, r4
 8006f2c:	6864      	ldr	r4, [r4, #4]
 8006f2e:	e7ac      	b.n	8006e8a <_malloc_r+0x36>
 8006f30:	4634      	mov	r4, r6
 8006f32:	6876      	ldr	r6, [r6, #4]
 8006f34:	e7b4      	b.n	8006ea0 <_malloc_r+0x4c>
 8006f36:	4613      	mov	r3, r2
 8006f38:	e7cc      	b.n	8006ed4 <_malloc_r+0x80>
 8006f3a:	230c      	movs	r3, #12
 8006f3c:	603b      	str	r3, [r7, #0]
 8006f3e:	4638      	mov	r0, r7
 8006f40:	f000 f80e 	bl	8006f60 <__malloc_unlock>
 8006f44:	e797      	b.n	8006e76 <_malloc_r+0x22>
 8006f46:	6025      	str	r5, [r4, #0]
 8006f48:	e7dc      	b.n	8006f04 <_malloc_r+0xb0>
 8006f4a:	605b      	str	r3, [r3, #4]
 8006f4c:	deff      	udf	#255	; 0xff
 8006f4e:	bf00      	nop
 8006f50:	20004464 	.word	0x20004464

08006f54 <__malloc_lock>:
 8006f54:	4801      	ldr	r0, [pc, #4]	; (8006f5c <__malloc_lock+0x8>)
 8006f56:	f7ff bf01 	b.w	8006d5c <__retarget_lock_acquire_recursive>
 8006f5a:	bf00      	nop
 8006f5c:	20004460 	.word	0x20004460

08006f60 <__malloc_unlock>:
 8006f60:	4801      	ldr	r0, [pc, #4]	; (8006f68 <__malloc_unlock+0x8>)
 8006f62:	f7ff befc 	b.w	8006d5e <__retarget_lock_release_recursive>
 8006f66:	bf00      	nop
 8006f68:	20004460 	.word	0x20004460

08006f6c <__ssputs_r>:
 8006f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f70:	688e      	ldr	r6, [r1, #8]
 8006f72:	461f      	mov	r7, r3
 8006f74:	42be      	cmp	r6, r7
 8006f76:	680b      	ldr	r3, [r1, #0]
 8006f78:	4682      	mov	sl, r0
 8006f7a:	460c      	mov	r4, r1
 8006f7c:	4690      	mov	r8, r2
 8006f7e:	d82c      	bhi.n	8006fda <__ssputs_r+0x6e>
 8006f80:	898a      	ldrh	r2, [r1, #12]
 8006f82:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f86:	d026      	beq.n	8006fd6 <__ssputs_r+0x6a>
 8006f88:	6965      	ldr	r5, [r4, #20]
 8006f8a:	6909      	ldr	r1, [r1, #16]
 8006f8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f90:	eba3 0901 	sub.w	r9, r3, r1
 8006f94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f98:	1c7b      	adds	r3, r7, #1
 8006f9a:	444b      	add	r3, r9
 8006f9c:	106d      	asrs	r5, r5, #1
 8006f9e:	429d      	cmp	r5, r3
 8006fa0:	bf38      	it	cc
 8006fa2:	461d      	movcc	r5, r3
 8006fa4:	0553      	lsls	r3, r2, #21
 8006fa6:	d527      	bpl.n	8006ff8 <__ssputs_r+0x8c>
 8006fa8:	4629      	mov	r1, r5
 8006faa:	f7ff ff53 	bl	8006e54 <_malloc_r>
 8006fae:	4606      	mov	r6, r0
 8006fb0:	b360      	cbz	r0, 800700c <__ssputs_r+0xa0>
 8006fb2:	6921      	ldr	r1, [r4, #16]
 8006fb4:	464a      	mov	r2, r9
 8006fb6:	f7ff fed3 	bl	8006d60 <memcpy>
 8006fba:	89a3      	ldrh	r3, [r4, #12]
 8006fbc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fc4:	81a3      	strh	r3, [r4, #12]
 8006fc6:	6126      	str	r6, [r4, #16]
 8006fc8:	6165      	str	r5, [r4, #20]
 8006fca:	444e      	add	r6, r9
 8006fcc:	eba5 0509 	sub.w	r5, r5, r9
 8006fd0:	6026      	str	r6, [r4, #0]
 8006fd2:	60a5      	str	r5, [r4, #8]
 8006fd4:	463e      	mov	r6, r7
 8006fd6:	42be      	cmp	r6, r7
 8006fd8:	d900      	bls.n	8006fdc <__ssputs_r+0x70>
 8006fda:	463e      	mov	r6, r7
 8006fdc:	6820      	ldr	r0, [r4, #0]
 8006fde:	4632      	mov	r2, r6
 8006fe0:	4641      	mov	r1, r8
 8006fe2:	f000 faab 	bl	800753c <memmove>
 8006fe6:	68a3      	ldr	r3, [r4, #8]
 8006fe8:	1b9b      	subs	r3, r3, r6
 8006fea:	60a3      	str	r3, [r4, #8]
 8006fec:	6823      	ldr	r3, [r4, #0]
 8006fee:	4433      	add	r3, r6
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ff8:	462a      	mov	r2, r5
 8006ffa:	f000 fac9 	bl	8007590 <_realloc_r>
 8006ffe:	4606      	mov	r6, r0
 8007000:	2800      	cmp	r0, #0
 8007002:	d1e0      	bne.n	8006fc6 <__ssputs_r+0x5a>
 8007004:	6921      	ldr	r1, [r4, #16]
 8007006:	4650      	mov	r0, sl
 8007008:	f7ff feb8 	bl	8006d7c <_free_r>
 800700c:	230c      	movs	r3, #12
 800700e:	f8ca 3000 	str.w	r3, [sl]
 8007012:	89a3      	ldrh	r3, [r4, #12]
 8007014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007018:	81a3      	strh	r3, [r4, #12]
 800701a:	f04f 30ff 	mov.w	r0, #4294967295
 800701e:	e7e9      	b.n	8006ff4 <__ssputs_r+0x88>

08007020 <_svfiprintf_r>:
 8007020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007024:	4698      	mov	r8, r3
 8007026:	898b      	ldrh	r3, [r1, #12]
 8007028:	061b      	lsls	r3, r3, #24
 800702a:	b09d      	sub	sp, #116	; 0x74
 800702c:	4607      	mov	r7, r0
 800702e:	460d      	mov	r5, r1
 8007030:	4614      	mov	r4, r2
 8007032:	d50e      	bpl.n	8007052 <_svfiprintf_r+0x32>
 8007034:	690b      	ldr	r3, [r1, #16]
 8007036:	b963      	cbnz	r3, 8007052 <_svfiprintf_r+0x32>
 8007038:	2140      	movs	r1, #64	; 0x40
 800703a:	f7ff ff0b 	bl	8006e54 <_malloc_r>
 800703e:	6028      	str	r0, [r5, #0]
 8007040:	6128      	str	r0, [r5, #16]
 8007042:	b920      	cbnz	r0, 800704e <_svfiprintf_r+0x2e>
 8007044:	230c      	movs	r3, #12
 8007046:	603b      	str	r3, [r7, #0]
 8007048:	f04f 30ff 	mov.w	r0, #4294967295
 800704c:	e0d0      	b.n	80071f0 <_svfiprintf_r+0x1d0>
 800704e:	2340      	movs	r3, #64	; 0x40
 8007050:	616b      	str	r3, [r5, #20]
 8007052:	2300      	movs	r3, #0
 8007054:	9309      	str	r3, [sp, #36]	; 0x24
 8007056:	2320      	movs	r3, #32
 8007058:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800705c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007060:	2330      	movs	r3, #48	; 0x30
 8007062:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007208 <_svfiprintf_r+0x1e8>
 8007066:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800706a:	f04f 0901 	mov.w	r9, #1
 800706e:	4623      	mov	r3, r4
 8007070:	469a      	mov	sl, r3
 8007072:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007076:	b10a      	cbz	r2, 800707c <_svfiprintf_r+0x5c>
 8007078:	2a25      	cmp	r2, #37	; 0x25
 800707a:	d1f9      	bne.n	8007070 <_svfiprintf_r+0x50>
 800707c:	ebba 0b04 	subs.w	fp, sl, r4
 8007080:	d00b      	beq.n	800709a <_svfiprintf_r+0x7a>
 8007082:	465b      	mov	r3, fp
 8007084:	4622      	mov	r2, r4
 8007086:	4629      	mov	r1, r5
 8007088:	4638      	mov	r0, r7
 800708a:	f7ff ff6f 	bl	8006f6c <__ssputs_r>
 800708e:	3001      	adds	r0, #1
 8007090:	f000 80a9 	beq.w	80071e6 <_svfiprintf_r+0x1c6>
 8007094:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007096:	445a      	add	r2, fp
 8007098:	9209      	str	r2, [sp, #36]	; 0x24
 800709a:	f89a 3000 	ldrb.w	r3, [sl]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	f000 80a1 	beq.w	80071e6 <_svfiprintf_r+0x1c6>
 80070a4:	2300      	movs	r3, #0
 80070a6:	f04f 32ff 	mov.w	r2, #4294967295
 80070aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070ae:	f10a 0a01 	add.w	sl, sl, #1
 80070b2:	9304      	str	r3, [sp, #16]
 80070b4:	9307      	str	r3, [sp, #28]
 80070b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070ba:	931a      	str	r3, [sp, #104]	; 0x68
 80070bc:	4654      	mov	r4, sl
 80070be:	2205      	movs	r2, #5
 80070c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070c4:	4850      	ldr	r0, [pc, #320]	; (8007208 <_svfiprintf_r+0x1e8>)
 80070c6:	f7f9 f88b 	bl	80001e0 <memchr>
 80070ca:	9a04      	ldr	r2, [sp, #16]
 80070cc:	b9d8      	cbnz	r0, 8007106 <_svfiprintf_r+0xe6>
 80070ce:	06d0      	lsls	r0, r2, #27
 80070d0:	bf44      	itt	mi
 80070d2:	2320      	movmi	r3, #32
 80070d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070d8:	0711      	lsls	r1, r2, #28
 80070da:	bf44      	itt	mi
 80070dc:	232b      	movmi	r3, #43	; 0x2b
 80070de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070e2:	f89a 3000 	ldrb.w	r3, [sl]
 80070e6:	2b2a      	cmp	r3, #42	; 0x2a
 80070e8:	d015      	beq.n	8007116 <_svfiprintf_r+0xf6>
 80070ea:	9a07      	ldr	r2, [sp, #28]
 80070ec:	4654      	mov	r4, sl
 80070ee:	2000      	movs	r0, #0
 80070f0:	f04f 0c0a 	mov.w	ip, #10
 80070f4:	4621      	mov	r1, r4
 80070f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070fa:	3b30      	subs	r3, #48	; 0x30
 80070fc:	2b09      	cmp	r3, #9
 80070fe:	d94d      	bls.n	800719c <_svfiprintf_r+0x17c>
 8007100:	b1b0      	cbz	r0, 8007130 <_svfiprintf_r+0x110>
 8007102:	9207      	str	r2, [sp, #28]
 8007104:	e014      	b.n	8007130 <_svfiprintf_r+0x110>
 8007106:	eba0 0308 	sub.w	r3, r0, r8
 800710a:	fa09 f303 	lsl.w	r3, r9, r3
 800710e:	4313      	orrs	r3, r2
 8007110:	9304      	str	r3, [sp, #16]
 8007112:	46a2      	mov	sl, r4
 8007114:	e7d2      	b.n	80070bc <_svfiprintf_r+0x9c>
 8007116:	9b03      	ldr	r3, [sp, #12]
 8007118:	1d19      	adds	r1, r3, #4
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	9103      	str	r1, [sp, #12]
 800711e:	2b00      	cmp	r3, #0
 8007120:	bfbb      	ittet	lt
 8007122:	425b      	neglt	r3, r3
 8007124:	f042 0202 	orrlt.w	r2, r2, #2
 8007128:	9307      	strge	r3, [sp, #28]
 800712a:	9307      	strlt	r3, [sp, #28]
 800712c:	bfb8      	it	lt
 800712e:	9204      	strlt	r2, [sp, #16]
 8007130:	7823      	ldrb	r3, [r4, #0]
 8007132:	2b2e      	cmp	r3, #46	; 0x2e
 8007134:	d10c      	bne.n	8007150 <_svfiprintf_r+0x130>
 8007136:	7863      	ldrb	r3, [r4, #1]
 8007138:	2b2a      	cmp	r3, #42	; 0x2a
 800713a:	d134      	bne.n	80071a6 <_svfiprintf_r+0x186>
 800713c:	9b03      	ldr	r3, [sp, #12]
 800713e:	1d1a      	adds	r2, r3, #4
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	9203      	str	r2, [sp, #12]
 8007144:	2b00      	cmp	r3, #0
 8007146:	bfb8      	it	lt
 8007148:	f04f 33ff 	movlt.w	r3, #4294967295
 800714c:	3402      	adds	r4, #2
 800714e:	9305      	str	r3, [sp, #20]
 8007150:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007218 <_svfiprintf_r+0x1f8>
 8007154:	7821      	ldrb	r1, [r4, #0]
 8007156:	2203      	movs	r2, #3
 8007158:	4650      	mov	r0, sl
 800715a:	f7f9 f841 	bl	80001e0 <memchr>
 800715e:	b138      	cbz	r0, 8007170 <_svfiprintf_r+0x150>
 8007160:	9b04      	ldr	r3, [sp, #16]
 8007162:	eba0 000a 	sub.w	r0, r0, sl
 8007166:	2240      	movs	r2, #64	; 0x40
 8007168:	4082      	lsls	r2, r0
 800716a:	4313      	orrs	r3, r2
 800716c:	3401      	adds	r4, #1
 800716e:	9304      	str	r3, [sp, #16]
 8007170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007174:	4825      	ldr	r0, [pc, #148]	; (800720c <_svfiprintf_r+0x1ec>)
 8007176:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800717a:	2206      	movs	r2, #6
 800717c:	f7f9 f830 	bl	80001e0 <memchr>
 8007180:	2800      	cmp	r0, #0
 8007182:	d038      	beq.n	80071f6 <_svfiprintf_r+0x1d6>
 8007184:	4b22      	ldr	r3, [pc, #136]	; (8007210 <_svfiprintf_r+0x1f0>)
 8007186:	bb1b      	cbnz	r3, 80071d0 <_svfiprintf_r+0x1b0>
 8007188:	9b03      	ldr	r3, [sp, #12]
 800718a:	3307      	adds	r3, #7
 800718c:	f023 0307 	bic.w	r3, r3, #7
 8007190:	3308      	adds	r3, #8
 8007192:	9303      	str	r3, [sp, #12]
 8007194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007196:	4433      	add	r3, r6
 8007198:	9309      	str	r3, [sp, #36]	; 0x24
 800719a:	e768      	b.n	800706e <_svfiprintf_r+0x4e>
 800719c:	fb0c 3202 	mla	r2, ip, r2, r3
 80071a0:	460c      	mov	r4, r1
 80071a2:	2001      	movs	r0, #1
 80071a4:	e7a6      	b.n	80070f4 <_svfiprintf_r+0xd4>
 80071a6:	2300      	movs	r3, #0
 80071a8:	3401      	adds	r4, #1
 80071aa:	9305      	str	r3, [sp, #20]
 80071ac:	4619      	mov	r1, r3
 80071ae:	f04f 0c0a 	mov.w	ip, #10
 80071b2:	4620      	mov	r0, r4
 80071b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071b8:	3a30      	subs	r2, #48	; 0x30
 80071ba:	2a09      	cmp	r2, #9
 80071bc:	d903      	bls.n	80071c6 <_svfiprintf_r+0x1a6>
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d0c6      	beq.n	8007150 <_svfiprintf_r+0x130>
 80071c2:	9105      	str	r1, [sp, #20]
 80071c4:	e7c4      	b.n	8007150 <_svfiprintf_r+0x130>
 80071c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80071ca:	4604      	mov	r4, r0
 80071cc:	2301      	movs	r3, #1
 80071ce:	e7f0      	b.n	80071b2 <_svfiprintf_r+0x192>
 80071d0:	ab03      	add	r3, sp, #12
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	462a      	mov	r2, r5
 80071d6:	4b0f      	ldr	r3, [pc, #60]	; (8007214 <_svfiprintf_r+0x1f4>)
 80071d8:	a904      	add	r1, sp, #16
 80071da:	4638      	mov	r0, r7
 80071dc:	f3af 8000 	nop.w
 80071e0:	1c42      	adds	r2, r0, #1
 80071e2:	4606      	mov	r6, r0
 80071e4:	d1d6      	bne.n	8007194 <_svfiprintf_r+0x174>
 80071e6:	89ab      	ldrh	r3, [r5, #12]
 80071e8:	065b      	lsls	r3, r3, #25
 80071ea:	f53f af2d 	bmi.w	8007048 <_svfiprintf_r+0x28>
 80071ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071f0:	b01d      	add	sp, #116	; 0x74
 80071f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f6:	ab03      	add	r3, sp, #12
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	462a      	mov	r2, r5
 80071fc:	4b05      	ldr	r3, [pc, #20]	; (8007214 <_svfiprintf_r+0x1f4>)
 80071fe:	a904      	add	r1, sp, #16
 8007200:	4638      	mov	r0, r7
 8007202:	f000 f879 	bl	80072f8 <_printf_i>
 8007206:	e7eb      	b.n	80071e0 <_svfiprintf_r+0x1c0>
 8007208:	0800782d 	.word	0x0800782d
 800720c:	08007837 	.word	0x08007837
 8007210:	00000000 	.word	0x00000000
 8007214:	08006f6d 	.word	0x08006f6d
 8007218:	08007833 	.word	0x08007833

0800721c <_printf_common>:
 800721c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007220:	4616      	mov	r6, r2
 8007222:	4699      	mov	r9, r3
 8007224:	688a      	ldr	r2, [r1, #8]
 8007226:	690b      	ldr	r3, [r1, #16]
 8007228:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800722c:	4293      	cmp	r3, r2
 800722e:	bfb8      	it	lt
 8007230:	4613      	movlt	r3, r2
 8007232:	6033      	str	r3, [r6, #0]
 8007234:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007238:	4607      	mov	r7, r0
 800723a:	460c      	mov	r4, r1
 800723c:	b10a      	cbz	r2, 8007242 <_printf_common+0x26>
 800723e:	3301      	adds	r3, #1
 8007240:	6033      	str	r3, [r6, #0]
 8007242:	6823      	ldr	r3, [r4, #0]
 8007244:	0699      	lsls	r1, r3, #26
 8007246:	bf42      	ittt	mi
 8007248:	6833      	ldrmi	r3, [r6, #0]
 800724a:	3302      	addmi	r3, #2
 800724c:	6033      	strmi	r3, [r6, #0]
 800724e:	6825      	ldr	r5, [r4, #0]
 8007250:	f015 0506 	ands.w	r5, r5, #6
 8007254:	d106      	bne.n	8007264 <_printf_common+0x48>
 8007256:	f104 0a19 	add.w	sl, r4, #25
 800725a:	68e3      	ldr	r3, [r4, #12]
 800725c:	6832      	ldr	r2, [r6, #0]
 800725e:	1a9b      	subs	r3, r3, r2
 8007260:	42ab      	cmp	r3, r5
 8007262:	dc26      	bgt.n	80072b2 <_printf_common+0x96>
 8007264:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007268:	1e13      	subs	r3, r2, #0
 800726a:	6822      	ldr	r2, [r4, #0]
 800726c:	bf18      	it	ne
 800726e:	2301      	movne	r3, #1
 8007270:	0692      	lsls	r2, r2, #26
 8007272:	d42b      	bmi.n	80072cc <_printf_common+0xb0>
 8007274:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007278:	4649      	mov	r1, r9
 800727a:	4638      	mov	r0, r7
 800727c:	47c0      	blx	r8
 800727e:	3001      	adds	r0, #1
 8007280:	d01e      	beq.n	80072c0 <_printf_common+0xa4>
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	6922      	ldr	r2, [r4, #16]
 8007286:	f003 0306 	and.w	r3, r3, #6
 800728a:	2b04      	cmp	r3, #4
 800728c:	bf02      	ittt	eq
 800728e:	68e5      	ldreq	r5, [r4, #12]
 8007290:	6833      	ldreq	r3, [r6, #0]
 8007292:	1aed      	subeq	r5, r5, r3
 8007294:	68a3      	ldr	r3, [r4, #8]
 8007296:	bf0c      	ite	eq
 8007298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800729c:	2500      	movne	r5, #0
 800729e:	4293      	cmp	r3, r2
 80072a0:	bfc4      	itt	gt
 80072a2:	1a9b      	subgt	r3, r3, r2
 80072a4:	18ed      	addgt	r5, r5, r3
 80072a6:	2600      	movs	r6, #0
 80072a8:	341a      	adds	r4, #26
 80072aa:	42b5      	cmp	r5, r6
 80072ac:	d11a      	bne.n	80072e4 <_printf_common+0xc8>
 80072ae:	2000      	movs	r0, #0
 80072b0:	e008      	b.n	80072c4 <_printf_common+0xa8>
 80072b2:	2301      	movs	r3, #1
 80072b4:	4652      	mov	r2, sl
 80072b6:	4649      	mov	r1, r9
 80072b8:	4638      	mov	r0, r7
 80072ba:	47c0      	blx	r8
 80072bc:	3001      	adds	r0, #1
 80072be:	d103      	bne.n	80072c8 <_printf_common+0xac>
 80072c0:	f04f 30ff 	mov.w	r0, #4294967295
 80072c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072c8:	3501      	adds	r5, #1
 80072ca:	e7c6      	b.n	800725a <_printf_common+0x3e>
 80072cc:	18e1      	adds	r1, r4, r3
 80072ce:	1c5a      	adds	r2, r3, #1
 80072d0:	2030      	movs	r0, #48	; 0x30
 80072d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072d6:	4422      	add	r2, r4
 80072d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072e0:	3302      	adds	r3, #2
 80072e2:	e7c7      	b.n	8007274 <_printf_common+0x58>
 80072e4:	2301      	movs	r3, #1
 80072e6:	4622      	mov	r2, r4
 80072e8:	4649      	mov	r1, r9
 80072ea:	4638      	mov	r0, r7
 80072ec:	47c0      	blx	r8
 80072ee:	3001      	adds	r0, #1
 80072f0:	d0e6      	beq.n	80072c0 <_printf_common+0xa4>
 80072f2:	3601      	adds	r6, #1
 80072f4:	e7d9      	b.n	80072aa <_printf_common+0x8e>
	...

080072f8 <_printf_i>:
 80072f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072fc:	7e0f      	ldrb	r7, [r1, #24]
 80072fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007300:	2f78      	cmp	r7, #120	; 0x78
 8007302:	4691      	mov	r9, r2
 8007304:	4680      	mov	r8, r0
 8007306:	460c      	mov	r4, r1
 8007308:	469a      	mov	sl, r3
 800730a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800730e:	d807      	bhi.n	8007320 <_printf_i+0x28>
 8007310:	2f62      	cmp	r7, #98	; 0x62
 8007312:	d80a      	bhi.n	800732a <_printf_i+0x32>
 8007314:	2f00      	cmp	r7, #0
 8007316:	f000 80d4 	beq.w	80074c2 <_printf_i+0x1ca>
 800731a:	2f58      	cmp	r7, #88	; 0x58
 800731c:	f000 80c0 	beq.w	80074a0 <_printf_i+0x1a8>
 8007320:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007324:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007328:	e03a      	b.n	80073a0 <_printf_i+0xa8>
 800732a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800732e:	2b15      	cmp	r3, #21
 8007330:	d8f6      	bhi.n	8007320 <_printf_i+0x28>
 8007332:	a101      	add	r1, pc, #4	; (adr r1, 8007338 <_printf_i+0x40>)
 8007334:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007338:	08007391 	.word	0x08007391
 800733c:	080073a5 	.word	0x080073a5
 8007340:	08007321 	.word	0x08007321
 8007344:	08007321 	.word	0x08007321
 8007348:	08007321 	.word	0x08007321
 800734c:	08007321 	.word	0x08007321
 8007350:	080073a5 	.word	0x080073a5
 8007354:	08007321 	.word	0x08007321
 8007358:	08007321 	.word	0x08007321
 800735c:	08007321 	.word	0x08007321
 8007360:	08007321 	.word	0x08007321
 8007364:	080074a9 	.word	0x080074a9
 8007368:	080073d1 	.word	0x080073d1
 800736c:	08007463 	.word	0x08007463
 8007370:	08007321 	.word	0x08007321
 8007374:	08007321 	.word	0x08007321
 8007378:	080074cb 	.word	0x080074cb
 800737c:	08007321 	.word	0x08007321
 8007380:	080073d1 	.word	0x080073d1
 8007384:	08007321 	.word	0x08007321
 8007388:	08007321 	.word	0x08007321
 800738c:	0800746b 	.word	0x0800746b
 8007390:	682b      	ldr	r3, [r5, #0]
 8007392:	1d1a      	adds	r2, r3, #4
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	602a      	str	r2, [r5, #0]
 8007398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800739c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073a0:	2301      	movs	r3, #1
 80073a2:	e09f      	b.n	80074e4 <_printf_i+0x1ec>
 80073a4:	6820      	ldr	r0, [r4, #0]
 80073a6:	682b      	ldr	r3, [r5, #0]
 80073a8:	0607      	lsls	r7, r0, #24
 80073aa:	f103 0104 	add.w	r1, r3, #4
 80073ae:	6029      	str	r1, [r5, #0]
 80073b0:	d501      	bpl.n	80073b6 <_printf_i+0xbe>
 80073b2:	681e      	ldr	r6, [r3, #0]
 80073b4:	e003      	b.n	80073be <_printf_i+0xc6>
 80073b6:	0646      	lsls	r6, r0, #25
 80073b8:	d5fb      	bpl.n	80073b2 <_printf_i+0xba>
 80073ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80073be:	2e00      	cmp	r6, #0
 80073c0:	da03      	bge.n	80073ca <_printf_i+0xd2>
 80073c2:	232d      	movs	r3, #45	; 0x2d
 80073c4:	4276      	negs	r6, r6
 80073c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073ca:	485a      	ldr	r0, [pc, #360]	; (8007534 <_printf_i+0x23c>)
 80073cc:	230a      	movs	r3, #10
 80073ce:	e012      	b.n	80073f6 <_printf_i+0xfe>
 80073d0:	682b      	ldr	r3, [r5, #0]
 80073d2:	6820      	ldr	r0, [r4, #0]
 80073d4:	1d19      	adds	r1, r3, #4
 80073d6:	6029      	str	r1, [r5, #0]
 80073d8:	0605      	lsls	r5, r0, #24
 80073da:	d501      	bpl.n	80073e0 <_printf_i+0xe8>
 80073dc:	681e      	ldr	r6, [r3, #0]
 80073de:	e002      	b.n	80073e6 <_printf_i+0xee>
 80073e0:	0641      	lsls	r1, r0, #25
 80073e2:	d5fb      	bpl.n	80073dc <_printf_i+0xe4>
 80073e4:	881e      	ldrh	r6, [r3, #0]
 80073e6:	4853      	ldr	r0, [pc, #332]	; (8007534 <_printf_i+0x23c>)
 80073e8:	2f6f      	cmp	r7, #111	; 0x6f
 80073ea:	bf0c      	ite	eq
 80073ec:	2308      	moveq	r3, #8
 80073ee:	230a      	movne	r3, #10
 80073f0:	2100      	movs	r1, #0
 80073f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073f6:	6865      	ldr	r5, [r4, #4]
 80073f8:	60a5      	str	r5, [r4, #8]
 80073fa:	2d00      	cmp	r5, #0
 80073fc:	bfa2      	ittt	ge
 80073fe:	6821      	ldrge	r1, [r4, #0]
 8007400:	f021 0104 	bicge.w	r1, r1, #4
 8007404:	6021      	strge	r1, [r4, #0]
 8007406:	b90e      	cbnz	r6, 800740c <_printf_i+0x114>
 8007408:	2d00      	cmp	r5, #0
 800740a:	d04b      	beq.n	80074a4 <_printf_i+0x1ac>
 800740c:	4615      	mov	r5, r2
 800740e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007412:	fb03 6711 	mls	r7, r3, r1, r6
 8007416:	5dc7      	ldrb	r7, [r0, r7]
 8007418:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800741c:	4637      	mov	r7, r6
 800741e:	42bb      	cmp	r3, r7
 8007420:	460e      	mov	r6, r1
 8007422:	d9f4      	bls.n	800740e <_printf_i+0x116>
 8007424:	2b08      	cmp	r3, #8
 8007426:	d10b      	bne.n	8007440 <_printf_i+0x148>
 8007428:	6823      	ldr	r3, [r4, #0]
 800742a:	07de      	lsls	r6, r3, #31
 800742c:	d508      	bpl.n	8007440 <_printf_i+0x148>
 800742e:	6923      	ldr	r3, [r4, #16]
 8007430:	6861      	ldr	r1, [r4, #4]
 8007432:	4299      	cmp	r1, r3
 8007434:	bfde      	ittt	le
 8007436:	2330      	movle	r3, #48	; 0x30
 8007438:	f805 3c01 	strble.w	r3, [r5, #-1]
 800743c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007440:	1b52      	subs	r2, r2, r5
 8007442:	6122      	str	r2, [r4, #16]
 8007444:	f8cd a000 	str.w	sl, [sp]
 8007448:	464b      	mov	r3, r9
 800744a:	aa03      	add	r2, sp, #12
 800744c:	4621      	mov	r1, r4
 800744e:	4640      	mov	r0, r8
 8007450:	f7ff fee4 	bl	800721c <_printf_common>
 8007454:	3001      	adds	r0, #1
 8007456:	d14a      	bne.n	80074ee <_printf_i+0x1f6>
 8007458:	f04f 30ff 	mov.w	r0, #4294967295
 800745c:	b004      	add	sp, #16
 800745e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007462:	6823      	ldr	r3, [r4, #0]
 8007464:	f043 0320 	orr.w	r3, r3, #32
 8007468:	6023      	str	r3, [r4, #0]
 800746a:	4833      	ldr	r0, [pc, #204]	; (8007538 <_printf_i+0x240>)
 800746c:	2778      	movs	r7, #120	; 0x78
 800746e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	6829      	ldr	r1, [r5, #0]
 8007476:	061f      	lsls	r7, r3, #24
 8007478:	f851 6b04 	ldr.w	r6, [r1], #4
 800747c:	d402      	bmi.n	8007484 <_printf_i+0x18c>
 800747e:	065f      	lsls	r7, r3, #25
 8007480:	bf48      	it	mi
 8007482:	b2b6      	uxthmi	r6, r6
 8007484:	07df      	lsls	r7, r3, #31
 8007486:	bf48      	it	mi
 8007488:	f043 0320 	orrmi.w	r3, r3, #32
 800748c:	6029      	str	r1, [r5, #0]
 800748e:	bf48      	it	mi
 8007490:	6023      	strmi	r3, [r4, #0]
 8007492:	b91e      	cbnz	r6, 800749c <_printf_i+0x1a4>
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	f023 0320 	bic.w	r3, r3, #32
 800749a:	6023      	str	r3, [r4, #0]
 800749c:	2310      	movs	r3, #16
 800749e:	e7a7      	b.n	80073f0 <_printf_i+0xf8>
 80074a0:	4824      	ldr	r0, [pc, #144]	; (8007534 <_printf_i+0x23c>)
 80074a2:	e7e4      	b.n	800746e <_printf_i+0x176>
 80074a4:	4615      	mov	r5, r2
 80074a6:	e7bd      	b.n	8007424 <_printf_i+0x12c>
 80074a8:	682b      	ldr	r3, [r5, #0]
 80074aa:	6826      	ldr	r6, [r4, #0]
 80074ac:	6961      	ldr	r1, [r4, #20]
 80074ae:	1d18      	adds	r0, r3, #4
 80074b0:	6028      	str	r0, [r5, #0]
 80074b2:	0635      	lsls	r5, r6, #24
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	d501      	bpl.n	80074bc <_printf_i+0x1c4>
 80074b8:	6019      	str	r1, [r3, #0]
 80074ba:	e002      	b.n	80074c2 <_printf_i+0x1ca>
 80074bc:	0670      	lsls	r0, r6, #25
 80074be:	d5fb      	bpl.n	80074b8 <_printf_i+0x1c0>
 80074c0:	8019      	strh	r1, [r3, #0]
 80074c2:	2300      	movs	r3, #0
 80074c4:	6123      	str	r3, [r4, #16]
 80074c6:	4615      	mov	r5, r2
 80074c8:	e7bc      	b.n	8007444 <_printf_i+0x14c>
 80074ca:	682b      	ldr	r3, [r5, #0]
 80074cc:	1d1a      	adds	r2, r3, #4
 80074ce:	602a      	str	r2, [r5, #0]
 80074d0:	681d      	ldr	r5, [r3, #0]
 80074d2:	6862      	ldr	r2, [r4, #4]
 80074d4:	2100      	movs	r1, #0
 80074d6:	4628      	mov	r0, r5
 80074d8:	f7f8 fe82 	bl	80001e0 <memchr>
 80074dc:	b108      	cbz	r0, 80074e2 <_printf_i+0x1ea>
 80074de:	1b40      	subs	r0, r0, r5
 80074e0:	6060      	str	r0, [r4, #4]
 80074e2:	6863      	ldr	r3, [r4, #4]
 80074e4:	6123      	str	r3, [r4, #16]
 80074e6:	2300      	movs	r3, #0
 80074e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074ec:	e7aa      	b.n	8007444 <_printf_i+0x14c>
 80074ee:	6923      	ldr	r3, [r4, #16]
 80074f0:	462a      	mov	r2, r5
 80074f2:	4649      	mov	r1, r9
 80074f4:	4640      	mov	r0, r8
 80074f6:	47d0      	blx	sl
 80074f8:	3001      	adds	r0, #1
 80074fa:	d0ad      	beq.n	8007458 <_printf_i+0x160>
 80074fc:	6823      	ldr	r3, [r4, #0]
 80074fe:	079b      	lsls	r3, r3, #30
 8007500:	d413      	bmi.n	800752a <_printf_i+0x232>
 8007502:	68e0      	ldr	r0, [r4, #12]
 8007504:	9b03      	ldr	r3, [sp, #12]
 8007506:	4298      	cmp	r0, r3
 8007508:	bfb8      	it	lt
 800750a:	4618      	movlt	r0, r3
 800750c:	e7a6      	b.n	800745c <_printf_i+0x164>
 800750e:	2301      	movs	r3, #1
 8007510:	4632      	mov	r2, r6
 8007512:	4649      	mov	r1, r9
 8007514:	4640      	mov	r0, r8
 8007516:	47d0      	blx	sl
 8007518:	3001      	adds	r0, #1
 800751a:	d09d      	beq.n	8007458 <_printf_i+0x160>
 800751c:	3501      	adds	r5, #1
 800751e:	68e3      	ldr	r3, [r4, #12]
 8007520:	9903      	ldr	r1, [sp, #12]
 8007522:	1a5b      	subs	r3, r3, r1
 8007524:	42ab      	cmp	r3, r5
 8007526:	dcf2      	bgt.n	800750e <_printf_i+0x216>
 8007528:	e7eb      	b.n	8007502 <_printf_i+0x20a>
 800752a:	2500      	movs	r5, #0
 800752c:	f104 0619 	add.w	r6, r4, #25
 8007530:	e7f5      	b.n	800751e <_printf_i+0x226>
 8007532:	bf00      	nop
 8007534:	0800783e 	.word	0x0800783e
 8007538:	0800784f 	.word	0x0800784f

0800753c <memmove>:
 800753c:	4288      	cmp	r0, r1
 800753e:	b510      	push	{r4, lr}
 8007540:	eb01 0402 	add.w	r4, r1, r2
 8007544:	d902      	bls.n	800754c <memmove+0x10>
 8007546:	4284      	cmp	r4, r0
 8007548:	4623      	mov	r3, r4
 800754a:	d807      	bhi.n	800755c <memmove+0x20>
 800754c:	1e43      	subs	r3, r0, #1
 800754e:	42a1      	cmp	r1, r4
 8007550:	d008      	beq.n	8007564 <memmove+0x28>
 8007552:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007556:	f803 2f01 	strb.w	r2, [r3, #1]!
 800755a:	e7f8      	b.n	800754e <memmove+0x12>
 800755c:	4402      	add	r2, r0
 800755e:	4601      	mov	r1, r0
 8007560:	428a      	cmp	r2, r1
 8007562:	d100      	bne.n	8007566 <memmove+0x2a>
 8007564:	bd10      	pop	{r4, pc}
 8007566:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800756a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800756e:	e7f7      	b.n	8007560 <memmove+0x24>

08007570 <_sbrk_r>:
 8007570:	b538      	push	{r3, r4, r5, lr}
 8007572:	4d06      	ldr	r5, [pc, #24]	; (800758c <_sbrk_r+0x1c>)
 8007574:	2300      	movs	r3, #0
 8007576:	4604      	mov	r4, r0
 8007578:	4608      	mov	r0, r1
 800757a:	602b      	str	r3, [r5, #0]
 800757c:	f7f9 fde8 	bl	8001150 <_sbrk>
 8007580:	1c43      	adds	r3, r0, #1
 8007582:	d102      	bne.n	800758a <_sbrk_r+0x1a>
 8007584:	682b      	ldr	r3, [r5, #0]
 8007586:	b103      	cbz	r3, 800758a <_sbrk_r+0x1a>
 8007588:	6023      	str	r3, [r4, #0]
 800758a:	bd38      	pop	{r3, r4, r5, pc}
 800758c:	2000445c 	.word	0x2000445c

08007590 <_realloc_r>:
 8007590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007594:	4680      	mov	r8, r0
 8007596:	4614      	mov	r4, r2
 8007598:	460e      	mov	r6, r1
 800759a:	b921      	cbnz	r1, 80075a6 <_realloc_r+0x16>
 800759c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075a0:	4611      	mov	r1, r2
 80075a2:	f7ff bc57 	b.w	8006e54 <_malloc_r>
 80075a6:	b92a      	cbnz	r2, 80075b4 <_realloc_r+0x24>
 80075a8:	f7ff fbe8 	bl	8006d7c <_free_r>
 80075ac:	4625      	mov	r5, r4
 80075ae:	4628      	mov	r0, r5
 80075b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075b4:	f000 f81b 	bl	80075ee <_malloc_usable_size_r>
 80075b8:	4284      	cmp	r4, r0
 80075ba:	4607      	mov	r7, r0
 80075bc:	d802      	bhi.n	80075c4 <_realloc_r+0x34>
 80075be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80075c2:	d812      	bhi.n	80075ea <_realloc_r+0x5a>
 80075c4:	4621      	mov	r1, r4
 80075c6:	4640      	mov	r0, r8
 80075c8:	f7ff fc44 	bl	8006e54 <_malloc_r>
 80075cc:	4605      	mov	r5, r0
 80075ce:	2800      	cmp	r0, #0
 80075d0:	d0ed      	beq.n	80075ae <_realloc_r+0x1e>
 80075d2:	42bc      	cmp	r4, r7
 80075d4:	4622      	mov	r2, r4
 80075d6:	4631      	mov	r1, r6
 80075d8:	bf28      	it	cs
 80075da:	463a      	movcs	r2, r7
 80075dc:	f7ff fbc0 	bl	8006d60 <memcpy>
 80075e0:	4631      	mov	r1, r6
 80075e2:	4640      	mov	r0, r8
 80075e4:	f7ff fbca 	bl	8006d7c <_free_r>
 80075e8:	e7e1      	b.n	80075ae <_realloc_r+0x1e>
 80075ea:	4635      	mov	r5, r6
 80075ec:	e7df      	b.n	80075ae <_realloc_r+0x1e>

080075ee <_malloc_usable_size_r>:
 80075ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075f2:	1f18      	subs	r0, r3, #4
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	bfbc      	itt	lt
 80075f8:	580b      	ldrlt	r3, [r1, r0]
 80075fa:	18c0      	addlt	r0, r0, r3
 80075fc:	4770      	bx	lr
	...

08007600 <_init>:
 8007600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007602:	bf00      	nop
 8007604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007606:	bc08      	pop	{r3}
 8007608:	469e      	mov	lr, r3
 800760a:	4770      	bx	lr

0800760c <_fini>:
 800760c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800760e:	bf00      	nop
 8007610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007612:	bc08      	pop	{r3}
 8007614:	469e      	mov	lr, r3
 8007616:	4770      	bx	lr
