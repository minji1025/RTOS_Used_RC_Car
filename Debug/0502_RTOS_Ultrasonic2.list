
0502_RTOS_Ultrasonic2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009010  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  080091b0  080091b0  000191b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009418  08009418  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08009418  08009418  00019418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009420  08009420  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009420  08009420  00019420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009424  08009424  00019424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08009428  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000456c  2000006c  08009494  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200045d8  08009494  000245d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b6f2  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000046a5  00000000  00000000  0003b7d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018f8  00000000  00000000  0003fe78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001332  00000000  00000000  00041770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b52c  00000000  00000000  00042aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fd0c  00000000  00000000  0005dfce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c3b4  00000000  00000000  0007dcda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007014  00000000  00000000  0011a090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001210a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009198 	.word	0x08009198

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08009198 	.word	0x08009198

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2iz>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d215      	bcs.n	8000882 <__aeabi_d2iz+0x36>
 8000856:	d511      	bpl.n	800087c <__aeabi_d2iz+0x30>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d912      	bls.n	8000888 <__aeabi_d2iz+0x3c>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000872:	fa23 f002 	lsr.w	r0, r3, r2
 8000876:	bf18      	it	ne
 8000878:	4240      	negne	r0, r0
 800087a:	4770      	bx	lr
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	4770      	bx	lr
 8000882:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000886:	d105      	bne.n	8000894 <__aeabi_d2iz+0x48>
 8000888:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800088c:	bf08      	it	eq
 800088e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b970 	b.w	8000b94 <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9e08      	ldr	r6, [sp, #32]
 80008d2:	460d      	mov	r5, r1
 80008d4:	4604      	mov	r4, r0
 80008d6:	460f      	mov	r7, r1
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d14a      	bne.n	8000972 <__udivmoddi4+0xa6>
 80008dc:	428a      	cmp	r2, r1
 80008de:	4694      	mov	ip, r2
 80008e0:	d965      	bls.n	80009ae <__udivmoddi4+0xe2>
 80008e2:	fab2 f382 	clz	r3, r2
 80008e6:	b143      	cbz	r3, 80008fa <__udivmoddi4+0x2e>
 80008e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008ec:	f1c3 0220 	rsb	r2, r3, #32
 80008f0:	409f      	lsls	r7, r3
 80008f2:	fa20 f202 	lsr.w	r2, r0, r2
 80008f6:	4317      	orrs	r7, r2
 80008f8:	409c      	lsls	r4, r3
 80008fa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008fe:	fa1f f58c 	uxth.w	r5, ip
 8000902:	fbb7 f1fe 	udiv	r1, r7, lr
 8000906:	0c22      	lsrs	r2, r4, #16
 8000908:	fb0e 7711 	mls	r7, lr, r1, r7
 800090c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000910:	fb01 f005 	mul.w	r0, r1, r5
 8000914:	4290      	cmp	r0, r2
 8000916:	d90a      	bls.n	800092e <__udivmoddi4+0x62>
 8000918:	eb1c 0202 	adds.w	r2, ip, r2
 800091c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000920:	f080 811c 	bcs.w	8000b5c <__udivmoddi4+0x290>
 8000924:	4290      	cmp	r0, r2
 8000926:	f240 8119 	bls.w	8000b5c <__udivmoddi4+0x290>
 800092a:	3902      	subs	r1, #2
 800092c:	4462      	add	r2, ip
 800092e:	1a12      	subs	r2, r2, r0
 8000930:	b2a4      	uxth	r4, r4
 8000932:	fbb2 f0fe 	udiv	r0, r2, lr
 8000936:	fb0e 2210 	mls	r2, lr, r0, r2
 800093a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800093e:	fb00 f505 	mul.w	r5, r0, r5
 8000942:	42a5      	cmp	r5, r4
 8000944:	d90a      	bls.n	800095c <__udivmoddi4+0x90>
 8000946:	eb1c 0404 	adds.w	r4, ip, r4
 800094a:	f100 32ff 	add.w	r2, r0, #4294967295
 800094e:	f080 8107 	bcs.w	8000b60 <__udivmoddi4+0x294>
 8000952:	42a5      	cmp	r5, r4
 8000954:	f240 8104 	bls.w	8000b60 <__udivmoddi4+0x294>
 8000958:	4464      	add	r4, ip
 800095a:	3802      	subs	r0, #2
 800095c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000960:	1b64      	subs	r4, r4, r5
 8000962:	2100      	movs	r1, #0
 8000964:	b11e      	cbz	r6, 800096e <__udivmoddi4+0xa2>
 8000966:	40dc      	lsrs	r4, r3
 8000968:	2300      	movs	r3, #0
 800096a:	e9c6 4300 	strd	r4, r3, [r6]
 800096e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000972:	428b      	cmp	r3, r1
 8000974:	d908      	bls.n	8000988 <__udivmoddi4+0xbc>
 8000976:	2e00      	cmp	r6, #0
 8000978:	f000 80ed 	beq.w	8000b56 <__udivmoddi4+0x28a>
 800097c:	2100      	movs	r1, #0
 800097e:	e9c6 0500 	strd	r0, r5, [r6]
 8000982:	4608      	mov	r0, r1
 8000984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000988:	fab3 f183 	clz	r1, r3
 800098c:	2900      	cmp	r1, #0
 800098e:	d149      	bne.n	8000a24 <__udivmoddi4+0x158>
 8000990:	42ab      	cmp	r3, r5
 8000992:	d302      	bcc.n	800099a <__udivmoddi4+0xce>
 8000994:	4282      	cmp	r2, r0
 8000996:	f200 80f8 	bhi.w	8000b8a <__udivmoddi4+0x2be>
 800099a:	1a84      	subs	r4, r0, r2
 800099c:	eb65 0203 	sbc.w	r2, r5, r3
 80009a0:	2001      	movs	r0, #1
 80009a2:	4617      	mov	r7, r2
 80009a4:	2e00      	cmp	r6, #0
 80009a6:	d0e2      	beq.n	800096e <__udivmoddi4+0xa2>
 80009a8:	e9c6 4700 	strd	r4, r7, [r6]
 80009ac:	e7df      	b.n	800096e <__udivmoddi4+0xa2>
 80009ae:	b902      	cbnz	r2, 80009b2 <__udivmoddi4+0xe6>
 80009b0:	deff      	udf	#255	; 0xff
 80009b2:	fab2 f382 	clz	r3, r2
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	f040 8090 	bne.w	8000adc <__udivmoddi4+0x210>
 80009bc:	1a8a      	subs	r2, r1, r2
 80009be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009c2:	fa1f fe8c 	uxth.w	lr, ip
 80009c6:	2101      	movs	r1, #1
 80009c8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009cc:	fb07 2015 	mls	r0, r7, r5, r2
 80009d0:	0c22      	lsrs	r2, r4, #16
 80009d2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009d6:	fb0e f005 	mul.w	r0, lr, r5
 80009da:	4290      	cmp	r0, r2
 80009dc:	d908      	bls.n	80009f0 <__udivmoddi4+0x124>
 80009de:	eb1c 0202 	adds.w	r2, ip, r2
 80009e2:	f105 38ff 	add.w	r8, r5, #4294967295
 80009e6:	d202      	bcs.n	80009ee <__udivmoddi4+0x122>
 80009e8:	4290      	cmp	r0, r2
 80009ea:	f200 80cb 	bhi.w	8000b84 <__udivmoddi4+0x2b8>
 80009ee:	4645      	mov	r5, r8
 80009f0:	1a12      	subs	r2, r2, r0
 80009f2:	b2a4      	uxth	r4, r4
 80009f4:	fbb2 f0f7 	udiv	r0, r2, r7
 80009f8:	fb07 2210 	mls	r2, r7, r0, r2
 80009fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a00:	fb0e fe00 	mul.w	lr, lr, r0
 8000a04:	45a6      	cmp	lr, r4
 8000a06:	d908      	bls.n	8000a1a <__udivmoddi4+0x14e>
 8000a08:	eb1c 0404 	adds.w	r4, ip, r4
 8000a0c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a10:	d202      	bcs.n	8000a18 <__udivmoddi4+0x14c>
 8000a12:	45a6      	cmp	lr, r4
 8000a14:	f200 80bb 	bhi.w	8000b8e <__udivmoddi4+0x2c2>
 8000a18:	4610      	mov	r0, r2
 8000a1a:	eba4 040e 	sub.w	r4, r4, lr
 8000a1e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a22:	e79f      	b.n	8000964 <__udivmoddi4+0x98>
 8000a24:	f1c1 0720 	rsb	r7, r1, #32
 8000a28:	408b      	lsls	r3, r1
 8000a2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a32:	fa05 f401 	lsl.w	r4, r5, r1
 8000a36:	fa20 f307 	lsr.w	r3, r0, r7
 8000a3a:	40fd      	lsrs	r5, r7
 8000a3c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a40:	4323      	orrs	r3, r4
 8000a42:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a46:	fa1f fe8c 	uxth.w	lr, ip
 8000a4a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a4e:	0c1c      	lsrs	r4, r3, #16
 8000a50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a54:	fb08 f50e 	mul.w	r5, r8, lr
 8000a58:	42a5      	cmp	r5, r4
 8000a5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a5e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a62:	d90b      	bls.n	8000a7c <__udivmoddi4+0x1b0>
 8000a64:	eb1c 0404 	adds.w	r4, ip, r4
 8000a68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a6c:	f080 8088 	bcs.w	8000b80 <__udivmoddi4+0x2b4>
 8000a70:	42a5      	cmp	r5, r4
 8000a72:	f240 8085 	bls.w	8000b80 <__udivmoddi4+0x2b4>
 8000a76:	f1a8 0802 	sub.w	r8, r8, #2
 8000a7a:	4464      	add	r4, ip
 8000a7c:	1b64      	subs	r4, r4, r5
 8000a7e:	b29d      	uxth	r5, r3
 8000a80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a84:	fb09 4413 	mls	r4, r9, r3, r4
 8000a88:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a8c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a90:	45a6      	cmp	lr, r4
 8000a92:	d908      	bls.n	8000aa6 <__udivmoddi4+0x1da>
 8000a94:	eb1c 0404 	adds.w	r4, ip, r4
 8000a98:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a9c:	d26c      	bcs.n	8000b78 <__udivmoddi4+0x2ac>
 8000a9e:	45a6      	cmp	lr, r4
 8000aa0:	d96a      	bls.n	8000b78 <__udivmoddi4+0x2ac>
 8000aa2:	3b02      	subs	r3, #2
 8000aa4:	4464      	add	r4, ip
 8000aa6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aaa:	fba3 9502 	umull	r9, r5, r3, r2
 8000aae:	eba4 040e 	sub.w	r4, r4, lr
 8000ab2:	42ac      	cmp	r4, r5
 8000ab4:	46c8      	mov	r8, r9
 8000ab6:	46ae      	mov	lr, r5
 8000ab8:	d356      	bcc.n	8000b68 <__udivmoddi4+0x29c>
 8000aba:	d053      	beq.n	8000b64 <__udivmoddi4+0x298>
 8000abc:	b156      	cbz	r6, 8000ad4 <__udivmoddi4+0x208>
 8000abe:	ebb0 0208 	subs.w	r2, r0, r8
 8000ac2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ac6:	fa04 f707 	lsl.w	r7, r4, r7
 8000aca:	40ca      	lsrs	r2, r1
 8000acc:	40cc      	lsrs	r4, r1
 8000ace:	4317      	orrs	r7, r2
 8000ad0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000adc:	f1c3 0120 	rsb	r1, r3, #32
 8000ae0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ae4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ae8:	fa25 f101 	lsr.w	r1, r5, r1
 8000aec:	409d      	lsls	r5, r3
 8000aee:	432a      	orrs	r2, r5
 8000af0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af4:	fa1f fe8c 	uxth.w	lr, ip
 8000af8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afc:	fb07 1510 	mls	r5, r7, r0, r1
 8000b00:	0c11      	lsrs	r1, r2, #16
 8000b02:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b06:	fb00 f50e 	mul.w	r5, r0, lr
 8000b0a:	428d      	cmp	r5, r1
 8000b0c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b10:	d908      	bls.n	8000b24 <__udivmoddi4+0x258>
 8000b12:	eb1c 0101 	adds.w	r1, ip, r1
 8000b16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b1a:	d22f      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b1c:	428d      	cmp	r5, r1
 8000b1e:	d92d      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b20:	3802      	subs	r0, #2
 8000b22:	4461      	add	r1, ip
 8000b24:	1b49      	subs	r1, r1, r5
 8000b26:	b292      	uxth	r2, r2
 8000b28:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b2c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b34:	fb05 f10e 	mul.w	r1, r5, lr
 8000b38:	4291      	cmp	r1, r2
 8000b3a:	d908      	bls.n	8000b4e <__udivmoddi4+0x282>
 8000b3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b40:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b44:	d216      	bcs.n	8000b74 <__udivmoddi4+0x2a8>
 8000b46:	4291      	cmp	r1, r2
 8000b48:	d914      	bls.n	8000b74 <__udivmoddi4+0x2a8>
 8000b4a:	3d02      	subs	r5, #2
 8000b4c:	4462      	add	r2, ip
 8000b4e:	1a52      	subs	r2, r2, r1
 8000b50:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b54:	e738      	b.n	80009c8 <__udivmoddi4+0xfc>
 8000b56:	4631      	mov	r1, r6
 8000b58:	4630      	mov	r0, r6
 8000b5a:	e708      	b.n	800096e <__udivmoddi4+0xa2>
 8000b5c:	4639      	mov	r1, r7
 8000b5e:	e6e6      	b.n	800092e <__udivmoddi4+0x62>
 8000b60:	4610      	mov	r0, r2
 8000b62:	e6fb      	b.n	800095c <__udivmoddi4+0x90>
 8000b64:	4548      	cmp	r0, r9
 8000b66:	d2a9      	bcs.n	8000abc <__udivmoddi4+0x1f0>
 8000b68:	ebb9 0802 	subs.w	r8, r9, r2
 8000b6c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b70:	3b01      	subs	r3, #1
 8000b72:	e7a3      	b.n	8000abc <__udivmoddi4+0x1f0>
 8000b74:	4645      	mov	r5, r8
 8000b76:	e7ea      	b.n	8000b4e <__udivmoddi4+0x282>
 8000b78:	462b      	mov	r3, r5
 8000b7a:	e794      	b.n	8000aa6 <__udivmoddi4+0x1da>
 8000b7c:	4640      	mov	r0, r8
 8000b7e:	e7d1      	b.n	8000b24 <__udivmoddi4+0x258>
 8000b80:	46d0      	mov	r8, sl
 8000b82:	e77b      	b.n	8000a7c <__udivmoddi4+0x1b0>
 8000b84:	3d02      	subs	r5, #2
 8000b86:	4462      	add	r2, ip
 8000b88:	e732      	b.n	80009f0 <__udivmoddi4+0x124>
 8000b8a:	4608      	mov	r0, r1
 8000b8c:	e70a      	b.n	80009a4 <__udivmoddi4+0xd8>
 8000b8e:	4464      	add	r4, ip
 8000b90:	3802      	subs	r0, #2
 8000b92:	e742      	b.n	8000a1a <__udivmoddi4+0x14e>

08000b94 <__aeabi_idiv0>:
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <DelayInit>:
 *      Author: kccistc
 */

#include "delayus.h"

void DelayInit(void) {
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <DelayInit+0x4c>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	4a10      	ldr	r2, [pc, #64]	; (8000be4 <DelayInit+0x4c>)
 8000ba2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ba6:	60d3      	str	r3, [r2, #12]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <DelayInit+0x4c>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	4a0d      	ldr	r2, [pc, #52]	; (8000be4 <DelayInit+0x4c>)
 8000bae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bb2:	60d3      	str	r3, [r2, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <DelayInit+0x50>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <DelayInit+0x50>)
 8000bba:	f023 0301 	bic.w	r3, r3, #1
 8000bbe:	6013      	str	r3, [r2, #0]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <DelayInit+0x50>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a08      	ldr	r2, [pc, #32]	; (8000be8 <DelayInit+0x50>)
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	6013      	str	r3, [r2, #0]

	DWT->CYCCNT = 0;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <DelayInit+0x50>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	605a      	str	r2, [r3, #4]

	/* 3 NO OPERATION instructions */
	__ASM volatile ("NOP");
 8000bd2:	bf00      	nop
	__ASM volatile ("NOP");
 8000bd4:	bf00      	nop
	__ASM volatile ("NOP");
 8000bd6:	bf00      	nop
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000edf0 	.word	0xe000edf0
 8000be8:	e0001000 	.word	0xe0001000

08000bec <DelayUS>:

void DelayUS(uint32_t us) {
 8000bec:	b480      	push	{r7}
 8000bee:	b087      	sub	sp, #28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 8000bf4:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <DelayUS+0x44>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <DelayUS+0x48>)
 8000bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfe:	0c9a      	lsrs	r2, r3, #18
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	fb02 f303 	mul.w	r3, r2, r3
 8000c06:	617b      	str	r3, [r7, #20]
	uint32_t start = DWT->CYCCNT;
 8000c08:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <DelayUS+0x4c>)
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	613b      	str	r3, [r7, #16]
	volatile uint32_t cnt;

	do {
		cnt = DWT->CYCCNT - start;
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <DelayUS+0x4c>)
 8000c10:	685a      	ldr	r2, [r3, #4]
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	60fb      	str	r3, [r7, #12]
	} while (cnt < cycles);
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	697a      	ldr	r2, [r7, #20]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d8f6      	bhi.n	8000c0e <DelayUS+0x22>
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	371c      	adds	r7, #28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000000 	.word	0x20000000
 8000c34:	431bde83 	.word	0x431bde83
 8000c38:	e0001000 	.word	0xe0001000

08000c3c <Que_init>:
 *      Author: kccistc
 */
#include "Queue.h"

void Que_init(Que_t *Que)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	Que->head = 0;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2200      	movs	r2, #0
 8000c48:	669a      	str	r2, [r3, #104]	; 0x68
	Que->tail = 0;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	665a      	str	r2, [r3, #100]	; 0x64
	Que->QueCounter = 0;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	66da      	str	r2, [r3, #108]	; 0x6c
	Que->cmpltFlag = 0;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <setQueFlag>:

void setQueFlag(Que_t *Que, int flagState){
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
	Que->cmpltFlag = flagState;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	671a      	str	r2, [r3, #112]	; 0x70
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <getQueFlag>:

int getQueFlag(Que_t *Que){
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	return Que->cmpltFlag;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <QueFull>:


int QueFull(Que_t *Que)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	//if(head == ((tail+1) % BUF_SIZE))
	if(Que->QueCounter == BUF_SIZE)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000ca8:	2b64      	cmp	r3, #100	; 0x64
 8000caa:	d101      	bne.n	8000cb0 <QueFull+0x14>
		return 1;
 8000cac:	2301      	movs	r3, #1
 8000cae:	e000      	b.n	8000cb2 <QueFull+0x16>
	else
		return 0;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <QueEmpty>:
int QueEmpty(Que_t *Que)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
	//if(head == tail)
	if(Que->QueCounter == 0)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d101      	bne.n	8000cd2 <QueEmpty+0x14>
		return 1;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e000      	b.n	8000cd4 <QueEmpty+0x16>
	else
		return 0;
 8000cd2:	2300      	movs	r3, #0
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <enQue>:

void enQue(Que_t *Que, uint8_t data)			// push(write)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	70fb      	strb	r3, [r7, #3]
	if(QueFull(Que)) return;
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff ffd5 	bl	8000c9c <QueFull>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d119      	bne.n	8000d2c <enQue+0x4c>

	Que->QueBuff[Que->tail] = data;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	78f9      	ldrb	r1, [r7, #3]
 8000d00:	54d1      	strb	r1, [r2, r3]
	Que->tail = (Que->tail+1) % BUF_SIZE;			// tail : 0~3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000d06:	1c5a      	adds	r2, r3, #1
 8000d08:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <enQue+0x54>)
 8000d0a:	fb83 1302 	smull	r1, r3, r3, r2
 8000d0e:	1159      	asrs	r1, r3, #5
 8000d10:	17d3      	asrs	r3, r2, #31
 8000d12:	1acb      	subs	r3, r1, r3
 8000d14:	2164      	movs	r1, #100	; 0x64
 8000d16:	fb01 f303 	mul.w	r3, r1, r3
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	6653      	str	r3, [r2, #100]	; 0x64
	Que->QueCounter++;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000d24:	1c5a      	adds	r2, r3, #1
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	66da      	str	r2, [r3, #108]	; 0x6c
 8000d2a:	e000      	b.n	8000d2e <enQue+0x4e>
	if(QueFull(Que)) return;
 8000d2c:	bf00      	nop
}
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	51eb851f 	.word	0x51eb851f

08000d38 <deQue>:

uint8_t deQue(Que_t *Que)			// pop(read)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	if(QueEmpty(Que)) return -1;
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f7ff ffbc 	bl	8000cbe <QueEmpty>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <deQue+0x18>
 8000d4c:	23ff      	movs	r3, #255	; 0xff
 8000d4e:	e019      	b.n	8000d84 <deQue+0x4c>

	uint8_t temp = Que->QueBuff[Que->head];
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	5cd3      	ldrb	r3, [r2, r3]
 8000d58:	73fb      	strb	r3, [r7, #15]
	Que->head = (Que->head+1) % BUF_SIZE;			// head : 0~3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d5e:	1c5a      	adds	r2, r3, #1
 8000d60:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <deQue+0x54>)
 8000d62:	fb83 1302 	smull	r1, r3, r3, r2
 8000d66:	1159      	asrs	r1, r3, #5
 8000d68:	17d3      	asrs	r3, r2, #31
 8000d6a:	1acb      	subs	r3, r1, r3
 8000d6c:	2164      	movs	r1, #100	; 0x64
 8000d6e:	fb01 f303 	mul.w	r3, r1, r3
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	6693      	str	r3, [r2, #104]	; 0x68
	Que->QueCounter--;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000d7c:	1e5a      	subs	r2, r3, #1
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	66da      	str	r2, [r3, #108]	; 0x6c

	return temp;
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	51eb851f 	.word	0x51eb851f

08000d90 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <vApplicationGetIdleTaskMemory+0x2c>)
 8000da0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	4a06      	ldr	r2, [pc, #24]	; (8000dc0 <vApplicationGetIdleTaskMemory+0x30>)
 8000da6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2280      	movs	r2, #128	; 0x80
 8000dac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000dae:	bf00      	nop
 8000db0:	3714      	adds	r7, #20
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000088 	.word	0x20000088
 8000dc0:	20000128 	.word	0x20000128

08000dc4 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t uart1RxData, uart2RxData;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a15      	ldr	r2, [pc, #84]	; (8000e28 <HAL_UART_RxCpltCallback+0x64>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d10f      	bne.n	8000df6 <HAL_UART_RxCpltCallback+0x32>
		Listener_UART_ISR_Process(uart1RxData);
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_UART_RxCpltCallback+0x68>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f001 f8b4 	bl	8001f48 <Listener_UART_ISR_Process>
		HAL_UART_Transmit(&huart1, &uart1RxData, 1, 100);
 8000de0:	2364      	movs	r3, #100	; 0x64
 8000de2:	2201      	movs	r2, #1
 8000de4:	4911      	ldr	r1, [pc, #68]	; (8000e2c <HAL_UART_RxCpltCallback+0x68>)
 8000de6:	4812      	ldr	r0, [pc, #72]	; (8000e30 <HAL_UART_RxCpltCallback+0x6c>)
 8000de8:	f004 fd5e 	bl	80058a8 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart1, &uart1RxData, 1);
 8000dec:	2201      	movs	r2, #1
 8000dee:	490f      	ldr	r1, [pc, #60]	; (8000e2c <HAL_UART_RxCpltCallback+0x68>)
 8000df0:	480f      	ldr	r0, [pc, #60]	; (8000e30 <HAL_UART_RxCpltCallback+0x6c>)
 8000df2:	f004 fde4 	bl	80059be <HAL_UART_Receive_IT>
	}
	if (huart->Instance == USART2) {
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <HAL_UART_RxCpltCallback+0x70>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d10f      	bne.n	8000e20 <HAL_UART_RxCpltCallback+0x5c>
		Listener_UART_ISR_Process(uart2RxData);
 8000e00:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <HAL_UART_RxCpltCallback+0x74>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f001 f89f 	bl	8001f48 <Listener_UART_ISR_Process>
		HAL_UART_Transmit(&huart2, &uart2RxData, 1, 100);
 8000e0a:	2364      	movs	r3, #100	; 0x64
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	490a      	ldr	r1, [pc, #40]	; (8000e38 <HAL_UART_RxCpltCallback+0x74>)
 8000e10:	480a      	ldr	r0, [pc, #40]	; (8000e3c <HAL_UART_RxCpltCallback+0x78>)
 8000e12:	f004 fd49 	bl	80058a8 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &uart2RxData, 1);
 8000e16:	2201      	movs	r2, #1
 8000e18:	4907      	ldr	r1, [pc, #28]	; (8000e38 <HAL_UART_RxCpltCallback+0x74>)
 8000e1a:	4808      	ldr	r0, [pc, #32]	; (8000e3c <HAL_UART_RxCpltCallback+0x78>)
 8000e1c:	f004 fdcf 	bl	80059be <HAL_UART_Receive_IT>
	}
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40011000 	.word	0x40011000
 8000e2c:	2000053c 	.word	0x2000053c
 8000e30:	2000049c 	.word	0x2000049c
 8000e34:	40004400 	.word	0x40004400
 8000e38:	2000053d 	.word	0x2000053d
 8000e3c:	200004e4 	.word	0x200004e4

08000e40 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	80fb      	strh	r3, [r7, #6]
	Listener_US_ISR_Process(GPIO_Pin);
 8000e4a:	88fb      	ldrh	r3, [r7, #6]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f001 f895 	bl	8001f7c <Listener_US_ISR_Process>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <_write>:
int _write(int file, char *ptr, int len)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 1000);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e70:	68b9      	ldr	r1, [r7, #8]
 8000e72:	4804      	ldr	r0, [pc, #16]	; (8000e84 <_write+0x28>)
 8000e74:	f004 fd18 	bl	80058a8 <HAL_UART_Transmit>
  return len;
 8000e78:	687b      	ldr	r3, [r7, #4]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200004e4 	.word	0x200004e4

08000e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e88:	b5b0      	push	{r4, r5, r7, lr}
 8000e8a:	b09c      	sub	sp, #112	; 0x70
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e8e:	f001 fef3 	bl	8002c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e92:	f000 f885 	bl	8000fa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e96:	f000 fad9 	bl	800144c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e9a:	f000 faad 	bl	80013f8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000e9e:	f000 f8e7 	bl	8001070 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000ea2:	f000 fa7f 	bl	80013a4 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000ea6:	f000 f9ad 	bl	8001204 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000eaa:	f000 f90f 	bl	80010cc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000eae:	f000 f95d 	bl	800116c <MX_TIM2_Init>
  MX_TIM4_Init();
 8000eb2:	f000 fa29 	bl	8001308 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	LCD_init(&hi2c1);
 8000eb6:	482d      	ldr	r0, [pc, #180]	; (8000f6c <main+0xe4>)
 8000eb8:	f001 fb9a 	bl	80025f0 <LCD_init>
	HAL_UART_Receive_IT(&huart2, &uart2RxData, 1);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	492c      	ldr	r1, [pc, #176]	; (8000f70 <main+0xe8>)
 8000ec0:	482c      	ldr	r0, [pc, #176]	; (8000f74 <main+0xec>)
 8000ec2:	f004 fd7c 	bl	80059be <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart1, &uart1RxData, 1);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	492b      	ldr	r1, [pc, #172]	; (8000f78 <main+0xf0>)
 8000eca:	482c      	ldr	r0, [pc, #176]	; (8000f7c <main+0xf4>)
 8000ecc:	f004 fd77 	bl	80059be <HAL_UART_Receive_IT>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000ed0:	4b2b      	ldr	r3, [pc, #172]	; (8000f80 <main+0xf8>)
 8000ed2:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000ed6:	461d      	mov	r5, r3
 8000ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000edc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ee0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000ee4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f005 fd01 	bl	80068f2 <osThreadCreate>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	4a24      	ldr	r2, [pc, #144]	; (8000f84 <main+0xfc>)
 8000ef4:	6013      	str	r3, [r2, #0]

  /* definition and creation of listenerTask */
  osThreadDef(listenerTask, ListenerTask, osPriorityNormal, 0, 128);
 8000ef6:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <main+0x100>)
 8000ef8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000efc:	461d      	mov	r5, r3
 8000efe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  listenerTaskHandle = osThreadCreate(osThread(listenerTask), NULL);
 8000f0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f005 fcee 	bl	80068f2 <osThreadCreate>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4a1c      	ldr	r2, [pc, #112]	; (8000f8c <main+0x104>)
 8000f1a:	6013      	str	r3, [r2, #0]

  /* definition and creation of controllerTask */
  osThreadDef(controllerTask, ControllerTask, osPriorityNormal, 0, 128);
 8000f1c:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <main+0x108>)
 8000f1e:	f107 041c 	add.w	r4, r7, #28
 8000f22:	461d      	mov	r5, r3
 8000f24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controllerTaskHandle = osThreadCreate(osThread(controllerTask), NULL);
 8000f30:	f107 031c 	add.w	r3, r7, #28
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f005 fcdb 	bl	80068f2 <osThreadCreate>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4a15      	ldr	r2, [pc, #84]	; (8000f94 <main+0x10c>)
 8000f40:	6013      	str	r3, [r2, #0]

  /* definition and creation of presenterTask */
  osThreadDef(presenterTask, PresenterTask, osPriorityNormal, 0, 128);
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <main+0x110>)
 8000f44:	463c      	mov	r4, r7
 8000f46:	461d      	mov	r5, r3
 8000f48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  presenterTaskHandle = osThreadCreate(osThread(presenterTask), NULL);
 8000f54:	463b      	mov	r3, r7
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f005 fcca 	bl	80068f2 <osThreadCreate>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4a0e      	ldr	r2, [pc, #56]	; (8000f9c <main+0x114>)
 8000f62:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f64:	f005 fcbe 	bl	80068e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000f68:	e7fe      	b.n	8000f68 <main+0xe0>
 8000f6a:	bf00      	nop
 8000f6c:	20000328 	.word	0x20000328
 8000f70:	2000053d 	.word	0x2000053d
 8000f74:	200004e4 	.word	0x200004e4
 8000f78:	2000053c 	.word	0x2000053c
 8000f7c:	2000049c 	.word	0x2000049c
 8000f80:	080091bc 	.word	0x080091bc
 8000f84:	2000052c 	.word	0x2000052c
 8000f88:	080091e8 	.word	0x080091e8
 8000f8c:	20000530 	.word	0x20000530
 8000f90:	08009214 	.word	0x08009214
 8000f94:	20000534 	.word	0x20000534
 8000f98:	08009240 	.word	0x08009240
 8000f9c:	20000538 	.word	0x20000538

08000fa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b094      	sub	sp, #80	; 0x50
 8000fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa6:	f107 0320 	add.w	r3, r7, #32
 8000faa:	2230      	movs	r2, #48	; 0x30
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f007 f8c3 	bl	800813a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	4b27      	ldr	r3, [pc, #156]	; (8001068 <SystemClock_Config+0xc8>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	4a26      	ldr	r2, [pc, #152]	; (8001068 <SystemClock_Config+0xc8>)
 8000fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd4:	4b24      	ldr	r3, [pc, #144]	; (8001068 <SystemClock_Config+0xc8>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	4b21      	ldr	r3, [pc, #132]	; (800106c <SystemClock_Config+0xcc>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a20      	ldr	r2, [pc, #128]	; (800106c <SystemClock_Config+0xcc>)
 8000fea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	4b1e      	ldr	r3, [pc, #120]	; (800106c <SystemClock_Config+0xcc>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001000:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001006:	2302      	movs	r3, #2
 8001008:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800100a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800100e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001010:	2304      	movs	r3, #4
 8001012:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001014:	2364      	movs	r3, #100	; 0x64
 8001016:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001018:	2302      	movs	r3, #2
 800101a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800101c:	2304      	movs	r3, #4
 800101e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001020:	f107 0320 	add.w	r3, r7, #32
 8001024:	4618      	mov	r0, r3
 8001026:	f002 fe87 	bl	8003d38 <HAL_RCC_OscConfig>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001030:	f000 fb1c 	bl	800166c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001034:	230f      	movs	r3, #15
 8001036:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001038:	2302      	movs	r3, #2
 800103a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001044:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800104a:	f107 030c 	add.w	r3, r7, #12
 800104e:	2103      	movs	r1, #3
 8001050:	4618      	mov	r0, r3
 8001052:	f003 f8e9 	bl	8004228 <HAL_RCC_ClockConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800105c:	f000 fb06 	bl	800166c <Error_Handler>
  }
}
 8001060:	bf00      	nop
 8001062:	3750      	adds	r7, #80	; 0x50
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40023800 	.word	0x40023800
 800106c:	40007000 	.word	0x40007000

08001070 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <MX_I2C1_Init+0x50>)
 8001076:	4a13      	ldr	r2, [pc, #76]	; (80010c4 <MX_I2C1_Init+0x54>)
 8001078:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <MX_I2C1_Init+0x50>)
 800107c:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <MX_I2C1_Init+0x58>)
 800107e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <MX_I2C1_Init+0x50>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <MX_I2C1_Init+0x50>)
 8001088:	2200      	movs	r2, #0
 800108a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <MX_I2C1_Init+0x50>)
 800108e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001092:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001094:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <MX_I2C1_Init+0x50>)
 8001096:	2200      	movs	r2, #0
 8001098:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MX_I2C1_Init+0x50>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <MX_I2C1_Init+0x50>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <MX_I2C1_Init+0x50>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010ac:	4804      	ldr	r0, [pc, #16]	; (80010c0 <MX_I2C1_Init+0x50>)
 80010ae:	f002 f9a5 	bl	80033fc <HAL_I2C_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010b8:	f000 fad8 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000328 	.word	0x20000328
 80010c4:	40005400 	.word	0x40005400
 80010c8:	000186a0 	.word	0x000186a0

080010cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010d2:	f107 0308 	add.w	r3, r7, #8
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e0:	463b      	mov	r3, r7
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010e8:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <MX_TIM1_Init+0x98>)
 80010ea:	4a1f      	ldr	r2, [pc, #124]	; (8001168 <MX_TIM1_Init+0x9c>)
 80010ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 80010ee:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <MX_TIM1_Init+0x98>)
 80010f0:	2263      	movs	r2, #99	; 0x63
 80010f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <MX_TIM1_Init+0x98>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010fa:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <MX_TIM1_Init+0x98>)
 80010fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001100:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001102:	4b18      	ldr	r3, [pc, #96]	; (8001164 <MX_TIM1_Init+0x98>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001108:	4b16      	ldr	r3, [pc, #88]	; (8001164 <MX_TIM1_Init+0x98>)
 800110a:	2200      	movs	r2, #0
 800110c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <MX_TIM1_Init+0x98>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001114:	4813      	ldr	r0, [pc, #76]	; (8001164 <MX_TIM1_Init+0x98>)
 8001116:	f003 fad9 	bl	80046cc <HAL_TIM_Base_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001120:	f000 faa4 	bl	800166c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001128:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	4619      	mov	r1, r3
 8001130:	480c      	ldr	r0, [pc, #48]	; (8001164 <MX_TIM1_Init+0x98>)
 8001132:	f003 ff1f 	bl	8004f74 <HAL_TIM_ConfigClockSource>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800113c:	f000 fa96 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001148:	463b      	mov	r3, r7
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_TIM1_Init+0x98>)
 800114e:	f004 fad9 	bl	8005704 <HAL_TIMEx_MasterConfigSynchronization>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001158:	f000 fa88 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	2000037c 	.word	0x2000037c
 8001168:	40010000 	.word	0x40010000

0800116c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001172:	f107 0308 	add.w	r3, r7, #8
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001180:	463b      	mov	r3, r7
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001188:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <MX_TIM2_Init+0x94>)
 800118a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800118e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8001190:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <MX_TIM2_Init+0x94>)
 8001192:	2263      	movs	r2, #99	; 0x63
 8001194:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001196:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <MX_TIM2_Init+0x94>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800119c:	4b18      	ldr	r3, [pc, #96]	; (8001200 <MX_TIM2_Init+0x94>)
 800119e:	f04f 32ff 	mov.w	r2, #4294967295
 80011a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a4:	4b16      	ldr	r3, [pc, #88]	; (8001200 <MX_TIM2_Init+0x94>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <MX_TIM2_Init+0x94>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011b0:	4813      	ldr	r0, [pc, #76]	; (8001200 <MX_TIM2_Init+0x94>)
 80011b2:	f003 fa8b 	bl	80046cc <HAL_TIM_Base_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011bc:	f000 fa56 	bl	800166c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	4619      	mov	r1, r3
 80011cc:	480c      	ldr	r0, [pc, #48]	; (8001200 <MX_TIM2_Init+0x94>)
 80011ce:	f003 fed1 	bl	8004f74 <HAL_TIM_ConfigClockSource>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011d8:	f000 fa48 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011dc:	2300      	movs	r3, #0
 80011de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011e4:	463b      	mov	r3, r7
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_TIM2_Init+0x94>)
 80011ea:	f004 fa8b 	bl	8005704 <HAL_TIMEx_MasterConfigSynchronization>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011f4:	f000 fa3a 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200003c4 	.word	0x200003c4

08001204 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08e      	sub	sp, #56	; 0x38
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001218:	f107 0320 	add.w	r3, r7, #32
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
 8001230:	615a      	str	r2, [r3, #20]
 8001232:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001234:	4b32      	ldr	r3, [pc, #200]	; (8001300 <MX_TIM3_Init+0xfc>)
 8001236:	4a33      	ldr	r2, [pc, #204]	; (8001304 <MX_TIM3_Init+0x100>)
 8001238:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 800123a:	4b31      	ldr	r3, [pc, #196]	; (8001300 <MX_TIM3_Init+0xfc>)
 800123c:	2263      	movs	r2, #99	; 0x63
 800123e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001240:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <MX_TIM3_Init+0xfc>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001246:	4b2e      	ldr	r3, [pc, #184]	; (8001300 <MX_TIM3_Init+0xfc>)
 8001248:	f240 32e7 	movw	r2, #999	; 0x3e7
 800124c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124e:	4b2c      	ldr	r3, [pc, #176]	; (8001300 <MX_TIM3_Init+0xfc>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001254:	4b2a      	ldr	r3, [pc, #168]	; (8001300 <MX_TIM3_Init+0xfc>)
 8001256:	2200      	movs	r2, #0
 8001258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800125a:	4829      	ldr	r0, [pc, #164]	; (8001300 <MX_TIM3_Init+0xfc>)
 800125c:	f003 fa36 	bl	80046cc <HAL_TIM_Base_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001266:	f000 fa01 	bl	800166c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800126a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001270:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001274:	4619      	mov	r1, r3
 8001276:	4822      	ldr	r0, [pc, #136]	; (8001300 <MX_TIM3_Init+0xfc>)
 8001278:	f003 fe7c 	bl	8004f74 <HAL_TIM_ConfigClockSource>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001282:	f000 f9f3 	bl	800166c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001286:	481e      	ldr	r0, [pc, #120]	; (8001300 <MX_TIM3_Init+0xfc>)
 8001288:	f003 fb54 	bl	8004934 <HAL_TIM_PWM_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001292:	f000 f9eb 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800129e:	f107 0320 	add.w	r3, r7, #32
 80012a2:	4619      	mov	r1, r3
 80012a4:	4816      	ldr	r0, [pc, #88]	; (8001300 <MX_TIM3_Init+0xfc>)
 80012a6:	f004 fa2d 	bl	8005704 <HAL_TIMEx_MasterConfigSynchronization>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80012b0:	f000 f9dc 	bl	800166c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b4:	2360      	movs	r3, #96	; 0x60
 80012b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	2200      	movs	r2, #0
 80012c8:	4619      	mov	r1, r3
 80012ca:	480d      	ldr	r0, [pc, #52]	; (8001300 <MX_TIM3_Init+0xfc>)
 80012cc:	f003 fd90 	bl	8004df0 <HAL_TIM_PWM_ConfigChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80012d6:	f000 f9c9 	bl	800166c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2204      	movs	r2, #4
 80012de:	4619      	mov	r1, r3
 80012e0:	4807      	ldr	r0, [pc, #28]	; (8001300 <MX_TIM3_Init+0xfc>)
 80012e2:	f003 fd85 	bl	8004df0 <HAL_TIM_PWM_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80012ec:	f000 f9be 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012f0:	4803      	ldr	r0, [pc, #12]	; (8001300 <MX_TIM3_Init+0xfc>)
 80012f2:	f000 fa9d 	bl	8001830 <HAL_TIM_MspPostInit>

}
 80012f6:	bf00      	nop
 80012f8:	3738      	adds	r7, #56	; 0x38
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2000040c 	.word	0x2000040c
 8001304:	40000400 	.word	0x40000400

08001308 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	f107 0308 	add.w	r3, r7, #8
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	463b      	mov	r3, r7
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <MX_TIM4_Init+0x94>)
 8001326:	4a1e      	ldr	r2, [pc, #120]	; (80013a0 <MX_TIM4_Init+0x98>)
 8001328:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 800132a:	4b1c      	ldr	r3, [pc, #112]	; (800139c <MX_TIM4_Init+0x94>)
 800132c:	2263      	movs	r2, #99	; 0x63
 800132e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_TIM4_Init+0x94>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <MX_TIM4_Init+0x94>)
 8001338:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800133c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <MX_TIM4_Init+0x94>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001344:	4b15      	ldr	r3, [pc, #84]	; (800139c <MX_TIM4_Init+0x94>)
 8001346:	2200      	movs	r2, #0
 8001348:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800134a:	4814      	ldr	r0, [pc, #80]	; (800139c <MX_TIM4_Init+0x94>)
 800134c:	f003 f9be 	bl	80046cc <HAL_TIM_Base_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001356:	f000 f989 	bl	800166c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	4619      	mov	r1, r3
 8001366:	480d      	ldr	r0, [pc, #52]	; (800139c <MX_TIM4_Init+0x94>)
 8001368:	f003 fe04 	bl	8004f74 <HAL_TIM_ConfigClockSource>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001372:	f000 f97b 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001376:	2300      	movs	r3, #0
 8001378:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800137e:	463b      	mov	r3, r7
 8001380:	4619      	mov	r1, r3
 8001382:	4806      	ldr	r0, [pc, #24]	; (800139c <MX_TIM4_Init+0x94>)
 8001384:	f004 f9be 	bl	8005704 <HAL_TIMEx_MasterConfigSynchronization>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800138e:	f000 f96d 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000454 	.word	0x20000454
 80013a0:	40000800 	.word	0x40000800

080013a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013aa:	4a12      	ldr	r2, [pc, #72]	; (80013f4 <MX_USART1_UART_Init+0x50>)
 80013ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013c8:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013ca:	220c      	movs	r2, #12
 80013cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ce:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013dc:	f004 fa14 	bl	8005808 <HAL_UART_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013e6:	f000 f941 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	2000049c 	.word	0x2000049c
 80013f4:	40011000 	.word	0x40011000

080013f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 80013fe:	4a12      	ldr	r2, [pc, #72]	; (8001448 <MX_USART2_UART_Init+0x50>)
 8001400:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 8001404:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001408:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 800141e:	220c      	movs	r2, #12
 8001420:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 8001430:	f004 f9ea 	bl	8005808 <HAL_UART_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800143a:	f000 f917 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200004e4 	.word	0x200004e4
 8001448:	40004400 	.word	0x40004400

0800144c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
 8001460:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	4b54      	ldr	r3, [pc, #336]	; (80015b8 <MX_GPIO_Init+0x16c>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a53      	ldr	r2, [pc, #332]	; (80015b8 <MX_GPIO_Init+0x16c>)
 800146c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b51      	ldr	r3, [pc, #324]	; (80015b8 <MX_GPIO_Init+0x16c>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b4d      	ldr	r3, [pc, #308]	; (80015b8 <MX_GPIO_Init+0x16c>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a4c      	ldr	r2, [pc, #304]	; (80015b8 <MX_GPIO_Init+0x16c>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b4a      	ldr	r3, [pc, #296]	; (80015b8 <MX_GPIO_Init+0x16c>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	4b46      	ldr	r3, [pc, #280]	; (80015b8 <MX_GPIO_Init+0x16c>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a45      	ldr	r2, [pc, #276]	; (80015b8 <MX_GPIO_Init+0x16c>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b43      	ldr	r3, [pc, #268]	; (80015b8 <MX_GPIO_Init+0x16c>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	4b3f      	ldr	r3, [pc, #252]	; (80015b8 <MX_GPIO_Init+0x16c>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a3e      	ldr	r2, [pc, #248]	; (80015b8 <MX_GPIO_Init+0x16c>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b3c      	ldr	r3, [pc, #240]	; (80015b8 <MX_GPIO_Init+0x16c>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_7, GPIO_PIN_RESET);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2185      	movs	r1, #133	; 0x85
 80014d6:	4839      	ldr	r0, [pc, #228]	; (80015bc <MX_GPIO_Init+0x170>)
 80014d8:	f001 ff44 	bl	8003364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80014dc:	2200      	movs	r2, #0
 80014de:	f44f 7148 	mov.w	r1, #800	; 0x320
 80014e2:	4837      	ldr	r0, [pc, #220]	; (80015c0 <MX_GPIO_Init+0x174>)
 80014e4:	f001 ff3e 	bl	8003364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_13, GPIO_PIN_RESET);
 80014e8:	2200      	movs	r2, #0
 80014ea:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 80014ee:	4835      	ldr	r0, [pc, #212]	; (80015c4 <MX_GPIO_Init+0x178>)
 80014f0:	f001 ff38 	bl	8003364 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC2 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_7;
 80014f4:	2385      	movs	r3, #133	; 0x85
 80014f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	482c      	ldr	r0, [pc, #176]	; (80015bc <MX_GPIO_Init+0x170>)
 800150c:	f001 fd8e 	bl	800302c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC3 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8001510:	231a      	movs	r3, #26
 8001512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001514:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	4825      	ldr	r0, [pc, #148]	; (80015bc <MX_GPIO_Init+0x170>)
 8001526:	f001 fd81 	bl	800302c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 800152a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800152e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001530:	2301      	movs	r3, #1
 8001532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4619      	mov	r1, r3
 8001542:	481f      	ldr	r0, [pc, #124]	; (80015c0 <MX_GPIO_Init+0x174>)
 8001544:	f001 fd72 	bl	800302c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13;
 8001548:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800154c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154e:	2301      	movs	r3, #1
 8001550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	2300      	movs	r3, #0
 8001558:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	4619      	mov	r1, r3
 8001560:	4818      	ldr	r0, [pc, #96]	; (80015c4 <MX_GPIO_Init+0x178>)
 8001562:	f001 fd63 	bl	800302c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001566:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800156a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800156c:	2300      	movs	r3, #0
 800156e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	4619      	mov	r1, r3
 800157a:	4810      	ldr	r0, [pc, #64]	; (80015bc <MX_GPIO_Init+0x170>)
 800157c:	f001 fd56 	bl	800302c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001580:	2200      	movs	r2, #0
 8001582:	2105      	movs	r1, #5
 8001584:	2007      	movs	r0, #7
 8001586:	f001 fc95 	bl	8002eb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800158a:	2007      	movs	r0, #7
 800158c:	f001 fcae 	bl	8002eec <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001590:	2200      	movs	r2, #0
 8001592:	2105      	movs	r1, #5
 8001594:	2009      	movs	r0, #9
 8001596:	f001 fc8d 	bl	8002eb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800159a:	2009      	movs	r0, #9
 800159c:	f001 fca6 	bl	8002eec <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2105      	movs	r1, #5
 80015a4:	200a      	movs	r0, #10
 80015a6:	f001 fc85 	bl	8002eb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80015aa:	200a      	movs	r0, #10
 80015ac:	f001 fc9e 	bl	8002eec <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015b0:	bf00      	nop
 80015b2:	3728      	adds	r7, #40	; 0x28
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020800 	.word	0x40020800
 80015c0:	40020000 	.word	0x40020000
 80015c4:	40020400 	.word	0x40020400

080015c8 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80015d0:	2120      	movs	r1, #32
 80015d2:	4804      	ldr	r0, [pc, #16]	; (80015e4 <StartDefaultTask+0x1c>)
 80015d4:	f001 fedf 	bl	8003396 <HAL_GPIO_TogglePin>
		osDelay(500);
 80015d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015dc:	f005 f9d5 	bl	800698a <osDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80015e0:	e7f6      	b.n	80015d0 <StartDefaultTask+0x8>
 80015e2:	bf00      	nop
 80015e4:	40020000 	.word	0x40020000

080015e8 <ListenerTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ListenerTask */
void ListenerTask(void const * argument)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ListenerTask */
	Listner_init(&htim1, &htim2 ,&htim4);
 80015f0:	4a06      	ldr	r2, [pc, #24]	; (800160c <ListenerTask+0x24>)
 80015f2:	4907      	ldr	r1, [pc, #28]	; (8001610 <ListenerTask+0x28>)
 80015f4:	4807      	ldr	r0, [pc, #28]	; (8001614 <ListenerTask+0x2c>)
 80015f6:	f000 fc5d 	bl	8001eb4 <Listner_init>
	/* Infinite loop */
	for (;;) {
		Listener_Button();
 80015fa:	f000 fcdd 	bl	8001fb8 <Listener_Button>
		Listener_UltraSonic_Distance();
 80015fe:	f000 fcfb 	bl	8001ff8 <Listener_UltraSonic_Distance>
		osDelay(100);
 8001602:	2064      	movs	r0, #100	; 0x64
 8001604:	f005 f9c1 	bl	800698a <osDelay>
		Listener_Button();
 8001608:	e7f7      	b.n	80015fa <ListenerTask+0x12>
 800160a:	bf00      	nop
 800160c:	20000454 	.word	0x20000454
 8001610:	200003c4 	.word	0x200003c4
 8001614:	2000037c 	.word	0x2000037c

08001618 <ControllerTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ControllerTask */
void ControllerTask(void const * argument)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ControllerTask */
	Controller_init();
 8001620:	f000 fb6f 	bl	8001d02 <Controller_init>
	/* Infinite loop */
	for (;;) {
		Controller_excuteTask();
 8001624:	f000 fb75 	bl	8001d12 <Controller_excuteTask>
		osDelay(1);
 8001628:	2001      	movs	r0, #1
 800162a:	f005 f9ae 	bl	800698a <osDelay>
		Controller_excuteTask();
 800162e:	e7f9      	b.n	8001624 <ControllerTask+0xc>

08001630 <PresenterTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_PresenterTask */
void PresenterTask(void const * argument)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PresenterTask */
	Presenter_Init();
 8001638:	f000 fe56 	bl	80022e8 <Presenter_Init>
	/* Infinite loop */
	for (;;) {
		Presenter_excuteTask();
 800163c:	f000 fe8c 	bl	8002358 <Presenter_excuteTask>
		osDelay(1);
 8001640:	2001      	movs	r0, #1
 8001642:	f005 f9a2 	bl	800698a <osDelay>
		Presenter_excuteTask();
 8001646:	e7f9      	b.n	800163c <PresenterTask+0xc>

08001648 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a04      	ldr	r2, [pc, #16]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d101      	bne.n	800165e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800165a:	f001 fb2f 	bl	8002cbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40014800 	.word	0x40014800

0800166c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001670:	b672      	cpsid	i
}
 8001672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001674:	e7fe      	b.n	8001674 <Error_Handler+0x8>
	...

08001678 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_MspInit+0x54>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	4a11      	ldr	r2, [pc, #68]	; (80016cc <HAL_MspInit+0x54>)
 8001688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800168c:	6453      	str	r3, [r2, #68]	; 0x44
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <HAL_MspInit+0x54>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	603b      	str	r3, [r7, #0]
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <HAL_MspInit+0x54>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <HAL_MspInit+0x54>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a8:	6413      	str	r3, [r2, #64]	; 0x40
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <HAL_MspInit+0x54>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	210f      	movs	r1, #15
 80016ba:	f06f 0001 	mvn.w	r0, #1
 80016be:	f001 fbf9 	bl	8002eb4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800

080016d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a19      	ldr	r2, [pc, #100]	; (8001754 <HAL_I2C_MspInit+0x84>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d12c      	bne.n	800174c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	4b18      	ldr	r3, [pc, #96]	; (8001758 <HAL_I2C_MspInit+0x88>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a17      	ldr	r2, [pc, #92]	; (8001758 <HAL_I2C_MspInit+0x88>)
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <HAL_I2C_MspInit+0x88>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800170e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001714:	2312      	movs	r3, #18
 8001716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001720:	2304      	movs	r3, #4
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4619      	mov	r1, r3
 800172a:	480c      	ldr	r0, [pc, #48]	; (800175c <HAL_I2C_MspInit+0x8c>)
 800172c:	f001 fc7e 	bl	800302c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <HAL_I2C_MspInit+0x88>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	4a07      	ldr	r2, [pc, #28]	; (8001758 <HAL_I2C_MspInit+0x88>)
 800173a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800173e:	6413      	str	r3, [r2, #64]	; 0x40
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <HAL_I2C_MspInit+0x88>)
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800174c:	bf00      	nop
 800174e:	3728      	adds	r7, #40	; 0x28
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40005400 	.word	0x40005400
 8001758:	40023800 	.word	0x40023800
 800175c:	40020400 	.word	0x40020400

08001760 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a2c      	ldr	r2, [pc, #176]	; (8001820 <HAL_TIM_Base_MspInit+0xc0>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d116      	bne.n	80017a0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	4b2b      	ldr	r3, [pc, #172]	; (8001824 <HAL_TIM_Base_MspInit+0xc4>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	4a2a      	ldr	r2, [pc, #168]	; (8001824 <HAL_TIM_Base_MspInit+0xc4>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6453      	str	r3, [r2, #68]	; 0x44
 8001782:	4b28      	ldr	r3, [pc, #160]	; (8001824 <HAL_TIM_Base_MspInit+0xc4>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	210f      	movs	r1, #15
 8001792:	201a      	movs	r0, #26
 8001794:	f001 fb8e 	bl	8002eb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001798:	201a      	movs	r0, #26
 800179a:	f001 fba7 	bl	8002eec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800179e:	e03a      	b.n	8001816 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a8:	d10e      	bne.n	80017c8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <HAL_TIM_Base_MspInit+0xc4>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <HAL_TIM_Base_MspInit+0xc4>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ba:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <HAL_TIM_Base_MspInit+0xc4>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]
}
 80017c6:	e026      	b.n	8001816 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a16      	ldr	r2, [pc, #88]	; (8001828 <HAL_TIM_Base_MspInit+0xc8>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d10e      	bne.n	80017f0 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	4b13      	ldr	r3, [pc, #76]	; (8001824 <HAL_TIM_Base_MspInit+0xc4>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	4a12      	ldr	r2, [pc, #72]	; (8001824 <HAL_TIM_Base_MspInit+0xc4>)
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	6413      	str	r3, [r2, #64]	; 0x40
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <HAL_TIM_Base_MspInit+0xc4>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
}
 80017ee:	e012      	b.n	8001816 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a0d      	ldr	r2, [pc, #52]	; (800182c <HAL_TIM_Base_MspInit+0xcc>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d10d      	bne.n	8001816 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	4b09      	ldr	r3, [pc, #36]	; (8001824 <HAL_TIM_Base_MspInit+0xc4>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	4a08      	ldr	r2, [pc, #32]	; (8001824 <HAL_TIM_Base_MspInit+0xc4>)
 8001804:	f043 0304 	orr.w	r3, r3, #4
 8001808:	6413      	str	r3, [r2, #64]	; 0x40
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_TIM_Base_MspInit+0xc4>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
}
 8001816:	bf00      	nop
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40010000 	.word	0x40010000
 8001824:	40023800 	.word	0x40023800
 8001828:	40000400 	.word	0x40000400
 800182c:	40000800 	.word	0x40000800

08001830 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a12      	ldr	r2, [pc, #72]	; (8001898 <HAL_TIM_MspPostInit+0x68>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d11d      	bne.n	800188e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <HAL_TIM_MspPostInit+0x6c>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a10      	ldr	r2, [pc, #64]	; (800189c <HAL_TIM_MspPostInit+0x6c>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <HAL_TIM_MspPostInit+0x6c>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800186e:	23c0      	movs	r3, #192	; 0xc0
 8001870:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	2302      	movs	r3, #2
 8001874:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2300      	movs	r3, #0
 800187c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800187e:	2302      	movs	r3, #2
 8001880:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001882:	f107 030c 	add.w	r3, r7, #12
 8001886:	4619      	mov	r1, r3
 8001888:	4805      	ldr	r0, [pc, #20]	; (80018a0 <HAL_TIM_MspPostInit+0x70>)
 800188a:	f001 fbcf 	bl	800302c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800188e:	bf00      	nop
 8001890:	3720      	adds	r7, #32
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40000400 	.word	0x40000400
 800189c:	40023800 	.word	0x40023800
 80018a0:	40020000 	.word	0x40020000

080018a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08c      	sub	sp, #48	; 0x30
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a49      	ldr	r2, [pc, #292]	; (80019e8 <HAL_UART_MspInit+0x144>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d153      	bne.n	800196e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	61bb      	str	r3, [r7, #24]
 80018ca:	4b48      	ldr	r3, [pc, #288]	; (80019ec <HAL_UART_MspInit+0x148>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	4a47      	ldr	r2, [pc, #284]	; (80019ec <HAL_UART_MspInit+0x148>)
 80018d0:	f043 0310 	orr.w	r3, r3, #16
 80018d4:	6453      	str	r3, [r2, #68]	; 0x44
 80018d6:	4b45      	ldr	r3, [pc, #276]	; (80019ec <HAL_UART_MspInit+0x148>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	f003 0310 	and.w	r3, r3, #16
 80018de:	61bb      	str	r3, [r7, #24]
 80018e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	4b41      	ldr	r3, [pc, #260]	; (80019ec <HAL_UART_MspInit+0x148>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a40      	ldr	r2, [pc, #256]	; (80019ec <HAL_UART_MspInit+0x148>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b3e      	ldr	r3, [pc, #248]	; (80019ec <HAL_UART_MspInit+0x148>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	4b3a      	ldr	r3, [pc, #232]	; (80019ec <HAL_UART_MspInit+0x148>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a39      	ldr	r2, [pc, #228]	; (80019ec <HAL_UART_MspInit+0x148>)
 8001908:	f043 0302 	orr.w	r3, r3, #2
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b37      	ldr	r3, [pc, #220]	; (80019ec <HAL_UART_MspInit+0x148>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800191a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800191e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001928:	2303      	movs	r3, #3
 800192a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800192c:	2307      	movs	r3, #7
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001930:	f107 031c 	add.w	r3, r7, #28
 8001934:	4619      	mov	r1, r3
 8001936:	482e      	ldr	r0, [pc, #184]	; (80019f0 <HAL_UART_MspInit+0x14c>)
 8001938:	f001 fb78 	bl	800302c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800193c:	2340      	movs	r3, #64	; 0x40
 800193e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001940:	2302      	movs	r3, #2
 8001942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001948:	2303      	movs	r3, #3
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800194c:	2307      	movs	r3, #7
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001950:	f107 031c 	add.w	r3, r7, #28
 8001954:	4619      	mov	r1, r3
 8001956:	4827      	ldr	r0, [pc, #156]	; (80019f4 <HAL_UART_MspInit+0x150>)
 8001958:	f001 fb68 	bl	800302c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800195c:	2200      	movs	r2, #0
 800195e:	2105      	movs	r1, #5
 8001960:	2025      	movs	r0, #37	; 0x25
 8001962:	f001 faa7 	bl	8002eb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001966:	2025      	movs	r0, #37	; 0x25
 8001968:	f001 fac0 	bl	8002eec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800196c:	e038      	b.n	80019e0 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a21      	ldr	r2, [pc, #132]	; (80019f8 <HAL_UART_MspInit+0x154>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d133      	bne.n	80019e0 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <HAL_UART_MspInit+0x148>)
 800197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001980:	4a1a      	ldr	r2, [pc, #104]	; (80019ec <HAL_UART_MspInit+0x148>)
 8001982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001986:	6413      	str	r3, [r2, #64]	; 0x40
 8001988:	4b18      	ldr	r3, [pc, #96]	; (80019ec <HAL_UART_MspInit+0x148>)
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001994:	2300      	movs	r3, #0
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	4b14      	ldr	r3, [pc, #80]	; (80019ec <HAL_UART_MspInit+0x148>)
 800199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199c:	4a13      	ldr	r2, [pc, #76]	; (80019ec <HAL_UART_MspInit+0x148>)
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	6313      	str	r3, [r2, #48]	; 0x30
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <HAL_UART_MspInit+0x148>)
 80019a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019b0:	230c      	movs	r3, #12
 80019b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019c0:	2307      	movs	r3, #7
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c4:	f107 031c 	add.w	r3, r7, #28
 80019c8:	4619      	mov	r1, r3
 80019ca:	4809      	ldr	r0, [pc, #36]	; (80019f0 <HAL_UART_MspInit+0x14c>)
 80019cc:	f001 fb2e 	bl	800302c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2105      	movs	r1, #5
 80019d4:	2026      	movs	r0, #38	; 0x26
 80019d6:	f001 fa6d 	bl	8002eb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019da:	2026      	movs	r0, #38	; 0x26
 80019dc:	f001 fa86 	bl	8002eec <HAL_NVIC_EnableIRQ>
}
 80019e0:	bf00      	nop
 80019e2:	3730      	adds	r7, #48	; 0x30
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40011000 	.word	0x40011000
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40020000 	.word	0x40020000
 80019f4:	40020400 	.word	0x40020400
 80019f8:	40004400 	.word	0x40004400

080019fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08c      	sub	sp, #48	; 0x30
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	4b2e      	ldr	r3, [pc, #184]	; (8001acc <HAL_InitTick+0xd0>)
 8001a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a14:	4a2d      	ldr	r2, [pc, #180]	; (8001acc <HAL_InitTick+0xd0>)
 8001a16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a1a:	6453      	str	r3, [r2, #68]	; 0x44
 8001a1c:	4b2b      	ldr	r3, [pc, #172]	; (8001acc <HAL_InitTick+0xd0>)
 8001a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a28:	f107 020c 	add.w	r2, r7, #12
 8001a2c:	f107 0310 	add.w	r3, r7, #16
 8001a30:	4611      	mov	r1, r2
 8001a32:	4618      	mov	r0, r3
 8001a34:	f002 fe18 	bl	8004668 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001a38:	f002 fe02 	bl	8004640 <HAL_RCC_GetPCLK2Freq>
 8001a3c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a40:	4a23      	ldr	r2, [pc, #140]	; (8001ad0 <HAL_InitTick+0xd4>)
 8001a42:	fba2 2303 	umull	r2, r3, r2, r3
 8001a46:	0c9b      	lsrs	r3, r3, #18
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001a4c:	4b21      	ldr	r3, [pc, #132]	; (8001ad4 <HAL_InitTick+0xd8>)
 8001a4e:	4a22      	ldr	r2, [pc, #136]	; (8001ad8 <HAL_InitTick+0xdc>)
 8001a50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8001a52:	4b20      	ldr	r3, [pc, #128]	; (8001ad4 <HAL_InitTick+0xd8>)
 8001a54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a58:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8001a5a:	4a1e      	ldr	r2, [pc, #120]	; (8001ad4 <HAL_InitTick+0xd8>)
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001a60:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <HAL_InitTick+0xd8>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a66:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <HAL_InitTick+0xd8>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6c:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <HAL_InitTick+0xd8>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8001a72:	4818      	ldr	r0, [pc, #96]	; (8001ad4 <HAL_InitTick+0xd8>)
 8001a74:	f002 fe2a 	bl	80046cc <HAL_TIM_Base_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001a7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d11b      	bne.n	8001abe <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8001a86:	4813      	ldr	r0, [pc, #76]	; (8001ad4 <HAL_InitTick+0xd8>)
 8001a88:	f002 fef2 	bl	8004870 <HAL_TIM_Base_Start_IT>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001a92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d111      	bne.n	8001abe <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001a9a:	201a      	movs	r0, #26
 8001a9c:	f001 fa26 	bl	8002eec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b0f      	cmp	r3, #15
 8001aa4:	d808      	bhi.n	8001ab8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	201a      	movs	r0, #26
 8001aac:	f001 fa02 	bl	8002eb4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ab0:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <HAL_InitTick+0xe0>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e002      	b.n	8001abe <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001abe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3730      	adds	r7, #48	; 0x30
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	431bde83 	.word	0x431bde83
 8001ad4:	20000540 	.word	0x20000540
 8001ad8:	40014800 	.word	0x40014800
 8001adc:	20000004 	.word	0x20000004

08001ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <NMI_Handler+0x4>

08001ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aea:	e7fe      	b.n	8001aea <HardFault_Handler+0x4>

08001aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <MemManage_Handler+0x4>

08001af2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af6:	e7fe      	b.n	8001af6 <BusFault_Handler+0x4>

08001af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <UsageFault_Handler+0x4>

08001afe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001b10:	2002      	movs	r0, #2
 8001b12:	f001 fc5b 	bl	80033cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001b1e:	2008      	movs	r0, #8
 8001b20:	f001 fc54 	bl	80033cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001b2c:	2010      	movs	r0, #16
 8001b2e:	f001 fc4d 	bl	80033cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b3c:	4803      	ldr	r0, [pc, #12]	; (8001b4c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8001b3e:	f003 f867 	bl	8004c10 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8001b42:	4803      	ldr	r0, [pc, #12]	; (8001b50 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001b44:	f003 f864 	bl	8004c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	2000037c 	.word	0x2000037c
 8001b50:	20000540 	.word	0x20000540

08001b54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <USART1_IRQHandler+0x10>)
 8001b5a:	f003 ff55 	bl	8005a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	2000049c 	.word	0x2000049c

08001b68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b6c:	4802      	ldr	r0, [pc, #8]	; (8001b78 <USART2_IRQHandler+0x10>)
 8001b6e:	f003 ff4b 	bl	8005a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200004e4 	.word	0x200004e4

08001b7c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	e00a      	b.n	8001ba4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b8e:	f3af 8000 	nop.w
 8001b92:	4601      	mov	r1, r0
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	60ba      	str	r2, [r7, #8]
 8001b9a:	b2ca      	uxtb	r2, r1
 8001b9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	dbf0      	blt.n	8001b8e <_read+0x12>
  }

  return len;
 8001bac:	687b      	ldr	r3, [r7, #4]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bde:	605a      	str	r2, [r3, #4]
  return 0;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <_isatty>:

int _isatty(int file)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bf6:	2301      	movs	r3, #1
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
	...

08001c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c28:	4a14      	ldr	r2, [pc, #80]	; (8001c7c <_sbrk+0x5c>)
 8001c2a:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <_sbrk+0x60>)
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c34:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <_sbrk+0x64>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d102      	bne.n	8001c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <_sbrk+0x64>)
 8001c3e:	4a12      	ldr	r2, [pc, #72]	; (8001c88 <_sbrk+0x68>)
 8001c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <_sbrk+0x64>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d207      	bcs.n	8001c60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c50:	f006 fb18 	bl	8008284 <__errno>
 8001c54:	4603      	mov	r3, r0
 8001c56:	220c      	movs	r2, #12
 8001c58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5e:	e009      	b.n	8001c74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c60:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <_sbrk+0x64>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c66:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <_sbrk+0x64>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	4a05      	ldr	r2, [pc, #20]	; (8001c84 <_sbrk+0x64>)
 8001c70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c72:	68fb      	ldr	r3, [r7, #12]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20020000 	.word	0x20020000
 8001c80:	00000400 	.word	0x00000400
 8001c84:	20000588 	.word	0x20000588
 8001c88:	200045d8 	.word	0x200045d8

08001c8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <SystemInit+0x20>)
 8001c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c96:	4a05      	ldr	r2, [pc, #20]	; (8001cac <SystemInit+0x20>)
 8001c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ce8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cb4:	f7ff ffea 	bl	8001c8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cb8:	480c      	ldr	r0, [pc, #48]	; (8001cec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cba:	490d      	ldr	r1, [pc, #52]	; (8001cf0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cbc:	4a0d      	ldr	r2, [pc, #52]	; (8001cf4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc0:	e002      	b.n	8001cc8 <LoopCopyDataInit>

08001cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cc6:	3304      	adds	r3, #4

08001cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ccc:	d3f9      	bcc.n	8001cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cce:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cd0:	4c0a      	ldr	r4, [pc, #40]	; (8001cfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd4:	e001      	b.n	8001cda <LoopFillZerobss>

08001cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd8:	3204      	adds	r2, #4

08001cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cdc:	d3fb      	bcc.n	8001cd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cde:	f006 fad7 	bl	8008290 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ce2:	f7ff f8d1 	bl	8000e88 <main>
  bx  lr    
 8001ce6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ce8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001cf4:	08009428 	.word	0x08009428
  ldr r2, =_sbss
 8001cf8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001cfc:	200045d8 	.word	0x200045d8

08001d00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d00:	e7fe      	b.n	8001d00 <ADC_IRQHandler>

08001d02 <Controller_init>:

#include "Controller.h"
#include <stdlib.h>
#include <stdio.h>

void Controller_init() {
 8001d02:	b580      	push	{r7, lr}
 8001d04:	af00      	add	r7, sp, #0
	BT_init();
 8001d06:	f000 f9d5 	bl	80020b4 <BT_init>
	MotorState_init();
 8001d0a:	f000 fa57 	bl	80021bc <MotorState_init>
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <Controller_excuteTask>:

void Controller_excuteTask() {
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b084      	sub	sp, #16
 8001d16:	af00      	add	r7, sp, #0
	int BTflag = BT_getFlag();
 8001d18:	f000 f9fe 	bl	8002118 <BT_getFlag>
 8001d1c:	60f8      	str	r0, [r7, #12]
	if (!BTflag) return;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d012      	beq.n	8001d4a <Controller_excuteTask+0x38>

	uint8_t rxBuff[10];

	Controller_getData(rxBuff); //Uart data rxBuff에 저장
 8001d24:	463b      	mov	r3, r7
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 f813 	bl	8001d52 <Controller_getData>
	Controller_Mode_parsingData(rxBuff);	//Buff에 저장된 값 판단
 8001d2c:	463b      	mov	r3, r7
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 f847 	bl	8001dc2 <Controller_Mode_parsingData>
	Controller_Mode_decision(rxBuff);	//모드 결정하여 나머지 파싱 실행
 8001d34:	463b      	mov	r3, r7
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 f828 	bl	8001d8c <Controller_Mode_decision>

	MotorState_setFlag(SET);
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	f000 fa7f 	bl	8002240 <MotorState_setFlag>
	BT_setFlag(BTRESET);
 8001d42:	2000      	movs	r0, #0
 8001d44:	f000 f9da 	bl	80020fc <BT_setFlag>
 8001d48:	e000      	b.n	8001d4c <Controller_excuteTask+0x3a>
	if (!BTflag) return;
 8001d4a:	bf00      	nop
}
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <Controller_getData>:

void Controller_getData(uint8_t *Buff) {
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b084      	sub	sp, #16
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
	uint8_t rxData = 1;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	73fb      	strb	r3, [r7, #15]

	for (int i = 0; rxData; i++) {
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	e00b      	b.n	8001d7c <Controller_getData+0x2a>
		rxData = BT_deQue();
 8001d64:	f000 f9c0 	bl	80020e8 <BT_deQue>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	73fb      	strb	r3, [r7, #15]
		Buff[i] = rxData;
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	7bfa      	ldrb	r2, [r7, #15]
 8001d74:	701a      	strb	r2, [r3, #0]
	for (int i = 0; rxData; i++) {
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f0      	bne.n	8001d64 <Controller_getData+0x12>
	}
}
 8001d82:	bf00      	nop
 8001d84:	bf00      	nop
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <Controller_Mode_decision>:

void Controller_Mode_decision(uint8_t *Buff) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
	MODE_t Mode;
	Mode.Modestate = ModeState_get();
 8001d94:	f000 f9ea 	bl	800216c <ModeState_get>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	733b      	strb	r3, [r7, #12]
	if (Mode.Modestate == MANUAL) {
 8001d9e:	7b3b      	ldrb	r3, [r7, #12]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d102      	bne.n	8001daa <Controller_Mode_decision+0x1e>
		Controller_Manual_parsingData(Buff); //Buff에 저장된 값 판단
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f828 	bl	8001dfa <Controller_Manual_parsingData>
	}
	if (Mode.Modestate == AUTO) {
 8001daa:	7b3b      	ldrb	r3, [r7, #12]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d104      	bne.n	8001dba <Controller_Mode_decision+0x2e>
		//UltraSonic 계산 추가
		Controller_Auto_parsingData(Buff); //Buff에 저장된 값 판단
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f865 	bl	8001e80 <Controller_Auto_parsingData>
		Controller_Auto_decision();
 8001db6:	f000 f872 	bl	8001e9e <Controller_Auto_decision>
	}
}
 8001dba:	bf00      	nop
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <Controller_Mode_parsingData>:

void Controller_Mode_parsingData(uint8_t *Buff) {
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
	if (Buff[0] == 'm') {
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b6d      	cmp	r3, #109	; 0x6d
 8001dd0:	d105      	bne.n	8001dde <Controller_Mode_parsingData+0x1c>
		ModeState_set(MANUAL);
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f000 f9ba 	bl	800214c <ModeState_set>
		ModeState_setFlag(MANUALFlag);
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f000 f9d3 	bl	8002184 <ModeState_setFlag>
	}
	if (Buff[0] == 'a') {
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b61      	cmp	r3, #97	; 0x61
 8001de4:	d105      	bne.n	8001df2 <Controller_Mode_parsingData+0x30>
		ModeState_set(AUTO);
 8001de6:	2001      	movs	r0, #1
 8001de8:	f000 f9b0 	bl	800214c <ModeState_set>
		ModeState_setFlag(AUTOFlag);
 8001dec:	2001      	movs	r0, #1
 8001dee:	f000 f9c9 	bl	8002184 <ModeState_setFlag>
	}
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <Controller_Manual_parsingData>:

void Controller_Manual_parsingData(uint8_t *Buff) {
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b084      	sub	sp, #16
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
	if (Buff[0] == 'g') {	//go
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b67      	cmp	r3, #103	; 0x67
 8001e08:	d103      	bne.n	8001e12 <Controller_Manual_parsingData+0x18>
		MotorState_enQue(GO);
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	f000 f9fe 	bl	800220c <MotorState_enQue>
 8001e10:	e02f      	b.n	8001e72 <Controller_Manual_parsingData+0x78>
	}
	else if (Buff[0] == 'b') {	//back
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b62      	cmp	r3, #98	; 0x62
 8001e18:	d103      	bne.n	8001e22 <Controller_Manual_parsingData+0x28>
		MotorState_enQue(BACK);
 8001e1a:	2004      	movs	r0, #4
 8001e1c:	f000 f9f6 	bl	800220c <MotorState_enQue>
 8001e20:	e027      	b.n	8001e72 <Controller_Manual_parsingData+0x78>
	}
	else if (Buff[0] == 'l') {	//left
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b6c      	cmp	r3, #108	; 0x6c
 8001e28:	d103      	bne.n	8001e32 <Controller_Manual_parsingData+0x38>
		MotorState_enQue(LEFT);
 8001e2a:	2002      	movs	r0, #2
 8001e2c:	f000 f9ee 	bl	800220c <MotorState_enQue>
 8001e30:	e01f      	b.n	8001e72 <Controller_Manual_parsingData+0x78>
	}
	else if (Buff[0] == 'r') {	//right
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b72      	cmp	r3, #114	; 0x72
 8001e38:	d103      	bne.n	8001e42 <Controller_Manual_parsingData+0x48>
		MotorState_enQue(RIGHT);
 8001e3a:	2003      	movs	r0, #3
 8001e3c:	f000 f9e6 	bl	800220c <MotorState_enQue>
 8001e40:	e017      	b.n	8001e72 <Controller_Manual_parsingData+0x78>
	}
	else if (Buff[0] == 's') {	//stop
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b73      	cmp	r3, #115	; 0x73
 8001e48:	d103      	bne.n	8001e52 <Controller_Manual_parsingData+0x58>
		MotorState_enQue(STOP);
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	f000 f9de 	bl	800220c <MotorState_enQue>
 8001e50:	e00f      	b.n	8001e72 <Controller_Manual_parsingData+0x78>
	}
	else if (Buff[0] == 'p') {	//speed p98'0'
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b70      	cmp	r3, #112	; 0x70
 8001e58:	d10b      	bne.n	8001e72 <Controller_Manual_parsingData+0x78>
		MotorState_enQue(SPEED);
 8001e5a:	2005      	movs	r0, #5
 8001e5c:	f000 f9d6 	bl	800220c <MotorState_enQue>
		int speed = atoi(&Buff[1]);	//해당 주소부터 숫자가 아닌 것까지 계산
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3301      	adds	r3, #1
 8001e64:	4618      	mov	r0, r3
 8001e66:	f005 ffa1 	bl	8007dac <atoi>
 8001e6a:	60f8      	str	r0, [r7, #12]
		MotorState_setSpeed(speed);
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f000 f9b1 	bl	80021d4 <MotorState_setSpeed>
	}
	MotorState_setFlag(SET);
 8001e72:	2001      	movs	r0, #1
 8001e74:	f000 f9e4 	bl	8002240 <MotorState_setFlag>
}
 8001e78:	bf00      	nop
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <Controller_Auto_parsingData>:

void Controller_Auto_parsingData(uint8_t *Buff) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
	if (Buff[0] == 's') {	//응급 상황시 사람이 stop
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b73      	cmp	r3, #115	; 0x73
 8001e8e:	d102      	bne.n	8001e96 <Controller_Auto_parsingData+0x16>
		MotorState_enQue(STOP);
 8001e90:	2000      	movs	r0, #0
 8001e92:	f000 f9bb 	bl	800220c <MotorState_enQue>
	}
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <Controller_Auto_decision>:

void Controller_Auto_decision(){
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b084      	sub	sp, #16
 8001ea2:	af00      	add	r7, sp, #0
	USDistance_t USDistance;
	USDistance = USDistance_get();
 8001ea4:	1d3b      	adds	r3, r7, #4
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 fa0c 	bl	80022c4 <USDistance_get>
}
 8001eac:	bf00      	nop
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <Listner_init>:
#include <stdio.h>

button_t ManualButton, AutoButton;
ultraSonic_t ultraSonic_Front,ultraSonic_Left,ultraSonic_Right;

void Listner_init(TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2 ,TIM_HandleTypeDef *htim4) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af02      	add	r7, sp, #8
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
	ModeState_init();
 8001ec0:	f000 f934 	bl	800212c <ModeState_init>
	DelayInit();
 8001ec4:	f7fe fe68 	bl	8000b98 <DelayInit>
	USDistanc_init();
 8001ec8:	f000 f9d2 	bl	8002270 <USDistanc_init>
	UltraSonic_init(&ultraSonic_Front, htim1, FRONT_GPIO_TRIG,
 8001ecc:	2302      	movs	r3, #2
 8001ece:	9301      	str	r3, [sp, #4]
 8001ed0:	4b16      	ldr	r3, [pc, #88]	; (8001f2c <Listner_init+0x78>)
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	4a15      	ldr	r2, [pc, #84]	; (8001f2c <Listner_init+0x78>)
 8001ed8:	68f9      	ldr	r1, [r7, #12]
 8001eda:	4815      	ldr	r0, [pc, #84]	; (8001f30 <Listner_init+0x7c>)
 8001edc:	f000 fdb9 	bl	8002a52 <UltraSonic_init>
			FRONT_GPIO_TRIG_PIN,FRONT_GPIO_ECHO, FRONT_GPIO_ECHO_PIN);
	UltraSonic_init(&ultraSonic_Left, htim2, LEFT_GPIO_TRIG,
 8001ee0:	2308      	movs	r3, #8
 8001ee2:	9301      	str	r3, [sp, #4]
 8001ee4:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <Listner_init+0x78>)
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	2304      	movs	r3, #4
 8001eea:	4a10      	ldr	r2, [pc, #64]	; (8001f2c <Listner_init+0x78>)
 8001eec:	68b9      	ldr	r1, [r7, #8]
 8001eee:	4811      	ldr	r0, [pc, #68]	; (8001f34 <Listner_init+0x80>)
 8001ef0:	f000 fdaf 	bl	8002a52 <UltraSonic_init>
			LEFT_GPIO_TRIG_PIN,LEFT_GPIO_ECHO,LEFT_GPIO_ECHO_PIN);
	UltraSonic_init(&ultraSonic_Right, htim4, RIGHT_GPIO_TRIG,
 8001ef4:	2310      	movs	r3, #16
 8001ef6:	9301      	str	r3, [sp, #4]
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <Listner_init+0x78>)
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f00:	4a0d      	ldr	r2, [pc, #52]	; (8001f38 <Listner_init+0x84>)
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	480d      	ldr	r0, [pc, #52]	; (8001f3c <Listner_init+0x88>)
 8001f06:	f000 fda4 	bl	8002a52 <UltraSonic_init>
			RIGHT_GPIO_TRIG_PIN,RIGHT_GPIO_ECHO, RIGHT_GPIO_ECHO_PIN);
	button_init(&ManualButton, GPIOC, GPIO_PIN_10);
 8001f0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f0e:	4907      	ldr	r1, [pc, #28]	; (8001f2c <Listner_init+0x78>)
 8001f10:	480b      	ldr	r0, [pc, #44]	; (8001f40 <Listner_init+0x8c>)
 8001f12:	f000 fb21 	bl	8002558 <button_init>
	button_init(&AutoButton, GPIOC, GPIO_PIN_11);
 8001f16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f1a:	4904      	ldr	r1, [pc, #16]	; (8001f2c <Listner_init+0x78>)
 8001f1c:	4809      	ldr	r0, [pc, #36]	; (8001f44 <Listner_init+0x90>)
 8001f1e:	f000 fb1b 	bl	8002558 <button_init>
}
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40020800 	.word	0x40020800
 8001f30:	200005a4 	.word	0x200005a4
 8001f34:	200005bc 	.word	0x200005bc
 8001f38:	40020400 	.word	0x40020400
 8001f3c:	200005d4 	.word	0x200005d4
 8001f40:	2000058c 	.word	0x2000058c
 8001f44:	20000598 	.word	0x20000598

08001f48 <Listener_UART_ISR_Process>:

void Listener_UART_ISR_Process(uint8_t rxData) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
	if (rxData == ';') {
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	2b3b      	cmp	r3, #59	; 0x3b
 8001f56:	d106      	bne.n	8001f66 <Listener_UART_ISR_Process+0x1e>
		BT_enQue('\0');
 8001f58:	2000      	movs	r0, #0
 8001f5a:	f000 f8b5 	bl	80020c8 <BT_enQue>
		BT_setFlag(BTSET);
 8001f5e:	2001      	movs	r0, #1
 8001f60:	f000 f8cc 	bl	80020fc <BT_setFlag>
	}
	else {
		BT_enQue(rxData);
		BT_setFlag(BTRESET);
	}
}
 8001f64:	e006      	b.n	8001f74 <Listener_UART_ISR_Process+0x2c>
		BT_enQue(rxData);
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f000 f8ad 	bl	80020c8 <BT_enQue>
		BT_setFlag(BTRESET);
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f000 f8c4 	bl	80020fc <BT_setFlag>
}
 8001f74:	bf00      	nop
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <Listener_US_ISR_Process>:

void Listener_US_ISR_Process(uint16_t GPIO_Pin) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	80fb      	strh	r3, [r7, #6]
	UltraSonic_ISR_Process(&ultraSonic_Front, GPIO_Pin);
 8001f86:	88fb      	ldrh	r3, [r7, #6]
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4808      	ldr	r0, [pc, #32]	; (8001fac <Listener_US_ISR_Process+0x30>)
 8001f8c:	f000 fe0d 	bl	8002baa <UltraSonic_ISR_Process>
	UltraSonic_ISR_Process(&ultraSonic_Left, GPIO_Pin);
 8001f90:	88fb      	ldrh	r3, [r7, #6]
 8001f92:	4619      	mov	r1, r3
 8001f94:	4806      	ldr	r0, [pc, #24]	; (8001fb0 <Listener_US_ISR_Process+0x34>)
 8001f96:	f000 fe08 	bl	8002baa <UltraSonic_ISR_Process>
	UltraSonic_ISR_Process(&ultraSonic_Right, GPIO_Pin);
 8001f9a:	88fb      	ldrh	r3, [r7, #6]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4805      	ldr	r0, [pc, #20]	; (8001fb4 <Listener_US_ISR_Process+0x38>)
 8001fa0:	f000 fe03 	bl	8002baa <UltraSonic_ISR_Process>
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	200005a4 	.word	0x200005a4
 8001fb0:	200005bc 	.word	0x200005bc
 8001fb4:	200005d4 	.word	0x200005d4

08001fb8 <Listener_Button>:

void Listener_Button() {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
	if (button_getState(&ManualButton) == ACT_RELEASED) {
 8001fbc:	480c      	ldr	r0, [pc, #48]	; (8001ff0 <Listener_Button+0x38>)
 8001fbe:	f000 fae1 	bl	8002584 <button_getState>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d105      	bne.n	8001fd4 <Listener_Button+0x1c>
		ModeState_set(MANUAL);
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f000 f8bf 	bl	800214c <ModeState_set>
		ModeState_setFlag(MANUALFlag);
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f000 f8d8 	bl	8002184 <ModeState_setFlag>
	}
	if (button_getState(&AutoButton) == ACT_RELEASED) {
 8001fd4:	4807      	ldr	r0, [pc, #28]	; (8001ff4 <Listener_Button+0x3c>)
 8001fd6:	f000 fad5 	bl	8002584 <button_getState>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d105      	bne.n	8001fec <Listener_Button+0x34>
		ModeState_set(AUTO);
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	f000 f8b3 	bl	800214c <ModeState_set>
		ModeState_setFlag(AUTOFlag);
 8001fe6:	2001      	movs	r0, #1
 8001fe8:	f000 f8cc 	bl	8002184 <ModeState_setFlag>
	}
}
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	2000058c 	.word	0x2000058c
 8001ff4:	20000598 	.word	0x20000598

08001ff8 <Listener_UltraSonic_Distance>:

void Listener_UltraSonic_Distance(){
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
	int ModeState_Auto = ModeState_getFlag();
 8001ffe:	f000 f8d1 	bl	80021a4 <ModeState_getFlag>
 8002002:	6078      	str	r0, [r7, #4]
		if(ModeState_Auto != AUTOFlag) return;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d13d      	bne.n	8002086 <Listener_UltraSonic_Distance+0x8e>
		static int UltraSonicCount;
		static int distance_Front;
		static int distance_Left;
		static int distance_Right;

		switch (UltraSonicCount) {
 800200a:	4b21      	ldr	r3, [pc, #132]	; (8002090 <Listener_UltraSonic_Distance+0x98>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d01a      	beq.n	8002048 <Listener_UltraSonic_Distance+0x50>
 8002012:	2b02      	cmp	r3, #2
 8002014:	dc1f      	bgt.n	8002056 <Listener_UltraSonic_Distance+0x5e>
 8002016:	2b00      	cmp	r3, #0
 8002018:	d002      	beq.n	8002020 <Listener_UltraSonic_Distance+0x28>
 800201a:	2b01      	cmp	r3, #1
 800201c:	d00d      	beq.n	800203a <Listener_UltraSonic_Distance+0x42>
 800201e:	e01a      	b.n	8002056 <Listener_UltraSonic_Distance+0x5e>
			case 0:
				distance_Front = UltraSonic_getDistance(&ultraSonic_Front);
 8002020:	481c      	ldr	r0, [pc, #112]	; (8002094 <Listener_UltraSonic_Distance+0x9c>)
 8002022:	f000 fdf1 	bl	8002c08 <UltraSonic_getDistance>
 8002026:	4603      	mov	r3, r0
 8002028:	4a1b      	ldr	r2, [pc, #108]	; (8002098 <Listener_UltraSonic_Distance+0xa0>)
 800202a:	6013      	str	r3, [r2, #0]
				printf("F : %d\n", distance_Front);
 800202c:	4b1a      	ldr	r3, [pc, #104]	; (8002098 <Listener_UltraSonic_Distance+0xa0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4619      	mov	r1, r3
 8002032:	481a      	ldr	r0, [pc, #104]	; (800209c <Listener_UltraSonic_Distance+0xa4>)
 8002034:	f006 f80c 	bl	8008050 <iprintf>
				break;
 8002038:	e00d      	b.n	8002056 <Listener_UltraSonic_Distance+0x5e>
			case 1:
				distance_Left = UltraSonic_getDistance(&ultraSonic_Left);
 800203a:	4819      	ldr	r0, [pc, #100]	; (80020a0 <Listener_UltraSonic_Distance+0xa8>)
 800203c:	f000 fde4 	bl	8002c08 <UltraSonic_getDistance>
 8002040:	4603      	mov	r3, r0
 8002042:	4a18      	ldr	r2, [pc, #96]	; (80020a4 <Listener_UltraSonic_Distance+0xac>)
 8002044:	6013      	str	r3, [r2, #0]
				//printf("L : %d\n", distance_Left);
				break;
 8002046:	e006      	b.n	8002056 <Listener_UltraSonic_Distance+0x5e>
			case 2:
				distance_Right = UltraSonic_getDistance(&ultraSonic_Right);
 8002048:	4817      	ldr	r0, [pc, #92]	; (80020a8 <Listener_UltraSonic_Distance+0xb0>)
 800204a:	f000 fddd 	bl	8002c08 <UltraSonic_getDistance>
 800204e:	4603      	mov	r3, r0
 8002050:	4a16      	ldr	r2, [pc, #88]	; (80020ac <Listener_UltraSonic_Distance+0xb4>)
 8002052:	6013      	str	r3, [r2, #0]
				//printf("R : %d\n", distance_Right);
				break;
 8002054:	bf00      	nop
		}
		UltraSonicCount = (UltraSonicCount+1)%3;
 8002056:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <Listener_UltraSonic_Distance+0x98>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	1c59      	adds	r1, r3, #1
 800205c:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <Listener_UltraSonic_Distance+0xb8>)
 800205e:	fb83 3201 	smull	r3, r2, r3, r1
 8002062:	17cb      	asrs	r3, r1, #31
 8002064:	1ad2      	subs	r2, r2, r3
 8002066:	4613      	mov	r3, r2
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	4413      	add	r3, r2
 800206c:	1aca      	subs	r2, r1, r3
 800206e:	4b08      	ldr	r3, [pc, #32]	; (8002090 <Listener_UltraSonic_Distance+0x98>)
 8002070:	601a      	str	r2, [r3, #0]
		//printf("F:%d,L:%d,R:%d",distance_Front, distance_Left, distance_Right);
		USDistance_set(distance_Front, distance_Left, distance_Right);
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <Listener_UltraSonic_Distance+0xa0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a0b      	ldr	r2, [pc, #44]	; (80020a4 <Listener_UltraSonic_Distance+0xac>)
 8002078:	6811      	ldr	r1, [r2, #0]
 800207a:	4a0c      	ldr	r2, [pc, #48]	; (80020ac <Listener_UltraSonic_Distance+0xb4>)
 800207c:	6812      	ldr	r2, [r2, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f000 f908 	bl	8002294 <USDistance_set>
 8002084:	e000      	b.n	8002088 <Listener_UltraSonic_Distance+0x90>
		if(ModeState_Auto != AUTOFlag) return;
 8002086:	bf00      	nop

}
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	200005ec 	.word	0x200005ec
 8002094:	200005a4 	.word	0x200005a4
 8002098:	200005f0 	.word	0x200005f0
 800209c:	0800925c 	.word	0x0800925c
 80020a0:	200005bc 	.word	0x200005bc
 80020a4:	200005f4 	.word	0x200005f4
 80020a8:	200005d4 	.word	0x200005d4
 80020ac:	200005f8 	.word	0x200005f8
 80020b0:	55555556 	.word	0x55555556

080020b4 <BT_init>:
 */

#include "BT_dataQue.h"
Que_t BTQue;

void BT_init(){
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
	Que_init(&BTQue);
 80020b8:	4802      	ldr	r0, [pc, #8]	; (80020c4 <BT_init+0x10>)
 80020ba:	f7fe fdbf 	bl	8000c3c <Que_init>
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200005fc 	.word	0x200005fc

080020c8 <BT_enQue>:

void BT_enQue(uint8_t rxData){
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	71fb      	strb	r3, [r7, #7]
	enQue(&BTQue,rxData);
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	4619      	mov	r1, r3
 80020d6:	4803      	ldr	r0, [pc, #12]	; (80020e4 <BT_enQue+0x1c>)
 80020d8:	f7fe fe02 	bl	8000ce0 <enQue>
}
 80020dc:	bf00      	nop
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	200005fc 	.word	0x200005fc

080020e8 <BT_deQue>:

uint8_t BT_deQue(){
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
	return deQue(&BTQue);
 80020ec:	4802      	ldr	r0, [pc, #8]	; (80020f8 <BT_deQue+0x10>)
 80020ee:	f7fe fe23 	bl	8000d38 <deQue>
 80020f2:	4603      	mov	r3, r0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	200005fc 	.word	0x200005fc

080020fc <BT_setFlag>:
void BT_setFlag(int flagState){
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
	setQueFlag(&BTQue, flagState);
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	4803      	ldr	r0, [pc, #12]	; (8002114 <BT_setFlag+0x18>)
 8002108:	f7fe fdae 	bl	8000c68 <setQueFlag>
}
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	200005fc 	.word	0x200005fc

08002118 <BT_getFlag>:

int BT_getFlag(){
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
	return getQueFlag(&BTQue);
 800211c:	4802      	ldr	r0, [pc, #8]	; (8002128 <BT_getFlag+0x10>)
 800211e:	f7fe fdb1 	bl	8000c84 <getQueFlag>
 8002122:	4603      	mov	r3, r0
}
 8002124:	4618      	mov	r0, r3
 8002126:	bd80      	pop	{r7, pc}
 8002128:	200005fc 	.word	0x200005fc

0800212c <ModeState_init>:

#include "ModeStateModel.h"

MODE_t Mode;

void ModeState_init(){
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
	Mode.Modestate = MANUAL;
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <ModeState_init+0x1c>)
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]
	Mode.ModeFlag = MODERESET;
 8002136:	4b04      	ldr	r3, [pc, #16]	; (8002148 <ModeState_init+0x1c>)
 8002138:	2200      	movs	r2, #0
 800213a:	705a      	strb	r2, [r3, #1]
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	20000670 	.word	0x20000670

0800214c <ModeState_set>:

void ModeState_set(int ModeState){
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	Mode.Modestate = ModeState;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	b2da      	uxtb	r2, r3
 8002158:	4b03      	ldr	r3, [pc, #12]	; (8002168 <ModeState_set+0x1c>)
 800215a:	701a      	strb	r2, [r3, #0]
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	20000670 	.word	0x20000670

0800216c <ModeState_get>:

int ModeState_get(){
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
	return Mode.Modestate;
 8002170:	4b03      	ldr	r3, [pc, #12]	; (8002180 <ModeState_get+0x14>)
 8002172:	781b      	ldrb	r3, [r3, #0]
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	20000670 	.word	0x20000670

08002184 <ModeState_setFlag>:

void ModeState_setFlag(int flagState){
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	Mode.ModeFlag = flagState;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	b2da      	uxtb	r2, r3
 8002190:	4b03      	ldr	r3, [pc, #12]	; (80021a0 <ModeState_setFlag+0x1c>)
 8002192:	705a      	strb	r2, [r3, #1]
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	20000670 	.word	0x20000670

080021a4 <ModeState_getFlag>:

int ModeState_getFlag(){
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
	return Mode.ModeFlag;
 80021a8:	4b03      	ldr	r3, [pc, #12]	; (80021b8 <ModeState_getFlag+0x14>)
 80021aa:	785b      	ldrb	r3, [r3, #1]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	20000670 	.word	0x20000670

080021bc <MotorState_init>:

#include "MotorStateQue.h"

MotorState_t MotorStateQue;

void MotorState_init(){
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
	Que_init(&MotorStateQue.state);
 80021c0:	4803      	ldr	r0, [pc, #12]	; (80021d0 <MotorState_init+0x14>)
 80021c2:	f7fe fd3b 	bl	8000c3c <Que_init>
	MotorStateQue.speed = 0;
 80021c6:	4b02      	ldr	r3, [pc, #8]	; (80021d0 <MotorState_init+0x14>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	675a      	str	r2, [r3, #116]	; 0x74
}
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20000674 	.word	0x20000674

080021d4 <MotorState_setSpeed>:

void MotorState_setSpeed(int speed){
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	MotorStateQue.speed = speed;
 80021dc:	4a04      	ldr	r2, [pc, #16]	; (80021f0 <MotorState_setSpeed+0x1c>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6753      	str	r3, [r2, #116]	; 0x74
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	20000674 	.word	0x20000674

080021f4 <MotorState_getSpeed>:
int MotorState_getSpeed(){
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
	return MotorStateQue.speed;
 80021f8:	4b03      	ldr	r3, [pc, #12]	; (8002208 <MotorState_getSpeed+0x14>)
 80021fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	20000674 	.word	0x20000674

0800220c <MotorState_enQue>:


void MotorState_enQue(uint8_t rxData){
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]
	enQue(&MotorStateQue.state,rxData);
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	4619      	mov	r1, r3
 800221a:	4803      	ldr	r0, [pc, #12]	; (8002228 <MotorState_enQue+0x1c>)
 800221c:	f7fe fd60 	bl	8000ce0 <enQue>
}
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000674 	.word	0x20000674

0800222c <MotorState_deQue>:
uint8_t MotorState_deQue(){
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
	return deQue(&MotorStateQue.state);
 8002230:	4802      	ldr	r0, [pc, #8]	; (800223c <MotorState_deQue+0x10>)
 8002232:	f7fe fd81 	bl	8000d38 <deQue>
 8002236:	4603      	mov	r3, r0
}
 8002238:	4618      	mov	r0, r3
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000674 	.word	0x20000674

08002240 <MotorState_setFlag>:

void MotorState_setFlag(int flagState){
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
	setQueFlag(&MotorStateQue.state, flagState);
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	4803      	ldr	r0, [pc, #12]	; (8002258 <MotorState_setFlag+0x18>)
 800224c:	f7fe fd0c 	bl	8000c68 <setQueFlag>
}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20000674 	.word	0x20000674

0800225c <MotorState_getFlag>:
int MotorState_getFlag(){
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
	return getQueFlag(&MotorStateQue.state);
 8002260:	4802      	ldr	r0, [pc, #8]	; (800226c <MotorState_getFlag+0x10>)
 8002262:	f7fe fd0f 	bl	8000c84 <getQueFlag>
 8002266:	4603      	mov	r3, r0
}
 8002268:	4618      	mov	r0, r3
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20000674 	.word	0x20000674

08002270 <USDistanc_init>:

#include "USDistanceModel.h"

USDistance_t USDistance;

void USDistanc_init(){
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
	USDistance.Distance_Front = 0;
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <USDistanc_init+0x20>)
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
	USDistance.Distance_Left = 0;
 800227a:	4b05      	ldr	r3, [pc, #20]	; (8002290 <USDistanc_init+0x20>)
 800227c:	2200      	movs	r2, #0
 800227e:	605a      	str	r2, [r3, #4]
	USDistance.Distance_Right = 0;
 8002280:	4b03      	ldr	r3, [pc, #12]	; (8002290 <USDistanc_init+0x20>)
 8002282:	2200      	movs	r2, #0
 8002284:	609a      	str	r2, [r3, #8]
}
 8002286:	bf00      	nop
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	200006ec 	.word	0x200006ec

08002294 <USDistance_set>:

void USDistance_set(int Front_Distance,int Left_Distance,int Right_Distance){
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
	USDistance.Distance_Front = Front_Distance;
 80022a0:	4a07      	ldr	r2, [pc, #28]	; (80022c0 <USDistance_set+0x2c>)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6013      	str	r3, [r2, #0]
	USDistance.Distance_Left = Left_Distance;
 80022a6:	4a06      	ldr	r2, [pc, #24]	; (80022c0 <USDistance_set+0x2c>)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	6053      	str	r3, [r2, #4]
	USDistance.Distance_Right = Right_Distance;
 80022ac:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <USDistance_set+0x2c>)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6093      	str	r3, [r2, #8]
}
 80022b2:	bf00      	nop
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	200006ec 	.word	0x200006ec

080022c4 <USDistance_get>:

USDistance_t USDistance_get(){
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
	return USDistance;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a05      	ldr	r2, [pc, #20]	; (80022e4 <USDistance_get+0x20>)
 80022d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80022d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	200006ec 	.word	0x200006ec

080022e8 <Presenter_Init>:

#include "Presenter.h"
#include <stdio.h>
Motor_t leftMotor, rightMotor;

void Presenter_Init() {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af04      	add	r7, sp, #16
	Motor_init(&leftMotor, &htim3, TIM_CHANNEL_1,
 80022ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022f2:	9302      	str	r3, [sp, #8]
 80022f4:	4b12      	ldr	r3, [pc, #72]	; (8002340 <Presenter_Init+0x58>)
 80022f6:	9301      	str	r3, [sp, #4]
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	4b11      	ldr	r3, [pc, #68]	; (8002344 <Presenter_Init+0x5c>)
 80022fe:	2200      	movs	r2, #0
 8002300:	4911      	ldr	r1, [pc, #68]	; (8002348 <Presenter_Init+0x60>)
 8002302:	4812      	ldr	r0, [pc, #72]	; (800234c <Presenter_Init+0x64>)
 8002304:	f000 fb08 	bl	8002918 <Motor_init>
	LEFT_DIR1_GPIO, LEFT_DIR1_GPIO_PIN, LEFT_DIR2_GPIO, LEFT_DIR2_GPIO_PIN);
	Motor_init(&rightMotor, &htim3, TIM_CHANNEL_2,
 8002308:	f44f 7380 	mov.w	r3, #256	; 0x100
 800230c:	9302      	str	r3, [sp, #8]
 800230e:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <Presenter_Init+0x58>)
 8002310:	9301      	str	r3, [sp, #4]
 8002312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <Presenter_Init+0x68>)
 800231a:	2204      	movs	r2, #4
 800231c:	490a      	ldr	r1, [pc, #40]	; (8002348 <Presenter_Init+0x60>)
 800231e:	480d      	ldr	r0, [pc, #52]	; (8002354 <Presenter_Init+0x6c>)
 8002320:	f000 fafa 	bl	8002918 <Motor_init>
	RIGHT_DIR1_GPIO, RIGHT_DIR1_GPIO_PIN, RIGHT_DIR2_GPIO, RIGHT_DIR2_GPIO_PIN);
	//초기 MotorSpeed
	Motor_setSpeed(&leftMotor, 900);
 8002324:	f44f 7161 	mov.w	r1, #900	; 0x384
 8002328:	4808      	ldr	r0, [pc, #32]	; (800234c <Presenter_Init+0x64>)
 800232a:	f000 fb64 	bl	80029f6 <Motor_setSpeed>
	Motor_setSpeed(&rightMotor, 900);
 800232e:	f44f 7161 	mov.w	r1, #900	; 0x384
 8002332:	4808      	ldr	r0, [pc, #32]	; (8002354 <Presenter_Init+0x6c>)
 8002334:	f000 fb5f 	bl	80029f6 <Motor_setSpeed>
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40020000 	.word	0x40020000
 8002344:	40020800 	.word	0x40020800
 8002348:	2000040c 	.word	0x2000040c
 800234c:	200006f8 	.word	0x200006f8
 8002350:	40020400 	.word	0x40020400
 8002354:	20000710 	.word	0x20000710

08002358 <Presenter_excuteTask>:

void Presenter_excuteTask() {
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
	int MotorQueFlag = MotorState_getFlag();
 800235e:	f7ff ff7d 	bl	800225c <MotorState_getFlag>
 8002362:	6078      	str	r0, [r7, #4]
	static int OldModeFlag = MANUALFlag;
	int ModeFlag = ModeState_getFlag();
 8002364:	f7ff ff1e 	bl	80021a4 <ModeState_getFlag>
 8002368:	6038      	str	r0, [r7, #0]

	if ((OldModeFlag==ModeFlag)&&!MotorQueFlag) return;	//둘 중 하나가 set되면 실행
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <Presenter_excuteTask+0x3c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d102      	bne.n	800237a <Presenter_excuteTask+0x22>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d008      	beq.n	800238c <Presenter_excuteTask+0x34>
	OldModeFlag = ModeFlag;
 800237a:	4a06      	ldr	r2, [pc, #24]	; (8002394 <Presenter_excuteTask+0x3c>)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	6013      	str	r3, [r2, #0]
	Presenter_Mode_setState();
 8002380:	f000 f80a 	bl	8002398 <Presenter_Mode_setState>

	MotorState_setFlag(RESET);
 8002384:	2000      	movs	r0, #0
 8002386:	f7ff ff5b 	bl	8002240 <MotorState_setFlag>
 800238a:	e000      	b.n	800238e <Presenter_excuteTask+0x36>
	if ((OldModeFlag==ModeFlag)&&!MotorQueFlag) return;	//둘 중 하나가 set되면 실행
 800238c:	bf00      	nop
}
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20000728 	.word	0x20000728

08002398 <Presenter_Mode_setState>:

void Presenter_Mode_setState() {
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
	ModeState_t ModeState;
	ModeState = ModeState_get();
 800239e:	f7ff fee5 	bl	800216c <ModeState_get>
 80023a2:	4603      	mov	r3, r0
 80023a4:	71fb      	strb	r3, [r7, #7]
	switch (ModeState) {
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d002      	beq.n	80023b2 <Presenter_Mode_setState+0x1a>
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d003      	beq.n	80023b8 <Presenter_Mode_setState+0x20>
			break;
		case AUTO:
			Presenter_Auto_setState();
			break;
	}
}
 80023b0:	e005      	b.n	80023be <Presenter_Mode_setState+0x26>
			Presenter_Manual_setState();
 80023b2:	f000 f809 	bl	80023c8 <Presenter_Manual_setState>
			break;
 80023b6:	e002      	b.n	80023be <Presenter_Mode_setState+0x26>
			Presenter_Auto_setState();
 80023b8:	f000 f8c2 	bl	8002540 <Presenter_Auto_setState>
			break;
 80023bc:	bf00      	nop
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
	...

080023c8 <Presenter_Manual_setState>:

void Presenter_Manual_setState() {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
	LCD_writeStringXY(0, 0, "Car Manual!");
 80023ce:	4a18      	ldr	r2, [pc, #96]	; (8002430 <Presenter_Manual_setState+0x68>)
 80023d0:	2100      	movs	r1, #0
 80023d2:	2000      	movs	r0, #0
 80023d4:	f000 fa8b 	bl	80028ee <LCD_writeStringXY>
	uint8_t MotorState = MotorState_deQue();
 80023d8:	f7ff ff28 	bl	800222c <MotorState_deQue>
 80023dc:	4603      	mov	r3, r0
 80023de:	71fb      	strb	r3, [r7, #7]
	switch (MotorState) {
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	2b05      	cmp	r3, #5
 80023e4:	d820      	bhi.n	8002428 <Presenter_Manual_setState+0x60>
 80023e6:	a201      	add	r2, pc, #4	; (adr r2, 80023ec <Presenter_Manual_setState+0x24>)
 80023e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ec:	0800241d 	.word	0x0800241d
 80023f0:	08002405 	.word	0x08002405
 80023f4:	08002411 	.word	0x08002411
 80023f8:	08002417 	.word	0x08002417
 80023fc:	0800240b 	.word	0x0800240b
 8002400:	08002423 	.word	0x08002423
		case GO:
			Presenter_CarGo();
 8002404:	f000 f816 	bl	8002434 <Presenter_CarGo>
			break;
 8002408:	e00e      	b.n	8002428 <Presenter_Manual_setState+0x60>
		case BACK:
			Presenter_CarBack();
 800240a:	f000 f86b 	bl	80024e4 <Presenter_CarBack>
			break;
 800240e:	e00b      	b.n	8002428 <Presenter_Manual_setState+0x60>
		case LEFT:
			Presenter_CarLeft();
 8002410:	f000 f83c 	bl	800248c <Presenter_CarLeft>
			break;
 8002414:	e008      	b.n	8002428 <Presenter_Manual_setState+0x60>
		case RIGHT:
			Presenter_CarRight();
 8002416:	f000 f84f 	bl	80024b8 <Presenter_CarRight>
			break;
 800241a:	e005      	b.n	8002428 <Presenter_Manual_setState+0x60>
		case STOP:
			Presenter_CarStop();
 800241c:	f000 f820 	bl	8002460 <Presenter_CarStop>
			break;
 8002420:	e002      	b.n	8002428 <Presenter_Manual_setState+0x60>
		case SPEED:
			Presenter_CarSpeed();
 8002422:	f000 f875 	bl	8002510 <Presenter_CarSpeed>
			break;
 8002426:	bf00      	nop
//		default: //Stop
//			Presenter_CarStop();
//			break;
	}
}
 8002428:	bf00      	nop
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	08009264 	.word	0x08009264

08002434 <Presenter_CarGo>:
void Presenter_CarGo() {
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
	LCD_writeStringXY(1, 0, "Car Go!");
 8002438:	4a06      	ldr	r2, [pc, #24]	; (8002454 <Presenter_CarGo+0x20>)
 800243a:	2100      	movs	r1, #0
 800243c:	2001      	movs	r0, #1
 800243e:	f000 fa56 	bl	80028ee <LCD_writeStringXY>
	Motor_forward(&leftMotor);
 8002442:	4805      	ldr	r0, [pc, #20]	; (8002458 <Presenter_CarGo+0x24>)
 8002444:	f000 fa97 	bl	8002976 <Motor_forward>
	Motor_forward(&rightMotor);
 8002448:	4804      	ldr	r0, [pc, #16]	; (800245c <Presenter_CarGo+0x28>)
 800244a:	f000 fa94 	bl	8002976 <Motor_forward>
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	08009270 	.word	0x08009270
 8002458:	200006f8 	.word	0x200006f8
 800245c:	20000710 	.word	0x20000710

08002460 <Presenter_CarStop>:
void Presenter_CarStop() {
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
	LCD_writeStringXY(1, 0, "Car Stop!");
 8002464:	4a06      	ldr	r2, [pc, #24]	; (8002480 <Presenter_CarStop+0x20>)
 8002466:	2100      	movs	r1, #0
 8002468:	2001      	movs	r0, #1
 800246a:	f000 fa40 	bl	80028ee <LCD_writeStringXY>
	Motor_stop(&leftMotor);
 800246e:	4805      	ldr	r0, [pc, #20]	; (8002484 <Presenter_CarStop+0x24>)
 8002470:	f000 fa71 	bl	8002956 <Motor_stop>
	Motor_stop(&rightMotor);
 8002474:	4804      	ldr	r0, [pc, #16]	; (8002488 <Presenter_CarStop+0x28>)
 8002476:	f000 fa6e 	bl	8002956 <Motor_stop>
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	08009278 	.word	0x08009278
 8002484:	200006f8 	.word	0x200006f8
 8002488:	20000710 	.word	0x20000710

0800248c <Presenter_CarLeft>:
void Presenter_CarLeft() {
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
	LCD_writeStringXY(1, 0, "Car Left!");
 8002490:	4a06      	ldr	r2, [pc, #24]	; (80024ac <Presenter_CarLeft+0x20>)
 8002492:	2100      	movs	r1, #0
 8002494:	2001      	movs	r0, #1
 8002496:	f000 fa2a 	bl	80028ee <LCD_writeStringXY>
	Motor_backward(&leftMotor);
 800249a:	4805      	ldr	r0, [pc, #20]	; (80024b0 <Presenter_CarLeft+0x24>)
 800249c:	f000 fa8b 	bl	80029b6 <Motor_backward>
	Motor_forward(&rightMotor);
 80024a0:	4804      	ldr	r0, [pc, #16]	; (80024b4 <Presenter_CarLeft+0x28>)
 80024a2:	f000 fa68 	bl	8002976 <Motor_forward>

}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	08009284 	.word	0x08009284
 80024b0:	200006f8 	.word	0x200006f8
 80024b4:	20000710 	.word	0x20000710

080024b8 <Presenter_CarRight>:
void Presenter_CarRight() {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
	LCD_writeStringXY(1, 0, "Car Right!");
 80024bc:	4a06      	ldr	r2, [pc, #24]	; (80024d8 <Presenter_CarRight+0x20>)
 80024be:	2100      	movs	r1, #0
 80024c0:	2001      	movs	r0, #1
 80024c2:	f000 fa14 	bl	80028ee <LCD_writeStringXY>
	Motor_backward(&rightMotor);
 80024c6:	4805      	ldr	r0, [pc, #20]	; (80024dc <Presenter_CarRight+0x24>)
 80024c8:	f000 fa75 	bl	80029b6 <Motor_backward>
	Motor_forward(&leftMotor);
 80024cc:	4804      	ldr	r0, [pc, #16]	; (80024e0 <Presenter_CarRight+0x28>)
 80024ce:	f000 fa52 	bl	8002976 <Motor_forward>

}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	08009290 	.word	0x08009290
 80024dc:	20000710 	.word	0x20000710
 80024e0:	200006f8 	.word	0x200006f8

080024e4 <Presenter_CarBack>:
void Presenter_CarBack() {
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
	LCD_writeStringXY(1, 0, "Car Back!");
 80024e8:	4a06      	ldr	r2, [pc, #24]	; (8002504 <Presenter_CarBack+0x20>)
 80024ea:	2100      	movs	r1, #0
 80024ec:	2001      	movs	r0, #1
 80024ee:	f000 f9fe 	bl	80028ee <LCD_writeStringXY>
	Motor_backward(&leftMotor);
 80024f2:	4805      	ldr	r0, [pc, #20]	; (8002508 <Presenter_CarBack+0x24>)
 80024f4:	f000 fa5f 	bl	80029b6 <Motor_backward>
	Motor_backward(&rightMotor);
 80024f8:	4804      	ldr	r0, [pc, #16]	; (800250c <Presenter_CarBack+0x28>)
 80024fa:	f000 fa5c 	bl	80029b6 <Motor_backward>

}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	0800929c 	.word	0x0800929c
 8002508:	200006f8 	.word	0x200006f8
 800250c:	20000710 	.word	0x20000710

08002510 <Presenter_CarSpeed>:
void Presenter_CarSpeed() {
 8002510:	b580      	push	{r7, lr}
 8002512:	b088      	sub	sp, #32
 8002514:	af00      	add	r7, sp, #0
	char buff[30];
	sprintf(buff, "Car Speed!:%d", MotorState_getSpeed());
 8002516:	f7ff fe6d 	bl	80021f4 <MotorState_getSpeed>
 800251a:	4602      	mov	r2, r0
 800251c:	463b      	mov	r3, r7
 800251e:	4907      	ldr	r1, [pc, #28]	; (800253c <Presenter_CarSpeed+0x2c>)
 8002520:	4618      	mov	r0, r3
 8002522:	f005 fda7 	bl	8008074 <siprintf>
	LCD_writeStringXY(1, 0, buff);
 8002526:	463b      	mov	r3, r7
 8002528:	461a      	mov	r2, r3
 800252a:	2100      	movs	r1, #0
 800252c:	2001      	movs	r0, #1
 800252e:	f000 f9de 	bl	80028ee <LCD_writeStringXY>

}
 8002532:	bf00      	nop
 8002534:	3720      	adds	r7, #32
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	080092a8 	.word	0x080092a8

08002540 <Presenter_Auto_setState>:

void Presenter_Auto_setState() {
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
	LCD_writeStringXY(0, 0, "Car AUTO!");
 8002544:	4a03      	ldr	r2, [pc, #12]	; (8002554 <Presenter_Auto_setState+0x14>)
 8002546:	2100      	movs	r1, #0
 8002548:	2000      	movs	r0, #0
 800254a:	f000 f9d0 	bl	80028ee <LCD_writeStringXY>
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	080092b8 	.word	0x080092b8

08002558 <button_init>:
 */

#include "Button.h"


void button_init(button_t *button,GPIO_TypeDef* GPIOx,uint16_t GPIO_Pin){
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	4613      	mov	r3, r2
 8002564:	80fb      	strh	r3, [r7, #6]
	button->GPIOx = GPIOx;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	601a      	str	r2, [r3, #0]
	button->GPIO_Pin = GPIO_Pin;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	88fa      	ldrh	r2, [r7, #6]
 8002570:	809a      	strh	r2, [r3, #4]
	button->prevState =RELEASED;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2201      	movs	r2, #1
 8002576:	609a      	str	r2, [r3, #8]
}
 8002578:	bf00      	nop
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <button_getState>:

button_state_t button_getState(button_t *button){
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
	int curState = HAL_GPIO_ReadPin(button->GPIOx, button->GPIO_Pin);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	889b      	ldrh	r3, [r3, #4]
 8002594:	4619      	mov	r1, r3
 8002596:	4610      	mov	r0, r2
 8002598:	f000 fecc 	bl	8003334 <HAL_GPIO_ReadPin>
 800259c:	4603      	mov	r3, r0
 800259e:	60fb      	str	r3, [r7, #12]

	if((button->prevState == RELEASED) && (curState == PUSHED)){
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d107      	bne.n	80025b8 <button_getState+0x34>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d104      	bne.n	80025b8 <button_getState+0x34>
		//HAL_Delay(50);
		button->prevState = PUSHED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	609a      	str	r2, [r3, #8]
		return ACT_PUSHED;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e00c      	b.n	80025d2 <button_getState+0x4e>
	}
	else 	if((button->prevState == PUSHED) && (curState == RELEASED)){
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d107      	bne.n	80025d0 <button_getState+0x4c>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d104      	bne.n	80025d0 <button_getState+0x4c>
		//HAL_Delay(50);
		button->prevState = RELEASED;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	609a      	str	r2, [r3, #8]
		return ACT_RELEASED;
 80025cc:	2304      	movs	r3, #4
 80025ce:	e000      	b.n	80025d2 <button_getState+0x4e>
	}
	return NO_ACT;
 80025d0:	2302      	movs	r3, #2
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <LCD_delay>:
#include "LCD.h"

I2C_HandleTypeDef *hLCDI2C;
uint8_t lcdData = 0;

void LCD_delay(uint32_t Delay){
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
	HAL_Delay(Delay);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 fb8a 	bl	8002cfc <HAL_Delay>
}
 80025e8:	bf00      	nop
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <LCD_init>:

void LCD_init(I2C_HandleTypeDef *hi2c1){
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	hLCDI2C = hi2c1;
 80025f8:	4a18      	ldr	r2, [pc, #96]	; (800265c <LCD_init+0x6c>)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6013      	str	r3, [r2, #0]
	LCD_delay(15);
 80025fe:	200f      	movs	r0, #15
 8002600:	f7ff ffeb 	bl	80025da <LCD_delay>
	LCD_cmdMode();
 8002604:	f000 f83e 	bl	8002684 <LCD_cmdMode>
	LCD_writeMode();
 8002608:	f000 f85c 	bl	80026c4 <LCD_writeMode>
	LCD_sendHighNibble(0x30);
 800260c:	2030      	movs	r0, #48	; 0x30
 800260e:	f000 f8b1 	bl	8002774 <LCD_sendHighNibble>
	LCD_delay(5);
 8002612:	2005      	movs	r0, #5
 8002614:	f7ff ffe1 	bl	80025da <LCD_delay>
	LCD_sendHighNibble(0x30);
 8002618:	2030      	movs	r0, #48	; 0x30
 800261a:	f000 f8ab 	bl	8002774 <LCD_sendHighNibble>
	LCD_delay(1);
 800261e:	2001      	movs	r0, #1
 8002620:	f7ff ffdb 	bl	80025da <LCD_delay>
	LCD_sendHighNibble(0x30);
 8002624:	2030      	movs	r0, #48	; 0x30
 8002626:	f000 f8a5 	bl	8002774 <LCD_sendHighNibble>
	LCD_sendHighNibble(0x20);
 800262a:	2020      	movs	r0, #32
 800262c:	f000 f8a2 	bl	8002774 <LCD_sendHighNibble>
	LCD_sendByte(LCD_4BIT_FUNCTION_SET);	//Function Set: 4Bit Interface, 2Line, 5x8 Font
 8002630:	2028      	movs	r0, #40	; 0x28
 8002632:	f000 f88d 	bl	8002750 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_OFF); 				//Display Off
 8002636:	2008      	movs	r0, #8
 8002638:	f000 f88a 	bl	8002750 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_CLEAR);			//Display Clear
 800263c:	2001      	movs	r0, #1
 800263e:	f000 f887 	bl	8002750 <LCD_sendByte>
	LCD_sendByte(LCD_ENTRY_MODE_SET);			//Entry Mode Set
 8002642:	2006      	movs	r0, #6
 8002644:	f000 f884 	bl	8002750 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_ON);					//Display On
 8002648:	200c      	movs	r0, #12
 800264a:	f000 f881 	bl	8002750 <LCD_sendByte>
	LCD_backLightOn();										//backLightOn
 800264e:	f000 f807 	bl	8002660 <LCD_backLightOn>
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	2000072c 	.word	0x2000072c

08002660 <LCD_backLightOn>:

void LCD_backLightOn(){
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
	lcdData |=(1<<LCD_BACKLIGHT);
 8002664:	4b06      	ldr	r3, [pc, #24]	; (8002680 <LCD_backLightOn+0x20>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	f043 0308 	orr.w	r3, r3, #8
 800266c:	b2da      	uxtb	r2, r3
 800266e:	4b04      	ldr	r3, [pc, #16]	; (8002680 <LCD_backLightOn+0x20>)
 8002670:	701a      	strb	r2, [r3, #0]
	LCD_sendData(lcdData);
 8002672:	4b03      	ldr	r3, [pc, #12]	; (8002680 <LCD_backLightOn+0x20>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f000 f854 	bl	8002724 <LCD_sendData>
}
 800267c:	bf00      	nop
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20000730 	.word	0x20000730

08002684 <LCD_cmdMode>:

void LCD_cmdMode() {
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RS);
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <LCD_cmdMode+0x1c>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	f023 0301 	bic.w	r3, r3, #1
 8002690:	b2da      	uxtb	r2, r3
 8002692:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <LCD_cmdMode+0x1c>)
 8002694:	701a      	strb	r2, [r3, #0]
}
 8002696:	bf00      	nop
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	20000730 	.word	0x20000730

080026a4 <LCD_charMode>:
void LCD_charMode() {
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_RS);
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <LCD_charMode+0x1c>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	4b03      	ldr	r3, [pc, #12]	; (80026c0 <LCD_charMode+0x1c>)
 80026b4:	701a      	strb	r2, [r3, #0]
}
 80026b6:	bf00      	nop
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	20000730 	.word	0x20000730

080026c4 <LCD_writeMode>:
void LCD_writeMode() {
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RW);
 80026c8:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <LCD_writeMode+0x1c>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	f023 0302 	bic.w	r3, r3, #2
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <LCD_writeMode+0x1c>)
 80026d4:	701a      	strb	r2, [r3, #0]
}
 80026d6:	bf00      	nop
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	20000730 	.word	0x20000730

080026e4 <LCD_E_High>:

void LCD_E_High() {
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_E);
 80026e8:	4b05      	ldr	r3, [pc, #20]	; (8002700 <LCD_E_High+0x1c>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	f043 0304 	orr.w	r3, r3, #4
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	4b03      	ldr	r3, [pc, #12]	; (8002700 <LCD_E_High+0x1c>)
 80026f4:	701a      	strb	r2, [r3, #0]
}
 80026f6:	bf00      	nop
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	20000730 	.word	0x20000730

08002704 <LCD_E_Low>:
void LCD_E_Low() {
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_E);
 8002708:	4b05      	ldr	r3, [pc, #20]	; (8002720 <LCD_E_Low+0x1c>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	f023 0304 	bic.w	r3, r3, #4
 8002710:	b2da      	uxtb	r2, r3
 8002712:	4b03      	ldr	r3, [pc, #12]	; (8002720 <LCD_E_Low+0x1c>)
 8002714:	701a      	strb	r2, [r3, #0]
}
 8002716:	bf00      	nop
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	20000730 	.word	0x20000730

08002724 <LCD_sendData>:

void LCD_sendData(uint8_t data) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af02      	add	r7, sp, #8
 800272a:	4603      	mov	r3, r0
 800272c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hLCDI2C, lcdDevAddr_w, &data, 1, 1000);
 800272e:	4b07      	ldr	r3, [pc, #28]	; (800274c <LCD_sendData+0x28>)
 8002730:	6818      	ldr	r0, [r3, #0]
 8002732:	1dfa      	adds	r2, r7, #7
 8002734:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	2301      	movs	r3, #1
 800273c:	214e      	movs	r1, #78	; 0x4e
 800273e:	f000 ffa1 	bl	8003684 <HAL_I2C_Master_Transmit>
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	2000072c 	.word	0x2000072c

08002750 <LCD_sendByte>:

void LCD_sendByte(uint8_t data) {
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	71fb      	strb	r3, [r7, #7]
	LCD_sendHighNibble(data); //상위 4bit 전송
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	4618      	mov	r0, r3
 800275e:	f000 f809 	bl	8002774 <LCD_sendHighNibble>
	LCD_sendLowNibble(data); //하위 4bit 전송
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	4618      	mov	r0, r3
 8002766:	f000 f835 	bl	80027d4 <LCD_sendLowNibble>
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <LCD_sendHighNibble>:

void LCD_sendHighNibble(uint8_t data) {
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	71fb      	strb	r3, [r7, #7]
	LCD_E_High();
 800277e:	f7ff ffb1 	bl	80026e4 <LCD_E_High>
	lcdData = (lcdData & 0x0f) | (data & 0xf0);	//상위 4bit data
 8002782:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <LCD_sendHighNibble+0x5c>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	b25b      	sxtb	r3, r3
 8002788:	f003 030f 	and.w	r3, r3, #15
 800278c:	b25a      	sxtb	r2, r3
 800278e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002792:	f023 030f 	bic.w	r3, r3, #15
 8002796:	b25b      	sxtb	r3, r3
 8002798:	4313      	orrs	r3, r2
 800279a:	b25b      	sxtb	r3, r3
 800279c:	b2da      	uxtb	r2, r3
 800279e:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <LCD_sendHighNibble+0x5c>)
 80027a0:	701a      	strb	r2, [r3, #0]
	LCD_sendData(lcdData); //MCU send to LCD
 80027a2:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <LCD_sendHighNibble+0x5c>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff ffbc 	bl	8002724 <LCD_sendData>
	HAL_Delay(1);
 80027ac:	2001      	movs	r0, #1
 80027ae:	f000 faa5 	bl	8002cfc <HAL_Delay>
	LCD_E_Low();
 80027b2:	f7ff ffa7 	bl	8002704 <LCD_E_Low>
	LCD_sendData(lcdData); //MCU send to LCD
 80027b6:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <LCD_sendHighNibble+0x5c>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff ffb2 	bl	8002724 <LCD_sendData>
	HAL_Delay(1);
 80027c0:	2001      	movs	r0, #1
 80027c2:	f000 fa9b 	bl	8002cfc <HAL_Delay>
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000730 	.word	0x20000730

080027d4 <LCD_sendLowNibble>:

void LCD_sendLowNibble(uint8_t data) {
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	71fb      	strb	r3, [r7, #7]
	LCD_E_High();
 80027de:	f7ff ff81 	bl	80026e4 <LCD_E_High>
	lcdData = (lcdData & 0x0f) | ((data & 0x0f)<<4);	//하위 4bit data
 80027e2:	4b12      	ldr	r3, [pc, #72]	; (800282c <LCD_sendLowNibble+0x58>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	b25b      	sxtb	r3, r3
 80027e8:	f003 030f 	and.w	r3, r3, #15
 80027ec:	b25a      	sxtb	r2, r3
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	b25b      	sxtb	r3, r3
 80027f4:	4313      	orrs	r3, r2
 80027f6:	b25b      	sxtb	r3, r3
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	4b0c      	ldr	r3, [pc, #48]	; (800282c <LCD_sendLowNibble+0x58>)
 80027fc:	701a      	strb	r2, [r3, #0]
	LCD_sendData(lcdData); //MCU send to LCD
 80027fe:	4b0b      	ldr	r3, [pc, #44]	; (800282c <LCD_sendLowNibble+0x58>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff ff8e 	bl	8002724 <LCD_sendData>
	HAL_Delay(1);
 8002808:	2001      	movs	r0, #1
 800280a:	f000 fa77 	bl	8002cfc <HAL_Delay>
	LCD_E_Low();
 800280e:	f7ff ff79 	bl	8002704 <LCD_E_Low>
	LCD_sendData(lcdData); //MCU send to LCD
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <LCD_sendLowNibble+0x58>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff ff84 	bl	8002724 <LCD_sendData>
	HAL_Delay(1);
 800281c:	2001      	movs	r0, #1
 800281e:	f000 fa6d 	bl	8002cfc <HAL_Delay>
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000730 	.word	0x20000730

08002830 <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data) {
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	71fb      	strb	r3, [r7, #7]
	LCD_cmdMode();
 800283a:	f7ff ff23 	bl	8002684 <LCD_cmdMode>
	LCD_writeMode();
 800283e:	f7ff ff41 	bl	80026c4 <LCD_writeMode>
	LCD_sendByte(data);
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff83 	bl	8002750 <LCD_sendByte>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data) {
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	4603      	mov	r3, r0
 800285a:	71fb      	strb	r3, [r7, #7]
	LCD_charMode();
 800285c:	f7ff ff22 	bl	80026a4 <LCD_charMode>
	LCD_writeMode();
 8002860:	f7ff ff30 	bl	80026c4 <LCD_writeMode>
	LCD_sendByte(data);
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff ff72 	bl	8002750 <LCD_sendByte>
}
 800286c:	bf00      	nop
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col){
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	460a      	mov	r2, r1
 800287e:	71fb      	strb	r3, [r7, #7]
 8002880:	4613      	mov	r3, r2
 8002882:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 8002884:	79bb      	ldrb	r3, [r7, #6]
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	71bb      	strb	r3, [r7, #6]
	row %=2;
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = (0x40 * row) +col;
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	019b      	lsls	r3, r3, #6
 8002898:	b2da      	uxtb	r2, r3
 800289a:	79bb      	ldrb	r3, [r7, #6]
 800289c:	4413      	add	r3, r2
 800289e:	73fb      	strb	r3, [r7, #15]
	uint8_t command = 0x80 + lcdRegAddr;
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	3b80      	subs	r3, #128	; 0x80
 80028a4:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 80028a6:	7bbb      	ldrb	r3, [r7, #14]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff ffc1 	bl	8002830 <LCD_writeCmdData>
}
 80028ae:	bf00      	nop
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <LCD_writeString>:

void LCD_writeString(char *str){
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b084      	sub	sp, #16
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
	for(int i=0; str[i]; i++){ //str[i] == 0 for문 탈출
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	e009      	b.n	80028d8 <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	4413      	add	r3, r2
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff ffc0 	bl	8002852 <LCD_writeCharData>
	for(int i=0; str[i]; i++){ //str[i] == 0 for문 탈출
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	3301      	adds	r3, #1
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	4413      	add	r3, r2
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1ef      	bne.n	80028c4 <LCD_writeString+0xe>
	}
}
 80028e4:	bf00      	nop
 80028e6:	bf00      	nop
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col,char *str){
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	4603      	mov	r3, r0
 80028f6:	603a      	str	r2, [r7, #0]
 80028f8:	71fb      	strb	r3, [r7, #7]
 80028fa:	460b      	mov	r3, r1
 80028fc:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 80028fe:	79ba      	ldrb	r2, [r7, #6]
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ffb5 	bl	8002874 <LCD_gotoXY>
	LCD_writeString(str);
 800290a:	6838      	ldr	r0, [r7, #0]
 800290c:	f7ff ffd3 	bl	80028b6 <LCD_writeString>
}
 8002910:	bf00      	nop
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <Motor_init>:
#include "Motor.h"


void Motor_init(Motor_t *Motor, TIM_HandleTypeDef *htim, uint32_t Channel,
		GPIO_TypeDef *dir1_GPIO, uint16_t dir1_GPIO_Pin, GPIO_TypeDef *dir2_GPIO,
		uint16_t dir2_GPIO_Pin) {
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
 8002924:	603b      	str	r3, [r7, #0]
	Motor-> htim = htim;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	601a      	str	r2, [r3, #0]
	Motor-> Channel = Channel;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	605a      	str	r2, [r3, #4]
	Motor-> dir1_GPIO = dir1_GPIO;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	609a      	str	r2, [r3, #8]
	Motor-> dir1_GPIO_Pin = dir1_GPIO_Pin;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8b3a      	ldrh	r2, [r7, #24]
 800293c:	819a      	strh	r2, [r3, #12]
	Motor-> dir2_GPIO = dir2_GPIO;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	69fa      	ldr	r2, [r7, #28]
 8002942:	611a      	str	r2, [r3, #16]
	Motor-> dir2_GPIO_Pin = dir2_GPIO_Pin;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8c3a      	ldrh	r2, [r7, #32]
 8002948:	829a      	strh	r2, [r3, #20]
}
 800294a:	bf00      	nop
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <Motor_stop>:

void Motor_stop(Motor_t *Motor) {
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(Motor->htim, Motor->Channel);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	4619      	mov	r1, r3
 8002968:	4610      	mov	r0, r2
 800296a:	f002 f8ed 	bl	8004b48 <HAL_TIM_PWM_Stop>
}
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <Motor_forward>:

void Motor_forward(Motor_t *Motor) {
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Motor->dir1_GPIO, Motor->dir1_GPIO_Pin, SET);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6898      	ldr	r0, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	899b      	ldrh	r3, [r3, #12]
 8002986:	2201      	movs	r2, #1
 8002988:	4619      	mov	r1, r3
 800298a:	f000 fceb 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor->dir2_GPIO, Motor->dir2_GPIO_Pin, RESET);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6918      	ldr	r0, [r3, #16]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	8a9b      	ldrh	r3, [r3, #20]
 8002996:	2200      	movs	r2, #0
 8002998:	4619      	mov	r1, r3
 800299a:	f000 fce3 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(Motor->htim, Motor->Channel);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	4619      	mov	r1, r3
 80029a8:	4610      	mov	r0, r2
 80029aa:	f002 f81d 	bl	80049e8 <HAL_TIM_PWM_Start>
}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <Motor_backward>:
void Motor_backward(Motor_t *Motor) {
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Motor->dir1_GPIO, Motor->dir1_GPIO_Pin, RESET);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6898      	ldr	r0, [r3, #8]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	899b      	ldrh	r3, [r3, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	4619      	mov	r1, r3
 80029ca:	f000 fccb 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor->dir2_GPIO, Motor->dir2_GPIO_Pin, SET);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6918      	ldr	r0, [r3, #16]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	8a9b      	ldrh	r3, [r3, #20]
 80029d6:	2201      	movs	r2, #1
 80029d8:	4619      	mov	r1, r3
 80029da:	f000 fcc3 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(Motor->htim, Motor->Channel);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	4619      	mov	r1, r3
 80029e8:	4610      	mov	r0, r2
 80029ea:	f001 fffd 	bl	80049e8 <HAL_TIM_PWM_Start>

}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <Motor_setSpeed>:
void Motor_setSpeed(Motor_t *Motor,int speedVal) {
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, speedVal);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d105      	bne.n	8002a14 <Motor_setSpeed+0x1e>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002a12:	e018      	b.n	8002a46 <Motor_setSpeed+0x50>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, speedVal);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d105      	bne.n	8002a28 <Motor_setSpeed+0x32>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002a26:	e00e      	b.n	8002a46 <Motor_setSpeed+0x50>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, speedVal);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d105      	bne.n	8002a3c <Motor_setSpeed+0x46>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002a3a:	e004      	b.n	8002a46 <Motor_setSpeed+0x50>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, speedVal);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <UltraSonic_init>:
#include "../Common/Delayus/delayus.h"

//Trig Port, Trig Pin, Echo Port, Echo Pin, Timer, Flag
void UltraSonic_init(ultraSonic_t *ultraSonic, TIM_HandleTypeDef *hTim,
		GPIO_TypeDef *GPIO_Trig, uint16_t GPIO_TrigPin, GPIO_TypeDef *GPIO_Echo,
		uint16_t GPIO_EchoPin) {
 8002a52:	b480      	push	{r7}
 8002a54:	b085      	sub	sp, #20
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	607a      	str	r2, [r7, #4]
 8002a5e:	807b      	strh	r3, [r7, #2]
	ultraSonic->hTim = hTim;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	601a      	str	r2, [r3, #0]
	ultraSonic->GPIO_Trig = GPIO_Trig;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	605a      	str	r2, [r3, #4]
	ultraSonic->GPIO_TrigPin = GPIO_TrigPin;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	887a      	ldrh	r2, [r7, #2]
 8002a70:	811a      	strh	r2, [r3, #8]
	ultraSonic->GPIO_Echo = GPIO_Echo;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	60da      	str	r2, [r3, #12]
	ultraSonic->GPIO_EchoPin = GPIO_EchoPin;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8bba      	ldrh	r2, [r7, #28]
 8002a7c:	821a      	strh	r2, [r3, #16]
	ultraSonic->timCounter = 0;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	825a      	strh	r2, [r3, #18]
	ultraSonic->echoFlag = 0;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	615a      	str	r2, [r3, #20]
}
 8002a8a:	bf00      	nop
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <UltraSonic_isCmpltRecvEcho>:

int UltraSonic_isCmpltRecvEcho(ultraSonic_t *ultraSonic) {
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
	return ultraSonic->echoFlag;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	695b      	ldr	r3, [r3, #20]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <UltraSonic_clearEchoFlag>:
void UltraSonic_clearEchoFlag(ultraSonic_t *ultraSonic) {
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
	ultraSonic->echoFlag = 0;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	615a      	str	r2, [r3, #20]
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <UltraSonic_setEchoFlag>:
void UltraSonic_setEchoFlag(ultraSonic_t *ultraSonic) {
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
	ultraSonic->echoFlag = 1;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	615a      	str	r2, [r3, #20]
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <UltraSonic_getEchopinState>:
int UltraSonic_getEchopinState(ultraSonic_t *ultraSonic) {
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b082      	sub	sp, #8
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(ultraSonic->GPIO_Echo, ultraSonic->GPIO_EchoPin);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	8a1b      	ldrh	r3, [r3, #16]
 8002af2:	4619      	mov	r1, r3
 8002af4:	4610      	mov	r0, r2
 8002af6:	f000 fc1d 	bl	8003334 <HAL_GPIO_ReadPin>
 8002afa:	4603      	mov	r3, r0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <UltraSonic_clearTimer>:
void UltraSonic_clearTimer(ultraSonic_t *ultraSonic) {
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(ultraSonic->hTim, 0);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2200      	movs	r2, #0
 8002b14:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <UltraSonic_startTimer>:
void UltraSonic_startTimer(ultraSonic_t *ultraSonic) {
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(ultraSonic->hTim);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f001 fe1c 	bl	800476c <HAL_TIM_Base_Start>
}
 8002b34:	bf00      	nop
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <UltraSonic_stopTimer>:
void UltraSonic_stopTimer(ultraSonic_t *ultraSonic) {
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop(ultraSonic->hTim);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f001 fe69 	bl	8004820 <HAL_TIM_Base_Stop>
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <UltraSonic_getTimerCounter>:
uint16_t UltraSonic_getTimerCounter(ultraSonic_t *ultraSonic) {
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
	return __HAL_TIM_GET_COUNTER(ultraSonic->hTim);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	b29b      	uxth	r3, r3
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <UltraSonic_startTrig>:

void UltraSonic_startTrig(ultraSonic_t *ultraSonic) {
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ultraSonic->GPIO_Trig, ultraSonic->GPIO_TrigPin, SET);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6858      	ldr	r0, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	891b      	ldrh	r3, [r3, #8]
 8002b84:	2201      	movs	r2, #1
 8002b86:	4619      	mov	r1, r3
 8002b88:	f000 fbec 	bl	8003364 <HAL_GPIO_WritePin>
	DelayUS(15);
 8002b8c:	200f      	movs	r0, #15
 8002b8e:	f7fe f82d 	bl	8000bec <DelayUS>
	HAL_GPIO_WritePin(ultraSonic->GPIO_Trig, ultraSonic->GPIO_TrigPin, RESET);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6858      	ldr	r0, [r3, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	891b      	ldrh	r3, [r3, #8]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	f000 fbe1 	bl	8003364 <HAL_GPIO_WritePin>
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <UltraSonic_ISR_Process>:

void UltraSonic_ISR_Process(ultraSonic_t *ultraSonic, uint16_t GPIO_Pin) {
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b082      	sub	sp, #8
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	807b      	strh	r3, [r7, #2]
	if (GPIO_Pin == ultraSonic->GPIO_EchoPin) {
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	8a1b      	ldrh	r3, [r3, #16]
 8002bba:	887a      	ldrh	r2, [r7, #2]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d11c      	bne.n	8002bfa <UltraSonic_ISR_Process+0x50>
		// Echo Pin High 유지 시간 측정
		if (UltraSonic_getEchopinState(ultraSonic)) { 	//Rising Edge
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7ff ff8e 	bl	8002ae2 <UltraSonic_getEchopinState>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d009      	beq.n	8002be0 <UltraSonic_ISR_Process+0x36>
			UltraSonic_clearTimer(ultraSonic);					//CNT 0 Setting
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f7ff ff99 	bl	8002b04 <UltraSonic_clearTimer>
			UltraSonic_startTimer(ultraSonic);					//Timer Start
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7ff ffa5 	bl	8002b22 <UltraSonic_startTimer>
			UltraSonic_clearEchoFlag(ultraSonic);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff ff68 	bl	8002aae <UltraSonic_clearEchoFlag>
			UltraSonic_stopTimer(ultraSonic);
			ultraSonic->timCounter = UltraSonic_getTimerCounter(ultraSonic);
			UltraSonic_setEchoFlag(ultraSonic);
		}
	}
}
 8002bde:	e00c      	b.n	8002bfa <UltraSonic_ISR_Process+0x50>
			UltraSonic_stopTimer(ultraSonic);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff ffab 	bl	8002b3c <UltraSonic_stopTimer>
			ultraSonic->timCounter = UltraSonic_getTimerCounter(ultraSonic);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff ffb5 	bl	8002b56 <UltraSonic_getTimerCounter>
 8002bec:	4603      	mov	r3, r0
 8002bee:	461a      	mov	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	825a      	strh	r2, [r3, #18]
			UltraSonic_setEchoFlag(ultraSonic);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff ff67 	bl	8002ac8 <UltraSonic_setEchoFlag>
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	0000      	movs	r0, r0
 8002c04:	0000      	movs	r0, r0
	...

08002c08 <UltraSonic_getDistance>:

int UltraSonic_getDistance(ultraSonic_t *ultraSonic) {
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
	int timeout = 0;
 8002c10:	2300      	movs	r3, #0
 8002c12:	60fb      	str	r3, [r7, #12]
	UltraSonic_startTrig(ultraSonic);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7ff ffad 	bl	8002b74 <UltraSonic_startTrig>
	while (!UltraSonic_isCmpltRecvEcho(ultraSonic)) {
 8002c1a:	e00a      	b.n	8002c32 <UltraSonic_getDistance+0x2a>
		timeout++;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	60fb      	str	r3, [r7, #12]
		if (timeout > 20) return 0;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2b14      	cmp	r3, #20
 8002c26:	dd01      	ble.n	8002c2c <UltraSonic_getDistance+0x24>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	e01c      	b.n	8002c66 <UltraSonic_getDistance+0x5e>
		HAL_Delay(1);
 8002c2c:	2001      	movs	r0, #1
 8002c2e:	f000 f865 	bl	8002cfc <HAL_Delay>
	while (!UltraSonic_isCmpltRecvEcho(ultraSonic)) {
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff ff2f 	bl	8002a96 <UltraSonic_isCmpltRecvEcho>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0ee      	beq.n	8002c1c <UltraSonic_getDistance+0x14>
	}
	UltraSonic_clearEchoFlag(ultraSonic);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff ff35 	bl	8002aae <UltraSonic_clearEchoFlag>
	return ultraSonic->timCounter * 0.017;	//cm Distance
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	8a5b      	ldrh	r3, [r3, #18]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7fd fd95 	bl	8000778 <__aeabi_i2d>
 8002c4e:	a308      	add	r3, pc, #32	; (adr r3, 8002c70 <UltraSonic_getDistance+0x68>)
 8002c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c54:	f7fd fb14 	bl	8000280 <__aeabi_dmul>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	4619      	mov	r1, r3
 8002c60:	f7fd fdf4 	bl	800084c <__aeabi_d2iz>
 8002c64:	4603      	mov	r3, r0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	b020c49c 	.word	0xb020c49c
 8002c74:	3f916872 	.word	0x3f916872

08002c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c7c:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <HAL_Init+0x40>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a0d      	ldr	r2, [pc, #52]	; (8002cb8 <HAL_Init+0x40>)
 8002c82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_Init+0x40>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a0a      	ldr	r2, [pc, #40]	; (8002cb8 <HAL_Init+0x40>)
 8002c8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c94:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <HAL_Init+0x40>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a07      	ldr	r2, [pc, #28]	; (8002cb8 <HAL_Init+0x40>)
 8002c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ca0:	2003      	movs	r0, #3
 8002ca2:	f000 f8fc 	bl	8002e9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ca6:	200f      	movs	r0, #15
 8002ca8:	f7fe fea8 	bl	80019fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cac:	f7fe fce4 	bl	8001678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40023c00 	.word	0x40023c00

08002cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cc0:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <HAL_IncTick+0x20>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <HAL_IncTick+0x24>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4413      	add	r3, r2
 8002ccc:	4a04      	ldr	r2, [pc, #16]	; (8002ce0 <HAL_IncTick+0x24>)
 8002cce:	6013      	str	r3, [r2, #0]
}
 8002cd0:	bf00      	nop
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	20000008 	.word	0x20000008
 8002ce0:	20000734 	.word	0x20000734

08002ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ce8:	4b03      	ldr	r3, [pc, #12]	; (8002cf8 <HAL_GetTick+0x14>)
 8002cea:	681b      	ldr	r3, [r3, #0]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	20000734 	.word	0x20000734

08002cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d04:	f7ff ffee 	bl	8002ce4 <HAL_GetTick>
 8002d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d14:	d005      	beq.n	8002d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d16:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <HAL_Delay+0x44>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4413      	add	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d22:	bf00      	nop
 8002d24:	f7ff ffde 	bl	8002ce4 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d8f7      	bhi.n	8002d24 <HAL_Delay+0x28>
  {
  }
}
 8002d34:	bf00      	nop
 8002d36:	bf00      	nop
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000008 	.word	0x20000008

08002d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d54:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <__NVIC_SetPriorityGrouping+0x44>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d60:	4013      	ands	r3, r2
 8002d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d76:	4a04      	ldr	r2, [pc, #16]	; (8002d88 <__NVIC_SetPriorityGrouping+0x44>)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	60d3      	str	r3, [r2, #12]
}
 8002d7c:	bf00      	nop
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d90:	4b04      	ldr	r3, [pc, #16]	; (8002da4 <__NVIC_GetPriorityGrouping+0x18>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	0a1b      	lsrs	r3, r3, #8
 8002d96:	f003 0307 	and.w	r3, r3, #7
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	db0b      	blt.n	8002dd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	f003 021f 	and.w	r2, r3, #31
 8002dc0:	4907      	ldr	r1, [pc, #28]	; (8002de0 <__NVIC_EnableIRQ+0x38>)
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	2001      	movs	r0, #1
 8002dca:	fa00 f202 	lsl.w	r2, r0, r2
 8002dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	e000e100 	.word	0xe000e100

08002de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	6039      	str	r1, [r7, #0]
 8002dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	db0a      	blt.n	8002e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	490c      	ldr	r1, [pc, #48]	; (8002e30 <__NVIC_SetPriority+0x4c>)
 8002dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e02:	0112      	lsls	r2, r2, #4
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	440b      	add	r3, r1
 8002e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e0c:	e00a      	b.n	8002e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	4908      	ldr	r1, [pc, #32]	; (8002e34 <__NVIC_SetPriority+0x50>)
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	3b04      	subs	r3, #4
 8002e1c:	0112      	lsls	r2, r2, #4
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	440b      	add	r3, r1
 8002e22:	761a      	strb	r2, [r3, #24]
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	e000e100 	.word	0xe000e100
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b089      	sub	sp, #36	; 0x24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f1c3 0307 	rsb	r3, r3, #7
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	bf28      	it	cs
 8002e56:	2304      	movcs	r3, #4
 8002e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	2b06      	cmp	r3, #6
 8002e60:	d902      	bls.n	8002e68 <NVIC_EncodePriority+0x30>
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3b03      	subs	r3, #3
 8002e66:	e000      	b.n	8002e6a <NVIC_EncodePriority+0x32>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43da      	mvns	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e80:	f04f 31ff 	mov.w	r1, #4294967295
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8a:	43d9      	mvns	r1, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e90:	4313      	orrs	r3, r2
         );
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3724      	adds	r7, #36	; 0x24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b082      	sub	sp, #8
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff ff4c 	bl	8002d44 <__NVIC_SetPriorityGrouping>
}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
 8002ec0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ec6:	f7ff ff61 	bl	8002d8c <__NVIC_GetPriorityGrouping>
 8002eca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	68b9      	ldr	r1, [r7, #8]
 8002ed0:	6978      	ldr	r0, [r7, #20]
 8002ed2:	f7ff ffb1 	bl	8002e38 <NVIC_EncodePriority>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002edc:	4611      	mov	r1, r2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff ff80 	bl	8002de4 <__NVIC_SetPriority>
}
 8002ee4:	bf00      	nop
 8002ee6:	3718      	adds	r7, #24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff ff54 	bl	8002da8 <__NVIC_EnableIRQ>
}
 8002f00:	bf00      	nop
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f14:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f16:	f7ff fee5 	bl	8002ce4 <HAL_GetTick>
 8002f1a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d008      	beq.n	8002f3a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2280      	movs	r2, #128	; 0x80
 8002f2c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e052      	b.n	8002fe0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0216 	bic.w	r2, r2, #22
 8002f48:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695a      	ldr	r2, [r3, #20]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f58:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d103      	bne.n	8002f6a <HAL_DMA_Abort+0x62>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d007      	beq.n	8002f7a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0208 	bic.w	r2, r2, #8
 8002f78:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0201 	bic.w	r2, r2, #1
 8002f88:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f8a:	e013      	b.n	8002fb4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f8c:	f7ff feaa 	bl	8002ce4 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b05      	cmp	r3, #5
 8002f98:	d90c      	bls.n	8002fb4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2203      	movs	r2, #3
 8002fa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e015      	b.n	8002fe0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1e4      	bne.n	8002f8c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc6:	223f      	movs	r2, #63	; 0x3f
 8002fc8:	409a      	lsls	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d004      	beq.n	8003006 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2280      	movs	r2, #128	; 0x80
 8003000:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e00c      	b.n	8003020 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2205      	movs	r2, #5
 800300a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0201 	bic.w	r2, r2, #1
 800301c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800302c:	b480      	push	{r7}
 800302e:	b089      	sub	sp, #36	; 0x24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003036:	2300      	movs	r3, #0
 8003038:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800303a:	2300      	movs	r3, #0
 800303c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800303e:	2300      	movs	r3, #0
 8003040:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003042:	2300      	movs	r3, #0
 8003044:	61fb      	str	r3, [r7, #28]
 8003046:	e159      	b.n	80032fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003048:	2201      	movs	r2, #1
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	4013      	ands	r3, r2
 800305a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	429a      	cmp	r2, r3
 8003062:	f040 8148 	bne.w	80032f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	2b01      	cmp	r3, #1
 8003070:	d005      	beq.n	800307e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800307a:	2b02      	cmp	r3, #2
 800307c:	d130      	bne.n	80030e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	2203      	movs	r2, #3
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43db      	mvns	r3, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4013      	ands	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030b4:	2201      	movs	r2, #1
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	43db      	mvns	r3, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	091b      	lsrs	r3, r3, #4
 80030ca:	f003 0201 	and.w	r2, r3, #1
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 0303 	and.w	r3, r3, #3
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	d017      	beq.n	800311c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	2203      	movs	r2, #3
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4013      	ands	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4313      	orrs	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d123      	bne.n	8003170 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	08da      	lsrs	r2, r3, #3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3208      	adds	r2, #8
 8003130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003134:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	220f      	movs	r2, #15
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43db      	mvns	r3, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4013      	ands	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4313      	orrs	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	08da      	lsrs	r2, r3, #3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	3208      	adds	r2, #8
 800316a:	69b9      	ldr	r1, [r7, #24]
 800316c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	2203      	movs	r2, #3
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43db      	mvns	r3, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f003 0203 	and.w	r2, r3, #3
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4313      	orrs	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 80a2 	beq.w	80032f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031b2:	2300      	movs	r3, #0
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	4b57      	ldr	r3, [pc, #348]	; (8003314 <HAL_GPIO_Init+0x2e8>)
 80031b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ba:	4a56      	ldr	r2, [pc, #344]	; (8003314 <HAL_GPIO_Init+0x2e8>)
 80031bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031c0:	6453      	str	r3, [r2, #68]	; 0x44
 80031c2:	4b54      	ldr	r3, [pc, #336]	; (8003314 <HAL_GPIO_Init+0x2e8>)
 80031c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031ce:	4a52      	ldr	r2, [pc, #328]	; (8003318 <HAL_GPIO_Init+0x2ec>)
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	089b      	lsrs	r3, r3, #2
 80031d4:	3302      	adds	r3, #2
 80031d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	220f      	movs	r2, #15
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	43db      	mvns	r3, r3
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	4013      	ands	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a49      	ldr	r2, [pc, #292]	; (800331c <HAL_GPIO_Init+0x2f0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d019      	beq.n	800322e <HAL_GPIO_Init+0x202>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a48      	ldr	r2, [pc, #288]	; (8003320 <HAL_GPIO_Init+0x2f4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d013      	beq.n	800322a <HAL_GPIO_Init+0x1fe>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a47      	ldr	r2, [pc, #284]	; (8003324 <HAL_GPIO_Init+0x2f8>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00d      	beq.n	8003226 <HAL_GPIO_Init+0x1fa>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a46      	ldr	r2, [pc, #280]	; (8003328 <HAL_GPIO_Init+0x2fc>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d007      	beq.n	8003222 <HAL_GPIO_Init+0x1f6>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a45      	ldr	r2, [pc, #276]	; (800332c <HAL_GPIO_Init+0x300>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d101      	bne.n	800321e <HAL_GPIO_Init+0x1f2>
 800321a:	2304      	movs	r3, #4
 800321c:	e008      	b.n	8003230 <HAL_GPIO_Init+0x204>
 800321e:	2307      	movs	r3, #7
 8003220:	e006      	b.n	8003230 <HAL_GPIO_Init+0x204>
 8003222:	2303      	movs	r3, #3
 8003224:	e004      	b.n	8003230 <HAL_GPIO_Init+0x204>
 8003226:	2302      	movs	r3, #2
 8003228:	e002      	b.n	8003230 <HAL_GPIO_Init+0x204>
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <HAL_GPIO_Init+0x204>
 800322e:	2300      	movs	r3, #0
 8003230:	69fa      	ldr	r2, [r7, #28]
 8003232:	f002 0203 	and.w	r2, r2, #3
 8003236:	0092      	lsls	r2, r2, #2
 8003238:	4093      	lsls	r3, r2
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4313      	orrs	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003240:	4935      	ldr	r1, [pc, #212]	; (8003318 <HAL_GPIO_Init+0x2ec>)
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	089b      	lsrs	r3, r3, #2
 8003246:	3302      	adds	r3, #2
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800324e:	4b38      	ldr	r3, [pc, #224]	; (8003330 <HAL_GPIO_Init+0x304>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	43db      	mvns	r3, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4013      	ands	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003272:	4a2f      	ldr	r2, [pc, #188]	; (8003330 <HAL_GPIO_Init+0x304>)
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003278:	4b2d      	ldr	r3, [pc, #180]	; (8003330 <HAL_GPIO_Init+0x304>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	4313      	orrs	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800329c:	4a24      	ldr	r2, [pc, #144]	; (8003330 <HAL_GPIO_Init+0x304>)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032a2:	4b23      	ldr	r3, [pc, #140]	; (8003330 <HAL_GPIO_Init+0x304>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	43db      	mvns	r3, r3
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	4013      	ands	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032c6:	4a1a      	ldr	r2, [pc, #104]	; (8003330 <HAL_GPIO_Init+0x304>)
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032cc:	4b18      	ldr	r3, [pc, #96]	; (8003330 <HAL_GPIO_Init+0x304>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	43db      	mvns	r3, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4013      	ands	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032f0:	4a0f      	ldr	r2, [pc, #60]	; (8003330 <HAL_GPIO_Init+0x304>)
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	3301      	adds	r3, #1
 80032fa:	61fb      	str	r3, [r7, #28]
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	2b0f      	cmp	r3, #15
 8003300:	f67f aea2 	bls.w	8003048 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003304:	bf00      	nop
 8003306:	bf00      	nop
 8003308:	3724      	adds	r7, #36	; 0x24
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40023800 	.word	0x40023800
 8003318:	40013800 	.word	0x40013800
 800331c:	40020000 	.word	0x40020000
 8003320:	40020400 	.word	0x40020400
 8003324:	40020800 	.word	0x40020800
 8003328:	40020c00 	.word	0x40020c00
 800332c:	40021000 	.word	0x40021000
 8003330:	40013c00 	.word	0x40013c00

08003334 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	460b      	mov	r3, r1
 800333e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	887b      	ldrh	r3, [r7, #2]
 8003346:	4013      	ands	r3, r2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d002      	beq.n	8003352 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800334c:	2301      	movs	r3, #1
 800334e:	73fb      	strb	r3, [r7, #15]
 8003350:	e001      	b.n	8003356 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003352:	2300      	movs	r3, #0
 8003354:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003356:	7bfb      	ldrb	r3, [r7, #15]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	460b      	mov	r3, r1
 800336e:	807b      	strh	r3, [r7, #2]
 8003370:	4613      	mov	r3, r2
 8003372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003374:	787b      	ldrb	r3, [r7, #1]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800337a:	887a      	ldrh	r2, [r7, #2]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003380:	e003      	b.n	800338a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003382:	887b      	ldrh	r3, [r7, #2]
 8003384:	041a      	lsls	r2, r3, #16
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	619a      	str	r2, [r3, #24]
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003396:	b480      	push	{r7}
 8003398:	b085      	sub	sp, #20
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
 800339e:	460b      	mov	r3, r1
 80033a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033a8:	887a      	ldrh	r2, [r7, #2]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	4013      	ands	r3, r2
 80033ae:	041a      	lsls	r2, r3, #16
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	43d9      	mvns	r1, r3
 80033b4:	887b      	ldrh	r3, [r7, #2]
 80033b6:	400b      	ands	r3, r1
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	619a      	str	r2, [r3, #24]
}
 80033be:	bf00      	nop
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
	...

080033cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80033d6:	4b08      	ldr	r3, [pc, #32]	; (80033f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033d8:	695a      	ldr	r2, [r3, #20]
 80033da:	88fb      	ldrh	r3, [r7, #6]
 80033dc:	4013      	ands	r3, r2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d006      	beq.n	80033f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033e2:	4a05      	ldr	r2, [pc, #20]	; (80033f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033e4:	88fb      	ldrh	r3, [r7, #6]
 80033e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033e8:	88fb      	ldrh	r3, [r7, #6]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fd fd28 	bl	8000e40 <HAL_GPIO_EXTI_Callback>
  }
}
 80033f0:	bf00      	nop
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40013c00 	.word	0x40013c00

080033fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e12b      	b.n	8003666 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7fe f954 	bl	80016d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2224      	movs	r2, #36	; 0x24
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0201 	bic.w	r2, r2, #1
 800343e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800344e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800345e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003460:	f001 f8da 	bl	8004618 <HAL_RCC_GetPCLK1Freq>
 8003464:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	4a81      	ldr	r2, [pc, #516]	; (8003670 <HAL_I2C_Init+0x274>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d807      	bhi.n	8003480 <HAL_I2C_Init+0x84>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4a80      	ldr	r2, [pc, #512]	; (8003674 <HAL_I2C_Init+0x278>)
 8003474:	4293      	cmp	r3, r2
 8003476:	bf94      	ite	ls
 8003478:	2301      	movls	r3, #1
 800347a:	2300      	movhi	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	e006      	b.n	800348e <HAL_I2C_Init+0x92>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4a7d      	ldr	r2, [pc, #500]	; (8003678 <HAL_I2C_Init+0x27c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	bf94      	ite	ls
 8003488:	2301      	movls	r3, #1
 800348a:	2300      	movhi	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e0e7      	b.n	8003666 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	4a78      	ldr	r2, [pc, #480]	; (800367c <HAL_I2C_Init+0x280>)
 800349a:	fba2 2303 	umull	r2, r3, r2, r3
 800349e:	0c9b      	lsrs	r3, r3, #18
 80034a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	4a6a      	ldr	r2, [pc, #424]	; (8003670 <HAL_I2C_Init+0x274>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d802      	bhi.n	80034d0 <HAL_I2C_Init+0xd4>
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	3301      	adds	r3, #1
 80034ce:	e009      	b.n	80034e4 <HAL_I2C_Init+0xe8>
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034d6:	fb02 f303 	mul.w	r3, r2, r3
 80034da:	4a69      	ldr	r2, [pc, #420]	; (8003680 <HAL_I2C_Init+0x284>)
 80034dc:	fba2 2303 	umull	r2, r3, r2, r3
 80034e0:	099b      	lsrs	r3, r3, #6
 80034e2:	3301      	adds	r3, #1
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6812      	ldr	r2, [r2, #0]
 80034e8:	430b      	orrs	r3, r1
 80034ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	495c      	ldr	r1, [pc, #368]	; (8003670 <HAL_I2C_Init+0x274>)
 8003500:	428b      	cmp	r3, r1
 8003502:	d819      	bhi.n	8003538 <HAL_I2C_Init+0x13c>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	1e59      	subs	r1, r3, #1
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003512:	1c59      	adds	r1, r3, #1
 8003514:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003518:	400b      	ands	r3, r1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <HAL_I2C_Init+0x138>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	1e59      	subs	r1, r3, #1
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	fbb1 f3f3 	udiv	r3, r1, r3
 800352c:	3301      	adds	r3, #1
 800352e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003532:	e051      	b.n	80035d8 <HAL_I2C_Init+0x1dc>
 8003534:	2304      	movs	r3, #4
 8003536:	e04f      	b.n	80035d8 <HAL_I2C_Init+0x1dc>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d111      	bne.n	8003564 <HAL_I2C_Init+0x168>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	1e58      	subs	r0, r3, #1
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6859      	ldr	r1, [r3, #4]
 8003548:	460b      	mov	r3, r1
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	440b      	add	r3, r1
 800354e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003552:	3301      	adds	r3, #1
 8003554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003558:	2b00      	cmp	r3, #0
 800355a:	bf0c      	ite	eq
 800355c:	2301      	moveq	r3, #1
 800355e:	2300      	movne	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	e012      	b.n	800358a <HAL_I2C_Init+0x18e>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	1e58      	subs	r0, r3, #1
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6859      	ldr	r1, [r3, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	0099      	lsls	r1, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	fbb0 f3f3 	udiv	r3, r0, r3
 800357a:	3301      	adds	r3, #1
 800357c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003580:	2b00      	cmp	r3, #0
 8003582:	bf0c      	ite	eq
 8003584:	2301      	moveq	r3, #1
 8003586:	2300      	movne	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <HAL_I2C_Init+0x196>
 800358e:	2301      	movs	r3, #1
 8003590:	e022      	b.n	80035d8 <HAL_I2C_Init+0x1dc>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10e      	bne.n	80035b8 <HAL_I2C_Init+0x1bc>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	1e58      	subs	r0, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6859      	ldr	r1, [r3, #4]
 80035a2:	460b      	mov	r3, r1
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	440b      	add	r3, r1
 80035a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ac:	3301      	adds	r3, #1
 80035ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035b6:	e00f      	b.n	80035d8 <HAL_I2C_Init+0x1dc>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	1e58      	subs	r0, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6859      	ldr	r1, [r3, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	0099      	lsls	r1, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ce:	3301      	adds	r3, #1
 80035d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	6809      	ldr	r1, [r1, #0]
 80035dc:	4313      	orrs	r3, r2
 80035de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69da      	ldr	r2, [r3, #28]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003606:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6911      	ldr	r1, [r2, #16]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	68d2      	ldr	r2, [r2, #12]
 8003612:	4311      	orrs	r1, r2
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6812      	ldr	r2, [r2, #0]
 8003618:	430b      	orrs	r3, r1
 800361a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	695a      	ldr	r2, [r3, #20]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	000186a0 	.word	0x000186a0
 8003674:	001e847f 	.word	0x001e847f
 8003678:	003d08ff 	.word	0x003d08ff
 800367c:	431bde83 	.word	0x431bde83
 8003680:	10624dd3 	.word	0x10624dd3

08003684 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b088      	sub	sp, #32
 8003688:	af02      	add	r7, sp, #8
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	607a      	str	r2, [r7, #4]
 800368e:	461a      	mov	r2, r3
 8003690:	460b      	mov	r3, r1
 8003692:	817b      	strh	r3, [r7, #10]
 8003694:	4613      	mov	r3, r2
 8003696:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003698:	f7ff fb24 	bl	8002ce4 <HAL_GetTick>
 800369c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b20      	cmp	r3, #32
 80036a8:	f040 80e0 	bne.w	800386c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	2319      	movs	r3, #25
 80036b2:	2201      	movs	r2, #1
 80036b4:	4970      	ldr	r1, [pc, #448]	; (8003878 <HAL_I2C_Master_Transmit+0x1f4>)
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 f964 	bl	8003984 <I2C_WaitOnFlagUntilTimeout>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80036c2:	2302      	movs	r3, #2
 80036c4:	e0d3      	b.n	800386e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d101      	bne.n	80036d4 <HAL_I2C_Master_Transmit+0x50>
 80036d0:	2302      	movs	r3, #2
 80036d2:	e0cc      	b.n	800386e <HAL_I2C_Master_Transmit+0x1ea>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d007      	beq.n	80036fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f042 0201 	orr.w	r2, r2, #1
 80036f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003708:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2221      	movs	r2, #33	; 0x21
 800370e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2210      	movs	r2, #16
 8003716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	893a      	ldrh	r2, [r7, #8]
 800372a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003730:	b29a      	uxth	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4a50      	ldr	r2, [pc, #320]	; (800387c <HAL_I2C_Master_Transmit+0x1f8>)
 800373a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800373c:	8979      	ldrh	r1, [r7, #10]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	6a3a      	ldr	r2, [r7, #32]
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 f89c 	bl	8003880 <I2C_MasterRequestWrite>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e08d      	b.n	800386e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003752:	2300      	movs	r3, #0
 8003754:	613b      	str	r3, [r7, #16]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	613b      	str	r3, [r7, #16]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	613b      	str	r3, [r7, #16]
 8003766:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003768:	e066      	b.n	8003838 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	6a39      	ldr	r1, [r7, #32]
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 fa22 	bl	8003bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00d      	beq.n	8003796 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	2b04      	cmp	r3, #4
 8003780:	d107      	bne.n	8003792 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003790:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e06b      	b.n	800386e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	781a      	ldrb	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	1c5a      	adds	r2, r3, #1
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d11b      	bne.n	800380c <HAL_I2C_Master_Transmit+0x188>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d017      	beq.n	800380c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	781a      	ldrb	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	1c5a      	adds	r2, r3, #1
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	3b01      	subs	r3, #1
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	6a39      	ldr	r1, [r7, #32]
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f000 fa19 	bl	8003c48 <I2C_WaitOnBTFFlagUntilTimeout>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00d      	beq.n	8003838 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	2b04      	cmp	r3, #4
 8003822:	d107      	bne.n	8003834 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003832:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e01a      	b.n	800386e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383c:	2b00      	cmp	r3, #0
 800383e:	d194      	bne.n	800376a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800384e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	e000      	b.n	800386e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800386c:	2302      	movs	r3, #2
  }
}
 800386e:	4618      	mov	r0, r3
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	00100002 	.word	0x00100002
 800387c:	ffff0000 	.word	0xffff0000

08003880 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b088      	sub	sp, #32
 8003884:	af02      	add	r7, sp, #8
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	607a      	str	r2, [r7, #4]
 800388a:	603b      	str	r3, [r7, #0]
 800388c:	460b      	mov	r3, r1
 800388e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2b08      	cmp	r3, #8
 800389a:	d006      	beq.n	80038aa <I2C_MasterRequestWrite+0x2a>
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d003      	beq.n	80038aa <I2C_MasterRequestWrite+0x2a>
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038a8:	d108      	bne.n	80038bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	e00b      	b.n	80038d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c0:	2b12      	cmp	r3, #18
 80038c2:	d107      	bne.n	80038d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 f84f 	bl	8003984 <I2C_WaitOnFlagUntilTimeout>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00d      	beq.n	8003908 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038fa:	d103      	bne.n	8003904 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003902:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e035      	b.n	8003974 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003910:	d108      	bne.n	8003924 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003912:	897b      	ldrh	r3, [r7, #10]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	461a      	mov	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003920:	611a      	str	r2, [r3, #16]
 8003922:	e01b      	b.n	800395c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003924:	897b      	ldrh	r3, [r7, #10]
 8003926:	11db      	asrs	r3, r3, #7
 8003928:	b2db      	uxtb	r3, r3
 800392a:	f003 0306 	and.w	r3, r3, #6
 800392e:	b2db      	uxtb	r3, r3
 8003930:	f063 030f 	orn	r3, r3, #15
 8003934:	b2da      	uxtb	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	490e      	ldr	r1, [pc, #56]	; (800397c <I2C_MasterRequestWrite+0xfc>)
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 f898 	bl	8003a78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e010      	b.n	8003974 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003952:	897b      	ldrh	r3, [r7, #10]
 8003954:	b2da      	uxtb	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	4907      	ldr	r1, [pc, #28]	; (8003980 <I2C_MasterRequestWrite+0x100>)
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f888 	bl	8003a78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3718      	adds	r7, #24
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	00010008 	.word	0x00010008
 8003980:	00010002 	.word	0x00010002

08003984 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	603b      	str	r3, [r7, #0]
 8003990:	4613      	mov	r3, r2
 8003992:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003994:	e048      	b.n	8003a28 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399c:	d044      	beq.n	8003a28 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800399e:	f7ff f9a1 	bl	8002ce4 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d302      	bcc.n	80039b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d139      	bne.n	8003a28 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	0c1b      	lsrs	r3, r3, #16
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d10d      	bne.n	80039da <I2C_WaitOnFlagUntilTimeout+0x56>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	43da      	mvns	r2, r3
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	4013      	ands	r3, r2
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	bf0c      	ite	eq
 80039d0:	2301      	moveq	r3, #1
 80039d2:	2300      	movne	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	461a      	mov	r2, r3
 80039d8:	e00c      	b.n	80039f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	43da      	mvns	r2, r3
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	4013      	ands	r3, r2
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	bf0c      	ite	eq
 80039ec:	2301      	moveq	r3, #1
 80039ee:	2300      	movne	r3, #0
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	461a      	mov	r2, r3
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d116      	bne.n	8003a28 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2220      	movs	r2, #32
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a14:	f043 0220 	orr.w	r2, r3, #32
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e023      	b.n	8003a70 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	0c1b      	lsrs	r3, r3, #16
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d10d      	bne.n	8003a4e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	43da      	mvns	r2, r3
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	bf0c      	ite	eq
 8003a44:	2301      	moveq	r3, #1
 8003a46:	2300      	movne	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	e00c      	b.n	8003a68 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	43da      	mvns	r2, r3
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	bf0c      	ite	eq
 8003a60:	2301      	moveq	r3, #1
 8003a62:	2300      	movne	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	461a      	mov	r2, r3
 8003a68:	79fb      	ldrb	r3, [r7, #7]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d093      	beq.n	8003996 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a86:	e071      	b.n	8003b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a96:	d123      	bne.n	8003ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ab0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2220      	movs	r2, #32
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003acc:	f043 0204 	orr.w	r2, r3, #4
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e067      	b.n	8003bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae6:	d041      	beq.n	8003b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae8:	f7ff f8fc 	bl	8002ce4 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d302      	bcc.n	8003afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d136      	bne.n	8003b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	0c1b      	lsrs	r3, r3, #16
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d10c      	bne.n	8003b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	43da      	mvns	r2, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4013      	ands	r3, r2
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	bf14      	ite	ne
 8003b1a:	2301      	movne	r3, #1
 8003b1c:	2300      	moveq	r3, #0
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	e00b      	b.n	8003b3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	43da      	mvns	r2, r3
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	bf14      	ite	ne
 8003b34:	2301      	movne	r3, #1
 8003b36:	2300      	moveq	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d016      	beq.n	8003b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2220      	movs	r2, #32
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	f043 0220 	orr.w	r2, r3, #32
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e021      	b.n	8003bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	0c1b      	lsrs	r3, r3, #16
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d10c      	bne.n	8003b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	43da      	mvns	r2, r3
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	4013      	ands	r3, r2
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	bf14      	ite	ne
 8003b88:	2301      	movne	r3, #1
 8003b8a:	2300      	moveq	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	e00b      	b.n	8003ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	43da      	mvns	r2, r3
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	bf14      	ite	ne
 8003ba2:	2301      	movne	r3, #1
 8003ba4:	2300      	moveq	r3, #0
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f47f af6d 	bne.w	8003a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bc4:	e034      	b.n	8003c30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 f886 	bl	8003cd8 <I2C_IsAcknowledgeFailed>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e034      	b.n	8003c40 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bdc:	d028      	beq.n	8003c30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bde:	f7ff f881 	bl	8002ce4 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d302      	bcc.n	8003bf4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d11d      	bne.n	8003c30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfe:	2b80      	cmp	r3, #128	; 0x80
 8003c00:	d016      	beq.n	8003c30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	f043 0220 	orr.w	r2, r3, #32
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e007      	b.n	8003c40 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3a:	2b80      	cmp	r3, #128	; 0x80
 8003c3c:	d1c3      	bne.n	8003bc6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c54:	e034      	b.n	8003cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 f83e 	bl	8003cd8 <I2C_IsAcknowledgeFailed>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e034      	b.n	8003cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6c:	d028      	beq.n	8003cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c6e:	f7ff f839 	bl	8002ce4 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d302      	bcc.n	8003c84 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d11d      	bne.n	8003cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	f003 0304 	and.w	r3, r3, #4
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	d016      	beq.n	8003cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cac:	f043 0220 	orr.w	r2, r3, #32
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e007      	b.n	8003cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d1c3      	bne.n	8003c56 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cee:	d11b      	bne.n	8003d28 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cf8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	f043 0204 	orr.w	r2, r3, #4
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e000      	b.n	8003d2a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
	...

08003d38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e267      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d075      	beq.n	8003e42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d56:	4b88      	ldr	r3, [pc, #544]	; (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d00c      	beq.n	8003d7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d62:	4b85      	ldr	r3, [pc, #532]	; (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d112      	bne.n	8003d94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d6e:	4b82      	ldr	r3, [pc, #520]	; (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d7a:	d10b      	bne.n	8003d94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d7c:	4b7e      	ldr	r3, [pc, #504]	; (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d05b      	beq.n	8003e40 <HAL_RCC_OscConfig+0x108>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d157      	bne.n	8003e40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e242      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d9c:	d106      	bne.n	8003dac <HAL_RCC_OscConfig+0x74>
 8003d9e:	4b76      	ldr	r3, [pc, #472]	; (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a75      	ldr	r2, [pc, #468]	; (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	e01d      	b.n	8003de8 <HAL_RCC_OscConfig+0xb0>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003db4:	d10c      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x98>
 8003db6:	4b70      	ldr	r3, [pc, #448]	; (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a6f      	ldr	r2, [pc, #444]	; (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	4b6d      	ldr	r3, [pc, #436]	; (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a6c      	ldr	r2, [pc, #432]	; (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	e00b      	b.n	8003de8 <HAL_RCC_OscConfig+0xb0>
 8003dd0:	4b69      	ldr	r3, [pc, #420]	; (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a68      	ldr	r2, [pc, #416]	; (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dda:	6013      	str	r3, [r2, #0]
 8003ddc:	4b66      	ldr	r3, [pc, #408]	; (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a65      	ldr	r2, [pc, #404]	; (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d013      	beq.n	8003e18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df0:	f7fe ff78 	bl	8002ce4 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003df8:	f7fe ff74 	bl	8002ce4 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b64      	cmp	r3, #100	; 0x64
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e207      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0a:	4b5b      	ldr	r3, [pc, #364]	; (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0f0      	beq.n	8003df8 <HAL_RCC_OscConfig+0xc0>
 8003e16:	e014      	b.n	8003e42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e18:	f7fe ff64 	bl	8002ce4 <HAL_GetTick>
 8003e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e1e:	e008      	b.n	8003e32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e20:	f7fe ff60 	bl	8002ce4 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b64      	cmp	r3, #100	; 0x64
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e1f3      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e32:	4b51      	ldr	r3, [pc, #324]	; (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1f0      	bne.n	8003e20 <HAL_RCC_OscConfig+0xe8>
 8003e3e:	e000      	b.n	8003e42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d063      	beq.n	8003f16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e4e:	4b4a      	ldr	r3, [pc, #296]	; (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 030c 	and.w	r3, r3, #12
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00b      	beq.n	8003e72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e5a:	4b47      	ldr	r3, [pc, #284]	; (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d11c      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e66:	4b44      	ldr	r3, [pc, #272]	; (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d116      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e72:	4b41      	ldr	r3, [pc, #260]	; (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d005      	beq.n	8003e8a <HAL_RCC_OscConfig+0x152>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d001      	beq.n	8003e8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e1c7      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8a:	4b3b      	ldr	r3, [pc, #236]	; (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	4937      	ldr	r1, [pc, #220]	; (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e9e:	e03a      	b.n	8003f16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d020      	beq.n	8003eea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ea8:	4b34      	ldr	r3, [pc, #208]	; (8003f7c <HAL_RCC_OscConfig+0x244>)
 8003eaa:	2201      	movs	r2, #1
 8003eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eae:	f7fe ff19 	bl	8002ce4 <HAL_GetTick>
 8003eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb4:	e008      	b.n	8003ec8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eb6:	f7fe ff15 	bl	8002ce4 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e1a8      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec8:	4b2b      	ldr	r3, [pc, #172]	; (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0f0      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed4:	4b28      	ldr	r3, [pc, #160]	; (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	4925      	ldr	r1, [pc, #148]	; (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	600b      	str	r3, [r1, #0]
 8003ee8:	e015      	b.n	8003f16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eea:	4b24      	ldr	r3, [pc, #144]	; (8003f7c <HAL_RCC_OscConfig+0x244>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef0:	f7fe fef8 	bl	8002ce4 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ef8:	f7fe fef4 	bl	8002ce4 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e187      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f0a:	4b1b      	ldr	r3, [pc, #108]	; (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f0      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d036      	beq.n	8003f90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d016      	beq.n	8003f58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f2a:	4b15      	ldr	r3, [pc, #84]	; (8003f80 <HAL_RCC_OscConfig+0x248>)
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f30:	f7fe fed8 	bl	8002ce4 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f38:	f7fe fed4 	bl	8002ce4 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e167      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f4a:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0f0      	beq.n	8003f38 <HAL_RCC_OscConfig+0x200>
 8003f56:	e01b      	b.n	8003f90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f58:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <HAL_RCC_OscConfig+0x248>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f5e:	f7fe fec1 	bl	8002ce4 <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f64:	e00e      	b.n	8003f84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f66:	f7fe febd 	bl	8002ce4 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d907      	bls.n	8003f84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e150      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	42470000 	.word	0x42470000
 8003f80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f84:	4b88      	ldr	r3, [pc, #544]	; (80041a8 <HAL_RCC_OscConfig+0x470>)
 8003f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1ea      	bne.n	8003f66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 8097 	beq.w	80040cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fa2:	4b81      	ldr	r3, [pc, #516]	; (80041a8 <HAL_RCC_OscConfig+0x470>)
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10f      	bne.n	8003fce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60bb      	str	r3, [r7, #8]
 8003fb2:	4b7d      	ldr	r3, [pc, #500]	; (80041a8 <HAL_RCC_OscConfig+0x470>)
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	4a7c      	ldr	r2, [pc, #496]	; (80041a8 <HAL_RCC_OscConfig+0x470>)
 8003fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8003fbe:	4b7a      	ldr	r3, [pc, #488]	; (80041a8 <HAL_RCC_OscConfig+0x470>)
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc6:	60bb      	str	r3, [r7, #8]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fce:	4b77      	ldr	r3, [pc, #476]	; (80041ac <HAL_RCC_OscConfig+0x474>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d118      	bne.n	800400c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fda:	4b74      	ldr	r3, [pc, #464]	; (80041ac <HAL_RCC_OscConfig+0x474>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a73      	ldr	r2, [pc, #460]	; (80041ac <HAL_RCC_OscConfig+0x474>)
 8003fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fe6:	f7fe fe7d 	bl	8002ce4 <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fee:	f7fe fe79 	bl	8002ce4 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e10c      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004000:	4b6a      	ldr	r3, [pc, #424]	; (80041ac <HAL_RCC_OscConfig+0x474>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0f0      	beq.n	8003fee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d106      	bne.n	8004022 <HAL_RCC_OscConfig+0x2ea>
 8004014:	4b64      	ldr	r3, [pc, #400]	; (80041a8 <HAL_RCC_OscConfig+0x470>)
 8004016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004018:	4a63      	ldr	r2, [pc, #396]	; (80041a8 <HAL_RCC_OscConfig+0x470>)
 800401a:	f043 0301 	orr.w	r3, r3, #1
 800401e:	6713      	str	r3, [r2, #112]	; 0x70
 8004020:	e01c      	b.n	800405c <HAL_RCC_OscConfig+0x324>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	2b05      	cmp	r3, #5
 8004028:	d10c      	bne.n	8004044 <HAL_RCC_OscConfig+0x30c>
 800402a:	4b5f      	ldr	r3, [pc, #380]	; (80041a8 <HAL_RCC_OscConfig+0x470>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402e:	4a5e      	ldr	r2, [pc, #376]	; (80041a8 <HAL_RCC_OscConfig+0x470>)
 8004030:	f043 0304 	orr.w	r3, r3, #4
 8004034:	6713      	str	r3, [r2, #112]	; 0x70
 8004036:	4b5c      	ldr	r3, [pc, #368]	; (80041a8 <HAL_RCC_OscConfig+0x470>)
 8004038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403a:	4a5b      	ldr	r2, [pc, #364]	; (80041a8 <HAL_RCC_OscConfig+0x470>)
 800403c:	f043 0301 	orr.w	r3, r3, #1
 8004040:	6713      	str	r3, [r2, #112]	; 0x70
 8004042:	e00b      	b.n	800405c <HAL_RCC_OscConfig+0x324>
 8004044:	4b58      	ldr	r3, [pc, #352]	; (80041a8 <HAL_RCC_OscConfig+0x470>)
 8004046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004048:	4a57      	ldr	r2, [pc, #348]	; (80041a8 <HAL_RCC_OscConfig+0x470>)
 800404a:	f023 0301 	bic.w	r3, r3, #1
 800404e:	6713      	str	r3, [r2, #112]	; 0x70
 8004050:	4b55      	ldr	r3, [pc, #340]	; (80041a8 <HAL_RCC_OscConfig+0x470>)
 8004052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004054:	4a54      	ldr	r2, [pc, #336]	; (80041a8 <HAL_RCC_OscConfig+0x470>)
 8004056:	f023 0304 	bic.w	r3, r3, #4
 800405a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d015      	beq.n	8004090 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004064:	f7fe fe3e 	bl	8002ce4 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406a:	e00a      	b.n	8004082 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800406c:	f7fe fe3a 	bl	8002ce4 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	f241 3288 	movw	r2, #5000	; 0x1388
 800407a:	4293      	cmp	r3, r2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e0cb      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004082:	4b49      	ldr	r3, [pc, #292]	; (80041a8 <HAL_RCC_OscConfig+0x470>)
 8004084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0ee      	beq.n	800406c <HAL_RCC_OscConfig+0x334>
 800408e:	e014      	b.n	80040ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004090:	f7fe fe28 	bl	8002ce4 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004096:	e00a      	b.n	80040ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004098:	f7fe fe24 	bl	8002ce4 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e0b5      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ae:	4b3e      	ldr	r3, [pc, #248]	; (80041a8 <HAL_RCC_OscConfig+0x470>)
 80040b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1ee      	bne.n	8004098 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040ba:	7dfb      	ldrb	r3, [r7, #23]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d105      	bne.n	80040cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040c0:	4b39      	ldr	r3, [pc, #228]	; (80041a8 <HAL_RCC_OscConfig+0x470>)
 80040c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c4:	4a38      	ldr	r2, [pc, #224]	; (80041a8 <HAL_RCC_OscConfig+0x470>)
 80040c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 80a1 	beq.w	8004218 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040d6:	4b34      	ldr	r3, [pc, #208]	; (80041a8 <HAL_RCC_OscConfig+0x470>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 030c 	and.w	r3, r3, #12
 80040de:	2b08      	cmp	r3, #8
 80040e0:	d05c      	beq.n	800419c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d141      	bne.n	800416e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ea:	4b31      	ldr	r3, [pc, #196]	; (80041b0 <HAL_RCC_OscConfig+0x478>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f0:	f7fe fdf8 	bl	8002ce4 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f8:	f7fe fdf4 	bl	8002ce4 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e087      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800410a:	4b27      	ldr	r3, [pc, #156]	; (80041a8 <HAL_RCC_OscConfig+0x470>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f0      	bne.n	80040f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69da      	ldr	r2, [r3, #28]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	019b      	lsls	r3, r3, #6
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412c:	085b      	lsrs	r3, r3, #1
 800412e:	3b01      	subs	r3, #1
 8004130:	041b      	lsls	r3, r3, #16
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004138:	061b      	lsls	r3, r3, #24
 800413a:	491b      	ldr	r1, [pc, #108]	; (80041a8 <HAL_RCC_OscConfig+0x470>)
 800413c:	4313      	orrs	r3, r2
 800413e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004140:	4b1b      	ldr	r3, [pc, #108]	; (80041b0 <HAL_RCC_OscConfig+0x478>)
 8004142:	2201      	movs	r2, #1
 8004144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004146:	f7fe fdcd 	bl	8002ce4 <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800414e:	f7fe fdc9 	bl	8002ce4 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e05c      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004160:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <HAL_RCC_OscConfig+0x470>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0f0      	beq.n	800414e <HAL_RCC_OscConfig+0x416>
 800416c:	e054      	b.n	8004218 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800416e:	4b10      	ldr	r3, [pc, #64]	; (80041b0 <HAL_RCC_OscConfig+0x478>)
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004174:	f7fe fdb6 	bl	8002ce4 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800417c:	f7fe fdb2 	bl	8002ce4 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e045      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800418e:	4b06      	ldr	r3, [pc, #24]	; (80041a8 <HAL_RCC_OscConfig+0x470>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1f0      	bne.n	800417c <HAL_RCC_OscConfig+0x444>
 800419a:	e03d      	b.n	8004218 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d107      	bne.n	80041b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e038      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
 80041a8:	40023800 	.word	0x40023800
 80041ac:	40007000 	.word	0x40007000
 80041b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041b4:	4b1b      	ldr	r3, [pc, #108]	; (8004224 <HAL_RCC_OscConfig+0x4ec>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d028      	beq.n	8004214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d121      	bne.n	8004214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041da:	429a      	cmp	r2, r3
 80041dc:	d11a      	bne.n	8004214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041e4:	4013      	ands	r3, r2
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d111      	bne.n	8004214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fa:	085b      	lsrs	r3, r3, #1
 80041fc:	3b01      	subs	r3, #1
 80041fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004200:	429a      	cmp	r2, r3
 8004202:	d107      	bne.n	8004214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004210:	429a      	cmp	r2, r3
 8004212:	d001      	beq.n	8004218 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e000      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40023800 	.word	0x40023800

08004228 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e0cc      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800423c:	4b68      	ldr	r3, [pc, #416]	; (80043e0 <HAL_RCC_ClockConfig+0x1b8>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	429a      	cmp	r2, r3
 8004248:	d90c      	bls.n	8004264 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424a:	4b65      	ldr	r3, [pc, #404]	; (80043e0 <HAL_RCC_ClockConfig+0x1b8>)
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004252:	4b63      	ldr	r3, [pc, #396]	; (80043e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0307 	and.w	r3, r3, #7
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	429a      	cmp	r2, r3
 800425e:	d001      	beq.n	8004264 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e0b8      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d020      	beq.n	80042b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d005      	beq.n	8004288 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800427c:	4b59      	ldr	r3, [pc, #356]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	4a58      	ldr	r2, [pc, #352]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004286:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	2b00      	cmp	r3, #0
 8004292:	d005      	beq.n	80042a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004294:	4b53      	ldr	r3, [pc, #332]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	4a52      	ldr	r2, [pc, #328]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 800429a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800429e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042a0:	4b50      	ldr	r3, [pc, #320]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	494d      	ldr	r1, [pc, #308]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d044      	beq.n	8004348 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d107      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c6:	4b47      	ldr	r3, [pc, #284]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d119      	bne.n	8004306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e07f      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d003      	beq.n	80042e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042e2:	2b03      	cmp	r3, #3
 80042e4:	d107      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042e6:	4b3f      	ldr	r3, [pc, #252]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d109      	bne.n	8004306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e06f      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f6:	4b3b      	ldr	r3, [pc, #236]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e067      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004306:	4b37      	ldr	r3, [pc, #220]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f023 0203 	bic.w	r2, r3, #3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	4934      	ldr	r1, [pc, #208]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004314:	4313      	orrs	r3, r2
 8004316:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004318:	f7fe fce4 	bl	8002ce4 <HAL_GetTick>
 800431c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800431e:	e00a      	b.n	8004336 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004320:	f7fe fce0 	bl	8002ce4 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	f241 3288 	movw	r2, #5000	; 0x1388
 800432e:	4293      	cmp	r3, r2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e04f      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004336:	4b2b      	ldr	r3, [pc, #172]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 020c 	and.w	r2, r3, #12
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	429a      	cmp	r2, r3
 8004346:	d1eb      	bne.n	8004320 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004348:	4b25      	ldr	r3, [pc, #148]	; (80043e0 <HAL_RCC_ClockConfig+0x1b8>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	429a      	cmp	r2, r3
 8004354:	d20c      	bcs.n	8004370 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004356:	4b22      	ldr	r3, [pc, #136]	; (80043e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800435e:	4b20      	ldr	r3, [pc, #128]	; (80043e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0307 	and.w	r3, r3, #7
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	429a      	cmp	r2, r3
 800436a:	d001      	beq.n	8004370 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e032      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	d008      	beq.n	800438e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800437c:	4b19      	ldr	r3, [pc, #100]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	4916      	ldr	r1, [pc, #88]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 800438a:	4313      	orrs	r3, r2
 800438c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0308 	and.w	r3, r3, #8
 8004396:	2b00      	cmp	r3, #0
 8004398:	d009      	beq.n	80043ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800439a:	4b12      	ldr	r3, [pc, #72]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	490e      	ldr	r1, [pc, #56]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043ae:	f000 f821 	bl	80043f4 <HAL_RCC_GetSysClockFreq>
 80043b2:	4602      	mov	r2, r0
 80043b4:	4b0b      	ldr	r3, [pc, #44]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	091b      	lsrs	r3, r3, #4
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	490a      	ldr	r1, [pc, #40]	; (80043e8 <HAL_RCC_ClockConfig+0x1c0>)
 80043c0:	5ccb      	ldrb	r3, [r1, r3]
 80043c2:	fa22 f303 	lsr.w	r3, r2, r3
 80043c6:	4a09      	ldr	r2, [pc, #36]	; (80043ec <HAL_RCC_ClockConfig+0x1c4>)
 80043c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043ca:	4b09      	ldr	r3, [pc, #36]	; (80043f0 <HAL_RCC_ClockConfig+0x1c8>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fd fb14 	bl	80019fc <HAL_InitTick>

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40023c00 	.word	0x40023c00
 80043e4:	40023800 	.word	0x40023800
 80043e8:	080092cc 	.word	0x080092cc
 80043ec:	20000000 	.word	0x20000000
 80043f0:	20000004 	.word	0x20000004

080043f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043f8:	b094      	sub	sp, #80	; 0x50
 80043fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004400:	2300      	movs	r3, #0
 8004402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004404:	2300      	movs	r3, #0
 8004406:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800440c:	4b79      	ldr	r3, [pc, #484]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f003 030c 	and.w	r3, r3, #12
 8004414:	2b08      	cmp	r3, #8
 8004416:	d00d      	beq.n	8004434 <HAL_RCC_GetSysClockFreq+0x40>
 8004418:	2b08      	cmp	r3, #8
 800441a:	f200 80e1 	bhi.w	80045e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800441e:	2b00      	cmp	r3, #0
 8004420:	d002      	beq.n	8004428 <HAL_RCC_GetSysClockFreq+0x34>
 8004422:	2b04      	cmp	r3, #4
 8004424:	d003      	beq.n	800442e <HAL_RCC_GetSysClockFreq+0x3a>
 8004426:	e0db      	b.n	80045e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004428:	4b73      	ldr	r3, [pc, #460]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800442a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800442c:	e0db      	b.n	80045e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800442e:	4b73      	ldr	r3, [pc, #460]	; (80045fc <HAL_RCC_GetSysClockFreq+0x208>)
 8004430:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004432:	e0d8      	b.n	80045e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004434:	4b6f      	ldr	r3, [pc, #444]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800443c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800443e:	4b6d      	ldr	r3, [pc, #436]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d063      	beq.n	8004512 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800444a:	4b6a      	ldr	r3, [pc, #424]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	099b      	lsrs	r3, r3, #6
 8004450:	2200      	movs	r2, #0
 8004452:	63bb      	str	r3, [r7, #56]	; 0x38
 8004454:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800445c:	633b      	str	r3, [r7, #48]	; 0x30
 800445e:	2300      	movs	r3, #0
 8004460:	637b      	str	r3, [r7, #52]	; 0x34
 8004462:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004466:	4622      	mov	r2, r4
 8004468:	462b      	mov	r3, r5
 800446a:	f04f 0000 	mov.w	r0, #0
 800446e:	f04f 0100 	mov.w	r1, #0
 8004472:	0159      	lsls	r1, r3, #5
 8004474:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004478:	0150      	lsls	r0, r2, #5
 800447a:	4602      	mov	r2, r0
 800447c:	460b      	mov	r3, r1
 800447e:	4621      	mov	r1, r4
 8004480:	1a51      	subs	r1, r2, r1
 8004482:	6139      	str	r1, [r7, #16]
 8004484:	4629      	mov	r1, r5
 8004486:	eb63 0301 	sbc.w	r3, r3, r1
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	f04f 0200 	mov.w	r2, #0
 8004490:	f04f 0300 	mov.w	r3, #0
 8004494:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004498:	4659      	mov	r1, fp
 800449a:	018b      	lsls	r3, r1, #6
 800449c:	4651      	mov	r1, sl
 800449e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044a2:	4651      	mov	r1, sl
 80044a4:	018a      	lsls	r2, r1, #6
 80044a6:	4651      	mov	r1, sl
 80044a8:	ebb2 0801 	subs.w	r8, r2, r1
 80044ac:	4659      	mov	r1, fp
 80044ae:	eb63 0901 	sbc.w	r9, r3, r1
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044c6:	4690      	mov	r8, r2
 80044c8:	4699      	mov	r9, r3
 80044ca:	4623      	mov	r3, r4
 80044cc:	eb18 0303 	adds.w	r3, r8, r3
 80044d0:	60bb      	str	r3, [r7, #8]
 80044d2:	462b      	mov	r3, r5
 80044d4:	eb49 0303 	adc.w	r3, r9, r3
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	f04f 0200 	mov.w	r2, #0
 80044de:	f04f 0300 	mov.w	r3, #0
 80044e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044e6:	4629      	mov	r1, r5
 80044e8:	024b      	lsls	r3, r1, #9
 80044ea:	4621      	mov	r1, r4
 80044ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044f0:	4621      	mov	r1, r4
 80044f2:	024a      	lsls	r2, r1, #9
 80044f4:	4610      	mov	r0, r2
 80044f6:	4619      	mov	r1, r3
 80044f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044fa:	2200      	movs	r2, #0
 80044fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80044fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004500:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004504:	f7fc f9ca 	bl	800089c <__aeabi_uldivmod>
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	4613      	mov	r3, r2
 800450e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004510:	e058      	b.n	80045c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004512:	4b38      	ldr	r3, [pc, #224]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	099b      	lsrs	r3, r3, #6
 8004518:	2200      	movs	r2, #0
 800451a:	4618      	mov	r0, r3
 800451c:	4611      	mov	r1, r2
 800451e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004522:	623b      	str	r3, [r7, #32]
 8004524:	2300      	movs	r3, #0
 8004526:	627b      	str	r3, [r7, #36]	; 0x24
 8004528:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800452c:	4642      	mov	r2, r8
 800452e:	464b      	mov	r3, r9
 8004530:	f04f 0000 	mov.w	r0, #0
 8004534:	f04f 0100 	mov.w	r1, #0
 8004538:	0159      	lsls	r1, r3, #5
 800453a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800453e:	0150      	lsls	r0, r2, #5
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4641      	mov	r1, r8
 8004546:	ebb2 0a01 	subs.w	sl, r2, r1
 800454a:	4649      	mov	r1, r9
 800454c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800455c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004560:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004564:	ebb2 040a 	subs.w	r4, r2, sl
 8004568:	eb63 050b 	sbc.w	r5, r3, fp
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	00eb      	lsls	r3, r5, #3
 8004576:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800457a:	00e2      	lsls	r2, r4, #3
 800457c:	4614      	mov	r4, r2
 800457e:	461d      	mov	r5, r3
 8004580:	4643      	mov	r3, r8
 8004582:	18e3      	adds	r3, r4, r3
 8004584:	603b      	str	r3, [r7, #0]
 8004586:	464b      	mov	r3, r9
 8004588:	eb45 0303 	adc.w	r3, r5, r3
 800458c:	607b      	str	r3, [r7, #4]
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	f04f 0300 	mov.w	r3, #0
 8004596:	e9d7 4500 	ldrd	r4, r5, [r7]
 800459a:	4629      	mov	r1, r5
 800459c:	028b      	lsls	r3, r1, #10
 800459e:	4621      	mov	r1, r4
 80045a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045a4:	4621      	mov	r1, r4
 80045a6:	028a      	lsls	r2, r1, #10
 80045a8:	4610      	mov	r0, r2
 80045aa:	4619      	mov	r1, r3
 80045ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045ae:	2200      	movs	r2, #0
 80045b0:	61bb      	str	r3, [r7, #24]
 80045b2:	61fa      	str	r2, [r7, #28]
 80045b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045b8:	f7fc f970 	bl	800089c <__aeabi_uldivmod>
 80045bc:	4602      	mov	r2, r0
 80045be:	460b      	mov	r3, r1
 80045c0:	4613      	mov	r3, r2
 80045c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045c4:	4b0b      	ldr	r3, [pc, #44]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	0c1b      	lsrs	r3, r3, #16
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	3301      	adds	r3, #1
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80045d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045de:	e002      	b.n	80045e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045e0:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80045e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3750      	adds	r7, #80	; 0x50
 80045ec:	46bd      	mov	sp, r7
 80045ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045f2:	bf00      	nop
 80045f4:	40023800 	.word	0x40023800
 80045f8:	00f42400 	.word	0x00f42400
 80045fc:	007a1200 	.word	0x007a1200

08004600 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004604:	4b03      	ldr	r3, [pc, #12]	; (8004614 <HAL_RCC_GetHCLKFreq+0x14>)
 8004606:	681b      	ldr	r3, [r3, #0]
}
 8004608:	4618      	mov	r0, r3
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	20000000 	.word	0x20000000

08004618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800461c:	f7ff fff0 	bl	8004600 <HAL_RCC_GetHCLKFreq>
 8004620:	4602      	mov	r2, r0
 8004622:	4b05      	ldr	r3, [pc, #20]	; (8004638 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	0a9b      	lsrs	r3, r3, #10
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	4903      	ldr	r1, [pc, #12]	; (800463c <HAL_RCC_GetPCLK1Freq+0x24>)
 800462e:	5ccb      	ldrb	r3, [r1, r3]
 8004630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004634:	4618      	mov	r0, r3
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40023800 	.word	0x40023800
 800463c:	080092dc 	.word	0x080092dc

08004640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004644:	f7ff ffdc 	bl	8004600 <HAL_RCC_GetHCLKFreq>
 8004648:	4602      	mov	r2, r0
 800464a:	4b05      	ldr	r3, [pc, #20]	; (8004660 <HAL_RCC_GetPCLK2Freq+0x20>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	0b5b      	lsrs	r3, r3, #13
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	4903      	ldr	r1, [pc, #12]	; (8004664 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004656:	5ccb      	ldrb	r3, [r1, r3]
 8004658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800465c:	4618      	mov	r0, r3
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40023800 	.word	0x40023800
 8004664:	080092dc 	.word	0x080092dc

08004668 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	220f      	movs	r2, #15
 8004676:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004678:	4b12      	ldr	r3, [pc, #72]	; (80046c4 <HAL_RCC_GetClockConfig+0x5c>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f003 0203 	and.w	r2, r3, #3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004684:	4b0f      	ldr	r3, [pc, #60]	; (80046c4 <HAL_RCC_GetClockConfig+0x5c>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004690:	4b0c      	ldr	r3, [pc, #48]	; (80046c4 <HAL_RCC_GetClockConfig+0x5c>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800469c:	4b09      	ldr	r3, [pc, #36]	; (80046c4 <HAL_RCC_GetClockConfig+0x5c>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	08db      	lsrs	r3, r3, #3
 80046a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80046aa:	4b07      	ldr	r3, [pc, #28]	; (80046c8 <HAL_RCC_GetClockConfig+0x60>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0207 	and.w	r2, r3, #7
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	601a      	str	r2, [r3, #0]
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	40023800 	.word	0x40023800
 80046c8:	40023c00 	.word	0x40023c00

080046cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e041      	b.n	8004762 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d106      	bne.n	80046f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7fd f834 	bl	8001760 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3304      	adds	r3, #4
 8004708:	4619      	mov	r1, r3
 800470a:	4610      	mov	r0, r2
 800470c:	f000 fd22 	bl	8005154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3708      	adds	r7, #8
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
	...

0800476c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b01      	cmp	r3, #1
 800477e:	d001      	beq.n	8004784 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e03c      	b.n	80047fe <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a1e      	ldr	r2, [pc, #120]	; (800480c <HAL_TIM_Base_Start+0xa0>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d018      	beq.n	80047c8 <HAL_TIM_Base_Start+0x5c>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800479e:	d013      	beq.n	80047c8 <HAL_TIM_Base_Start+0x5c>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a1a      	ldr	r2, [pc, #104]	; (8004810 <HAL_TIM_Base_Start+0xa4>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d00e      	beq.n	80047c8 <HAL_TIM_Base_Start+0x5c>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a19      	ldr	r2, [pc, #100]	; (8004814 <HAL_TIM_Base_Start+0xa8>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d009      	beq.n	80047c8 <HAL_TIM_Base_Start+0x5c>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a17      	ldr	r2, [pc, #92]	; (8004818 <HAL_TIM_Base_Start+0xac>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d004      	beq.n	80047c8 <HAL_TIM_Base_Start+0x5c>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a16      	ldr	r2, [pc, #88]	; (800481c <HAL_TIM_Base_Start+0xb0>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d111      	bne.n	80047ec <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b06      	cmp	r3, #6
 80047d8:	d010      	beq.n	80047fc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f042 0201 	orr.w	r2, r2, #1
 80047e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ea:	e007      	b.n	80047fc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0201 	orr.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	40010000 	.word	0x40010000
 8004810:	40000400 	.word	0x40000400
 8004814:	40000800 	.word	0x40000800
 8004818:	40000c00 	.word	0x40000c00
 800481c:	40014000 	.word	0x40014000

08004820 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6a1a      	ldr	r2, [r3, #32]
 800482e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004832:	4013      	ands	r3, r2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10f      	bne.n	8004858 <HAL_TIM_Base_Stop+0x38>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6a1a      	ldr	r2, [r3, #32]
 800483e:	f240 4344 	movw	r3, #1092	; 0x444
 8004842:	4013      	ands	r3, r2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d107      	bne.n	8004858 <HAL_TIM_Base_Stop+0x38>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0201 	bic.w	r2, r2, #1
 8004856:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
	...

08004870 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b01      	cmp	r3, #1
 8004882:	d001      	beq.n	8004888 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e044      	b.n	8004912 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0201 	orr.w	r2, r2, #1
 800489e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a1e      	ldr	r2, [pc, #120]	; (8004920 <HAL_TIM_Base_Start_IT+0xb0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d018      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x6c>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b2:	d013      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x6c>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a1a      	ldr	r2, [pc, #104]	; (8004924 <HAL_TIM_Base_Start_IT+0xb4>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00e      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x6c>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a19      	ldr	r2, [pc, #100]	; (8004928 <HAL_TIM_Base_Start_IT+0xb8>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d009      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x6c>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a17      	ldr	r2, [pc, #92]	; (800492c <HAL_TIM_Base_Start_IT+0xbc>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d004      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x6c>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a16      	ldr	r2, [pc, #88]	; (8004930 <HAL_TIM_Base_Start_IT+0xc0>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d111      	bne.n	8004900 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2b06      	cmp	r3, #6
 80048ec:	d010      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f042 0201 	orr.w	r2, r2, #1
 80048fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048fe:	e007      	b.n	8004910 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0201 	orr.w	r2, r2, #1
 800490e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	40010000 	.word	0x40010000
 8004924:	40000400 	.word	0x40000400
 8004928:	40000800 	.word	0x40000800
 800492c:	40000c00 	.word	0x40000c00
 8004930:	40014000 	.word	0x40014000

08004934 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e041      	b.n	80049ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d106      	bne.n	8004960 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f839 	bl	80049d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3304      	adds	r3, #4
 8004970:	4619      	mov	r1, r3
 8004972:	4610      	mov	r0, r2
 8004974:	f000 fbee 	bl	8005154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
	...

080049e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d109      	bne.n	8004a0c <HAL_TIM_PWM_Start+0x24>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	bf14      	ite	ne
 8004a04:	2301      	movne	r3, #1
 8004a06:	2300      	moveq	r3, #0
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	e022      	b.n	8004a52 <HAL_TIM_PWM_Start+0x6a>
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d109      	bne.n	8004a26 <HAL_TIM_PWM_Start+0x3e>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	bf14      	ite	ne
 8004a1e:	2301      	movne	r3, #1
 8004a20:	2300      	moveq	r3, #0
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	e015      	b.n	8004a52 <HAL_TIM_PWM_Start+0x6a>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d109      	bne.n	8004a40 <HAL_TIM_PWM_Start+0x58>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	bf14      	ite	ne
 8004a38:	2301      	movne	r3, #1
 8004a3a:	2300      	moveq	r3, #0
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	e008      	b.n	8004a52 <HAL_TIM_PWM_Start+0x6a>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	bf14      	ite	ne
 8004a4c:	2301      	movne	r3, #1
 8004a4e:	2300      	moveq	r3, #0
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e068      	b.n	8004b2c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d104      	bne.n	8004a6a <HAL_TIM_PWM_Start+0x82>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a68:	e013      	b.n	8004a92 <HAL_TIM_PWM_Start+0xaa>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b04      	cmp	r3, #4
 8004a6e:	d104      	bne.n	8004a7a <HAL_TIM_PWM_Start+0x92>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2202      	movs	r2, #2
 8004a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a78:	e00b      	b.n	8004a92 <HAL_TIM_PWM_Start+0xaa>
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d104      	bne.n	8004a8a <HAL_TIM_PWM_Start+0xa2>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a88:	e003      	b.n	8004a92 <HAL_TIM_PWM_Start+0xaa>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2201      	movs	r2, #1
 8004a98:	6839      	ldr	r1, [r7, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 fe0c 	bl	80056b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a23      	ldr	r2, [pc, #140]	; (8004b34 <HAL_TIM_PWM_Start+0x14c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d107      	bne.n	8004aba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ab8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a1d      	ldr	r2, [pc, #116]	; (8004b34 <HAL_TIM_PWM_Start+0x14c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d018      	beq.n	8004af6 <HAL_TIM_PWM_Start+0x10e>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004acc:	d013      	beq.n	8004af6 <HAL_TIM_PWM_Start+0x10e>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a19      	ldr	r2, [pc, #100]	; (8004b38 <HAL_TIM_PWM_Start+0x150>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d00e      	beq.n	8004af6 <HAL_TIM_PWM_Start+0x10e>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a17      	ldr	r2, [pc, #92]	; (8004b3c <HAL_TIM_PWM_Start+0x154>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d009      	beq.n	8004af6 <HAL_TIM_PWM_Start+0x10e>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a16      	ldr	r2, [pc, #88]	; (8004b40 <HAL_TIM_PWM_Start+0x158>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d004      	beq.n	8004af6 <HAL_TIM_PWM_Start+0x10e>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a14      	ldr	r2, [pc, #80]	; (8004b44 <HAL_TIM_PWM_Start+0x15c>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d111      	bne.n	8004b1a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2b06      	cmp	r3, #6
 8004b06:	d010      	beq.n	8004b2a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0201 	orr.w	r2, r2, #1
 8004b16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b18:	e007      	b.n	8004b2a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f042 0201 	orr.w	r2, r2, #1
 8004b28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	40010000 	.word	0x40010000
 8004b38:	40000400 	.word	0x40000400
 8004b3c:	40000800 	.word	0x40000800
 8004b40:	40000c00 	.word	0x40000c00
 8004b44:	40014000 	.word	0x40014000

08004b48 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2200      	movs	r2, #0
 8004b58:	6839      	ldr	r1, [r7, #0]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 fdac 	bl	80056b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a29      	ldr	r2, [pc, #164]	; (8004c0c <HAL_TIM_PWM_Stop+0xc4>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d117      	bne.n	8004b9a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6a1a      	ldr	r2, [r3, #32]
 8004b70:	f241 1311 	movw	r3, #4369	; 0x1111
 8004b74:	4013      	ands	r3, r2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10f      	bne.n	8004b9a <HAL_TIM_PWM_Stop+0x52>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6a1a      	ldr	r2, [r3, #32]
 8004b80:	f240 4344 	movw	r3, #1092	; 0x444
 8004b84:	4013      	ands	r3, r2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d107      	bne.n	8004b9a <HAL_TIM_PWM_Stop+0x52>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6a1a      	ldr	r2, [r3, #32]
 8004ba0:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10f      	bne.n	8004bca <HAL_TIM_PWM_Stop+0x82>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6a1a      	ldr	r2, [r3, #32]
 8004bb0:	f240 4344 	movw	r3, #1092	; 0x444
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d107      	bne.n	8004bca <HAL_TIM_PWM_Stop+0x82>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0201 	bic.w	r2, r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d104      	bne.n	8004bda <HAL_TIM_PWM_Stop+0x92>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bd8:	e013      	b.n	8004c02 <HAL_TIM_PWM_Stop+0xba>
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d104      	bne.n	8004bea <HAL_TIM_PWM_Stop+0xa2>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004be8:	e00b      	b.n	8004c02 <HAL_TIM_PWM_Stop+0xba>
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b08      	cmp	r3, #8
 8004bee:	d104      	bne.n	8004bfa <HAL_TIM_PWM_Stop+0xb2>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bf8:	e003      	b.n	8004c02 <HAL_TIM_PWM_Stop+0xba>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	40010000 	.word	0x40010000

08004c10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d020      	beq.n	8004c74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d01b      	beq.n	8004c74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f06f 0202 	mvn.w	r2, #2
 8004c44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	f003 0303 	and.w	r3, r3, #3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d003      	beq.n	8004c62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 fa5b 	bl	8005116 <HAL_TIM_IC_CaptureCallback>
 8004c60:	e005      	b.n	8004c6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 fa4d 	bl	8005102 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 fa5e 	bl	800512a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f003 0304 	and.w	r3, r3, #4
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d020      	beq.n	8004cc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f003 0304 	and.w	r3, r3, #4
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d01b      	beq.n	8004cc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0204 	mvn.w	r2, #4
 8004c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2202      	movs	r2, #2
 8004c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fa35 	bl	8005116 <HAL_TIM_IC_CaptureCallback>
 8004cac:	e005      	b.n	8004cba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 fa27 	bl	8005102 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 fa38 	bl	800512a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f003 0308 	and.w	r3, r3, #8
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d020      	beq.n	8004d0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01b      	beq.n	8004d0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f06f 0208 	mvn.w	r2, #8
 8004cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2204      	movs	r2, #4
 8004ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	f003 0303 	and.w	r3, r3, #3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 fa0f 	bl	8005116 <HAL_TIM_IC_CaptureCallback>
 8004cf8:	e005      	b.n	8004d06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fa01 	bl	8005102 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fa12 	bl	800512a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f003 0310 	and.w	r3, r3, #16
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d020      	beq.n	8004d58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f003 0310 	and.w	r3, r3, #16
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d01b      	beq.n	8004d58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f06f 0210 	mvn.w	r2, #16
 8004d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2208      	movs	r2, #8
 8004d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f9e9 	bl	8005116 <HAL_TIM_IC_CaptureCallback>
 8004d44:	e005      	b.n	8004d52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f9db 	bl	8005102 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f9ec 	bl	800512a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00c      	beq.n	8004d7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d007      	beq.n	8004d7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f06f 0201 	mvn.w	r2, #1
 8004d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7fc fc66 	bl	8001648 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00c      	beq.n	8004da0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d007      	beq.n	8004da0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 fd2a 	bl	80057f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00c      	beq.n	8004dc4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d007      	beq.n	8004dc4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f9bd 	bl	800513e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f003 0320 	and.w	r3, r3, #32
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00c      	beq.n	8004de8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f003 0320 	and.w	r3, r3, #32
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d007      	beq.n	8004de8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f06f 0220 	mvn.w	r2, #32
 8004de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 fcfc 	bl	80057e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004de8:	bf00      	nop
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d101      	bne.n	8004e0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e0ae      	b.n	8004f6c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b0c      	cmp	r3, #12
 8004e1a:	f200 809f 	bhi.w	8004f5c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e1e:	a201      	add	r2, pc, #4	; (adr r2, 8004e24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e24:	08004e59 	.word	0x08004e59
 8004e28:	08004f5d 	.word	0x08004f5d
 8004e2c:	08004f5d 	.word	0x08004f5d
 8004e30:	08004f5d 	.word	0x08004f5d
 8004e34:	08004e99 	.word	0x08004e99
 8004e38:	08004f5d 	.word	0x08004f5d
 8004e3c:	08004f5d 	.word	0x08004f5d
 8004e40:	08004f5d 	.word	0x08004f5d
 8004e44:	08004edb 	.word	0x08004edb
 8004e48:	08004f5d 	.word	0x08004f5d
 8004e4c:	08004f5d 	.word	0x08004f5d
 8004e50:	08004f5d 	.word	0x08004f5d
 8004e54:	08004f1b 	.word	0x08004f1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68b9      	ldr	r1, [r7, #8]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 fa04 	bl	800526c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	699a      	ldr	r2, [r3, #24]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f042 0208 	orr.w	r2, r2, #8
 8004e72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	699a      	ldr	r2, [r3, #24]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f022 0204 	bic.w	r2, r2, #4
 8004e82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6999      	ldr	r1, [r3, #24]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	691a      	ldr	r2, [r3, #16]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	619a      	str	r2, [r3, #24]
      break;
 8004e96:	e064      	b.n	8004f62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68b9      	ldr	r1, [r7, #8]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 fa4a 	bl	8005338 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	699a      	ldr	r2, [r3, #24]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	699a      	ldr	r2, [r3, #24]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ec2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6999      	ldr	r1, [r3, #24]
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	021a      	lsls	r2, r3, #8
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	619a      	str	r2, [r3, #24]
      break;
 8004ed8:	e043      	b.n	8004f62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68b9      	ldr	r1, [r7, #8]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 fa95 	bl	8005410 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	69da      	ldr	r2, [r3, #28]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f042 0208 	orr.w	r2, r2, #8
 8004ef4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	69da      	ldr	r2, [r3, #28]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 0204 	bic.w	r2, r2, #4
 8004f04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69d9      	ldr	r1, [r3, #28]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	691a      	ldr	r2, [r3, #16]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	61da      	str	r2, [r3, #28]
      break;
 8004f18:	e023      	b.n	8004f62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68b9      	ldr	r1, [r7, #8]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 fadf 	bl	80054e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	69da      	ldr	r2, [r3, #28]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	69da      	ldr	r2, [r3, #28]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	69d9      	ldr	r1, [r3, #28]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	021a      	lsls	r2, r3, #8
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	61da      	str	r2, [r3, #28]
      break;
 8004f5a:	e002      	b.n	8004f62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3718      	adds	r7, #24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d101      	bne.n	8004f90 <HAL_TIM_ConfigClockSource+0x1c>
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	e0b4      	b.n	80050fa <HAL_TIM_ConfigClockSource+0x186>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fc8:	d03e      	beq.n	8005048 <HAL_TIM_ConfigClockSource+0xd4>
 8004fca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fce:	f200 8087 	bhi.w	80050e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fd6:	f000 8086 	beq.w	80050e6 <HAL_TIM_ConfigClockSource+0x172>
 8004fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fde:	d87f      	bhi.n	80050e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fe0:	2b70      	cmp	r3, #112	; 0x70
 8004fe2:	d01a      	beq.n	800501a <HAL_TIM_ConfigClockSource+0xa6>
 8004fe4:	2b70      	cmp	r3, #112	; 0x70
 8004fe6:	d87b      	bhi.n	80050e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fe8:	2b60      	cmp	r3, #96	; 0x60
 8004fea:	d050      	beq.n	800508e <HAL_TIM_ConfigClockSource+0x11a>
 8004fec:	2b60      	cmp	r3, #96	; 0x60
 8004fee:	d877      	bhi.n	80050e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ff0:	2b50      	cmp	r3, #80	; 0x50
 8004ff2:	d03c      	beq.n	800506e <HAL_TIM_ConfigClockSource+0xfa>
 8004ff4:	2b50      	cmp	r3, #80	; 0x50
 8004ff6:	d873      	bhi.n	80050e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ff8:	2b40      	cmp	r3, #64	; 0x40
 8004ffa:	d058      	beq.n	80050ae <HAL_TIM_ConfigClockSource+0x13a>
 8004ffc:	2b40      	cmp	r3, #64	; 0x40
 8004ffe:	d86f      	bhi.n	80050e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005000:	2b30      	cmp	r3, #48	; 0x30
 8005002:	d064      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0x15a>
 8005004:	2b30      	cmp	r3, #48	; 0x30
 8005006:	d86b      	bhi.n	80050e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005008:	2b20      	cmp	r3, #32
 800500a:	d060      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0x15a>
 800500c:	2b20      	cmp	r3, #32
 800500e:	d867      	bhi.n	80050e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005010:	2b00      	cmp	r3, #0
 8005012:	d05c      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0x15a>
 8005014:	2b10      	cmp	r3, #16
 8005016:	d05a      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0x15a>
 8005018:	e062      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800502a:	f000 fb25 	bl	8005678 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800503c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	609a      	str	r2, [r3, #8]
      break;
 8005046:	e04f      	b.n	80050e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005058:	f000 fb0e 	bl	8005678 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689a      	ldr	r2, [r3, #8]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800506a:	609a      	str	r2, [r3, #8]
      break;
 800506c:	e03c      	b.n	80050e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800507a:	461a      	mov	r2, r3
 800507c:	f000 fa82 	bl	8005584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2150      	movs	r1, #80	; 0x50
 8005086:	4618      	mov	r0, r3
 8005088:	f000 fadb 	bl	8005642 <TIM_ITRx_SetConfig>
      break;
 800508c:	e02c      	b.n	80050e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800509a:	461a      	mov	r2, r3
 800509c:	f000 faa1 	bl	80055e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2160      	movs	r1, #96	; 0x60
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 facb 	bl	8005642 <TIM_ITRx_SetConfig>
      break;
 80050ac:	e01c      	b.n	80050e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ba:	461a      	mov	r2, r3
 80050bc:	f000 fa62 	bl	8005584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2140      	movs	r1, #64	; 0x40
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 fabb 	bl	8005642 <TIM_ITRx_SetConfig>
      break;
 80050cc:	e00c      	b.n	80050e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4619      	mov	r1, r3
 80050d8:	4610      	mov	r0, r2
 80050da:	f000 fab2 	bl	8005642 <TIM_ITRx_SetConfig>
      break;
 80050de:	e003      	b.n	80050e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	73fb      	strb	r3, [r7, #15]
      break;
 80050e4:	e000      	b.n	80050e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005102:	b480      	push	{r7}
 8005104:	b083      	sub	sp, #12
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800510a:	bf00      	nop
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005116:	b480      	push	{r7}
 8005118:	b083      	sub	sp, #12
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800511e:	bf00      	nop
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800512a:	b480      	push	{r7}
 800512c:	b083      	sub	sp, #12
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005132:	bf00      	nop
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005146:	bf00      	nop
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
	...

08005154 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a3a      	ldr	r2, [pc, #232]	; (8005250 <TIM_Base_SetConfig+0xfc>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d00f      	beq.n	800518c <TIM_Base_SetConfig+0x38>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005172:	d00b      	beq.n	800518c <TIM_Base_SetConfig+0x38>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a37      	ldr	r2, [pc, #220]	; (8005254 <TIM_Base_SetConfig+0x100>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d007      	beq.n	800518c <TIM_Base_SetConfig+0x38>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a36      	ldr	r2, [pc, #216]	; (8005258 <TIM_Base_SetConfig+0x104>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d003      	beq.n	800518c <TIM_Base_SetConfig+0x38>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a35      	ldr	r2, [pc, #212]	; (800525c <TIM_Base_SetConfig+0x108>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d108      	bne.n	800519e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005192:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a2b      	ldr	r2, [pc, #172]	; (8005250 <TIM_Base_SetConfig+0xfc>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d01b      	beq.n	80051de <TIM_Base_SetConfig+0x8a>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ac:	d017      	beq.n	80051de <TIM_Base_SetConfig+0x8a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a28      	ldr	r2, [pc, #160]	; (8005254 <TIM_Base_SetConfig+0x100>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d013      	beq.n	80051de <TIM_Base_SetConfig+0x8a>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a27      	ldr	r2, [pc, #156]	; (8005258 <TIM_Base_SetConfig+0x104>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d00f      	beq.n	80051de <TIM_Base_SetConfig+0x8a>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a26      	ldr	r2, [pc, #152]	; (800525c <TIM_Base_SetConfig+0x108>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d00b      	beq.n	80051de <TIM_Base_SetConfig+0x8a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a25      	ldr	r2, [pc, #148]	; (8005260 <TIM_Base_SetConfig+0x10c>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d007      	beq.n	80051de <TIM_Base_SetConfig+0x8a>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a24      	ldr	r2, [pc, #144]	; (8005264 <TIM_Base_SetConfig+0x110>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d003      	beq.n	80051de <TIM_Base_SetConfig+0x8a>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a23      	ldr	r2, [pc, #140]	; (8005268 <TIM_Base_SetConfig+0x114>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d108      	bne.n	80051f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a0e      	ldr	r2, [pc, #56]	; (8005250 <TIM_Base_SetConfig+0xfc>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d103      	bne.n	8005224 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	691a      	ldr	r2, [r3, #16]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b01      	cmp	r3, #1
 8005234:	d105      	bne.n	8005242 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f023 0201 	bic.w	r2, r3, #1
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	611a      	str	r2, [r3, #16]
  }
}
 8005242:	bf00      	nop
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	40010000 	.word	0x40010000
 8005254:	40000400 	.word	0x40000400
 8005258:	40000800 	.word	0x40000800
 800525c:	40000c00 	.word	0x40000c00
 8005260:	40014000 	.word	0x40014000
 8005264:	40014400 	.word	0x40014400
 8005268:	40014800 	.word	0x40014800

0800526c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	f023 0201 	bic.w	r2, r3, #1
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 0303 	bic.w	r3, r3, #3
 80052a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f023 0302 	bic.w	r3, r3, #2
 80052b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	4313      	orrs	r3, r2
 80052be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a1c      	ldr	r2, [pc, #112]	; (8005334 <TIM_OC1_SetConfig+0xc8>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d10c      	bne.n	80052e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f023 0308 	bic.w	r3, r3, #8
 80052ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f023 0304 	bic.w	r3, r3, #4
 80052e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a13      	ldr	r2, [pc, #76]	; (8005334 <TIM_OC1_SetConfig+0xc8>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d111      	bne.n	800530e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	4313      	orrs	r3, r2
 8005302:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	4313      	orrs	r3, r2
 800530c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	685a      	ldr	r2, [r3, #4]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	621a      	str	r2, [r3, #32]
}
 8005328:	bf00      	nop
 800532a:	371c      	adds	r7, #28
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	40010000 	.word	0x40010000

08005338 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005338:	b480      	push	{r7}
 800533a:	b087      	sub	sp, #28
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	f023 0210 	bic.w	r2, r3, #16
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800536e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	021b      	lsls	r3, r3, #8
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4313      	orrs	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f023 0320 	bic.w	r3, r3, #32
 8005382:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	4313      	orrs	r3, r2
 800538e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a1e      	ldr	r2, [pc, #120]	; (800540c <TIM_OC2_SetConfig+0xd4>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d10d      	bne.n	80053b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800539e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	011b      	lsls	r3, r3, #4
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a15      	ldr	r2, [pc, #84]	; (800540c <TIM_OC2_SetConfig+0xd4>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d113      	bne.n	80053e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	621a      	str	r2, [r3, #32]
}
 80053fe:	bf00      	nop
 8005400:	371c      	adds	r7, #28
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	40010000 	.word	0x40010000

08005410 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005410:	b480      	push	{r7}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a1b      	ldr	r3, [r3, #32]
 8005424:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 0303 	bic.w	r3, r3, #3
 8005446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	021b      	lsls	r3, r3, #8
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	4313      	orrs	r3, r2
 8005464:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a1d      	ldr	r2, [pc, #116]	; (80054e0 <TIM_OC3_SetConfig+0xd0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d10d      	bne.n	800548a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005474:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	021b      	lsls	r3, r3, #8
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	4313      	orrs	r3, r2
 8005480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a14      	ldr	r2, [pc, #80]	; (80054e0 <TIM_OC3_SetConfig+0xd0>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d113      	bne.n	80054ba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	011b      	lsls	r3, r3, #4
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	621a      	str	r2, [r3, #32]
}
 80054d4:	bf00      	nop
 80054d6:	371c      	adds	r7, #28
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	40010000 	.word	0x40010000

080054e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b087      	sub	sp, #28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800551a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	021b      	lsls	r3, r3, #8
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	4313      	orrs	r3, r2
 8005526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800552e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	031b      	lsls	r3, r3, #12
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	4313      	orrs	r3, r2
 800553a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a10      	ldr	r2, [pc, #64]	; (8005580 <TIM_OC4_SetConfig+0x9c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d109      	bne.n	8005558 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800554a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	019b      	lsls	r3, r3, #6
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	4313      	orrs	r3, r2
 8005556:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	621a      	str	r2, [r3, #32]
}
 8005572:	bf00      	nop
 8005574:	371c      	adds	r7, #28
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40010000 	.word	0x40010000

08005584 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	f023 0201 	bic.w	r2, r3, #1
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f023 030a 	bic.w	r3, r3, #10
 80055c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	621a      	str	r2, [r3, #32]
}
 80055d6:	bf00      	nop
 80055d8:	371c      	adds	r7, #28
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b087      	sub	sp, #28
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	60f8      	str	r0, [r7, #12]
 80055ea:	60b9      	str	r1, [r7, #8]
 80055ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	f023 0210 	bic.w	r2, r3, #16
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800560c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	031b      	lsls	r3, r3, #12
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	4313      	orrs	r3, r2
 8005616:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800561e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	011b      	lsls	r3, r3, #4
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	4313      	orrs	r3, r2
 8005628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	621a      	str	r2, [r3, #32]
}
 8005636:	bf00      	nop
 8005638:	371c      	adds	r7, #28
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005642:	b480      	push	{r7}
 8005644:	b085      	sub	sp, #20
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005658:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4313      	orrs	r3, r2
 8005660:	f043 0307 	orr.w	r3, r3, #7
 8005664:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	609a      	str	r2, [r3, #8]
}
 800566c:	bf00      	nop
 800566e:	3714      	adds	r7, #20
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005678:	b480      	push	{r7}
 800567a:	b087      	sub	sp, #28
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
 8005684:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005692:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	021a      	lsls	r2, r3, #8
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	431a      	orrs	r2, r3
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	4313      	orrs	r3, r2
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	609a      	str	r2, [r3, #8]
}
 80056ac:	bf00      	nop
 80056ae:	371c      	adds	r7, #28
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	f003 031f 	and.w	r3, r3, #31
 80056ca:	2201      	movs	r2, #1
 80056cc:	fa02 f303 	lsl.w	r3, r2, r3
 80056d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6a1a      	ldr	r2, [r3, #32]
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	43db      	mvns	r3, r3
 80056da:	401a      	ands	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6a1a      	ldr	r2, [r3, #32]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	f003 031f 	and.w	r3, r3, #31
 80056ea:	6879      	ldr	r1, [r7, #4]
 80056ec:	fa01 f303 	lsl.w	r3, r1, r3
 80056f0:	431a      	orrs	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	621a      	str	r2, [r3, #32]
}
 80056f6:	bf00      	nop
 80056f8:	371c      	adds	r7, #28
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
	...

08005704 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005714:	2b01      	cmp	r3, #1
 8005716:	d101      	bne.n	800571c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005718:	2302      	movs	r3, #2
 800571a:	e050      	b.n	80057be <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005742:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	4313      	orrs	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a1c      	ldr	r2, [pc, #112]	; (80057cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d018      	beq.n	8005792 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005768:	d013      	beq.n	8005792 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a18      	ldr	r2, [pc, #96]	; (80057d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d00e      	beq.n	8005792 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a16      	ldr	r2, [pc, #88]	; (80057d4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d009      	beq.n	8005792 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a15      	ldr	r2, [pc, #84]	; (80057d8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d004      	beq.n	8005792 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a13      	ldr	r2, [pc, #76]	; (80057dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d10c      	bne.n	80057ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005798:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	40010000 	.word	0x40010000
 80057d0:	40000400 	.word	0x40000400
 80057d4:	40000800 	.word	0x40000800
 80057d8:	40000c00 	.word	0x40000c00
 80057dc:	40014000 	.word	0x40014000

080057e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e042      	b.n	80058a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d106      	bne.n	8005834 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7fc f838 	bl	80018a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2224      	movs	r2, #36	; 0x24
 8005838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68da      	ldr	r2, [r3, #12]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800584a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 fdbd 	bl	80063cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	691a      	ldr	r2, [r3, #16]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005860:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	695a      	ldr	r2, [r3, #20]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005870:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68da      	ldr	r2, [r3, #12]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005880:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2220      	movs	r2, #32
 800588c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2220      	movs	r2, #32
 8005894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b08a      	sub	sp, #40	; 0x28
 80058ac:	af02      	add	r7, sp, #8
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	603b      	str	r3, [r7, #0]
 80058b4:	4613      	mov	r3, r2
 80058b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b20      	cmp	r3, #32
 80058c6:	d175      	bne.n	80059b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d002      	beq.n	80058d4 <HAL_UART_Transmit+0x2c>
 80058ce:	88fb      	ldrh	r3, [r7, #6]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d101      	bne.n	80058d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e06e      	b.n	80059b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2221      	movs	r2, #33	; 0x21
 80058e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058e6:	f7fd f9fd 	bl	8002ce4 <HAL_GetTick>
 80058ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	88fa      	ldrh	r2, [r7, #6]
 80058f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	88fa      	ldrh	r2, [r7, #6]
 80058f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005900:	d108      	bne.n	8005914 <HAL_UART_Transmit+0x6c>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d104      	bne.n	8005914 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800590a:	2300      	movs	r3, #0
 800590c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	61bb      	str	r3, [r7, #24]
 8005912:	e003      	b.n	800591c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005918:	2300      	movs	r3, #0
 800591a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800591c:	e02e      	b.n	800597c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2200      	movs	r2, #0
 8005926:	2180      	movs	r1, #128	; 0x80
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 fb1f 	bl	8005f6c <UART_WaitOnFlagUntilTimeout>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d005      	beq.n	8005940 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2220      	movs	r2, #32
 8005938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e03a      	b.n	80059b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10b      	bne.n	800595e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	881b      	ldrh	r3, [r3, #0]
 800594a:	461a      	mov	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005954:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	3302      	adds	r3, #2
 800595a:	61bb      	str	r3, [r7, #24]
 800595c:	e007      	b.n	800596e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	781a      	ldrb	r2, [r3, #0]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	3301      	adds	r3, #1
 800596c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005972:	b29b      	uxth	r3, r3
 8005974:	3b01      	subs	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005980:	b29b      	uxth	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1cb      	bne.n	800591e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2200      	movs	r2, #0
 800598e:	2140      	movs	r1, #64	; 0x40
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f000 faeb 	bl	8005f6c <UART_WaitOnFlagUntilTimeout>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d005      	beq.n	80059a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2220      	movs	r2, #32
 80059a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e006      	b.n	80059b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2220      	movs	r2, #32
 80059ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80059b0:	2300      	movs	r3, #0
 80059b2:	e000      	b.n	80059b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80059b4:	2302      	movs	r3, #2
  }
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3720      	adds	r7, #32
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b084      	sub	sp, #16
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	60f8      	str	r0, [r7, #12]
 80059c6:	60b9      	str	r1, [r7, #8]
 80059c8:	4613      	mov	r3, r2
 80059ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b20      	cmp	r3, #32
 80059d6:	d112      	bne.n	80059fe <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d002      	beq.n	80059e4 <HAL_UART_Receive_IT+0x26>
 80059de:	88fb      	ldrh	r3, [r7, #6]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d101      	bne.n	80059e8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e00b      	b.n	8005a00 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80059ee:	88fb      	ldrh	r3, [r7, #6]
 80059f0:	461a      	mov	r2, r3
 80059f2:	68b9      	ldr	r1, [r7, #8]
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f000 fb12 	bl	800601e <UART_Start_Receive_IT>
 80059fa:	4603      	mov	r3, r0
 80059fc:	e000      	b.n	8005a00 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80059fe:	2302      	movs	r3, #2
  }
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b0ba      	sub	sp, #232	; 0xe8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a3e:	f003 030f 	and.w	r3, r3, #15
 8005a42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005a46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10f      	bne.n	8005a6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a52:	f003 0320 	and.w	r3, r3, #32
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d009      	beq.n	8005a6e <HAL_UART_IRQHandler+0x66>
 8005a5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a5e:	f003 0320 	and.w	r3, r3, #32
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d003      	beq.n	8005a6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 fbf2 	bl	8006250 <UART_Receive_IT>
      return;
 8005a6c:	e25b      	b.n	8005f26 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f000 80de 	beq.w	8005c34 <HAL_UART_IRQHandler+0x22c>
 8005a78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d106      	bne.n	8005a92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a88:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 80d1 	beq.w	8005c34 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00b      	beq.n	8005ab6 <HAL_UART_IRQHandler+0xae>
 8005a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d005      	beq.n	8005ab6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aae:	f043 0201 	orr.w	r2, r3, #1
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aba:	f003 0304 	and.w	r3, r3, #4
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00b      	beq.n	8005ada <HAL_UART_IRQHandler+0xd2>
 8005ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d005      	beq.n	8005ada <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad2:	f043 0202 	orr.w	r2, r3, #2
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00b      	beq.n	8005afe <HAL_UART_IRQHandler+0xf6>
 8005ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d005      	beq.n	8005afe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af6:	f043 0204 	orr.w	r2, r3, #4
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b02:	f003 0308 	and.w	r3, r3, #8
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d011      	beq.n	8005b2e <HAL_UART_IRQHandler+0x126>
 8005b0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b0e:	f003 0320 	and.w	r3, r3, #32
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d105      	bne.n	8005b22 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d005      	beq.n	8005b2e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b26:	f043 0208 	orr.w	r2, r3, #8
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 81f2 	beq.w	8005f1c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b3c:	f003 0320 	and.w	r3, r3, #32
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d008      	beq.n	8005b56 <HAL_UART_IRQHandler+0x14e>
 8005b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b48:	f003 0320 	and.w	r3, r3, #32
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fb7d 	bl	8006250 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b60:	2b40      	cmp	r3, #64	; 0x40
 8005b62:	bf0c      	ite	eq
 8005b64:	2301      	moveq	r3, #1
 8005b66:	2300      	movne	r3, #0
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b72:	f003 0308 	and.w	r3, r3, #8
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d103      	bne.n	8005b82 <HAL_UART_IRQHandler+0x17a>
 8005b7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d04f      	beq.n	8005c22 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fa85 	bl	8006092 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b92:	2b40      	cmp	r3, #64	; 0x40
 8005b94:	d141      	bne.n	8005c1a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3314      	adds	r3, #20
 8005b9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ba4:	e853 3f00 	ldrex	r3, [r3]
 8005ba8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005bac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	3314      	adds	r3, #20
 8005bbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005bc2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005bc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005bce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005bd2:	e841 2300 	strex	r3, r2, [r1]
 8005bd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005bda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1d9      	bne.n	8005b96 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d013      	beq.n	8005c12 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bee:	4a7e      	ldr	r2, [pc, #504]	; (8005de8 <HAL_UART_IRQHandler+0x3e0>)
 8005bf0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7fd f9f6 	bl	8002fe8 <HAL_DMA_Abort_IT>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d016      	beq.n	8005c30 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c10:	e00e      	b.n	8005c30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f994 	bl	8005f40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c18:	e00a      	b.n	8005c30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f990 	bl	8005f40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c20:	e006      	b.n	8005c30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f98c 	bl	8005f40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005c2e:	e175      	b.n	8005f1c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c30:	bf00      	nop
    return;
 8005c32:	e173      	b.n	8005f1c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	f040 814f 	bne.w	8005edc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c42:	f003 0310 	and.w	r3, r3, #16
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f000 8148 	beq.w	8005edc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c50:	f003 0310 	and.w	r3, r3, #16
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f000 8141 	beq.w	8005edc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	60bb      	str	r3, [r7, #8]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	60bb      	str	r3, [r7, #8]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	60bb      	str	r3, [r7, #8]
 8005c6e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7a:	2b40      	cmp	r3, #64	; 0x40
 8005c7c:	f040 80b6 	bne.w	8005dec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f000 8145 	beq.w	8005f20 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	f080 813e 	bcs.w	8005f20 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005caa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cb6:	f000 8088 	beq.w	8005dca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	330c      	adds	r3, #12
 8005cc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cc8:	e853 3f00 	ldrex	r3, [r3]
 8005ccc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005cd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	330c      	adds	r3, #12
 8005ce2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005ce6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005cea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005cf2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005cf6:	e841 2300 	strex	r3, r2, [r1]
 8005cfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005cfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1d9      	bne.n	8005cba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	3314      	adds	r3, #20
 8005d0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d10:	e853 3f00 	ldrex	r3, [r3]
 8005d14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d18:	f023 0301 	bic.w	r3, r3, #1
 8005d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	3314      	adds	r3, #20
 8005d26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005d2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005d32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d36:	e841 2300 	strex	r3, r2, [r1]
 8005d3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005d3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1e1      	bne.n	8005d06 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	3314      	adds	r3, #20
 8005d48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d4c:	e853 3f00 	ldrex	r3, [r3]
 8005d50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	3314      	adds	r3, #20
 8005d62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005d66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d6e:	e841 2300 	strex	r3, r2, [r1]
 8005d72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005d74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1e3      	bne.n	8005d42 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	330c      	adds	r3, #12
 8005d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d92:	e853 3f00 	ldrex	r3, [r3]
 8005d96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d9a:	f023 0310 	bic.w	r3, r3, #16
 8005d9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	330c      	adds	r3, #12
 8005da8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005dac:	65ba      	str	r2, [r7, #88]	; 0x58
 8005dae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005db2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005db4:	e841 2300 	strex	r3, r2, [r1]
 8005db8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1e3      	bne.n	8005d88 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7fd f89f 	bl	8002f08 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2202      	movs	r2, #2
 8005dce:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	4619      	mov	r1, r3
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f8b7 	bl	8005f54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005de6:	e09b      	b.n	8005f20 <HAL_UART_IRQHandler+0x518>
 8005de8:	08006159 	.word	0x08006159
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 808e 	beq.w	8005f24 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005e08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f000 8089 	beq.w	8005f24 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	330c      	adds	r3, #12
 8005e18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1c:	e853 3f00 	ldrex	r3, [r3]
 8005e20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	330c      	adds	r3, #12
 8005e32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005e36:	647a      	str	r2, [r7, #68]	; 0x44
 8005e38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e3e:	e841 2300 	strex	r3, r2, [r1]
 8005e42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1e3      	bne.n	8005e12 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	3314      	adds	r3, #20
 8005e50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	e853 3f00 	ldrex	r3, [r3]
 8005e58:	623b      	str	r3, [r7, #32]
   return(result);
 8005e5a:	6a3b      	ldr	r3, [r7, #32]
 8005e5c:	f023 0301 	bic.w	r3, r3, #1
 8005e60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	3314      	adds	r3, #20
 8005e6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e6e:	633a      	str	r2, [r7, #48]	; 0x30
 8005e70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e76:	e841 2300 	strex	r3, r2, [r1]
 8005e7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1e3      	bne.n	8005e4a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2220      	movs	r2, #32
 8005e86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	330c      	adds	r3, #12
 8005e96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	e853 3f00 	ldrex	r3, [r3]
 8005e9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f023 0310 	bic.w	r3, r3, #16
 8005ea6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	330c      	adds	r3, #12
 8005eb0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005eb4:	61fa      	str	r2, [r7, #28]
 8005eb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb8:	69b9      	ldr	r1, [r7, #24]
 8005eba:	69fa      	ldr	r2, [r7, #28]
 8005ebc:	e841 2300 	strex	r3, r2, [r1]
 8005ec0:	617b      	str	r3, [r7, #20]
   return(result);
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1e3      	bne.n	8005e90 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ece:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 f83d 	bl	8005f54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005eda:	e023      	b.n	8005f24 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d009      	beq.n	8005efc <HAL_UART_IRQHandler+0x4f4>
 8005ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d003      	beq.n	8005efc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 f943 	bl	8006180 <UART_Transmit_IT>
    return;
 8005efa:	e014      	b.n	8005f26 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00e      	beq.n	8005f26 <HAL_UART_IRQHandler+0x51e>
 8005f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d008      	beq.n	8005f26 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 f983 	bl	8006220 <UART_EndTransmit_IT>
    return;
 8005f1a:	e004      	b.n	8005f26 <HAL_UART_IRQHandler+0x51e>
    return;
 8005f1c:	bf00      	nop
 8005f1e:	e002      	b.n	8005f26 <HAL_UART_IRQHandler+0x51e>
      return;
 8005f20:	bf00      	nop
 8005f22:	e000      	b.n	8005f26 <HAL_UART_IRQHandler+0x51e>
      return;
 8005f24:	bf00      	nop
  }
}
 8005f26:	37e8      	adds	r7, #232	; 0xe8
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	603b      	str	r3, [r7, #0]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f7c:	e03b      	b.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f84:	d037      	beq.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f86:	f7fc fead 	bl	8002ce4 <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	6a3a      	ldr	r2, [r7, #32]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d302      	bcc.n	8005f9c <UART_WaitOnFlagUntilTimeout+0x30>
 8005f96:	6a3b      	ldr	r3, [r7, #32]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d101      	bne.n	8005fa0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e03a      	b.n	8006016 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	f003 0304 	and.w	r3, r3, #4
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d023      	beq.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	2b80      	cmp	r3, #128	; 0x80
 8005fb2:	d020      	beq.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	2b40      	cmp	r3, #64	; 0x40
 8005fb8:	d01d      	beq.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0308 	and.w	r3, r3, #8
 8005fc4:	2b08      	cmp	r3, #8
 8005fc6:	d116      	bne.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005fc8:	2300      	movs	r3, #0
 8005fca:	617b      	str	r3, [r7, #20]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	617b      	str	r3, [r7, #20]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	617b      	str	r3, [r7, #20]
 8005fdc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f000 f857 	bl	8006092 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2208      	movs	r2, #8
 8005fe8:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e00f      	b.n	8006016 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	4013      	ands	r3, r2
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	429a      	cmp	r2, r3
 8006004:	bf0c      	ite	eq
 8006006:	2301      	moveq	r3, #1
 8006008:	2300      	movne	r3, #0
 800600a:	b2db      	uxtb	r3, r3
 800600c:	461a      	mov	r2, r3
 800600e:	79fb      	ldrb	r3, [r7, #7]
 8006010:	429a      	cmp	r2, r3
 8006012:	d0b4      	beq.n	8005f7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3718      	adds	r7, #24
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800601e:	b480      	push	{r7}
 8006020:	b085      	sub	sp, #20
 8006022:	af00      	add	r7, sp, #0
 8006024:	60f8      	str	r0, [r7, #12]
 8006026:	60b9      	str	r1, [r7, #8]
 8006028:	4613      	mov	r3, r2
 800602a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	88fa      	ldrh	r2, [r7, #6]
 8006036:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	88fa      	ldrh	r2, [r7, #6]
 800603c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2222      	movs	r2, #34	; 0x22
 8006048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d007      	beq.n	8006064 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68da      	ldr	r2, [r3, #12]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006062:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	695a      	ldr	r2, [r3, #20]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f042 0201 	orr.w	r2, r2, #1
 8006072:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f042 0220 	orr.w	r2, r2, #32
 8006082:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006092:	b480      	push	{r7}
 8006094:	b095      	sub	sp, #84	; 0x54
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	330c      	adds	r3, #12
 80060a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a4:	e853 3f00 	ldrex	r3, [r3]
 80060a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	330c      	adds	r3, #12
 80060b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060ba:	643a      	str	r2, [r7, #64]	; 0x40
 80060bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060c2:	e841 2300 	strex	r3, r2, [r1]
 80060c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1e5      	bne.n	800609a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	3314      	adds	r3, #20
 80060d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d6:	6a3b      	ldr	r3, [r7, #32]
 80060d8:	e853 3f00 	ldrex	r3, [r3]
 80060dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	f023 0301 	bic.w	r3, r3, #1
 80060e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	3314      	adds	r3, #20
 80060ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060f6:	e841 2300 	strex	r3, r2, [r1]
 80060fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1e5      	bne.n	80060ce <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006106:	2b01      	cmp	r3, #1
 8006108:	d119      	bne.n	800613e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	330c      	adds	r3, #12
 8006110:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	e853 3f00 	ldrex	r3, [r3]
 8006118:	60bb      	str	r3, [r7, #8]
   return(result);
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	f023 0310 	bic.w	r3, r3, #16
 8006120:	647b      	str	r3, [r7, #68]	; 0x44
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	330c      	adds	r3, #12
 8006128:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800612a:	61ba      	str	r2, [r7, #24]
 800612c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612e:	6979      	ldr	r1, [r7, #20]
 8006130:	69ba      	ldr	r2, [r7, #24]
 8006132:	e841 2300 	strex	r3, r2, [r1]
 8006136:	613b      	str	r3, [r7, #16]
   return(result);
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1e5      	bne.n	800610a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2220      	movs	r2, #32
 8006142:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800614c:	bf00      	nop
 800614e:	3754      	adds	r7, #84	; 0x54
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006164:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f7ff fee4 	bl	8005f40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006178:	bf00      	nop
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b21      	cmp	r3, #33	; 0x21
 8006192:	d13e      	bne.n	8006212 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800619c:	d114      	bne.n	80061c8 <UART_Transmit_IT+0x48>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d110      	bne.n	80061c8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	881b      	ldrh	r3, [r3, #0]
 80061b0:	461a      	mov	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061ba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	1c9a      	adds	r2, r3, #2
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	621a      	str	r2, [r3, #32]
 80061c6:	e008      	b.n	80061da <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	1c59      	adds	r1, r3, #1
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	6211      	str	r1, [r2, #32]
 80061d2:	781a      	ldrb	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061de:	b29b      	uxth	r3, r3
 80061e0:	3b01      	subs	r3, #1
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	4619      	mov	r1, r3
 80061e8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10f      	bne.n	800620e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68da      	ldr	r2, [r3, #12]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68da      	ldr	r2, [r3, #12]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800620c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800620e:	2300      	movs	r3, #0
 8006210:	e000      	b.n	8006214 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006212:	2302      	movs	r3, #2
  }
}
 8006214:	4618      	mov	r0, r3
 8006216:	3714      	adds	r7, #20
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68da      	ldr	r2, [r3, #12]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006236:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2220      	movs	r2, #32
 800623c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f7ff fe73 	bl	8005f2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3708      	adds	r7, #8
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b08c      	sub	sp, #48	; 0x30
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b22      	cmp	r3, #34	; 0x22
 8006262:	f040 80ae 	bne.w	80063c2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800626e:	d117      	bne.n	80062a0 <UART_Receive_IT+0x50>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d113      	bne.n	80062a0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006278:	2300      	movs	r3, #0
 800627a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006280:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	b29b      	uxth	r3, r3
 800628a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800628e:	b29a      	uxth	r2, r3
 8006290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006292:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006298:	1c9a      	adds	r2, r3, #2
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	629a      	str	r2, [r3, #40]	; 0x28
 800629e:	e026      	b.n	80062ee <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80062a6:	2300      	movs	r3, #0
 80062a8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062b2:	d007      	beq.n	80062c4 <UART_Receive_IT+0x74>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10a      	bne.n	80062d2 <UART_Receive_IT+0x82>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d106      	bne.n	80062d2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ce:	701a      	strb	r2, [r3, #0]
 80062d0:	e008      	b.n	80062e4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062de:	b2da      	uxtb	r2, r3
 80062e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	3b01      	subs	r3, #1
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	4619      	mov	r1, r3
 80062fc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d15d      	bne.n	80063be <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68da      	ldr	r2, [r3, #12]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f022 0220 	bic.w	r2, r2, #32
 8006310:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68da      	ldr	r2, [r3, #12]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006320:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	695a      	ldr	r2, [r3, #20]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0201 	bic.w	r2, r2, #1
 8006330:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2220      	movs	r2, #32
 8006336:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006344:	2b01      	cmp	r3, #1
 8006346:	d135      	bne.n	80063b4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	330c      	adds	r3, #12
 8006354:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	e853 3f00 	ldrex	r3, [r3]
 800635c:	613b      	str	r3, [r7, #16]
   return(result);
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	f023 0310 	bic.w	r3, r3, #16
 8006364:	627b      	str	r3, [r7, #36]	; 0x24
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	330c      	adds	r3, #12
 800636c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800636e:	623a      	str	r2, [r7, #32]
 8006370:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006372:	69f9      	ldr	r1, [r7, #28]
 8006374:	6a3a      	ldr	r2, [r7, #32]
 8006376:	e841 2300 	strex	r3, r2, [r1]
 800637a:	61bb      	str	r3, [r7, #24]
   return(result);
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1e5      	bne.n	800634e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0310 	and.w	r3, r3, #16
 800638c:	2b10      	cmp	r3, #16
 800638e:	d10a      	bne.n	80063a6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006390:	2300      	movs	r3, #0
 8006392:	60fb      	str	r3, [r7, #12]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	60fb      	str	r3, [r7, #12]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	60fb      	str	r3, [r7, #12]
 80063a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063aa:	4619      	mov	r1, r3
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7ff fdd1 	bl	8005f54 <HAL_UARTEx_RxEventCallback>
 80063b2:	e002      	b.n	80063ba <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f7fa fd05 	bl	8000dc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80063ba:	2300      	movs	r3, #0
 80063bc:	e002      	b.n	80063c4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80063be:	2300      	movs	r3, #0
 80063c0:	e000      	b.n	80063c4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80063c2:	2302      	movs	r3, #2
  }
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3730      	adds	r7, #48	; 0x30
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063d0:	b0c0      	sub	sp, #256	; 0x100
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80063e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e8:	68d9      	ldr	r1, [r3, #12]
 80063ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	ea40 0301 	orr.w	r3, r0, r1
 80063f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063fa:	689a      	ldr	r2, [r3, #8]
 80063fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	431a      	orrs	r2, r3
 8006404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	431a      	orrs	r2, r3
 800640c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	4313      	orrs	r3, r2
 8006414:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006424:	f021 010c 	bic.w	r1, r1, #12
 8006428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006432:	430b      	orrs	r3, r1
 8006434:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006446:	6999      	ldr	r1, [r3, #24]
 8006448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	ea40 0301 	orr.w	r3, r0, r1
 8006452:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	4b8f      	ldr	r3, [pc, #572]	; (8006698 <UART_SetConfig+0x2cc>)
 800645c:	429a      	cmp	r2, r3
 800645e:	d005      	beq.n	800646c <UART_SetConfig+0xa0>
 8006460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	4b8d      	ldr	r3, [pc, #564]	; (800669c <UART_SetConfig+0x2d0>)
 8006468:	429a      	cmp	r2, r3
 800646a:	d104      	bne.n	8006476 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800646c:	f7fe f8e8 	bl	8004640 <HAL_RCC_GetPCLK2Freq>
 8006470:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006474:	e003      	b.n	800647e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006476:	f7fe f8cf 	bl	8004618 <HAL_RCC_GetPCLK1Freq>
 800647a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800647e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006482:	69db      	ldr	r3, [r3, #28]
 8006484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006488:	f040 810c 	bne.w	80066a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800648c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006490:	2200      	movs	r2, #0
 8006492:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006496:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800649a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800649e:	4622      	mov	r2, r4
 80064a0:	462b      	mov	r3, r5
 80064a2:	1891      	adds	r1, r2, r2
 80064a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80064a6:	415b      	adcs	r3, r3
 80064a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80064ae:	4621      	mov	r1, r4
 80064b0:	eb12 0801 	adds.w	r8, r2, r1
 80064b4:	4629      	mov	r1, r5
 80064b6:	eb43 0901 	adc.w	r9, r3, r1
 80064ba:	f04f 0200 	mov.w	r2, #0
 80064be:	f04f 0300 	mov.w	r3, #0
 80064c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064ce:	4690      	mov	r8, r2
 80064d0:	4699      	mov	r9, r3
 80064d2:	4623      	mov	r3, r4
 80064d4:	eb18 0303 	adds.w	r3, r8, r3
 80064d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80064dc:	462b      	mov	r3, r5
 80064de:	eb49 0303 	adc.w	r3, r9, r3
 80064e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80064f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80064f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80064fa:	460b      	mov	r3, r1
 80064fc:	18db      	adds	r3, r3, r3
 80064fe:	653b      	str	r3, [r7, #80]	; 0x50
 8006500:	4613      	mov	r3, r2
 8006502:	eb42 0303 	adc.w	r3, r2, r3
 8006506:	657b      	str	r3, [r7, #84]	; 0x54
 8006508:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800650c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006510:	f7fa f9c4 	bl	800089c <__aeabi_uldivmod>
 8006514:	4602      	mov	r2, r0
 8006516:	460b      	mov	r3, r1
 8006518:	4b61      	ldr	r3, [pc, #388]	; (80066a0 <UART_SetConfig+0x2d4>)
 800651a:	fba3 2302 	umull	r2, r3, r3, r2
 800651e:	095b      	lsrs	r3, r3, #5
 8006520:	011c      	lsls	r4, r3, #4
 8006522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006526:	2200      	movs	r2, #0
 8006528:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800652c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006530:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006534:	4642      	mov	r2, r8
 8006536:	464b      	mov	r3, r9
 8006538:	1891      	adds	r1, r2, r2
 800653a:	64b9      	str	r1, [r7, #72]	; 0x48
 800653c:	415b      	adcs	r3, r3
 800653e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006540:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006544:	4641      	mov	r1, r8
 8006546:	eb12 0a01 	adds.w	sl, r2, r1
 800654a:	4649      	mov	r1, r9
 800654c:	eb43 0b01 	adc.w	fp, r3, r1
 8006550:	f04f 0200 	mov.w	r2, #0
 8006554:	f04f 0300 	mov.w	r3, #0
 8006558:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800655c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006560:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006564:	4692      	mov	sl, r2
 8006566:	469b      	mov	fp, r3
 8006568:	4643      	mov	r3, r8
 800656a:	eb1a 0303 	adds.w	r3, sl, r3
 800656e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006572:	464b      	mov	r3, r9
 8006574:	eb4b 0303 	adc.w	r3, fp, r3
 8006578:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800657c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006588:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800658c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006590:	460b      	mov	r3, r1
 8006592:	18db      	adds	r3, r3, r3
 8006594:	643b      	str	r3, [r7, #64]	; 0x40
 8006596:	4613      	mov	r3, r2
 8006598:	eb42 0303 	adc.w	r3, r2, r3
 800659c:	647b      	str	r3, [r7, #68]	; 0x44
 800659e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80065a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80065a6:	f7fa f979 	bl	800089c <__aeabi_uldivmod>
 80065aa:	4602      	mov	r2, r0
 80065ac:	460b      	mov	r3, r1
 80065ae:	4611      	mov	r1, r2
 80065b0:	4b3b      	ldr	r3, [pc, #236]	; (80066a0 <UART_SetConfig+0x2d4>)
 80065b2:	fba3 2301 	umull	r2, r3, r3, r1
 80065b6:	095b      	lsrs	r3, r3, #5
 80065b8:	2264      	movs	r2, #100	; 0x64
 80065ba:	fb02 f303 	mul.w	r3, r2, r3
 80065be:	1acb      	subs	r3, r1, r3
 80065c0:	00db      	lsls	r3, r3, #3
 80065c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80065c6:	4b36      	ldr	r3, [pc, #216]	; (80066a0 <UART_SetConfig+0x2d4>)
 80065c8:	fba3 2302 	umull	r2, r3, r3, r2
 80065cc:	095b      	lsrs	r3, r3, #5
 80065ce:	005b      	lsls	r3, r3, #1
 80065d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80065d4:	441c      	add	r4, r3
 80065d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065da:	2200      	movs	r2, #0
 80065dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80065e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80065e8:	4642      	mov	r2, r8
 80065ea:	464b      	mov	r3, r9
 80065ec:	1891      	adds	r1, r2, r2
 80065ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80065f0:	415b      	adcs	r3, r3
 80065f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80065f8:	4641      	mov	r1, r8
 80065fa:	1851      	adds	r1, r2, r1
 80065fc:	6339      	str	r1, [r7, #48]	; 0x30
 80065fe:	4649      	mov	r1, r9
 8006600:	414b      	adcs	r3, r1
 8006602:	637b      	str	r3, [r7, #52]	; 0x34
 8006604:	f04f 0200 	mov.w	r2, #0
 8006608:	f04f 0300 	mov.w	r3, #0
 800660c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006610:	4659      	mov	r1, fp
 8006612:	00cb      	lsls	r3, r1, #3
 8006614:	4651      	mov	r1, sl
 8006616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800661a:	4651      	mov	r1, sl
 800661c:	00ca      	lsls	r2, r1, #3
 800661e:	4610      	mov	r0, r2
 8006620:	4619      	mov	r1, r3
 8006622:	4603      	mov	r3, r0
 8006624:	4642      	mov	r2, r8
 8006626:	189b      	adds	r3, r3, r2
 8006628:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800662c:	464b      	mov	r3, r9
 800662e:	460a      	mov	r2, r1
 8006630:	eb42 0303 	adc.w	r3, r2, r3
 8006634:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006644:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006648:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800664c:	460b      	mov	r3, r1
 800664e:	18db      	adds	r3, r3, r3
 8006650:	62bb      	str	r3, [r7, #40]	; 0x28
 8006652:	4613      	mov	r3, r2
 8006654:	eb42 0303 	adc.w	r3, r2, r3
 8006658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800665a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800665e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006662:	f7fa f91b 	bl	800089c <__aeabi_uldivmod>
 8006666:	4602      	mov	r2, r0
 8006668:	460b      	mov	r3, r1
 800666a:	4b0d      	ldr	r3, [pc, #52]	; (80066a0 <UART_SetConfig+0x2d4>)
 800666c:	fba3 1302 	umull	r1, r3, r3, r2
 8006670:	095b      	lsrs	r3, r3, #5
 8006672:	2164      	movs	r1, #100	; 0x64
 8006674:	fb01 f303 	mul.w	r3, r1, r3
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	00db      	lsls	r3, r3, #3
 800667c:	3332      	adds	r3, #50	; 0x32
 800667e:	4a08      	ldr	r2, [pc, #32]	; (80066a0 <UART_SetConfig+0x2d4>)
 8006680:	fba2 2303 	umull	r2, r3, r2, r3
 8006684:	095b      	lsrs	r3, r3, #5
 8006686:	f003 0207 	and.w	r2, r3, #7
 800668a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4422      	add	r2, r4
 8006692:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006694:	e106      	b.n	80068a4 <UART_SetConfig+0x4d8>
 8006696:	bf00      	nop
 8006698:	40011000 	.word	0x40011000
 800669c:	40011400 	.word	0x40011400
 80066a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066a8:	2200      	movs	r2, #0
 80066aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80066ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80066b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80066b6:	4642      	mov	r2, r8
 80066b8:	464b      	mov	r3, r9
 80066ba:	1891      	adds	r1, r2, r2
 80066bc:	6239      	str	r1, [r7, #32]
 80066be:	415b      	adcs	r3, r3
 80066c0:	627b      	str	r3, [r7, #36]	; 0x24
 80066c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80066c6:	4641      	mov	r1, r8
 80066c8:	1854      	adds	r4, r2, r1
 80066ca:	4649      	mov	r1, r9
 80066cc:	eb43 0501 	adc.w	r5, r3, r1
 80066d0:	f04f 0200 	mov.w	r2, #0
 80066d4:	f04f 0300 	mov.w	r3, #0
 80066d8:	00eb      	lsls	r3, r5, #3
 80066da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066de:	00e2      	lsls	r2, r4, #3
 80066e0:	4614      	mov	r4, r2
 80066e2:	461d      	mov	r5, r3
 80066e4:	4643      	mov	r3, r8
 80066e6:	18e3      	adds	r3, r4, r3
 80066e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80066ec:	464b      	mov	r3, r9
 80066ee:	eb45 0303 	adc.w	r3, r5, r3
 80066f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80066f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006702:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006706:	f04f 0200 	mov.w	r2, #0
 800670a:	f04f 0300 	mov.w	r3, #0
 800670e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006712:	4629      	mov	r1, r5
 8006714:	008b      	lsls	r3, r1, #2
 8006716:	4621      	mov	r1, r4
 8006718:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800671c:	4621      	mov	r1, r4
 800671e:	008a      	lsls	r2, r1, #2
 8006720:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006724:	f7fa f8ba 	bl	800089c <__aeabi_uldivmod>
 8006728:	4602      	mov	r2, r0
 800672a:	460b      	mov	r3, r1
 800672c:	4b60      	ldr	r3, [pc, #384]	; (80068b0 <UART_SetConfig+0x4e4>)
 800672e:	fba3 2302 	umull	r2, r3, r3, r2
 8006732:	095b      	lsrs	r3, r3, #5
 8006734:	011c      	lsls	r4, r3, #4
 8006736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800673a:	2200      	movs	r2, #0
 800673c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006740:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006744:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006748:	4642      	mov	r2, r8
 800674a:	464b      	mov	r3, r9
 800674c:	1891      	adds	r1, r2, r2
 800674e:	61b9      	str	r1, [r7, #24]
 8006750:	415b      	adcs	r3, r3
 8006752:	61fb      	str	r3, [r7, #28]
 8006754:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006758:	4641      	mov	r1, r8
 800675a:	1851      	adds	r1, r2, r1
 800675c:	6139      	str	r1, [r7, #16]
 800675e:	4649      	mov	r1, r9
 8006760:	414b      	adcs	r3, r1
 8006762:	617b      	str	r3, [r7, #20]
 8006764:	f04f 0200 	mov.w	r2, #0
 8006768:	f04f 0300 	mov.w	r3, #0
 800676c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006770:	4659      	mov	r1, fp
 8006772:	00cb      	lsls	r3, r1, #3
 8006774:	4651      	mov	r1, sl
 8006776:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800677a:	4651      	mov	r1, sl
 800677c:	00ca      	lsls	r2, r1, #3
 800677e:	4610      	mov	r0, r2
 8006780:	4619      	mov	r1, r3
 8006782:	4603      	mov	r3, r0
 8006784:	4642      	mov	r2, r8
 8006786:	189b      	adds	r3, r3, r2
 8006788:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800678c:	464b      	mov	r3, r9
 800678e:	460a      	mov	r2, r1
 8006790:	eb42 0303 	adc.w	r3, r2, r3
 8006794:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80067a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80067a4:	f04f 0200 	mov.w	r2, #0
 80067a8:	f04f 0300 	mov.w	r3, #0
 80067ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80067b0:	4649      	mov	r1, r9
 80067b2:	008b      	lsls	r3, r1, #2
 80067b4:	4641      	mov	r1, r8
 80067b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067ba:	4641      	mov	r1, r8
 80067bc:	008a      	lsls	r2, r1, #2
 80067be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80067c2:	f7fa f86b 	bl	800089c <__aeabi_uldivmod>
 80067c6:	4602      	mov	r2, r0
 80067c8:	460b      	mov	r3, r1
 80067ca:	4611      	mov	r1, r2
 80067cc:	4b38      	ldr	r3, [pc, #224]	; (80068b0 <UART_SetConfig+0x4e4>)
 80067ce:	fba3 2301 	umull	r2, r3, r3, r1
 80067d2:	095b      	lsrs	r3, r3, #5
 80067d4:	2264      	movs	r2, #100	; 0x64
 80067d6:	fb02 f303 	mul.w	r3, r2, r3
 80067da:	1acb      	subs	r3, r1, r3
 80067dc:	011b      	lsls	r3, r3, #4
 80067de:	3332      	adds	r3, #50	; 0x32
 80067e0:	4a33      	ldr	r2, [pc, #204]	; (80068b0 <UART_SetConfig+0x4e4>)
 80067e2:	fba2 2303 	umull	r2, r3, r2, r3
 80067e6:	095b      	lsrs	r3, r3, #5
 80067e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067ec:	441c      	add	r4, r3
 80067ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067f2:	2200      	movs	r2, #0
 80067f4:	673b      	str	r3, [r7, #112]	; 0x70
 80067f6:	677a      	str	r2, [r7, #116]	; 0x74
 80067f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80067fc:	4642      	mov	r2, r8
 80067fe:	464b      	mov	r3, r9
 8006800:	1891      	adds	r1, r2, r2
 8006802:	60b9      	str	r1, [r7, #8]
 8006804:	415b      	adcs	r3, r3
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800680c:	4641      	mov	r1, r8
 800680e:	1851      	adds	r1, r2, r1
 8006810:	6039      	str	r1, [r7, #0]
 8006812:	4649      	mov	r1, r9
 8006814:	414b      	adcs	r3, r1
 8006816:	607b      	str	r3, [r7, #4]
 8006818:	f04f 0200 	mov.w	r2, #0
 800681c:	f04f 0300 	mov.w	r3, #0
 8006820:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006824:	4659      	mov	r1, fp
 8006826:	00cb      	lsls	r3, r1, #3
 8006828:	4651      	mov	r1, sl
 800682a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800682e:	4651      	mov	r1, sl
 8006830:	00ca      	lsls	r2, r1, #3
 8006832:	4610      	mov	r0, r2
 8006834:	4619      	mov	r1, r3
 8006836:	4603      	mov	r3, r0
 8006838:	4642      	mov	r2, r8
 800683a:	189b      	adds	r3, r3, r2
 800683c:	66bb      	str	r3, [r7, #104]	; 0x68
 800683e:	464b      	mov	r3, r9
 8006840:	460a      	mov	r2, r1
 8006842:	eb42 0303 	adc.w	r3, r2, r3
 8006846:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	663b      	str	r3, [r7, #96]	; 0x60
 8006852:	667a      	str	r2, [r7, #100]	; 0x64
 8006854:	f04f 0200 	mov.w	r2, #0
 8006858:	f04f 0300 	mov.w	r3, #0
 800685c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006860:	4649      	mov	r1, r9
 8006862:	008b      	lsls	r3, r1, #2
 8006864:	4641      	mov	r1, r8
 8006866:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800686a:	4641      	mov	r1, r8
 800686c:	008a      	lsls	r2, r1, #2
 800686e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006872:	f7fa f813 	bl	800089c <__aeabi_uldivmod>
 8006876:	4602      	mov	r2, r0
 8006878:	460b      	mov	r3, r1
 800687a:	4b0d      	ldr	r3, [pc, #52]	; (80068b0 <UART_SetConfig+0x4e4>)
 800687c:	fba3 1302 	umull	r1, r3, r3, r2
 8006880:	095b      	lsrs	r3, r3, #5
 8006882:	2164      	movs	r1, #100	; 0x64
 8006884:	fb01 f303 	mul.w	r3, r1, r3
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	011b      	lsls	r3, r3, #4
 800688c:	3332      	adds	r3, #50	; 0x32
 800688e:	4a08      	ldr	r2, [pc, #32]	; (80068b0 <UART_SetConfig+0x4e4>)
 8006890:	fba2 2303 	umull	r2, r3, r2, r3
 8006894:	095b      	lsrs	r3, r3, #5
 8006896:	f003 020f 	and.w	r2, r3, #15
 800689a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4422      	add	r2, r4
 80068a2:	609a      	str	r2, [r3, #8]
}
 80068a4:	bf00      	nop
 80068a6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80068aa:	46bd      	mov	sp, r7
 80068ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068b0:	51eb851f 	.word	0x51eb851f

080068b4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	4603      	mov	r3, r0
 80068bc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80068be:	2300      	movs	r3, #0
 80068c0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80068c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068c6:	2b84      	cmp	r3, #132	; 0x84
 80068c8:	d005      	beq.n	80068d6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80068ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	4413      	add	r3, r2
 80068d2:	3303      	adds	r3, #3
 80068d4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80068d6:	68fb      	ldr	r3, [r7, #12]
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3714      	adds	r7, #20
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80068e8:	f000 faf6 	bl	8006ed8 <vTaskStartScheduler>
  
  return osOK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80068f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068f4:	b089      	sub	sp, #36	; 0x24
 80068f6:	af04      	add	r7, sp, #16
 80068f8:	6078      	str	r0, [r7, #4]
 80068fa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	695b      	ldr	r3, [r3, #20]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d020      	beq.n	8006946 <osThreadCreate+0x54>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d01c      	beq.n	8006946 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685c      	ldr	r4, [r3, #4]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	691e      	ldr	r6, [r3, #16]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800691e:	4618      	mov	r0, r3
 8006920:	f7ff ffc8 	bl	80068b4 <makeFreeRtosPriority>
 8006924:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800692e:	9202      	str	r2, [sp, #8]
 8006930:	9301      	str	r3, [sp, #4]
 8006932:	9100      	str	r1, [sp, #0]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	4632      	mov	r2, r6
 8006938:	4629      	mov	r1, r5
 800693a:	4620      	mov	r0, r4
 800693c:	f000 f8ed 	bl	8006b1a <xTaskCreateStatic>
 8006940:	4603      	mov	r3, r0
 8006942:	60fb      	str	r3, [r7, #12]
 8006944:	e01c      	b.n	8006980 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685c      	ldr	r4, [r3, #4]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006952:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800695a:	4618      	mov	r0, r3
 800695c:	f7ff ffaa 	bl	80068b4 <makeFreeRtosPriority>
 8006960:	4602      	mov	r2, r0
 8006962:	f107 030c 	add.w	r3, r7, #12
 8006966:	9301      	str	r3, [sp, #4]
 8006968:	9200      	str	r2, [sp, #0]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	4632      	mov	r2, r6
 800696e:	4629      	mov	r1, r5
 8006970:	4620      	mov	r0, r4
 8006972:	f000 f92f 	bl	8006bd4 <xTaskCreate>
 8006976:	4603      	mov	r3, r0
 8006978:	2b01      	cmp	r3, #1
 800697a:	d001      	beq.n	8006980 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800697c:	2300      	movs	r3, #0
 800697e:	e000      	b.n	8006982 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006980:	68fb      	ldr	r3, [r7, #12]
}
 8006982:	4618      	mov	r0, r3
 8006984:	3714      	adds	r7, #20
 8006986:	46bd      	mov	sp, r7
 8006988:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800698a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b084      	sub	sp, #16
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d001      	beq.n	80069a0 <osDelay+0x16>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	e000      	b.n	80069a2 <osDelay+0x18>
 80069a0:	2301      	movs	r3, #1
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 fa64 	bl	8006e70 <vTaskDelay>
  
  return osOK;
 80069a8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80069b2:	b480      	push	{r7}
 80069b4:	b083      	sub	sp, #12
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f103 0208 	add.w	r2, r3, #8
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f04f 32ff 	mov.w	r2, #4294967295
 80069ca:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f103 0208 	add.w	r2, r3, #8
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f103 0208 	add.w	r2, r3, #8
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80069f2:	b480      	push	{r7}
 80069f4:	b083      	sub	sp, #12
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	689a      	ldr	r2, [r3, #8]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	683a      	ldr	r2, [r7, #0]
 8006a36:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	1c5a      	adds	r2, r3, #1
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	601a      	str	r2, [r3, #0]
}
 8006a48:	bf00      	nop
 8006a4a:	3714      	adds	r7, #20
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6a:	d103      	bne.n	8006a74 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	60fb      	str	r3, [r7, #12]
 8006a72:	e00c      	b.n	8006a8e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	3308      	adds	r3, #8
 8006a78:	60fb      	str	r3, [r7, #12]
 8006a7a:	e002      	b.n	8006a82 <vListInsert+0x2e>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	60fb      	str	r3, [r7, #12]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d2f6      	bcs.n	8006a7c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	685a      	ldr	r2, [r3, #4]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	1c5a      	adds	r2, r3, #1
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	601a      	str	r2, [r3, #0]
}
 8006aba:	bf00      	nop
 8006abc:	3714      	adds	r7, #20
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b085      	sub	sp, #20
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	6892      	ldr	r2, [r2, #8]
 8006adc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	6852      	ldr	r2, [r2, #4]
 8006ae6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d103      	bne.n	8006afa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	689a      	ldr	r2, [r3, #8]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	1e5a      	subs	r2, r3, #1
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr

08006b1a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b08e      	sub	sp, #56	; 0x38
 8006b1e:	af04      	add	r7, sp, #16
 8006b20:	60f8      	str	r0, [r7, #12]
 8006b22:	60b9      	str	r1, [r7, #8]
 8006b24:	607a      	str	r2, [r7, #4]
 8006b26:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10a      	bne.n	8006b44 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006b40:	bf00      	nop
 8006b42:	e7fe      	b.n	8006b42 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10a      	bne.n	8006b60 <xTaskCreateStatic+0x46>
	__asm volatile
 8006b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4e:	f383 8811 	msr	BASEPRI, r3
 8006b52:	f3bf 8f6f 	isb	sy
 8006b56:	f3bf 8f4f 	dsb	sy
 8006b5a:	61fb      	str	r3, [r7, #28]
}
 8006b5c:	bf00      	nop
 8006b5e:	e7fe      	b.n	8006b5e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b60:	23a0      	movs	r3, #160	; 0xa0
 8006b62:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	2ba0      	cmp	r3, #160	; 0xa0
 8006b68:	d00a      	beq.n	8006b80 <xTaskCreateStatic+0x66>
	__asm volatile
 8006b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	61bb      	str	r3, [r7, #24]
}
 8006b7c:	bf00      	nop
 8006b7e:	e7fe      	b.n	8006b7e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b80:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d01e      	beq.n	8006bc6 <xTaskCreateStatic+0xac>
 8006b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d01b      	beq.n	8006bc6 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b90:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b96:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	9303      	str	r3, [sp, #12]
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	9302      	str	r3, [sp, #8]
 8006ba8:	f107 0314 	add.w	r3, r7, #20
 8006bac:	9301      	str	r3, [sp, #4]
 8006bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	68b9      	ldr	r1, [r7, #8]
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 f851 	bl	8006c60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bc0:	f000 f8ec 	bl	8006d9c <prvAddNewTaskToReadyList>
 8006bc4:	e001      	b.n	8006bca <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006bca:	697b      	ldr	r3, [r7, #20]
	}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3728      	adds	r7, #40	; 0x28
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b08c      	sub	sp, #48	; 0x30
 8006bd8:	af04      	add	r7, sp, #16
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	603b      	str	r3, [r7, #0]
 8006be0:	4613      	mov	r3, r2
 8006be2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006be4:	88fb      	ldrh	r3, [r7, #6]
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4618      	mov	r0, r3
 8006bea:	f000 fef5 	bl	80079d8 <pvPortMalloc>
 8006bee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00e      	beq.n	8006c14 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006bf6:	20a0      	movs	r0, #160	; 0xa0
 8006bf8:	f000 feee 	bl	80079d8 <pvPortMalloc>
 8006bfc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d003      	beq.n	8006c0c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	631a      	str	r2, [r3, #48]	; 0x30
 8006c0a:	e005      	b.n	8006c18 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c0c:	6978      	ldr	r0, [r7, #20]
 8006c0e:	f000 ffaf 	bl	8007b70 <vPortFree>
 8006c12:	e001      	b.n	8006c18 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c14:	2300      	movs	r3, #0
 8006c16:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d017      	beq.n	8006c4e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c26:	88fa      	ldrh	r2, [r7, #6]
 8006c28:	2300      	movs	r3, #0
 8006c2a:	9303      	str	r3, [sp, #12]
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	9302      	str	r3, [sp, #8]
 8006c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c32:	9301      	str	r3, [sp, #4]
 8006c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	68b9      	ldr	r1, [r7, #8]
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f000 f80f 	bl	8006c60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c42:	69f8      	ldr	r0, [r7, #28]
 8006c44:	f000 f8aa 	bl	8006d9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	61bb      	str	r3, [r7, #24]
 8006c4c:	e002      	b.n	8006c54 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c52:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c54:	69bb      	ldr	r3, [r7, #24]
	}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3720      	adds	r7, #32
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
	...

08006c60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b088      	sub	sp, #32
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
 8006c6c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	f023 0307 	bic.w	r3, r3, #7
 8006c86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	f003 0307 	and.w	r3, r3, #7
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00a      	beq.n	8006ca8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c96:	f383 8811 	msr	BASEPRI, r3
 8006c9a:	f3bf 8f6f 	isb	sy
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	617b      	str	r3, [r7, #20]
}
 8006ca4:	bf00      	nop
 8006ca6:	e7fe      	b.n	8006ca6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d01f      	beq.n	8006cee <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cae:	2300      	movs	r3, #0
 8006cb0:	61fb      	str	r3, [r7, #28]
 8006cb2:	e012      	b.n	8006cda <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	4413      	add	r3, r2
 8006cba:	7819      	ldrb	r1, [r3, #0]
 8006cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	3334      	adds	r3, #52	; 0x34
 8006cc4:	460a      	mov	r2, r1
 8006cc6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	4413      	add	r3, r2
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d006      	beq.n	8006ce2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	61fb      	str	r3, [r7, #28]
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	2b0f      	cmp	r3, #15
 8006cde:	d9e9      	bls.n	8006cb4 <prvInitialiseNewTask+0x54>
 8006ce0:	e000      	b.n	8006ce4 <prvInitialiseNewTask+0x84>
			{
				break;
 8006ce2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cec:	e003      	b.n	8006cf6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf8:	2b06      	cmp	r3, #6
 8006cfa:	d901      	bls.n	8006d00 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006cfc:	2306      	movs	r3, #6
 8006cfe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d04:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d0a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0e:	2200      	movs	r2, #0
 8006d10:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d14:	3304      	adds	r3, #4
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7ff fe6b 	bl	80069f2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1e:	3318      	adds	r3, #24
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7ff fe66 	bl	80069f2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2e:	f1c3 0207 	rsb	r2, r3, #7
 8006d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4e:	334c      	adds	r3, #76	; 0x4c
 8006d50:	224c      	movs	r2, #76	; 0x4c
 8006d52:	2100      	movs	r1, #0
 8006d54:	4618      	mov	r0, r3
 8006d56:	f001 f9f0 	bl	800813a <memset>
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5c:	4a0c      	ldr	r2, [pc, #48]	; (8006d90 <prvInitialiseNewTask+0x130>)
 8006d5e:	651a      	str	r2, [r3, #80]	; 0x50
 8006d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d62:	4a0c      	ldr	r2, [pc, #48]	; (8006d94 <prvInitialiseNewTask+0x134>)
 8006d64:	655a      	str	r2, [r3, #84]	; 0x54
 8006d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d68:	4a0b      	ldr	r2, [pc, #44]	; (8006d98 <prvInitialiseNewTask+0x138>)
 8006d6a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d6c:	683a      	ldr	r2, [r7, #0]
 8006d6e:	68f9      	ldr	r1, [r7, #12]
 8006d70:	69b8      	ldr	r0, [r7, #24]
 8006d72:	f000 fc1f 	bl	80075b4 <pxPortInitialiseStack>
 8006d76:	4602      	mov	r2, r0
 8006d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d002      	beq.n	8006d88 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d86:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d88:	bf00      	nop
 8006d8a:	3720      	adds	r7, #32
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	2000448c 	.word	0x2000448c
 8006d94:	200044f4 	.word	0x200044f4
 8006d98:	2000455c 	.word	0x2000455c

08006d9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006da4:	f000 fd36 	bl	8007814 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006da8:	4b2a      	ldr	r3, [pc, #168]	; (8006e54 <prvAddNewTaskToReadyList+0xb8>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3301      	adds	r3, #1
 8006dae:	4a29      	ldr	r2, [pc, #164]	; (8006e54 <prvAddNewTaskToReadyList+0xb8>)
 8006db0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006db2:	4b29      	ldr	r3, [pc, #164]	; (8006e58 <prvAddNewTaskToReadyList+0xbc>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d109      	bne.n	8006dce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006dba:	4a27      	ldr	r2, [pc, #156]	; (8006e58 <prvAddNewTaskToReadyList+0xbc>)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006dc0:	4b24      	ldr	r3, [pc, #144]	; (8006e54 <prvAddNewTaskToReadyList+0xb8>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d110      	bne.n	8006dea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006dc8:	f000 facc 	bl	8007364 <prvInitialiseTaskLists>
 8006dcc:	e00d      	b.n	8006dea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006dce:	4b23      	ldr	r3, [pc, #140]	; (8006e5c <prvAddNewTaskToReadyList+0xc0>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d109      	bne.n	8006dea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006dd6:	4b20      	ldr	r3, [pc, #128]	; (8006e58 <prvAddNewTaskToReadyList+0xbc>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d802      	bhi.n	8006dea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006de4:	4a1c      	ldr	r2, [pc, #112]	; (8006e58 <prvAddNewTaskToReadyList+0xbc>)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006dea:	4b1d      	ldr	r3, [pc, #116]	; (8006e60 <prvAddNewTaskToReadyList+0xc4>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	3301      	adds	r3, #1
 8006df0:	4a1b      	ldr	r2, [pc, #108]	; (8006e60 <prvAddNewTaskToReadyList+0xc4>)
 8006df2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df8:	2201      	movs	r2, #1
 8006dfa:	409a      	lsls	r2, r3
 8006dfc:	4b19      	ldr	r3, [pc, #100]	; (8006e64 <prvAddNewTaskToReadyList+0xc8>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	4a18      	ldr	r2, [pc, #96]	; (8006e64 <prvAddNewTaskToReadyList+0xc8>)
 8006e04:	6013      	str	r3, [r2, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4413      	add	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4a15      	ldr	r2, [pc, #84]	; (8006e68 <prvAddNewTaskToReadyList+0xcc>)
 8006e14:	441a      	add	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	3304      	adds	r3, #4
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	f7ff fdf5 	bl	8006a0c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e22:	f000 fd27 	bl	8007874 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e26:	4b0d      	ldr	r3, [pc, #52]	; (8006e5c <prvAddNewTaskToReadyList+0xc0>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00e      	beq.n	8006e4c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e2e:	4b0a      	ldr	r3, [pc, #40]	; (8006e58 <prvAddNewTaskToReadyList+0xbc>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d207      	bcs.n	8006e4c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e3c:	4b0b      	ldr	r3, [pc, #44]	; (8006e6c <prvAddNewTaskToReadyList+0xd0>)
 8006e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e42:	601a      	str	r2, [r3, #0]
 8006e44:	f3bf 8f4f 	dsb	sy
 8006e48:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e4c:	bf00      	nop
 8006e4e:	3708      	adds	r7, #8
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	20000838 	.word	0x20000838
 8006e58:	20000738 	.word	0x20000738
 8006e5c:	20000844 	.word	0x20000844
 8006e60:	20000854 	.word	0x20000854
 8006e64:	20000840 	.word	0x20000840
 8006e68:	2000073c 	.word	0x2000073c
 8006e6c:	e000ed04 	.word	0xe000ed04

08006e70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d017      	beq.n	8006eb2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e82:	4b13      	ldr	r3, [pc, #76]	; (8006ed0 <vTaskDelay+0x60>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00a      	beq.n	8006ea0 <vTaskDelay+0x30>
	__asm volatile
 8006e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8e:	f383 8811 	msr	BASEPRI, r3
 8006e92:	f3bf 8f6f 	isb	sy
 8006e96:	f3bf 8f4f 	dsb	sy
 8006e9a:	60bb      	str	r3, [r7, #8]
}
 8006e9c:	bf00      	nop
 8006e9e:	e7fe      	b.n	8006e9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006ea0:	f000 f884 	bl	8006fac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fb1e 	bl	80074e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006eac:	f000 f88c 	bl	8006fc8 <xTaskResumeAll>
 8006eb0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d107      	bne.n	8006ec8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006eb8:	4b06      	ldr	r3, [pc, #24]	; (8006ed4 <vTaskDelay+0x64>)
 8006eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ebe:	601a      	str	r2, [r3, #0]
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ec8:	bf00      	nop
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	20000860 	.word	0x20000860
 8006ed4:	e000ed04 	.word	0xe000ed04

08006ed8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b08a      	sub	sp, #40	; 0x28
 8006edc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ee6:	463a      	mov	r2, r7
 8006ee8:	1d39      	adds	r1, r7, #4
 8006eea:	f107 0308 	add.w	r3, r7, #8
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7f9 ff4e 	bl	8000d90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ef4:	6839      	ldr	r1, [r7, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	68ba      	ldr	r2, [r7, #8]
 8006efa:	9202      	str	r2, [sp, #8]
 8006efc:	9301      	str	r3, [sp, #4]
 8006efe:	2300      	movs	r3, #0
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	2300      	movs	r3, #0
 8006f04:	460a      	mov	r2, r1
 8006f06:	4921      	ldr	r1, [pc, #132]	; (8006f8c <vTaskStartScheduler+0xb4>)
 8006f08:	4821      	ldr	r0, [pc, #132]	; (8006f90 <vTaskStartScheduler+0xb8>)
 8006f0a:	f7ff fe06 	bl	8006b1a <xTaskCreateStatic>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	4a20      	ldr	r2, [pc, #128]	; (8006f94 <vTaskStartScheduler+0xbc>)
 8006f12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f14:	4b1f      	ldr	r3, [pc, #124]	; (8006f94 <vTaskStartScheduler+0xbc>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d002      	beq.n	8006f22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	617b      	str	r3, [r7, #20]
 8006f20:	e001      	b.n	8006f26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f22:	2300      	movs	r3, #0
 8006f24:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d11b      	bne.n	8006f64 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	613b      	str	r3, [r7, #16]
}
 8006f3e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f40:	4b15      	ldr	r3, [pc, #84]	; (8006f98 <vTaskStartScheduler+0xc0>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	334c      	adds	r3, #76	; 0x4c
 8006f46:	4a15      	ldr	r2, [pc, #84]	; (8006f9c <vTaskStartScheduler+0xc4>)
 8006f48:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f4a:	4b15      	ldr	r3, [pc, #84]	; (8006fa0 <vTaskStartScheduler+0xc8>)
 8006f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f52:	4b14      	ldr	r3, [pc, #80]	; (8006fa4 <vTaskStartScheduler+0xcc>)
 8006f54:	2201      	movs	r2, #1
 8006f56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f58:	4b13      	ldr	r3, [pc, #76]	; (8006fa8 <vTaskStartScheduler+0xd0>)
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f5e:	f000 fbb7 	bl	80076d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f62:	e00e      	b.n	8006f82 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f6a:	d10a      	bne.n	8006f82 <vTaskStartScheduler+0xaa>
	__asm volatile
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	60fb      	str	r3, [r7, #12]
}
 8006f7e:	bf00      	nop
 8006f80:	e7fe      	b.n	8006f80 <vTaskStartScheduler+0xa8>
}
 8006f82:	bf00      	nop
 8006f84:	3718      	adds	r7, #24
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	080092c4 	.word	0x080092c4
 8006f90:	08007335 	.word	0x08007335
 8006f94:	2000085c 	.word	0x2000085c
 8006f98:	20000738 	.word	0x20000738
 8006f9c:	20000068 	.word	0x20000068
 8006fa0:	20000858 	.word	0x20000858
 8006fa4:	20000844 	.word	0x20000844
 8006fa8:	2000083c 	.word	0x2000083c

08006fac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006fac:	b480      	push	{r7}
 8006fae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006fb0:	4b04      	ldr	r3, [pc, #16]	; (8006fc4 <vTaskSuspendAll+0x18>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	4a03      	ldr	r2, [pc, #12]	; (8006fc4 <vTaskSuspendAll+0x18>)
 8006fb8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006fba:	bf00      	nop
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr
 8006fc4:	20000860 	.word	0x20000860

08006fc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006fd6:	4b41      	ldr	r3, [pc, #260]	; (80070dc <xTaskResumeAll+0x114>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10a      	bne.n	8006ff4 <xTaskResumeAll+0x2c>
	__asm volatile
 8006fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe2:	f383 8811 	msr	BASEPRI, r3
 8006fe6:	f3bf 8f6f 	isb	sy
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	603b      	str	r3, [r7, #0]
}
 8006ff0:	bf00      	nop
 8006ff2:	e7fe      	b.n	8006ff2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ff4:	f000 fc0e 	bl	8007814 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ff8:	4b38      	ldr	r3, [pc, #224]	; (80070dc <xTaskResumeAll+0x114>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	4a37      	ldr	r2, [pc, #220]	; (80070dc <xTaskResumeAll+0x114>)
 8007000:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007002:	4b36      	ldr	r3, [pc, #216]	; (80070dc <xTaskResumeAll+0x114>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d161      	bne.n	80070ce <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800700a:	4b35      	ldr	r3, [pc, #212]	; (80070e0 <xTaskResumeAll+0x118>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d05d      	beq.n	80070ce <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007012:	e02e      	b.n	8007072 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007014:	4b33      	ldr	r3, [pc, #204]	; (80070e4 <xTaskResumeAll+0x11c>)
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	3318      	adds	r3, #24
 8007020:	4618      	mov	r0, r3
 8007022:	f7ff fd50 	bl	8006ac6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	3304      	adds	r3, #4
 800702a:	4618      	mov	r0, r3
 800702c:	f7ff fd4b 	bl	8006ac6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007034:	2201      	movs	r2, #1
 8007036:	409a      	lsls	r2, r3
 8007038:	4b2b      	ldr	r3, [pc, #172]	; (80070e8 <xTaskResumeAll+0x120>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4313      	orrs	r3, r2
 800703e:	4a2a      	ldr	r2, [pc, #168]	; (80070e8 <xTaskResumeAll+0x120>)
 8007040:	6013      	str	r3, [r2, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007046:	4613      	mov	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4413      	add	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4a27      	ldr	r2, [pc, #156]	; (80070ec <xTaskResumeAll+0x124>)
 8007050:	441a      	add	r2, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	3304      	adds	r3, #4
 8007056:	4619      	mov	r1, r3
 8007058:	4610      	mov	r0, r2
 800705a:	f7ff fcd7 	bl	8006a0c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007062:	4b23      	ldr	r3, [pc, #140]	; (80070f0 <xTaskResumeAll+0x128>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007068:	429a      	cmp	r2, r3
 800706a:	d302      	bcc.n	8007072 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800706c:	4b21      	ldr	r3, [pc, #132]	; (80070f4 <xTaskResumeAll+0x12c>)
 800706e:	2201      	movs	r2, #1
 8007070:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007072:	4b1c      	ldr	r3, [pc, #112]	; (80070e4 <xTaskResumeAll+0x11c>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1cc      	bne.n	8007014 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d001      	beq.n	8007084 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007080:	f000 fa12 	bl	80074a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007084:	4b1c      	ldr	r3, [pc, #112]	; (80070f8 <xTaskResumeAll+0x130>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d010      	beq.n	80070b2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007090:	f000 f836 	bl	8007100 <xTaskIncrementTick>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d002      	beq.n	80070a0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800709a:	4b16      	ldr	r3, [pc, #88]	; (80070f4 <xTaskResumeAll+0x12c>)
 800709c:	2201      	movs	r2, #1
 800709e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	3b01      	subs	r3, #1
 80070a4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1f1      	bne.n	8007090 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80070ac:	4b12      	ldr	r3, [pc, #72]	; (80070f8 <xTaskResumeAll+0x130>)
 80070ae:	2200      	movs	r2, #0
 80070b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80070b2:	4b10      	ldr	r3, [pc, #64]	; (80070f4 <xTaskResumeAll+0x12c>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d009      	beq.n	80070ce <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80070ba:	2301      	movs	r3, #1
 80070bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80070be:	4b0f      	ldr	r3, [pc, #60]	; (80070fc <xTaskResumeAll+0x134>)
 80070c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070c4:	601a      	str	r2, [r3, #0]
 80070c6:	f3bf 8f4f 	dsb	sy
 80070ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070ce:	f000 fbd1 	bl	8007874 <vPortExitCritical>

	return xAlreadyYielded;
 80070d2:	68bb      	ldr	r3, [r7, #8]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	20000860 	.word	0x20000860
 80070e0:	20000838 	.word	0x20000838
 80070e4:	200007f8 	.word	0x200007f8
 80070e8:	20000840 	.word	0x20000840
 80070ec:	2000073c 	.word	0x2000073c
 80070f0:	20000738 	.word	0x20000738
 80070f4:	2000084c 	.word	0x2000084c
 80070f8:	20000848 	.word	0x20000848
 80070fc:	e000ed04 	.word	0xe000ed04

08007100 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b086      	sub	sp, #24
 8007104:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007106:	2300      	movs	r3, #0
 8007108:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800710a:	4b4e      	ldr	r3, [pc, #312]	; (8007244 <xTaskIncrementTick+0x144>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	f040 808e 	bne.w	8007230 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007114:	4b4c      	ldr	r3, [pc, #304]	; (8007248 <xTaskIncrementTick+0x148>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	3301      	adds	r3, #1
 800711a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800711c:	4a4a      	ldr	r2, [pc, #296]	; (8007248 <xTaskIncrementTick+0x148>)
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d120      	bne.n	800716a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007128:	4b48      	ldr	r3, [pc, #288]	; (800724c <xTaskIncrementTick+0x14c>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00a      	beq.n	8007148 <xTaskIncrementTick+0x48>
	__asm volatile
 8007132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007136:	f383 8811 	msr	BASEPRI, r3
 800713a:	f3bf 8f6f 	isb	sy
 800713e:	f3bf 8f4f 	dsb	sy
 8007142:	603b      	str	r3, [r7, #0]
}
 8007144:	bf00      	nop
 8007146:	e7fe      	b.n	8007146 <xTaskIncrementTick+0x46>
 8007148:	4b40      	ldr	r3, [pc, #256]	; (800724c <xTaskIncrementTick+0x14c>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	60fb      	str	r3, [r7, #12]
 800714e:	4b40      	ldr	r3, [pc, #256]	; (8007250 <xTaskIncrementTick+0x150>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a3e      	ldr	r2, [pc, #248]	; (800724c <xTaskIncrementTick+0x14c>)
 8007154:	6013      	str	r3, [r2, #0]
 8007156:	4a3e      	ldr	r2, [pc, #248]	; (8007250 <xTaskIncrementTick+0x150>)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6013      	str	r3, [r2, #0]
 800715c:	4b3d      	ldr	r3, [pc, #244]	; (8007254 <xTaskIncrementTick+0x154>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	3301      	adds	r3, #1
 8007162:	4a3c      	ldr	r2, [pc, #240]	; (8007254 <xTaskIncrementTick+0x154>)
 8007164:	6013      	str	r3, [r2, #0]
 8007166:	f000 f99f 	bl	80074a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800716a:	4b3b      	ldr	r3, [pc, #236]	; (8007258 <xTaskIncrementTick+0x158>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	693a      	ldr	r2, [r7, #16]
 8007170:	429a      	cmp	r2, r3
 8007172:	d348      	bcc.n	8007206 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007174:	4b35      	ldr	r3, [pc, #212]	; (800724c <xTaskIncrementTick+0x14c>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d104      	bne.n	8007188 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800717e:	4b36      	ldr	r3, [pc, #216]	; (8007258 <xTaskIncrementTick+0x158>)
 8007180:	f04f 32ff 	mov.w	r2, #4294967295
 8007184:	601a      	str	r2, [r3, #0]
					break;
 8007186:	e03e      	b.n	8007206 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007188:	4b30      	ldr	r3, [pc, #192]	; (800724c <xTaskIncrementTick+0x14c>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	429a      	cmp	r2, r3
 800719e:	d203      	bcs.n	80071a8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80071a0:	4a2d      	ldr	r2, [pc, #180]	; (8007258 <xTaskIncrementTick+0x158>)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80071a6:	e02e      	b.n	8007206 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	3304      	adds	r3, #4
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7ff fc8a 	bl	8006ac6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d004      	beq.n	80071c4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	3318      	adds	r3, #24
 80071be:	4618      	mov	r0, r3
 80071c0:	f7ff fc81 	bl	8006ac6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c8:	2201      	movs	r2, #1
 80071ca:	409a      	lsls	r2, r3
 80071cc:	4b23      	ldr	r3, [pc, #140]	; (800725c <xTaskIncrementTick+0x15c>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	4a22      	ldr	r2, [pc, #136]	; (800725c <xTaskIncrementTick+0x15c>)
 80071d4:	6013      	str	r3, [r2, #0]
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071da:	4613      	mov	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4413      	add	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4a1f      	ldr	r2, [pc, #124]	; (8007260 <xTaskIncrementTick+0x160>)
 80071e4:	441a      	add	r2, r3
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	3304      	adds	r3, #4
 80071ea:	4619      	mov	r1, r3
 80071ec:	4610      	mov	r0, r2
 80071ee:	f7ff fc0d 	bl	8006a0c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f6:	4b1b      	ldr	r3, [pc, #108]	; (8007264 <xTaskIncrementTick+0x164>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d3b9      	bcc.n	8007174 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007200:	2301      	movs	r3, #1
 8007202:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007204:	e7b6      	b.n	8007174 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007206:	4b17      	ldr	r3, [pc, #92]	; (8007264 <xTaskIncrementTick+0x164>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800720c:	4914      	ldr	r1, [pc, #80]	; (8007260 <xTaskIncrementTick+0x160>)
 800720e:	4613      	mov	r3, r2
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	4413      	add	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	440b      	add	r3, r1
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d901      	bls.n	8007222 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800721e:	2301      	movs	r3, #1
 8007220:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007222:	4b11      	ldr	r3, [pc, #68]	; (8007268 <xTaskIncrementTick+0x168>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d007      	beq.n	800723a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800722a:	2301      	movs	r3, #1
 800722c:	617b      	str	r3, [r7, #20]
 800722e:	e004      	b.n	800723a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007230:	4b0e      	ldr	r3, [pc, #56]	; (800726c <xTaskIncrementTick+0x16c>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	3301      	adds	r3, #1
 8007236:	4a0d      	ldr	r2, [pc, #52]	; (800726c <xTaskIncrementTick+0x16c>)
 8007238:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800723a:	697b      	ldr	r3, [r7, #20]
}
 800723c:	4618      	mov	r0, r3
 800723e:	3718      	adds	r7, #24
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	20000860 	.word	0x20000860
 8007248:	2000083c 	.word	0x2000083c
 800724c:	200007f0 	.word	0x200007f0
 8007250:	200007f4 	.word	0x200007f4
 8007254:	20000850 	.word	0x20000850
 8007258:	20000858 	.word	0x20000858
 800725c:	20000840 	.word	0x20000840
 8007260:	2000073c 	.word	0x2000073c
 8007264:	20000738 	.word	0x20000738
 8007268:	2000084c 	.word	0x2000084c
 800726c:	20000848 	.word	0x20000848

08007270 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007270:	b480      	push	{r7}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007276:	4b29      	ldr	r3, [pc, #164]	; (800731c <vTaskSwitchContext+0xac>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d003      	beq.n	8007286 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800727e:	4b28      	ldr	r3, [pc, #160]	; (8007320 <vTaskSwitchContext+0xb0>)
 8007280:	2201      	movs	r2, #1
 8007282:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007284:	e044      	b.n	8007310 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007286:	4b26      	ldr	r3, [pc, #152]	; (8007320 <vTaskSwitchContext+0xb0>)
 8007288:	2200      	movs	r2, #0
 800728a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800728c:	4b25      	ldr	r3, [pc, #148]	; (8007324 <vTaskSwitchContext+0xb4>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	fab3 f383 	clz	r3, r3
 8007298:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800729a:	7afb      	ldrb	r3, [r7, #11]
 800729c:	f1c3 031f 	rsb	r3, r3, #31
 80072a0:	617b      	str	r3, [r7, #20]
 80072a2:	4921      	ldr	r1, [pc, #132]	; (8007328 <vTaskSwitchContext+0xb8>)
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	4613      	mov	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4413      	add	r3, r2
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	440b      	add	r3, r1
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10a      	bne.n	80072cc <vTaskSwitchContext+0x5c>
	__asm volatile
 80072b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ba:	f383 8811 	msr	BASEPRI, r3
 80072be:	f3bf 8f6f 	isb	sy
 80072c2:	f3bf 8f4f 	dsb	sy
 80072c6:	607b      	str	r3, [r7, #4]
}
 80072c8:	bf00      	nop
 80072ca:	e7fe      	b.n	80072ca <vTaskSwitchContext+0x5a>
 80072cc:	697a      	ldr	r2, [r7, #20]
 80072ce:	4613      	mov	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	4a14      	ldr	r2, [pc, #80]	; (8007328 <vTaskSwitchContext+0xb8>)
 80072d8:	4413      	add	r3, r2
 80072da:	613b      	str	r3, [r7, #16]
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	605a      	str	r2, [r3, #4]
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	685a      	ldr	r2, [r3, #4]
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	3308      	adds	r3, #8
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d104      	bne.n	80072fc <vTaskSwitchContext+0x8c>
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	685a      	ldr	r2, [r3, #4]
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	605a      	str	r2, [r3, #4]
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	4a0a      	ldr	r2, [pc, #40]	; (800732c <vTaskSwitchContext+0xbc>)
 8007304:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007306:	4b09      	ldr	r3, [pc, #36]	; (800732c <vTaskSwitchContext+0xbc>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	334c      	adds	r3, #76	; 0x4c
 800730c:	4a08      	ldr	r2, [pc, #32]	; (8007330 <vTaskSwitchContext+0xc0>)
 800730e:	6013      	str	r3, [r2, #0]
}
 8007310:	bf00      	nop
 8007312:	371c      	adds	r7, #28
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	20000860 	.word	0x20000860
 8007320:	2000084c 	.word	0x2000084c
 8007324:	20000840 	.word	0x20000840
 8007328:	2000073c 	.word	0x2000073c
 800732c:	20000738 	.word	0x20000738
 8007330:	20000068 	.word	0x20000068

08007334 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800733c:	f000 f852 	bl	80073e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007340:	4b06      	ldr	r3, [pc, #24]	; (800735c <prvIdleTask+0x28>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d9f9      	bls.n	800733c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007348:	4b05      	ldr	r3, [pc, #20]	; (8007360 <prvIdleTask+0x2c>)
 800734a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800734e:	601a      	str	r2, [r3, #0]
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007358:	e7f0      	b.n	800733c <prvIdleTask+0x8>
 800735a:	bf00      	nop
 800735c:	2000073c 	.word	0x2000073c
 8007360:	e000ed04 	.word	0xe000ed04

08007364 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800736a:	2300      	movs	r3, #0
 800736c:	607b      	str	r3, [r7, #4]
 800736e:	e00c      	b.n	800738a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	4613      	mov	r3, r2
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	4413      	add	r3, r2
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	4a12      	ldr	r2, [pc, #72]	; (80073c4 <prvInitialiseTaskLists+0x60>)
 800737c:	4413      	add	r3, r2
 800737e:	4618      	mov	r0, r3
 8007380:	f7ff fb17 	bl	80069b2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	3301      	adds	r3, #1
 8007388:	607b      	str	r3, [r7, #4]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2b06      	cmp	r3, #6
 800738e:	d9ef      	bls.n	8007370 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007390:	480d      	ldr	r0, [pc, #52]	; (80073c8 <prvInitialiseTaskLists+0x64>)
 8007392:	f7ff fb0e 	bl	80069b2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007396:	480d      	ldr	r0, [pc, #52]	; (80073cc <prvInitialiseTaskLists+0x68>)
 8007398:	f7ff fb0b 	bl	80069b2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800739c:	480c      	ldr	r0, [pc, #48]	; (80073d0 <prvInitialiseTaskLists+0x6c>)
 800739e:	f7ff fb08 	bl	80069b2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80073a2:	480c      	ldr	r0, [pc, #48]	; (80073d4 <prvInitialiseTaskLists+0x70>)
 80073a4:	f7ff fb05 	bl	80069b2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80073a8:	480b      	ldr	r0, [pc, #44]	; (80073d8 <prvInitialiseTaskLists+0x74>)
 80073aa:	f7ff fb02 	bl	80069b2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80073ae:	4b0b      	ldr	r3, [pc, #44]	; (80073dc <prvInitialiseTaskLists+0x78>)
 80073b0:	4a05      	ldr	r2, [pc, #20]	; (80073c8 <prvInitialiseTaskLists+0x64>)
 80073b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80073b4:	4b0a      	ldr	r3, [pc, #40]	; (80073e0 <prvInitialiseTaskLists+0x7c>)
 80073b6:	4a05      	ldr	r2, [pc, #20]	; (80073cc <prvInitialiseTaskLists+0x68>)
 80073b8:	601a      	str	r2, [r3, #0]
}
 80073ba:	bf00      	nop
 80073bc:	3708      	adds	r7, #8
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	2000073c 	.word	0x2000073c
 80073c8:	200007c8 	.word	0x200007c8
 80073cc:	200007dc 	.word	0x200007dc
 80073d0:	200007f8 	.word	0x200007f8
 80073d4:	2000080c 	.word	0x2000080c
 80073d8:	20000824 	.word	0x20000824
 80073dc:	200007f0 	.word	0x200007f0
 80073e0:	200007f4 	.word	0x200007f4

080073e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073ea:	e019      	b.n	8007420 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80073ec:	f000 fa12 	bl	8007814 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073f0:	4b10      	ldr	r3, [pc, #64]	; (8007434 <prvCheckTasksWaitingTermination+0x50>)
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	3304      	adds	r3, #4
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7ff fb62 	bl	8006ac6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007402:	4b0d      	ldr	r3, [pc, #52]	; (8007438 <prvCheckTasksWaitingTermination+0x54>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	3b01      	subs	r3, #1
 8007408:	4a0b      	ldr	r2, [pc, #44]	; (8007438 <prvCheckTasksWaitingTermination+0x54>)
 800740a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800740c:	4b0b      	ldr	r3, [pc, #44]	; (800743c <prvCheckTasksWaitingTermination+0x58>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	3b01      	subs	r3, #1
 8007412:	4a0a      	ldr	r2, [pc, #40]	; (800743c <prvCheckTasksWaitingTermination+0x58>)
 8007414:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007416:	f000 fa2d 	bl	8007874 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f810 	bl	8007440 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007420:	4b06      	ldr	r3, [pc, #24]	; (800743c <prvCheckTasksWaitingTermination+0x58>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1e1      	bne.n	80073ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007428:	bf00      	nop
 800742a:	bf00      	nop
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	2000080c 	.word	0x2000080c
 8007438:	20000838 	.word	0x20000838
 800743c:	20000820 	.word	0x20000820

08007440 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	334c      	adds	r3, #76	; 0x4c
 800744c:	4618      	mov	r0, r3
 800744e:	f000 fe8d 	bl	800816c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007458:	2b00      	cmp	r3, #0
 800745a:	d108      	bne.n	800746e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007460:	4618      	mov	r0, r3
 8007462:	f000 fb85 	bl	8007b70 <vPortFree>
				vPortFree( pxTCB );
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fb82 	bl	8007b70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800746c:	e018      	b.n	80074a0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007474:	2b01      	cmp	r3, #1
 8007476:	d103      	bne.n	8007480 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 fb79 	bl	8007b70 <vPortFree>
	}
 800747e:	e00f      	b.n	80074a0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007486:	2b02      	cmp	r3, #2
 8007488:	d00a      	beq.n	80074a0 <prvDeleteTCB+0x60>
	__asm volatile
 800748a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748e:	f383 8811 	msr	BASEPRI, r3
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	60fb      	str	r3, [r7, #12]
}
 800749c:	bf00      	nop
 800749e:	e7fe      	b.n	800749e <prvDeleteTCB+0x5e>
	}
 80074a0:	bf00      	nop
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074ae:	4b0c      	ldr	r3, [pc, #48]	; (80074e0 <prvResetNextTaskUnblockTime+0x38>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d104      	bne.n	80074c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80074b8:	4b0a      	ldr	r3, [pc, #40]	; (80074e4 <prvResetNextTaskUnblockTime+0x3c>)
 80074ba:	f04f 32ff 	mov.w	r2, #4294967295
 80074be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80074c0:	e008      	b.n	80074d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074c2:	4b07      	ldr	r3, [pc, #28]	; (80074e0 <prvResetNextTaskUnblockTime+0x38>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	4a04      	ldr	r2, [pc, #16]	; (80074e4 <prvResetNextTaskUnblockTime+0x3c>)
 80074d2:	6013      	str	r3, [r2, #0]
}
 80074d4:	bf00      	nop
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr
 80074e0:	200007f0 	.word	0x200007f0
 80074e4:	20000858 	.word	0x20000858

080074e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80074f2:	4b29      	ldr	r3, [pc, #164]	; (8007598 <prvAddCurrentTaskToDelayedList+0xb0>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074f8:	4b28      	ldr	r3, [pc, #160]	; (800759c <prvAddCurrentTaskToDelayedList+0xb4>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	3304      	adds	r3, #4
 80074fe:	4618      	mov	r0, r3
 8007500:	f7ff fae1 	bl	8006ac6 <uxListRemove>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10b      	bne.n	8007522 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800750a:	4b24      	ldr	r3, [pc, #144]	; (800759c <prvAddCurrentTaskToDelayedList+0xb4>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007510:	2201      	movs	r2, #1
 8007512:	fa02 f303 	lsl.w	r3, r2, r3
 8007516:	43da      	mvns	r2, r3
 8007518:	4b21      	ldr	r3, [pc, #132]	; (80075a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4013      	ands	r3, r2
 800751e:	4a20      	ldr	r2, [pc, #128]	; (80075a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007520:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007528:	d10a      	bne.n	8007540 <prvAddCurrentTaskToDelayedList+0x58>
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d007      	beq.n	8007540 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007530:	4b1a      	ldr	r3, [pc, #104]	; (800759c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3304      	adds	r3, #4
 8007536:	4619      	mov	r1, r3
 8007538:	481a      	ldr	r0, [pc, #104]	; (80075a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800753a:	f7ff fa67 	bl	8006a0c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800753e:	e026      	b.n	800758e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4413      	add	r3, r2
 8007546:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007548:	4b14      	ldr	r3, [pc, #80]	; (800759c <prvAddCurrentTaskToDelayedList+0xb4>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007550:	68ba      	ldr	r2, [r7, #8]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	429a      	cmp	r2, r3
 8007556:	d209      	bcs.n	800756c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007558:	4b13      	ldr	r3, [pc, #76]	; (80075a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	4b0f      	ldr	r3, [pc, #60]	; (800759c <prvAddCurrentTaskToDelayedList+0xb4>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	3304      	adds	r3, #4
 8007562:	4619      	mov	r1, r3
 8007564:	4610      	mov	r0, r2
 8007566:	f7ff fa75 	bl	8006a54 <vListInsert>
}
 800756a:	e010      	b.n	800758e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800756c:	4b0f      	ldr	r3, [pc, #60]	; (80075ac <prvAddCurrentTaskToDelayedList+0xc4>)
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	4b0a      	ldr	r3, [pc, #40]	; (800759c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	3304      	adds	r3, #4
 8007576:	4619      	mov	r1, r3
 8007578:	4610      	mov	r0, r2
 800757a:	f7ff fa6b 	bl	8006a54 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800757e:	4b0c      	ldr	r3, [pc, #48]	; (80075b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	429a      	cmp	r2, r3
 8007586:	d202      	bcs.n	800758e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007588:	4a09      	ldr	r2, [pc, #36]	; (80075b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	6013      	str	r3, [r2, #0]
}
 800758e:	bf00      	nop
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	2000083c 	.word	0x2000083c
 800759c:	20000738 	.word	0x20000738
 80075a0:	20000840 	.word	0x20000840
 80075a4:	20000824 	.word	0x20000824
 80075a8:	200007f4 	.word	0x200007f4
 80075ac:	200007f0 	.word	0x200007f0
 80075b0:	20000858 	.word	0x20000858

080075b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	3b04      	subs	r3, #4
 80075c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80075cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3b04      	subs	r3, #4
 80075d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	f023 0201 	bic.w	r2, r3, #1
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	3b04      	subs	r3, #4
 80075e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80075e4:	4a0c      	ldr	r2, [pc, #48]	; (8007618 <pxPortInitialiseStack+0x64>)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	3b14      	subs	r3, #20
 80075ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	3b04      	subs	r3, #4
 80075fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f06f 0202 	mvn.w	r2, #2
 8007602:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	3b20      	subs	r3, #32
 8007608:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800760a:	68fb      	ldr	r3, [r7, #12]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr
 8007618:	0800761d 	.word	0x0800761d

0800761c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007622:	2300      	movs	r3, #0
 8007624:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007626:	4b12      	ldr	r3, [pc, #72]	; (8007670 <prvTaskExitError+0x54>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762e:	d00a      	beq.n	8007646 <prvTaskExitError+0x2a>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	60fb      	str	r3, [r7, #12]
}
 8007642:	bf00      	nop
 8007644:	e7fe      	b.n	8007644 <prvTaskExitError+0x28>
	__asm volatile
 8007646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764a:	f383 8811 	msr	BASEPRI, r3
 800764e:	f3bf 8f6f 	isb	sy
 8007652:	f3bf 8f4f 	dsb	sy
 8007656:	60bb      	str	r3, [r7, #8]
}
 8007658:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800765a:	bf00      	nop
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d0fc      	beq.n	800765c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007662:	bf00      	nop
 8007664:	bf00      	nop
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr
 8007670:	2000000c 	.word	0x2000000c
	...

08007680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007680:	4b07      	ldr	r3, [pc, #28]	; (80076a0 <pxCurrentTCBConst2>)
 8007682:	6819      	ldr	r1, [r3, #0]
 8007684:	6808      	ldr	r0, [r1, #0]
 8007686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800768a:	f380 8809 	msr	PSP, r0
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f04f 0000 	mov.w	r0, #0
 8007696:	f380 8811 	msr	BASEPRI, r0
 800769a:	4770      	bx	lr
 800769c:	f3af 8000 	nop.w

080076a0 <pxCurrentTCBConst2>:
 80076a0:	20000738 	.word	0x20000738
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop

080076a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80076a8:	4808      	ldr	r0, [pc, #32]	; (80076cc <prvPortStartFirstTask+0x24>)
 80076aa:	6800      	ldr	r0, [r0, #0]
 80076ac:	6800      	ldr	r0, [r0, #0]
 80076ae:	f380 8808 	msr	MSP, r0
 80076b2:	f04f 0000 	mov.w	r0, #0
 80076b6:	f380 8814 	msr	CONTROL, r0
 80076ba:	b662      	cpsie	i
 80076bc:	b661      	cpsie	f
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	df00      	svc	0
 80076c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80076ca:	bf00      	nop
 80076cc:	e000ed08 	.word	0xe000ed08

080076d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80076d6:	4b46      	ldr	r3, [pc, #280]	; (80077f0 <xPortStartScheduler+0x120>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a46      	ldr	r2, [pc, #280]	; (80077f4 <xPortStartScheduler+0x124>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d10a      	bne.n	80076f6 <xPortStartScheduler+0x26>
	__asm volatile
 80076e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e4:	f383 8811 	msr	BASEPRI, r3
 80076e8:	f3bf 8f6f 	isb	sy
 80076ec:	f3bf 8f4f 	dsb	sy
 80076f0:	613b      	str	r3, [r7, #16]
}
 80076f2:	bf00      	nop
 80076f4:	e7fe      	b.n	80076f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80076f6:	4b3e      	ldr	r3, [pc, #248]	; (80077f0 <xPortStartScheduler+0x120>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a3f      	ldr	r2, [pc, #252]	; (80077f8 <xPortStartScheduler+0x128>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d10a      	bne.n	8007716 <xPortStartScheduler+0x46>
	__asm volatile
 8007700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007704:	f383 8811 	msr	BASEPRI, r3
 8007708:	f3bf 8f6f 	isb	sy
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	60fb      	str	r3, [r7, #12]
}
 8007712:	bf00      	nop
 8007714:	e7fe      	b.n	8007714 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007716:	4b39      	ldr	r3, [pc, #228]	; (80077fc <xPortStartScheduler+0x12c>)
 8007718:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	b2db      	uxtb	r3, r3
 8007720:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	22ff      	movs	r2, #255	; 0xff
 8007726:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	b2db      	uxtb	r3, r3
 800772e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007730:	78fb      	ldrb	r3, [r7, #3]
 8007732:	b2db      	uxtb	r3, r3
 8007734:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007738:	b2da      	uxtb	r2, r3
 800773a:	4b31      	ldr	r3, [pc, #196]	; (8007800 <xPortStartScheduler+0x130>)
 800773c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800773e:	4b31      	ldr	r3, [pc, #196]	; (8007804 <xPortStartScheduler+0x134>)
 8007740:	2207      	movs	r2, #7
 8007742:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007744:	e009      	b.n	800775a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007746:	4b2f      	ldr	r3, [pc, #188]	; (8007804 <xPortStartScheduler+0x134>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	3b01      	subs	r3, #1
 800774c:	4a2d      	ldr	r2, [pc, #180]	; (8007804 <xPortStartScheduler+0x134>)
 800774e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007750:	78fb      	ldrb	r3, [r7, #3]
 8007752:	b2db      	uxtb	r3, r3
 8007754:	005b      	lsls	r3, r3, #1
 8007756:	b2db      	uxtb	r3, r3
 8007758:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800775a:	78fb      	ldrb	r3, [r7, #3]
 800775c:	b2db      	uxtb	r3, r3
 800775e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007762:	2b80      	cmp	r3, #128	; 0x80
 8007764:	d0ef      	beq.n	8007746 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007766:	4b27      	ldr	r3, [pc, #156]	; (8007804 <xPortStartScheduler+0x134>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f1c3 0307 	rsb	r3, r3, #7
 800776e:	2b04      	cmp	r3, #4
 8007770:	d00a      	beq.n	8007788 <xPortStartScheduler+0xb8>
	__asm volatile
 8007772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007776:	f383 8811 	msr	BASEPRI, r3
 800777a:	f3bf 8f6f 	isb	sy
 800777e:	f3bf 8f4f 	dsb	sy
 8007782:	60bb      	str	r3, [r7, #8]
}
 8007784:	bf00      	nop
 8007786:	e7fe      	b.n	8007786 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007788:	4b1e      	ldr	r3, [pc, #120]	; (8007804 <xPortStartScheduler+0x134>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	021b      	lsls	r3, r3, #8
 800778e:	4a1d      	ldr	r2, [pc, #116]	; (8007804 <xPortStartScheduler+0x134>)
 8007790:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007792:	4b1c      	ldr	r3, [pc, #112]	; (8007804 <xPortStartScheduler+0x134>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800779a:	4a1a      	ldr	r2, [pc, #104]	; (8007804 <xPortStartScheduler+0x134>)
 800779c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	b2da      	uxtb	r2, r3
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80077a6:	4b18      	ldr	r3, [pc, #96]	; (8007808 <xPortStartScheduler+0x138>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a17      	ldr	r2, [pc, #92]	; (8007808 <xPortStartScheduler+0x138>)
 80077ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80077b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80077b2:	4b15      	ldr	r3, [pc, #84]	; (8007808 <xPortStartScheduler+0x138>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a14      	ldr	r2, [pc, #80]	; (8007808 <xPortStartScheduler+0x138>)
 80077b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80077bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80077be:	f000 f8dd 	bl	800797c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80077c2:	4b12      	ldr	r3, [pc, #72]	; (800780c <xPortStartScheduler+0x13c>)
 80077c4:	2200      	movs	r2, #0
 80077c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80077c8:	f000 f8fc 	bl	80079c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80077cc:	4b10      	ldr	r3, [pc, #64]	; (8007810 <xPortStartScheduler+0x140>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a0f      	ldr	r2, [pc, #60]	; (8007810 <xPortStartScheduler+0x140>)
 80077d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80077d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80077d8:	f7ff ff66 	bl	80076a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80077dc:	f7ff fd48 	bl	8007270 <vTaskSwitchContext>
	prvTaskExitError();
 80077e0:	f7ff ff1c 	bl	800761c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3718      	adds	r7, #24
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	e000ed00 	.word	0xe000ed00
 80077f4:	410fc271 	.word	0x410fc271
 80077f8:	410fc270 	.word	0x410fc270
 80077fc:	e000e400 	.word	0xe000e400
 8007800:	20000864 	.word	0x20000864
 8007804:	20000868 	.word	0x20000868
 8007808:	e000ed20 	.word	0xe000ed20
 800780c:	2000000c 	.word	0x2000000c
 8007810:	e000ef34 	.word	0xe000ef34

08007814 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
	__asm volatile
 800781a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	607b      	str	r3, [r7, #4]
}
 800782c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800782e:	4b0f      	ldr	r3, [pc, #60]	; (800786c <vPortEnterCritical+0x58>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	3301      	adds	r3, #1
 8007834:	4a0d      	ldr	r2, [pc, #52]	; (800786c <vPortEnterCritical+0x58>)
 8007836:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007838:	4b0c      	ldr	r3, [pc, #48]	; (800786c <vPortEnterCritical+0x58>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d10f      	bne.n	8007860 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007840:	4b0b      	ldr	r3, [pc, #44]	; (8007870 <vPortEnterCritical+0x5c>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	b2db      	uxtb	r3, r3
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00a      	beq.n	8007860 <vPortEnterCritical+0x4c>
	__asm volatile
 800784a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784e:	f383 8811 	msr	BASEPRI, r3
 8007852:	f3bf 8f6f 	isb	sy
 8007856:	f3bf 8f4f 	dsb	sy
 800785a:	603b      	str	r3, [r7, #0]
}
 800785c:	bf00      	nop
 800785e:	e7fe      	b.n	800785e <vPortEnterCritical+0x4a>
	}
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	2000000c 	.word	0x2000000c
 8007870:	e000ed04 	.word	0xe000ed04

08007874 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800787a:	4b12      	ldr	r3, [pc, #72]	; (80078c4 <vPortExitCritical+0x50>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d10a      	bne.n	8007898 <vPortExitCritical+0x24>
	__asm volatile
 8007882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007886:	f383 8811 	msr	BASEPRI, r3
 800788a:	f3bf 8f6f 	isb	sy
 800788e:	f3bf 8f4f 	dsb	sy
 8007892:	607b      	str	r3, [r7, #4]
}
 8007894:	bf00      	nop
 8007896:	e7fe      	b.n	8007896 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007898:	4b0a      	ldr	r3, [pc, #40]	; (80078c4 <vPortExitCritical+0x50>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	3b01      	subs	r3, #1
 800789e:	4a09      	ldr	r2, [pc, #36]	; (80078c4 <vPortExitCritical+0x50>)
 80078a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80078a2:	4b08      	ldr	r3, [pc, #32]	; (80078c4 <vPortExitCritical+0x50>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d105      	bne.n	80078b6 <vPortExitCritical+0x42>
 80078aa:	2300      	movs	r3, #0
 80078ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80078b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80078b6:	bf00      	nop
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	2000000c 	.word	0x2000000c
	...

080078d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80078d0:	f3ef 8009 	mrs	r0, PSP
 80078d4:	f3bf 8f6f 	isb	sy
 80078d8:	4b15      	ldr	r3, [pc, #84]	; (8007930 <pxCurrentTCBConst>)
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	f01e 0f10 	tst.w	lr, #16
 80078e0:	bf08      	it	eq
 80078e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80078e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ea:	6010      	str	r0, [r2, #0]
 80078ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80078f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80078f4:	f380 8811 	msr	BASEPRI, r0
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	f3bf 8f6f 	isb	sy
 8007900:	f7ff fcb6 	bl	8007270 <vTaskSwitchContext>
 8007904:	f04f 0000 	mov.w	r0, #0
 8007908:	f380 8811 	msr	BASEPRI, r0
 800790c:	bc09      	pop	{r0, r3}
 800790e:	6819      	ldr	r1, [r3, #0]
 8007910:	6808      	ldr	r0, [r1, #0]
 8007912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007916:	f01e 0f10 	tst.w	lr, #16
 800791a:	bf08      	it	eq
 800791c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007920:	f380 8809 	msr	PSP, r0
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	f3af 8000 	nop.w

08007930 <pxCurrentTCBConst>:
 8007930:	20000738 	.word	0x20000738
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007934:	bf00      	nop
 8007936:	bf00      	nop

08007938 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
	__asm volatile
 800793e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	607b      	str	r3, [r7, #4]
}
 8007950:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007952:	f7ff fbd5 	bl	8007100 <xTaskIncrementTick>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d003      	beq.n	8007964 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800795c:	4b06      	ldr	r3, [pc, #24]	; (8007978 <SysTick_Handler+0x40>)
 800795e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007962:	601a      	str	r2, [r3, #0]
 8007964:	2300      	movs	r3, #0
 8007966:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	f383 8811 	msr	BASEPRI, r3
}
 800796e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007970:	bf00      	nop
 8007972:	3708      	adds	r7, #8
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	e000ed04 	.word	0xe000ed04

0800797c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800797c:	b480      	push	{r7}
 800797e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007980:	4b0b      	ldr	r3, [pc, #44]	; (80079b0 <vPortSetupTimerInterrupt+0x34>)
 8007982:	2200      	movs	r2, #0
 8007984:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007986:	4b0b      	ldr	r3, [pc, #44]	; (80079b4 <vPortSetupTimerInterrupt+0x38>)
 8007988:	2200      	movs	r2, #0
 800798a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800798c:	4b0a      	ldr	r3, [pc, #40]	; (80079b8 <vPortSetupTimerInterrupt+0x3c>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a0a      	ldr	r2, [pc, #40]	; (80079bc <vPortSetupTimerInterrupt+0x40>)
 8007992:	fba2 2303 	umull	r2, r3, r2, r3
 8007996:	099b      	lsrs	r3, r3, #6
 8007998:	4a09      	ldr	r2, [pc, #36]	; (80079c0 <vPortSetupTimerInterrupt+0x44>)
 800799a:	3b01      	subs	r3, #1
 800799c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800799e:	4b04      	ldr	r3, [pc, #16]	; (80079b0 <vPortSetupTimerInterrupt+0x34>)
 80079a0:	2207      	movs	r2, #7
 80079a2:	601a      	str	r2, [r3, #0]
}
 80079a4:	bf00      	nop
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop
 80079b0:	e000e010 	.word	0xe000e010
 80079b4:	e000e018 	.word	0xe000e018
 80079b8:	20000000 	.word	0x20000000
 80079bc:	10624dd3 	.word	0x10624dd3
 80079c0:	e000e014 	.word	0xe000e014

080079c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80079c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80079d4 <vPortEnableVFP+0x10>
 80079c8:	6801      	ldr	r1, [r0, #0]
 80079ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80079ce:	6001      	str	r1, [r0, #0]
 80079d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80079d2:	bf00      	nop
 80079d4:	e000ed88 	.word	0xe000ed88

080079d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b08a      	sub	sp, #40	; 0x28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80079e0:	2300      	movs	r3, #0
 80079e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80079e4:	f7ff fae2 	bl	8006fac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80079e8:	4b5b      	ldr	r3, [pc, #364]	; (8007b58 <pvPortMalloc+0x180>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d101      	bne.n	80079f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80079f0:	f000 f920 	bl	8007c34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80079f4:	4b59      	ldr	r3, [pc, #356]	; (8007b5c <pvPortMalloc+0x184>)
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4013      	ands	r3, r2
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f040 8093 	bne.w	8007b28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d01d      	beq.n	8007a44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007a08:	2208      	movs	r2, #8
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f003 0307 	and.w	r3, r3, #7
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d014      	beq.n	8007a44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f023 0307 	bic.w	r3, r3, #7
 8007a20:	3308      	adds	r3, #8
 8007a22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f003 0307 	and.w	r3, r3, #7
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00a      	beq.n	8007a44 <pvPortMalloc+0x6c>
	__asm volatile
 8007a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	617b      	str	r3, [r7, #20]
}
 8007a40:	bf00      	nop
 8007a42:	e7fe      	b.n	8007a42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d06e      	beq.n	8007b28 <pvPortMalloc+0x150>
 8007a4a:	4b45      	ldr	r3, [pc, #276]	; (8007b60 <pvPortMalloc+0x188>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d869      	bhi.n	8007b28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007a54:	4b43      	ldr	r3, [pc, #268]	; (8007b64 <pvPortMalloc+0x18c>)
 8007a56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007a58:	4b42      	ldr	r3, [pc, #264]	; (8007b64 <pvPortMalloc+0x18c>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a5e:	e004      	b.n	8007a6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d903      	bls.n	8007a7c <pvPortMalloc+0xa4>
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1f1      	bne.n	8007a60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007a7c:	4b36      	ldr	r3, [pc, #216]	; (8007b58 <pvPortMalloc+0x180>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d050      	beq.n	8007b28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a86:	6a3b      	ldr	r3, [r7, #32]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2208      	movs	r2, #8
 8007a8c:	4413      	add	r3, r2
 8007a8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	6a3b      	ldr	r3, [r7, #32]
 8007a96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9a:	685a      	ldr	r2, [r3, #4]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	1ad2      	subs	r2, r2, r3
 8007aa0:	2308      	movs	r3, #8
 8007aa2:	005b      	lsls	r3, r3, #1
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d91f      	bls.n	8007ae8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4413      	add	r3, r2
 8007aae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	f003 0307 	and.w	r3, r3, #7
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00a      	beq.n	8007ad0 <pvPortMalloc+0xf8>
	__asm volatile
 8007aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abe:	f383 8811 	msr	BASEPRI, r3
 8007ac2:	f3bf 8f6f 	isb	sy
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	613b      	str	r3, [r7, #16]
}
 8007acc:	bf00      	nop
 8007ace:	e7fe      	b.n	8007ace <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad2:	685a      	ldr	r2, [r3, #4]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	1ad2      	subs	r2, r2, r3
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007ae2:	69b8      	ldr	r0, [r7, #24]
 8007ae4:	f000 f908 	bl	8007cf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ae8:	4b1d      	ldr	r3, [pc, #116]	; (8007b60 <pvPortMalloc+0x188>)
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	4a1b      	ldr	r2, [pc, #108]	; (8007b60 <pvPortMalloc+0x188>)
 8007af4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007af6:	4b1a      	ldr	r3, [pc, #104]	; (8007b60 <pvPortMalloc+0x188>)
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	4b1b      	ldr	r3, [pc, #108]	; (8007b68 <pvPortMalloc+0x190>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d203      	bcs.n	8007b0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b02:	4b17      	ldr	r3, [pc, #92]	; (8007b60 <pvPortMalloc+0x188>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a18      	ldr	r2, [pc, #96]	; (8007b68 <pvPortMalloc+0x190>)
 8007b08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	4b13      	ldr	r3, [pc, #76]	; (8007b5c <pvPortMalloc+0x184>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	431a      	orrs	r2, r3
 8007b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007b1e:	4b13      	ldr	r3, [pc, #76]	; (8007b6c <pvPortMalloc+0x194>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	3301      	adds	r3, #1
 8007b24:	4a11      	ldr	r2, [pc, #68]	; (8007b6c <pvPortMalloc+0x194>)
 8007b26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b28:	f7ff fa4e 	bl	8006fc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	f003 0307 	and.w	r3, r3, #7
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00a      	beq.n	8007b4c <pvPortMalloc+0x174>
	__asm volatile
 8007b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3a:	f383 8811 	msr	BASEPRI, r3
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	f3bf 8f4f 	dsb	sy
 8007b46:	60fb      	str	r3, [r7, #12]
}
 8007b48:	bf00      	nop
 8007b4a:	e7fe      	b.n	8007b4a <pvPortMalloc+0x172>
	return pvReturn;
 8007b4c:	69fb      	ldr	r3, [r7, #28]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3728      	adds	r7, #40	; 0x28
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	20004474 	.word	0x20004474
 8007b5c:	20004488 	.word	0x20004488
 8007b60:	20004478 	.word	0x20004478
 8007b64:	2000446c 	.word	0x2000446c
 8007b68:	2000447c 	.word	0x2000447c
 8007b6c:	20004480 	.word	0x20004480

08007b70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d04d      	beq.n	8007c1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007b82:	2308      	movs	r3, #8
 8007b84:	425b      	negs	r3, r3
 8007b86:	697a      	ldr	r2, [r7, #20]
 8007b88:	4413      	add	r3, r2
 8007b8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	685a      	ldr	r2, [r3, #4]
 8007b94:	4b24      	ldr	r3, [pc, #144]	; (8007c28 <vPortFree+0xb8>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4013      	ands	r3, r2
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d10a      	bne.n	8007bb4 <vPortFree+0x44>
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	60fb      	str	r3, [r7, #12]
}
 8007bb0:	bf00      	nop
 8007bb2:	e7fe      	b.n	8007bb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00a      	beq.n	8007bd2 <vPortFree+0x62>
	__asm volatile
 8007bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc0:	f383 8811 	msr	BASEPRI, r3
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	60bb      	str	r3, [r7, #8]
}
 8007bce:	bf00      	nop
 8007bd0:	e7fe      	b.n	8007bd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	685a      	ldr	r2, [r3, #4]
 8007bd6:	4b14      	ldr	r3, [pc, #80]	; (8007c28 <vPortFree+0xb8>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4013      	ands	r3, r2
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d01e      	beq.n	8007c1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d11a      	bne.n	8007c1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	4b0e      	ldr	r3, [pc, #56]	; (8007c28 <vPortFree+0xb8>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	43db      	mvns	r3, r3
 8007bf2:	401a      	ands	r2, r3
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007bf8:	f7ff f9d8 	bl	8006fac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	685a      	ldr	r2, [r3, #4]
 8007c00:	4b0a      	ldr	r3, [pc, #40]	; (8007c2c <vPortFree+0xbc>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4413      	add	r3, r2
 8007c06:	4a09      	ldr	r2, [pc, #36]	; (8007c2c <vPortFree+0xbc>)
 8007c08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c0a:	6938      	ldr	r0, [r7, #16]
 8007c0c:	f000 f874 	bl	8007cf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007c10:	4b07      	ldr	r3, [pc, #28]	; (8007c30 <vPortFree+0xc0>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	3301      	adds	r3, #1
 8007c16:	4a06      	ldr	r2, [pc, #24]	; (8007c30 <vPortFree+0xc0>)
 8007c18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007c1a:	f7ff f9d5 	bl	8006fc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c1e:	bf00      	nop
 8007c20:	3718      	adds	r7, #24
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	20004488 	.word	0x20004488
 8007c2c:	20004478 	.word	0x20004478
 8007c30:	20004484 	.word	0x20004484

08007c34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007c3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c40:	4b27      	ldr	r3, [pc, #156]	; (8007ce0 <prvHeapInit+0xac>)
 8007c42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f003 0307 	and.w	r3, r3, #7
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00c      	beq.n	8007c68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	3307      	adds	r3, #7
 8007c52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f023 0307 	bic.w	r3, r3, #7
 8007c5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	4a1f      	ldr	r2, [pc, #124]	; (8007ce0 <prvHeapInit+0xac>)
 8007c64:	4413      	add	r3, r2
 8007c66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007c6c:	4a1d      	ldr	r2, [pc, #116]	; (8007ce4 <prvHeapInit+0xb0>)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007c72:	4b1c      	ldr	r3, [pc, #112]	; (8007ce4 <prvHeapInit+0xb0>)
 8007c74:	2200      	movs	r2, #0
 8007c76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	68ba      	ldr	r2, [r7, #8]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007c80:	2208      	movs	r2, #8
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	1a9b      	subs	r3, r3, r2
 8007c86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f023 0307 	bic.w	r3, r3, #7
 8007c8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	4a15      	ldr	r2, [pc, #84]	; (8007ce8 <prvHeapInit+0xb4>)
 8007c94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007c96:	4b14      	ldr	r3, [pc, #80]	; (8007ce8 <prvHeapInit+0xb4>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007c9e:	4b12      	ldr	r3, [pc, #72]	; (8007ce8 <prvHeapInit+0xb4>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	1ad2      	subs	r2, r2, r3
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007cb4:	4b0c      	ldr	r3, [pc, #48]	; (8007ce8 <prvHeapInit+0xb4>)
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	4a0a      	ldr	r2, [pc, #40]	; (8007cec <prvHeapInit+0xb8>)
 8007cc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	4a09      	ldr	r2, [pc, #36]	; (8007cf0 <prvHeapInit+0xbc>)
 8007cca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ccc:	4b09      	ldr	r3, [pc, #36]	; (8007cf4 <prvHeapInit+0xc0>)
 8007cce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007cd2:	601a      	str	r2, [r3, #0]
}
 8007cd4:	bf00      	nop
 8007cd6:	3714      	adds	r7, #20
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr
 8007ce0:	2000086c 	.word	0x2000086c
 8007ce4:	2000446c 	.word	0x2000446c
 8007ce8:	20004474 	.word	0x20004474
 8007cec:	2000447c 	.word	0x2000447c
 8007cf0:	20004478 	.word	0x20004478
 8007cf4:	20004488 	.word	0x20004488

08007cf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d00:	4b28      	ldr	r3, [pc, #160]	; (8007da4 <prvInsertBlockIntoFreeList+0xac>)
 8007d02:	60fb      	str	r3, [r7, #12]
 8007d04:	e002      	b.n	8007d0c <prvInsertBlockIntoFreeList+0x14>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	60fb      	str	r3, [r7, #12]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d8f7      	bhi.n	8007d06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	68ba      	ldr	r2, [r7, #8]
 8007d20:	4413      	add	r3, r2
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d108      	bne.n	8007d3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	685a      	ldr	r2, [r3, #4]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	441a      	add	r2, r3
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	441a      	add	r2, r3
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d118      	bne.n	8007d80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	4b15      	ldr	r3, [pc, #84]	; (8007da8 <prvInsertBlockIntoFreeList+0xb0>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d00d      	beq.n	8007d76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	685a      	ldr	r2, [r3, #4]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	441a      	add	r2, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	601a      	str	r2, [r3, #0]
 8007d74:	e008      	b.n	8007d88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007d76:	4b0c      	ldr	r3, [pc, #48]	; (8007da8 <prvInsertBlockIntoFreeList+0xb0>)
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	e003      	b.n	8007d88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d002      	beq.n	8007d96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d96:	bf00      	nop
 8007d98:	3714      	adds	r7, #20
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	2000446c 	.word	0x2000446c
 8007da8:	20004474 	.word	0x20004474

08007dac <atoi>:
 8007dac:	220a      	movs	r2, #10
 8007dae:	2100      	movs	r1, #0
 8007db0:	f000 b882 	b.w	8007eb8 <strtol>

08007db4 <_strtol_l.constprop.0>:
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dba:	d001      	beq.n	8007dc0 <_strtol_l.constprop.0+0xc>
 8007dbc:	2b24      	cmp	r3, #36	; 0x24
 8007dbe:	d906      	bls.n	8007dce <_strtol_l.constprop.0+0x1a>
 8007dc0:	f000 fa60 	bl	8008284 <__errno>
 8007dc4:	2316      	movs	r3, #22
 8007dc6:	6003      	str	r3, [r0, #0]
 8007dc8:	2000      	movs	r0, #0
 8007dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dce:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007eb4 <_strtol_l.constprop.0+0x100>
 8007dd2:	460d      	mov	r5, r1
 8007dd4:	462e      	mov	r6, r5
 8007dd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007dda:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007dde:	f017 0708 	ands.w	r7, r7, #8
 8007de2:	d1f7      	bne.n	8007dd4 <_strtol_l.constprop.0+0x20>
 8007de4:	2c2d      	cmp	r4, #45	; 0x2d
 8007de6:	d132      	bne.n	8007e4e <_strtol_l.constprop.0+0x9a>
 8007de8:	782c      	ldrb	r4, [r5, #0]
 8007dea:	2701      	movs	r7, #1
 8007dec:	1cb5      	adds	r5, r6, #2
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d05b      	beq.n	8007eaa <_strtol_l.constprop.0+0xf6>
 8007df2:	2b10      	cmp	r3, #16
 8007df4:	d109      	bne.n	8007e0a <_strtol_l.constprop.0+0x56>
 8007df6:	2c30      	cmp	r4, #48	; 0x30
 8007df8:	d107      	bne.n	8007e0a <_strtol_l.constprop.0+0x56>
 8007dfa:	782c      	ldrb	r4, [r5, #0]
 8007dfc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007e00:	2c58      	cmp	r4, #88	; 0x58
 8007e02:	d14d      	bne.n	8007ea0 <_strtol_l.constprop.0+0xec>
 8007e04:	786c      	ldrb	r4, [r5, #1]
 8007e06:	2310      	movs	r3, #16
 8007e08:	3502      	adds	r5, #2
 8007e0a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007e0e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007e12:	f04f 0e00 	mov.w	lr, #0
 8007e16:	fbb8 f9f3 	udiv	r9, r8, r3
 8007e1a:	4676      	mov	r6, lr
 8007e1c:	fb03 8a19 	mls	sl, r3, r9, r8
 8007e20:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007e24:	f1bc 0f09 	cmp.w	ip, #9
 8007e28:	d816      	bhi.n	8007e58 <_strtol_l.constprop.0+0xa4>
 8007e2a:	4664      	mov	r4, ip
 8007e2c:	42a3      	cmp	r3, r4
 8007e2e:	dd24      	ble.n	8007e7a <_strtol_l.constprop.0+0xc6>
 8007e30:	f1be 3fff 	cmp.w	lr, #4294967295
 8007e34:	d008      	beq.n	8007e48 <_strtol_l.constprop.0+0x94>
 8007e36:	45b1      	cmp	r9, r6
 8007e38:	d31c      	bcc.n	8007e74 <_strtol_l.constprop.0+0xc0>
 8007e3a:	d101      	bne.n	8007e40 <_strtol_l.constprop.0+0x8c>
 8007e3c:	45a2      	cmp	sl, r4
 8007e3e:	db19      	blt.n	8007e74 <_strtol_l.constprop.0+0xc0>
 8007e40:	fb06 4603 	mla	r6, r6, r3, r4
 8007e44:	f04f 0e01 	mov.w	lr, #1
 8007e48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e4c:	e7e8      	b.n	8007e20 <_strtol_l.constprop.0+0x6c>
 8007e4e:	2c2b      	cmp	r4, #43	; 0x2b
 8007e50:	bf04      	itt	eq
 8007e52:	782c      	ldrbeq	r4, [r5, #0]
 8007e54:	1cb5      	addeq	r5, r6, #2
 8007e56:	e7ca      	b.n	8007dee <_strtol_l.constprop.0+0x3a>
 8007e58:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007e5c:	f1bc 0f19 	cmp.w	ip, #25
 8007e60:	d801      	bhi.n	8007e66 <_strtol_l.constprop.0+0xb2>
 8007e62:	3c37      	subs	r4, #55	; 0x37
 8007e64:	e7e2      	b.n	8007e2c <_strtol_l.constprop.0+0x78>
 8007e66:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007e6a:	f1bc 0f19 	cmp.w	ip, #25
 8007e6e:	d804      	bhi.n	8007e7a <_strtol_l.constprop.0+0xc6>
 8007e70:	3c57      	subs	r4, #87	; 0x57
 8007e72:	e7db      	b.n	8007e2c <_strtol_l.constprop.0+0x78>
 8007e74:	f04f 3eff 	mov.w	lr, #4294967295
 8007e78:	e7e6      	b.n	8007e48 <_strtol_l.constprop.0+0x94>
 8007e7a:	f1be 3fff 	cmp.w	lr, #4294967295
 8007e7e:	d105      	bne.n	8007e8c <_strtol_l.constprop.0+0xd8>
 8007e80:	2322      	movs	r3, #34	; 0x22
 8007e82:	6003      	str	r3, [r0, #0]
 8007e84:	4646      	mov	r6, r8
 8007e86:	b942      	cbnz	r2, 8007e9a <_strtol_l.constprop.0+0xe6>
 8007e88:	4630      	mov	r0, r6
 8007e8a:	e79e      	b.n	8007dca <_strtol_l.constprop.0+0x16>
 8007e8c:	b107      	cbz	r7, 8007e90 <_strtol_l.constprop.0+0xdc>
 8007e8e:	4276      	negs	r6, r6
 8007e90:	2a00      	cmp	r2, #0
 8007e92:	d0f9      	beq.n	8007e88 <_strtol_l.constprop.0+0xd4>
 8007e94:	f1be 0f00 	cmp.w	lr, #0
 8007e98:	d000      	beq.n	8007e9c <_strtol_l.constprop.0+0xe8>
 8007e9a:	1e69      	subs	r1, r5, #1
 8007e9c:	6011      	str	r1, [r2, #0]
 8007e9e:	e7f3      	b.n	8007e88 <_strtol_l.constprop.0+0xd4>
 8007ea0:	2430      	movs	r4, #48	; 0x30
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1b1      	bne.n	8007e0a <_strtol_l.constprop.0+0x56>
 8007ea6:	2308      	movs	r3, #8
 8007ea8:	e7af      	b.n	8007e0a <_strtol_l.constprop.0+0x56>
 8007eaa:	2c30      	cmp	r4, #48	; 0x30
 8007eac:	d0a5      	beq.n	8007dfa <_strtol_l.constprop.0+0x46>
 8007eae:	230a      	movs	r3, #10
 8007eb0:	e7ab      	b.n	8007e0a <_strtol_l.constprop.0+0x56>
 8007eb2:	bf00      	nop
 8007eb4:	080092e5 	.word	0x080092e5

08007eb8 <strtol>:
 8007eb8:	4613      	mov	r3, r2
 8007eba:	460a      	mov	r2, r1
 8007ebc:	4601      	mov	r1, r0
 8007ebe:	4802      	ldr	r0, [pc, #8]	; (8007ec8 <strtol+0x10>)
 8007ec0:	6800      	ldr	r0, [r0, #0]
 8007ec2:	f7ff bf77 	b.w	8007db4 <_strtol_l.constprop.0>
 8007ec6:	bf00      	nop
 8007ec8:	20000068 	.word	0x20000068

08007ecc <std>:
 8007ecc:	2300      	movs	r3, #0
 8007ece:	b510      	push	{r4, lr}
 8007ed0:	4604      	mov	r4, r0
 8007ed2:	e9c0 3300 	strd	r3, r3, [r0]
 8007ed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007eda:	6083      	str	r3, [r0, #8]
 8007edc:	8181      	strh	r1, [r0, #12]
 8007ede:	6643      	str	r3, [r0, #100]	; 0x64
 8007ee0:	81c2      	strh	r2, [r0, #14]
 8007ee2:	6183      	str	r3, [r0, #24]
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	2208      	movs	r2, #8
 8007ee8:	305c      	adds	r0, #92	; 0x5c
 8007eea:	f000 f926 	bl	800813a <memset>
 8007eee:	4b0d      	ldr	r3, [pc, #52]	; (8007f24 <std+0x58>)
 8007ef0:	6263      	str	r3, [r4, #36]	; 0x24
 8007ef2:	4b0d      	ldr	r3, [pc, #52]	; (8007f28 <std+0x5c>)
 8007ef4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ef6:	4b0d      	ldr	r3, [pc, #52]	; (8007f2c <std+0x60>)
 8007ef8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007efa:	4b0d      	ldr	r3, [pc, #52]	; (8007f30 <std+0x64>)
 8007efc:	6323      	str	r3, [r4, #48]	; 0x30
 8007efe:	4b0d      	ldr	r3, [pc, #52]	; (8007f34 <std+0x68>)
 8007f00:	6224      	str	r4, [r4, #32]
 8007f02:	429c      	cmp	r4, r3
 8007f04:	d006      	beq.n	8007f14 <std+0x48>
 8007f06:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007f0a:	4294      	cmp	r4, r2
 8007f0c:	d002      	beq.n	8007f14 <std+0x48>
 8007f0e:	33d0      	adds	r3, #208	; 0xd0
 8007f10:	429c      	cmp	r4, r3
 8007f12:	d105      	bne.n	8007f20 <std+0x54>
 8007f14:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f1c:	f000 b9dc 	b.w	80082d8 <__retarget_lock_init_recursive>
 8007f20:	bd10      	pop	{r4, pc}
 8007f22:	bf00      	nop
 8007f24:	080080b5 	.word	0x080080b5
 8007f28:	080080d7 	.word	0x080080d7
 8007f2c:	0800810f 	.word	0x0800810f
 8007f30:	08008133 	.word	0x08008133
 8007f34:	2000448c 	.word	0x2000448c

08007f38 <stdio_exit_handler>:
 8007f38:	4a02      	ldr	r2, [pc, #8]	; (8007f44 <stdio_exit_handler+0xc>)
 8007f3a:	4903      	ldr	r1, [pc, #12]	; (8007f48 <stdio_exit_handler+0x10>)
 8007f3c:	4803      	ldr	r0, [pc, #12]	; (8007f4c <stdio_exit_handler+0x14>)
 8007f3e:	f000 b869 	b.w	8008014 <_fwalk_sglue>
 8007f42:	bf00      	nop
 8007f44:	20000010 	.word	0x20000010
 8007f48:	08008e51 	.word	0x08008e51
 8007f4c:	2000001c 	.word	0x2000001c

08007f50 <cleanup_stdio>:
 8007f50:	6841      	ldr	r1, [r0, #4]
 8007f52:	4b0c      	ldr	r3, [pc, #48]	; (8007f84 <cleanup_stdio+0x34>)
 8007f54:	4299      	cmp	r1, r3
 8007f56:	b510      	push	{r4, lr}
 8007f58:	4604      	mov	r4, r0
 8007f5a:	d001      	beq.n	8007f60 <cleanup_stdio+0x10>
 8007f5c:	f000 ff78 	bl	8008e50 <_fflush_r>
 8007f60:	68a1      	ldr	r1, [r4, #8]
 8007f62:	4b09      	ldr	r3, [pc, #36]	; (8007f88 <cleanup_stdio+0x38>)
 8007f64:	4299      	cmp	r1, r3
 8007f66:	d002      	beq.n	8007f6e <cleanup_stdio+0x1e>
 8007f68:	4620      	mov	r0, r4
 8007f6a:	f000 ff71 	bl	8008e50 <_fflush_r>
 8007f6e:	68e1      	ldr	r1, [r4, #12]
 8007f70:	4b06      	ldr	r3, [pc, #24]	; (8007f8c <cleanup_stdio+0x3c>)
 8007f72:	4299      	cmp	r1, r3
 8007f74:	d004      	beq.n	8007f80 <cleanup_stdio+0x30>
 8007f76:	4620      	mov	r0, r4
 8007f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f7c:	f000 bf68 	b.w	8008e50 <_fflush_r>
 8007f80:	bd10      	pop	{r4, pc}
 8007f82:	bf00      	nop
 8007f84:	2000448c 	.word	0x2000448c
 8007f88:	200044f4 	.word	0x200044f4
 8007f8c:	2000455c 	.word	0x2000455c

08007f90 <global_stdio_init.part.0>:
 8007f90:	b510      	push	{r4, lr}
 8007f92:	4b0b      	ldr	r3, [pc, #44]	; (8007fc0 <global_stdio_init.part.0+0x30>)
 8007f94:	4c0b      	ldr	r4, [pc, #44]	; (8007fc4 <global_stdio_init.part.0+0x34>)
 8007f96:	4a0c      	ldr	r2, [pc, #48]	; (8007fc8 <global_stdio_init.part.0+0x38>)
 8007f98:	601a      	str	r2, [r3, #0]
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	2104      	movs	r1, #4
 8007fa0:	f7ff ff94 	bl	8007ecc <std>
 8007fa4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007fa8:	2201      	movs	r2, #1
 8007faa:	2109      	movs	r1, #9
 8007fac:	f7ff ff8e 	bl	8007ecc <std>
 8007fb0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007fb4:	2202      	movs	r2, #2
 8007fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fba:	2112      	movs	r1, #18
 8007fbc:	f7ff bf86 	b.w	8007ecc <std>
 8007fc0:	200045c4 	.word	0x200045c4
 8007fc4:	2000448c 	.word	0x2000448c
 8007fc8:	08007f39 	.word	0x08007f39

08007fcc <__sfp_lock_acquire>:
 8007fcc:	4801      	ldr	r0, [pc, #4]	; (8007fd4 <__sfp_lock_acquire+0x8>)
 8007fce:	f000 b984 	b.w	80082da <__retarget_lock_acquire_recursive>
 8007fd2:	bf00      	nop
 8007fd4:	200045cd 	.word	0x200045cd

08007fd8 <__sfp_lock_release>:
 8007fd8:	4801      	ldr	r0, [pc, #4]	; (8007fe0 <__sfp_lock_release+0x8>)
 8007fda:	f000 b97f 	b.w	80082dc <__retarget_lock_release_recursive>
 8007fde:	bf00      	nop
 8007fe0:	200045cd 	.word	0x200045cd

08007fe4 <__sinit>:
 8007fe4:	b510      	push	{r4, lr}
 8007fe6:	4604      	mov	r4, r0
 8007fe8:	f7ff fff0 	bl	8007fcc <__sfp_lock_acquire>
 8007fec:	6a23      	ldr	r3, [r4, #32]
 8007fee:	b11b      	cbz	r3, 8007ff8 <__sinit+0x14>
 8007ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ff4:	f7ff bff0 	b.w	8007fd8 <__sfp_lock_release>
 8007ff8:	4b04      	ldr	r3, [pc, #16]	; (800800c <__sinit+0x28>)
 8007ffa:	6223      	str	r3, [r4, #32]
 8007ffc:	4b04      	ldr	r3, [pc, #16]	; (8008010 <__sinit+0x2c>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d1f5      	bne.n	8007ff0 <__sinit+0xc>
 8008004:	f7ff ffc4 	bl	8007f90 <global_stdio_init.part.0>
 8008008:	e7f2      	b.n	8007ff0 <__sinit+0xc>
 800800a:	bf00      	nop
 800800c:	08007f51 	.word	0x08007f51
 8008010:	200045c4 	.word	0x200045c4

08008014 <_fwalk_sglue>:
 8008014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008018:	4607      	mov	r7, r0
 800801a:	4688      	mov	r8, r1
 800801c:	4614      	mov	r4, r2
 800801e:	2600      	movs	r6, #0
 8008020:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008024:	f1b9 0901 	subs.w	r9, r9, #1
 8008028:	d505      	bpl.n	8008036 <_fwalk_sglue+0x22>
 800802a:	6824      	ldr	r4, [r4, #0]
 800802c:	2c00      	cmp	r4, #0
 800802e:	d1f7      	bne.n	8008020 <_fwalk_sglue+0xc>
 8008030:	4630      	mov	r0, r6
 8008032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008036:	89ab      	ldrh	r3, [r5, #12]
 8008038:	2b01      	cmp	r3, #1
 800803a:	d907      	bls.n	800804c <_fwalk_sglue+0x38>
 800803c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008040:	3301      	adds	r3, #1
 8008042:	d003      	beq.n	800804c <_fwalk_sglue+0x38>
 8008044:	4629      	mov	r1, r5
 8008046:	4638      	mov	r0, r7
 8008048:	47c0      	blx	r8
 800804a:	4306      	orrs	r6, r0
 800804c:	3568      	adds	r5, #104	; 0x68
 800804e:	e7e9      	b.n	8008024 <_fwalk_sglue+0x10>

08008050 <iprintf>:
 8008050:	b40f      	push	{r0, r1, r2, r3}
 8008052:	b507      	push	{r0, r1, r2, lr}
 8008054:	4906      	ldr	r1, [pc, #24]	; (8008070 <iprintf+0x20>)
 8008056:	ab04      	add	r3, sp, #16
 8008058:	6808      	ldr	r0, [r1, #0]
 800805a:	f853 2b04 	ldr.w	r2, [r3], #4
 800805e:	6881      	ldr	r1, [r0, #8]
 8008060:	9301      	str	r3, [sp, #4]
 8008062:	f000 fbc5 	bl	80087f0 <_vfiprintf_r>
 8008066:	b003      	add	sp, #12
 8008068:	f85d eb04 	ldr.w	lr, [sp], #4
 800806c:	b004      	add	sp, #16
 800806e:	4770      	bx	lr
 8008070:	20000068 	.word	0x20000068

08008074 <siprintf>:
 8008074:	b40e      	push	{r1, r2, r3}
 8008076:	b500      	push	{lr}
 8008078:	b09c      	sub	sp, #112	; 0x70
 800807a:	ab1d      	add	r3, sp, #116	; 0x74
 800807c:	9002      	str	r0, [sp, #8]
 800807e:	9006      	str	r0, [sp, #24]
 8008080:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008084:	4809      	ldr	r0, [pc, #36]	; (80080ac <siprintf+0x38>)
 8008086:	9107      	str	r1, [sp, #28]
 8008088:	9104      	str	r1, [sp, #16]
 800808a:	4909      	ldr	r1, [pc, #36]	; (80080b0 <siprintf+0x3c>)
 800808c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008090:	9105      	str	r1, [sp, #20]
 8008092:	6800      	ldr	r0, [r0, #0]
 8008094:	9301      	str	r3, [sp, #4]
 8008096:	a902      	add	r1, sp, #8
 8008098:	f000 fa82 	bl	80085a0 <_svfiprintf_r>
 800809c:	9b02      	ldr	r3, [sp, #8]
 800809e:	2200      	movs	r2, #0
 80080a0:	701a      	strb	r2, [r3, #0]
 80080a2:	b01c      	add	sp, #112	; 0x70
 80080a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80080a8:	b003      	add	sp, #12
 80080aa:	4770      	bx	lr
 80080ac:	20000068 	.word	0x20000068
 80080b0:	ffff0208 	.word	0xffff0208

080080b4 <__sread>:
 80080b4:	b510      	push	{r4, lr}
 80080b6:	460c      	mov	r4, r1
 80080b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080bc:	f000 f8be 	bl	800823c <_read_r>
 80080c0:	2800      	cmp	r0, #0
 80080c2:	bfab      	itete	ge
 80080c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80080c6:	89a3      	ldrhlt	r3, [r4, #12]
 80080c8:	181b      	addge	r3, r3, r0
 80080ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80080ce:	bfac      	ite	ge
 80080d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80080d2:	81a3      	strhlt	r3, [r4, #12]
 80080d4:	bd10      	pop	{r4, pc}

080080d6 <__swrite>:
 80080d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080da:	461f      	mov	r7, r3
 80080dc:	898b      	ldrh	r3, [r1, #12]
 80080de:	05db      	lsls	r3, r3, #23
 80080e0:	4605      	mov	r5, r0
 80080e2:	460c      	mov	r4, r1
 80080e4:	4616      	mov	r6, r2
 80080e6:	d505      	bpl.n	80080f4 <__swrite+0x1e>
 80080e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080ec:	2302      	movs	r3, #2
 80080ee:	2200      	movs	r2, #0
 80080f0:	f000 f892 	bl	8008218 <_lseek_r>
 80080f4:	89a3      	ldrh	r3, [r4, #12]
 80080f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080fe:	81a3      	strh	r3, [r4, #12]
 8008100:	4632      	mov	r2, r6
 8008102:	463b      	mov	r3, r7
 8008104:	4628      	mov	r0, r5
 8008106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800810a:	f000 b8a9 	b.w	8008260 <_write_r>

0800810e <__sseek>:
 800810e:	b510      	push	{r4, lr}
 8008110:	460c      	mov	r4, r1
 8008112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008116:	f000 f87f 	bl	8008218 <_lseek_r>
 800811a:	1c43      	adds	r3, r0, #1
 800811c:	89a3      	ldrh	r3, [r4, #12]
 800811e:	bf15      	itete	ne
 8008120:	6560      	strne	r0, [r4, #84]	; 0x54
 8008122:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008126:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800812a:	81a3      	strheq	r3, [r4, #12]
 800812c:	bf18      	it	ne
 800812e:	81a3      	strhne	r3, [r4, #12]
 8008130:	bd10      	pop	{r4, pc}

08008132 <__sclose>:
 8008132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008136:	f000 b809 	b.w	800814c <_close_r>

0800813a <memset>:
 800813a:	4402      	add	r2, r0
 800813c:	4603      	mov	r3, r0
 800813e:	4293      	cmp	r3, r2
 8008140:	d100      	bne.n	8008144 <memset+0xa>
 8008142:	4770      	bx	lr
 8008144:	f803 1b01 	strb.w	r1, [r3], #1
 8008148:	e7f9      	b.n	800813e <memset+0x4>
	...

0800814c <_close_r>:
 800814c:	b538      	push	{r3, r4, r5, lr}
 800814e:	4d06      	ldr	r5, [pc, #24]	; (8008168 <_close_r+0x1c>)
 8008150:	2300      	movs	r3, #0
 8008152:	4604      	mov	r4, r0
 8008154:	4608      	mov	r0, r1
 8008156:	602b      	str	r3, [r5, #0]
 8008158:	f7f9 fd2d 	bl	8001bb6 <_close>
 800815c:	1c43      	adds	r3, r0, #1
 800815e:	d102      	bne.n	8008166 <_close_r+0x1a>
 8008160:	682b      	ldr	r3, [r5, #0]
 8008162:	b103      	cbz	r3, 8008166 <_close_r+0x1a>
 8008164:	6023      	str	r3, [r4, #0]
 8008166:	bd38      	pop	{r3, r4, r5, pc}
 8008168:	200045c8 	.word	0x200045c8

0800816c <_reclaim_reent>:
 800816c:	4b29      	ldr	r3, [pc, #164]	; (8008214 <_reclaim_reent+0xa8>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4283      	cmp	r3, r0
 8008172:	b570      	push	{r4, r5, r6, lr}
 8008174:	4604      	mov	r4, r0
 8008176:	d04b      	beq.n	8008210 <_reclaim_reent+0xa4>
 8008178:	69c3      	ldr	r3, [r0, #28]
 800817a:	b143      	cbz	r3, 800818e <_reclaim_reent+0x22>
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d144      	bne.n	800820c <_reclaim_reent+0xa0>
 8008182:	69e3      	ldr	r3, [r4, #28]
 8008184:	6819      	ldr	r1, [r3, #0]
 8008186:	b111      	cbz	r1, 800818e <_reclaim_reent+0x22>
 8008188:	4620      	mov	r0, r4
 800818a:	f000 f8b7 	bl	80082fc <_free_r>
 800818e:	6961      	ldr	r1, [r4, #20]
 8008190:	b111      	cbz	r1, 8008198 <_reclaim_reent+0x2c>
 8008192:	4620      	mov	r0, r4
 8008194:	f000 f8b2 	bl	80082fc <_free_r>
 8008198:	69e1      	ldr	r1, [r4, #28]
 800819a:	b111      	cbz	r1, 80081a2 <_reclaim_reent+0x36>
 800819c:	4620      	mov	r0, r4
 800819e:	f000 f8ad 	bl	80082fc <_free_r>
 80081a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80081a4:	b111      	cbz	r1, 80081ac <_reclaim_reent+0x40>
 80081a6:	4620      	mov	r0, r4
 80081a8:	f000 f8a8 	bl	80082fc <_free_r>
 80081ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081ae:	b111      	cbz	r1, 80081b6 <_reclaim_reent+0x4a>
 80081b0:	4620      	mov	r0, r4
 80081b2:	f000 f8a3 	bl	80082fc <_free_r>
 80081b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80081b8:	b111      	cbz	r1, 80081c0 <_reclaim_reent+0x54>
 80081ba:	4620      	mov	r0, r4
 80081bc:	f000 f89e 	bl	80082fc <_free_r>
 80081c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80081c2:	b111      	cbz	r1, 80081ca <_reclaim_reent+0x5e>
 80081c4:	4620      	mov	r0, r4
 80081c6:	f000 f899 	bl	80082fc <_free_r>
 80081ca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80081cc:	b111      	cbz	r1, 80081d4 <_reclaim_reent+0x68>
 80081ce:	4620      	mov	r0, r4
 80081d0:	f000 f894 	bl	80082fc <_free_r>
 80081d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80081d6:	b111      	cbz	r1, 80081de <_reclaim_reent+0x72>
 80081d8:	4620      	mov	r0, r4
 80081da:	f000 f88f 	bl	80082fc <_free_r>
 80081de:	6a23      	ldr	r3, [r4, #32]
 80081e0:	b1b3      	cbz	r3, 8008210 <_reclaim_reent+0xa4>
 80081e2:	4620      	mov	r0, r4
 80081e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80081e8:	4718      	bx	r3
 80081ea:	5949      	ldr	r1, [r1, r5]
 80081ec:	b941      	cbnz	r1, 8008200 <_reclaim_reent+0x94>
 80081ee:	3504      	adds	r5, #4
 80081f0:	69e3      	ldr	r3, [r4, #28]
 80081f2:	2d80      	cmp	r5, #128	; 0x80
 80081f4:	68d9      	ldr	r1, [r3, #12]
 80081f6:	d1f8      	bne.n	80081ea <_reclaim_reent+0x7e>
 80081f8:	4620      	mov	r0, r4
 80081fa:	f000 f87f 	bl	80082fc <_free_r>
 80081fe:	e7c0      	b.n	8008182 <_reclaim_reent+0x16>
 8008200:	680e      	ldr	r6, [r1, #0]
 8008202:	4620      	mov	r0, r4
 8008204:	f000 f87a 	bl	80082fc <_free_r>
 8008208:	4631      	mov	r1, r6
 800820a:	e7ef      	b.n	80081ec <_reclaim_reent+0x80>
 800820c:	2500      	movs	r5, #0
 800820e:	e7ef      	b.n	80081f0 <_reclaim_reent+0x84>
 8008210:	bd70      	pop	{r4, r5, r6, pc}
 8008212:	bf00      	nop
 8008214:	20000068 	.word	0x20000068

08008218 <_lseek_r>:
 8008218:	b538      	push	{r3, r4, r5, lr}
 800821a:	4d07      	ldr	r5, [pc, #28]	; (8008238 <_lseek_r+0x20>)
 800821c:	4604      	mov	r4, r0
 800821e:	4608      	mov	r0, r1
 8008220:	4611      	mov	r1, r2
 8008222:	2200      	movs	r2, #0
 8008224:	602a      	str	r2, [r5, #0]
 8008226:	461a      	mov	r2, r3
 8008228:	f7f9 fcec 	bl	8001c04 <_lseek>
 800822c:	1c43      	adds	r3, r0, #1
 800822e:	d102      	bne.n	8008236 <_lseek_r+0x1e>
 8008230:	682b      	ldr	r3, [r5, #0]
 8008232:	b103      	cbz	r3, 8008236 <_lseek_r+0x1e>
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	bd38      	pop	{r3, r4, r5, pc}
 8008238:	200045c8 	.word	0x200045c8

0800823c <_read_r>:
 800823c:	b538      	push	{r3, r4, r5, lr}
 800823e:	4d07      	ldr	r5, [pc, #28]	; (800825c <_read_r+0x20>)
 8008240:	4604      	mov	r4, r0
 8008242:	4608      	mov	r0, r1
 8008244:	4611      	mov	r1, r2
 8008246:	2200      	movs	r2, #0
 8008248:	602a      	str	r2, [r5, #0]
 800824a:	461a      	mov	r2, r3
 800824c:	f7f9 fc96 	bl	8001b7c <_read>
 8008250:	1c43      	adds	r3, r0, #1
 8008252:	d102      	bne.n	800825a <_read_r+0x1e>
 8008254:	682b      	ldr	r3, [r5, #0]
 8008256:	b103      	cbz	r3, 800825a <_read_r+0x1e>
 8008258:	6023      	str	r3, [r4, #0]
 800825a:	bd38      	pop	{r3, r4, r5, pc}
 800825c:	200045c8 	.word	0x200045c8

08008260 <_write_r>:
 8008260:	b538      	push	{r3, r4, r5, lr}
 8008262:	4d07      	ldr	r5, [pc, #28]	; (8008280 <_write_r+0x20>)
 8008264:	4604      	mov	r4, r0
 8008266:	4608      	mov	r0, r1
 8008268:	4611      	mov	r1, r2
 800826a:	2200      	movs	r2, #0
 800826c:	602a      	str	r2, [r5, #0]
 800826e:	461a      	mov	r2, r3
 8008270:	f7f8 fdf4 	bl	8000e5c <_write>
 8008274:	1c43      	adds	r3, r0, #1
 8008276:	d102      	bne.n	800827e <_write_r+0x1e>
 8008278:	682b      	ldr	r3, [r5, #0]
 800827a:	b103      	cbz	r3, 800827e <_write_r+0x1e>
 800827c:	6023      	str	r3, [r4, #0]
 800827e:	bd38      	pop	{r3, r4, r5, pc}
 8008280:	200045c8 	.word	0x200045c8

08008284 <__errno>:
 8008284:	4b01      	ldr	r3, [pc, #4]	; (800828c <__errno+0x8>)
 8008286:	6818      	ldr	r0, [r3, #0]
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	20000068 	.word	0x20000068

08008290 <__libc_init_array>:
 8008290:	b570      	push	{r4, r5, r6, lr}
 8008292:	4d0d      	ldr	r5, [pc, #52]	; (80082c8 <__libc_init_array+0x38>)
 8008294:	4c0d      	ldr	r4, [pc, #52]	; (80082cc <__libc_init_array+0x3c>)
 8008296:	1b64      	subs	r4, r4, r5
 8008298:	10a4      	asrs	r4, r4, #2
 800829a:	2600      	movs	r6, #0
 800829c:	42a6      	cmp	r6, r4
 800829e:	d109      	bne.n	80082b4 <__libc_init_array+0x24>
 80082a0:	4d0b      	ldr	r5, [pc, #44]	; (80082d0 <__libc_init_array+0x40>)
 80082a2:	4c0c      	ldr	r4, [pc, #48]	; (80082d4 <__libc_init_array+0x44>)
 80082a4:	f000 ff78 	bl	8009198 <_init>
 80082a8:	1b64      	subs	r4, r4, r5
 80082aa:	10a4      	asrs	r4, r4, #2
 80082ac:	2600      	movs	r6, #0
 80082ae:	42a6      	cmp	r6, r4
 80082b0:	d105      	bne.n	80082be <__libc_init_array+0x2e>
 80082b2:	bd70      	pop	{r4, r5, r6, pc}
 80082b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80082b8:	4798      	blx	r3
 80082ba:	3601      	adds	r6, #1
 80082bc:	e7ee      	b.n	800829c <__libc_init_array+0xc>
 80082be:	f855 3b04 	ldr.w	r3, [r5], #4
 80082c2:	4798      	blx	r3
 80082c4:	3601      	adds	r6, #1
 80082c6:	e7f2      	b.n	80082ae <__libc_init_array+0x1e>
 80082c8:	08009420 	.word	0x08009420
 80082cc:	08009420 	.word	0x08009420
 80082d0:	08009420 	.word	0x08009420
 80082d4:	08009424 	.word	0x08009424

080082d8 <__retarget_lock_init_recursive>:
 80082d8:	4770      	bx	lr

080082da <__retarget_lock_acquire_recursive>:
 80082da:	4770      	bx	lr

080082dc <__retarget_lock_release_recursive>:
 80082dc:	4770      	bx	lr

080082de <memcpy>:
 80082de:	440a      	add	r2, r1
 80082e0:	4291      	cmp	r1, r2
 80082e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80082e6:	d100      	bne.n	80082ea <memcpy+0xc>
 80082e8:	4770      	bx	lr
 80082ea:	b510      	push	{r4, lr}
 80082ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082f4:	4291      	cmp	r1, r2
 80082f6:	d1f9      	bne.n	80082ec <memcpy+0xe>
 80082f8:	bd10      	pop	{r4, pc}
	...

080082fc <_free_r>:
 80082fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082fe:	2900      	cmp	r1, #0
 8008300:	d044      	beq.n	800838c <_free_r+0x90>
 8008302:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008306:	9001      	str	r0, [sp, #4]
 8008308:	2b00      	cmp	r3, #0
 800830a:	f1a1 0404 	sub.w	r4, r1, #4
 800830e:	bfb8      	it	lt
 8008310:	18e4      	addlt	r4, r4, r3
 8008312:	f000 f8df 	bl	80084d4 <__malloc_lock>
 8008316:	4a1e      	ldr	r2, [pc, #120]	; (8008390 <_free_r+0x94>)
 8008318:	9801      	ldr	r0, [sp, #4]
 800831a:	6813      	ldr	r3, [r2, #0]
 800831c:	b933      	cbnz	r3, 800832c <_free_r+0x30>
 800831e:	6063      	str	r3, [r4, #4]
 8008320:	6014      	str	r4, [r2, #0]
 8008322:	b003      	add	sp, #12
 8008324:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008328:	f000 b8da 	b.w	80084e0 <__malloc_unlock>
 800832c:	42a3      	cmp	r3, r4
 800832e:	d908      	bls.n	8008342 <_free_r+0x46>
 8008330:	6825      	ldr	r5, [r4, #0]
 8008332:	1961      	adds	r1, r4, r5
 8008334:	428b      	cmp	r3, r1
 8008336:	bf01      	itttt	eq
 8008338:	6819      	ldreq	r1, [r3, #0]
 800833a:	685b      	ldreq	r3, [r3, #4]
 800833c:	1949      	addeq	r1, r1, r5
 800833e:	6021      	streq	r1, [r4, #0]
 8008340:	e7ed      	b.n	800831e <_free_r+0x22>
 8008342:	461a      	mov	r2, r3
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	b10b      	cbz	r3, 800834c <_free_r+0x50>
 8008348:	42a3      	cmp	r3, r4
 800834a:	d9fa      	bls.n	8008342 <_free_r+0x46>
 800834c:	6811      	ldr	r1, [r2, #0]
 800834e:	1855      	adds	r5, r2, r1
 8008350:	42a5      	cmp	r5, r4
 8008352:	d10b      	bne.n	800836c <_free_r+0x70>
 8008354:	6824      	ldr	r4, [r4, #0]
 8008356:	4421      	add	r1, r4
 8008358:	1854      	adds	r4, r2, r1
 800835a:	42a3      	cmp	r3, r4
 800835c:	6011      	str	r1, [r2, #0]
 800835e:	d1e0      	bne.n	8008322 <_free_r+0x26>
 8008360:	681c      	ldr	r4, [r3, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	6053      	str	r3, [r2, #4]
 8008366:	440c      	add	r4, r1
 8008368:	6014      	str	r4, [r2, #0]
 800836a:	e7da      	b.n	8008322 <_free_r+0x26>
 800836c:	d902      	bls.n	8008374 <_free_r+0x78>
 800836e:	230c      	movs	r3, #12
 8008370:	6003      	str	r3, [r0, #0]
 8008372:	e7d6      	b.n	8008322 <_free_r+0x26>
 8008374:	6825      	ldr	r5, [r4, #0]
 8008376:	1961      	adds	r1, r4, r5
 8008378:	428b      	cmp	r3, r1
 800837a:	bf04      	itt	eq
 800837c:	6819      	ldreq	r1, [r3, #0]
 800837e:	685b      	ldreq	r3, [r3, #4]
 8008380:	6063      	str	r3, [r4, #4]
 8008382:	bf04      	itt	eq
 8008384:	1949      	addeq	r1, r1, r5
 8008386:	6021      	streq	r1, [r4, #0]
 8008388:	6054      	str	r4, [r2, #4]
 800838a:	e7ca      	b.n	8008322 <_free_r+0x26>
 800838c:	b003      	add	sp, #12
 800838e:	bd30      	pop	{r4, r5, pc}
 8008390:	200045d0 	.word	0x200045d0

08008394 <sbrk_aligned>:
 8008394:	b570      	push	{r4, r5, r6, lr}
 8008396:	4e0e      	ldr	r6, [pc, #56]	; (80083d0 <sbrk_aligned+0x3c>)
 8008398:	460c      	mov	r4, r1
 800839a:	6831      	ldr	r1, [r6, #0]
 800839c:	4605      	mov	r5, r0
 800839e:	b911      	cbnz	r1, 80083a6 <sbrk_aligned+0x12>
 80083a0:	f000 fe2e 	bl	8009000 <_sbrk_r>
 80083a4:	6030      	str	r0, [r6, #0]
 80083a6:	4621      	mov	r1, r4
 80083a8:	4628      	mov	r0, r5
 80083aa:	f000 fe29 	bl	8009000 <_sbrk_r>
 80083ae:	1c43      	adds	r3, r0, #1
 80083b0:	d00a      	beq.n	80083c8 <sbrk_aligned+0x34>
 80083b2:	1cc4      	adds	r4, r0, #3
 80083b4:	f024 0403 	bic.w	r4, r4, #3
 80083b8:	42a0      	cmp	r0, r4
 80083ba:	d007      	beq.n	80083cc <sbrk_aligned+0x38>
 80083bc:	1a21      	subs	r1, r4, r0
 80083be:	4628      	mov	r0, r5
 80083c0:	f000 fe1e 	bl	8009000 <_sbrk_r>
 80083c4:	3001      	adds	r0, #1
 80083c6:	d101      	bne.n	80083cc <sbrk_aligned+0x38>
 80083c8:	f04f 34ff 	mov.w	r4, #4294967295
 80083cc:	4620      	mov	r0, r4
 80083ce:	bd70      	pop	{r4, r5, r6, pc}
 80083d0:	200045d4 	.word	0x200045d4

080083d4 <_malloc_r>:
 80083d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083d8:	1ccd      	adds	r5, r1, #3
 80083da:	f025 0503 	bic.w	r5, r5, #3
 80083de:	3508      	adds	r5, #8
 80083e0:	2d0c      	cmp	r5, #12
 80083e2:	bf38      	it	cc
 80083e4:	250c      	movcc	r5, #12
 80083e6:	2d00      	cmp	r5, #0
 80083e8:	4607      	mov	r7, r0
 80083ea:	db01      	blt.n	80083f0 <_malloc_r+0x1c>
 80083ec:	42a9      	cmp	r1, r5
 80083ee:	d905      	bls.n	80083fc <_malloc_r+0x28>
 80083f0:	230c      	movs	r3, #12
 80083f2:	603b      	str	r3, [r7, #0]
 80083f4:	2600      	movs	r6, #0
 80083f6:	4630      	mov	r0, r6
 80083f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80084d0 <_malloc_r+0xfc>
 8008400:	f000 f868 	bl	80084d4 <__malloc_lock>
 8008404:	f8d8 3000 	ldr.w	r3, [r8]
 8008408:	461c      	mov	r4, r3
 800840a:	bb5c      	cbnz	r4, 8008464 <_malloc_r+0x90>
 800840c:	4629      	mov	r1, r5
 800840e:	4638      	mov	r0, r7
 8008410:	f7ff ffc0 	bl	8008394 <sbrk_aligned>
 8008414:	1c43      	adds	r3, r0, #1
 8008416:	4604      	mov	r4, r0
 8008418:	d155      	bne.n	80084c6 <_malloc_r+0xf2>
 800841a:	f8d8 4000 	ldr.w	r4, [r8]
 800841e:	4626      	mov	r6, r4
 8008420:	2e00      	cmp	r6, #0
 8008422:	d145      	bne.n	80084b0 <_malloc_r+0xdc>
 8008424:	2c00      	cmp	r4, #0
 8008426:	d048      	beq.n	80084ba <_malloc_r+0xe6>
 8008428:	6823      	ldr	r3, [r4, #0]
 800842a:	4631      	mov	r1, r6
 800842c:	4638      	mov	r0, r7
 800842e:	eb04 0903 	add.w	r9, r4, r3
 8008432:	f000 fde5 	bl	8009000 <_sbrk_r>
 8008436:	4581      	cmp	r9, r0
 8008438:	d13f      	bne.n	80084ba <_malloc_r+0xe6>
 800843a:	6821      	ldr	r1, [r4, #0]
 800843c:	1a6d      	subs	r5, r5, r1
 800843e:	4629      	mov	r1, r5
 8008440:	4638      	mov	r0, r7
 8008442:	f7ff ffa7 	bl	8008394 <sbrk_aligned>
 8008446:	3001      	adds	r0, #1
 8008448:	d037      	beq.n	80084ba <_malloc_r+0xe6>
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	442b      	add	r3, r5
 800844e:	6023      	str	r3, [r4, #0]
 8008450:	f8d8 3000 	ldr.w	r3, [r8]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d038      	beq.n	80084ca <_malloc_r+0xf6>
 8008458:	685a      	ldr	r2, [r3, #4]
 800845a:	42a2      	cmp	r2, r4
 800845c:	d12b      	bne.n	80084b6 <_malloc_r+0xe2>
 800845e:	2200      	movs	r2, #0
 8008460:	605a      	str	r2, [r3, #4]
 8008462:	e00f      	b.n	8008484 <_malloc_r+0xb0>
 8008464:	6822      	ldr	r2, [r4, #0]
 8008466:	1b52      	subs	r2, r2, r5
 8008468:	d41f      	bmi.n	80084aa <_malloc_r+0xd6>
 800846a:	2a0b      	cmp	r2, #11
 800846c:	d917      	bls.n	800849e <_malloc_r+0xca>
 800846e:	1961      	adds	r1, r4, r5
 8008470:	42a3      	cmp	r3, r4
 8008472:	6025      	str	r5, [r4, #0]
 8008474:	bf18      	it	ne
 8008476:	6059      	strne	r1, [r3, #4]
 8008478:	6863      	ldr	r3, [r4, #4]
 800847a:	bf08      	it	eq
 800847c:	f8c8 1000 	streq.w	r1, [r8]
 8008480:	5162      	str	r2, [r4, r5]
 8008482:	604b      	str	r3, [r1, #4]
 8008484:	4638      	mov	r0, r7
 8008486:	f104 060b 	add.w	r6, r4, #11
 800848a:	f000 f829 	bl	80084e0 <__malloc_unlock>
 800848e:	f026 0607 	bic.w	r6, r6, #7
 8008492:	1d23      	adds	r3, r4, #4
 8008494:	1af2      	subs	r2, r6, r3
 8008496:	d0ae      	beq.n	80083f6 <_malloc_r+0x22>
 8008498:	1b9b      	subs	r3, r3, r6
 800849a:	50a3      	str	r3, [r4, r2]
 800849c:	e7ab      	b.n	80083f6 <_malloc_r+0x22>
 800849e:	42a3      	cmp	r3, r4
 80084a0:	6862      	ldr	r2, [r4, #4]
 80084a2:	d1dd      	bne.n	8008460 <_malloc_r+0x8c>
 80084a4:	f8c8 2000 	str.w	r2, [r8]
 80084a8:	e7ec      	b.n	8008484 <_malloc_r+0xb0>
 80084aa:	4623      	mov	r3, r4
 80084ac:	6864      	ldr	r4, [r4, #4]
 80084ae:	e7ac      	b.n	800840a <_malloc_r+0x36>
 80084b0:	4634      	mov	r4, r6
 80084b2:	6876      	ldr	r6, [r6, #4]
 80084b4:	e7b4      	b.n	8008420 <_malloc_r+0x4c>
 80084b6:	4613      	mov	r3, r2
 80084b8:	e7cc      	b.n	8008454 <_malloc_r+0x80>
 80084ba:	230c      	movs	r3, #12
 80084bc:	603b      	str	r3, [r7, #0]
 80084be:	4638      	mov	r0, r7
 80084c0:	f000 f80e 	bl	80084e0 <__malloc_unlock>
 80084c4:	e797      	b.n	80083f6 <_malloc_r+0x22>
 80084c6:	6025      	str	r5, [r4, #0]
 80084c8:	e7dc      	b.n	8008484 <_malloc_r+0xb0>
 80084ca:	605b      	str	r3, [r3, #4]
 80084cc:	deff      	udf	#255	; 0xff
 80084ce:	bf00      	nop
 80084d0:	200045d0 	.word	0x200045d0

080084d4 <__malloc_lock>:
 80084d4:	4801      	ldr	r0, [pc, #4]	; (80084dc <__malloc_lock+0x8>)
 80084d6:	f7ff bf00 	b.w	80082da <__retarget_lock_acquire_recursive>
 80084da:	bf00      	nop
 80084dc:	200045cc 	.word	0x200045cc

080084e0 <__malloc_unlock>:
 80084e0:	4801      	ldr	r0, [pc, #4]	; (80084e8 <__malloc_unlock+0x8>)
 80084e2:	f7ff befb 	b.w	80082dc <__retarget_lock_release_recursive>
 80084e6:	bf00      	nop
 80084e8:	200045cc 	.word	0x200045cc

080084ec <__ssputs_r>:
 80084ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084f0:	688e      	ldr	r6, [r1, #8]
 80084f2:	461f      	mov	r7, r3
 80084f4:	42be      	cmp	r6, r7
 80084f6:	680b      	ldr	r3, [r1, #0]
 80084f8:	4682      	mov	sl, r0
 80084fa:	460c      	mov	r4, r1
 80084fc:	4690      	mov	r8, r2
 80084fe:	d82c      	bhi.n	800855a <__ssputs_r+0x6e>
 8008500:	898a      	ldrh	r2, [r1, #12]
 8008502:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008506:	d026      	beq.n	8008556 <__ssputs_r+0x6a>
 8008508:	6965      	ldr	r5, [r4, #20]
 800850a:	6909      	ldr	r1, [r1, #16]
 800850c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008510:	eba3 0901 	sub.w	r9, r3, r1
 8008514:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008518:	1c7b      	adds	r3, r7, #1
 800851a:	444b      	add	r3, r9
 800851c:	106d      	asrs	r5, r5, #1
 800851e:	429d      	cmp	r5, r3
 8008520:	bf38      	it	cc
 8008522:	461d      	movcc	r5, r3
 8008524:	0553      	lsls	r3, r2, #21
 8008526:	d527      	bpl.n	8008578 <__ssputs_r+0x8c>
 8008528:	4629      	mov	r1, r5
 800852a:	f7ff ff53 	bl	80083d4 <_malloc_r>
 800852e:	4606      	mov	r6, r0
 8008530:	b360      	cbz	r0, 800858c <__ssputs_r+0xa0>
 8008532:	6921      	ldr	r1, [r4, #16]
 8008534:	464a      	mov	r2, r9
 8008536:	f7ff fed2 	bl	80082de <memcpy>
 800853a:	89a3      	ldrh	r3, [r4, #12]
 800853c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008544:	81a3      	strh	r3, [r4, #12]
 8008546:	6126      	str	r6, [r4, #16]
 8008548:	6165      	str	r5, [r4, #20]
 800854a:	444e      	add	r6, r9
 800854c:	eba5 0509 	sub.w	r5, r5, r9
 8008550:	6026      	str	r6, [r4, #0]
 8008552:	60a5      	str	r5, [r4, #8]
 8008554:	463e      	mov	r6, r7
 8008556:	42be      	cmp	r6, r7
 8008558:	d900      	bls.n	800855c <__ssputs_r+0x70>
 800855a:	463e      	mov	r6, r7
 800855c:	6820      	ldr	r0, [r4, #0]
 800855e:	4632      	mov	r2, r6
 8008560:	4641      	mov	r1, r8
 8008562:	f000 fd33 	bl	8008fcc <memmove>
 8008566:	68a3      	ldr	r3, [r4, #8]
 8008568:	1b9b      	subs	r3, r3, r6
 800856a:	60a3      	str	r3, [r4, #8]
 800856c:	6823      	ldr	r3, [r4, #0]
 800856e:	4433      	add	r3, r6
 8008570:	6023      	str	r3, [r4, #0]
 8008572:	2000      	movs	r0, #0
 8008574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008578:	462a      	mov	r2, r5
 800857a:	f000 fd51 	bl	8009020 <_realloc_r>
 800857e:	4606      	mov	r6, r0
 8008580:	2800      	cmp	r0, #0
 8008582:	d1e0      	bne.n	8008546 <__ssputs_r+0x5a>
 8008584:	6921      	ldr	r1, [r4, #16]
 8008586:	4650      	mov	r0, sl
 8008588:	f7ff feb8 	bl	80082fc <_free_r>
 800858c:	230c      	movs	r3, #12
 800858e:	f8ca 3000 	str.w	r3, [sl]
 8008592:	89a3      	ldrh	r3, [r4, #12]
 8008594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008598:	81a3      	strh	r3, [r4, #12]
 800859a:	f04f 30ff 	mov.w	r0, #4294967295
 800859e:	e7e9      	b.n	8008574 <__ssputs_r+0x88>

080085a0 <_svfiprintf_r>:
 80085a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a4:	4698      	mov	r8, r3
 80085a6:	898b      	ldrh	r3, [r1, #12]
 80085a8:	061b      	lsls	r3, r3, #24
 80085aa:	b09d      	sub	sp, #116	; 0x74
 80085ac:	4607      	mov	r7, r0
 80085ae:	460d      	mov	r5, r1
 80085b0:	4614      	mov	r4, r2
 80085b2:	d50e      	bpl.n	80085d2 <_svfiprintf_r+0x32>
 80085b4:	690b      	ldr	r3, [r1, #16]
 80085b6:	b963      	cbnz	r3, 80085d2 <_svfiprintf_r+0x32>
 80085b8:	2140      	movs	r1, #64	; 0x40
 80085ba:	f7ff ff0b 	bl	80083d4 <_malloc_r>
 80085be:	6028      	str	r0, [r5, #0]
 80085c0:	6128      	str	r0, [r5, #16]
 80085c2:	b920      	cbnz	r0, 80085ce <_svfiprintf_r+0x2e>
 80085c4:	230c      	movs	r3, #12
 80085c6:	603b      	str	r3, [r7, #0]
 80085c8:	f04f 30ff 	mov.w	r0, #4294967295
 80085cc:	e0d0      	b.n	8008770 <_svfiprintf_r+0x1d0>
 80085ce:	2340      	movs	r3, #64	; 0x40
 80085d0:	616b      	str	r3, [r5, #20]
 80085d2:	2300      	movs	r3, #0
 80085d4:	9309      	str	r3, [sp, #36]	; 0x24
 80085d6:	2320      	movs	r3, #32
 80085d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80085e0:	2330      	movs	r3, #48	; 0x30
 80085e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008788 <_svfiprintf_r+0x1e8>
 80085e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085ea:	f04f 0901 	mov.w	r9, #1
 80085ee:	4623      	mov	r3, r4
 80085f0:	469a      	mov	sl, r3
 80085f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085f6:	b10a      	cbz	r2, 80085fc <_svfiprintf_r+0x5c>
 80085f8:	2a25      	cmp	r2, #37	; 0x25
 80085fa:	d1f9      	bne.n	80085f0 <_svfiprintf_r+0x50>
 80085fc:	ebba 0b04 	subs.w	fp, sl, r4
 8008600:	d00b      	beq.n	800861a <_svfiprintf_r+0x7a>
 8008602:	465b      	mov	r3, fp
 8008604:	4622      	mov	r2, r4
 8008606:	4629      	mov	r1, r5
 8008608:	4638      	mov	r0, r7
 800860a:	f7ff ff6f 	bl	80084ec <__ssputs_r>
 800860e:	3001      	adds	r0, #1
 8008610:	f000 80a9 	beq.w	8008766 <_svfiprintf_r+0x1c6>
 8008614:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008616:	445a      	add	r2, fp
 8008618:	9209      	str	r2, [sp, #36]	; 0x24
 800861a:	f89a 3000 	ldrb.w	r3, [sl]
 800861e:	2b00      	cmp	r3, #0
 8008620:	f000 80a1 	beq.w	8008766 <_svfiprintf_r+0x1c6>
 8008624:	2300      	movs	r3, #0
 8008626:	f04f 32ff 	mov.w	r2, #4294967295
 800862a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800862e:	f10a 0a01 	add.w	sl, sl, #1
 8008632:	9304      	str	r3, [sp, #16]
 8008634:	9307      	str	r3, [sp, #28]
 8008636:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800863a:	931a      	str	r3, [sp, #104]	; 0x68
 800863c:	4654      	mov	r4, sl
 800863e:	2205      	movs	r2, #5
 8008640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008644:	4850      	ldr	r0, [pc, #320]	; (8008788 <_svfiprintf_r+0x1e8>)
 8008646:	f7f7 fdcb 	bl	80001e0 <memchr>
 800864a:	9a04      	ldr	r2, [sp, #16]
 800864c:	b9d8      	cbnz	r0, 8008686 <_svfiprintf_r+0xe6>
 800864e:	06d0      	lsls	r0, r2, #27
 8008650:	bf44      	itt	mi
 8008652:	2320      	movmi	r3, #32
 8008654:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008658:	0711      	lsls	r1, r2, #28
 800865a:	bf44      	itt	mi
 800865c:	232b      	movmi	r3, #43	; 0x2b
 800865e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008662:	f89a 3000 	ldrb.w	r3, [sl]
 8008666:	2b2a      	cmp	r3, #42	; 0x2a
 8008668:	d015      	beq.n	8008696 <_svfiprintf_r+0xf6>
 800866a:	9a07      	ldr	r2, [sp, #28]
 800866c:	4654      	mov	r4, sl
 800866e:	2000      	movs	r0, #0
 8008670:	f04f 0c0a 	mov.w	ip, #10
 8008674:	4621      	mov	r1, r4
 8008676:	f811 3b01 	ldrb.w	r3, [r1], #1
 800867a:	3b30      	subs	r3, #48	; 0x30
 800867c:	2b09      	cmp	r3, #9
 800867e:	d94d      	bls.n	800871c <_svfiprintf_r+0x17c>
 8008680:	b1b0      	cbz	r0, 80086b0 <_svfiprintf_r+0x110>
 8008682:	9207      	str	r2, [sp, #28]
 8008684:	e014      	b.n	80086b0 <_svfiprintf_r+0x110>
 8008686:	eba0 0308 	sub.w	r3, r0, r8
 800868a:	fa09 f303 	lsl.w	r3, r9, r3
 800868e:	4313      	orrs	r3, r2
 8008690:	9304      	str	r3, [sp, #16]
 8008692:	46a2      	mov	sl, r4
 8008694:	e7d2      	b.n	800863c <_svfiprintf_r+0x9c>
 8008696:	9b03      	ldr	r3, [sp, #12]
 8008698:	1d19      	adds	r1, r3, #4
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	9103      	str	r1, [sp, #12]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	bfbb      	ittet	lt
 80086a2:	425b      	neglt	r3, r3
 80086a4:	f042 0202 	orrlt.w	r2, r2, #2
 80086a8:	9307      	strge	r3, [sp, #28]
 80086aa:	9307      	strlt	r3, [sp, #28]
 80086ac:	bfb8      	it	lt
 80086ae:	9204      	strlt	r2, [sp, #16]
 80086b0:	7823      	ldrb	r3, [r4, #0]
 80086b2:	2b2e      	cmp	r3, #46	; 0x2e
 80086b4:	d10c      	bne.n	80086d0 <_svfiprintf_r+0x130>
 80086b6:	7863      	ldrb	r3, [r4, #1]
 80086b8:	2b2a      	cmp	r3, #42	; 0x2a
 80086ba:	d134      	bne.n	8008726 <_svfiprintf_r+0x186>
 80086bc:	9b03      	ldr	r3, [sp, #12]
 80086be:	1d1a      	adds	r2, r3, #4
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	9203      	str	r2, [sp, #12]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	bfb8      	it	lt
 80086c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80086cc:	3402      	adds	r4, #2
 80086ce:	9305      	str	r3, [sp, #20]
 80086d0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008798 <_svfiprintf_r+0x1f8>
 80086d4:	7821      	ldrb	r1, [r4, #0]
 80086d6:	2203      	movs	r2, #3
 80086d8:	4650      	mov	r0, sl
 80086da:	f7f7 fd81 	bl	80001e0 <memchr>
 80086de:	b138      	cbz	r0, 80086f0 <_svfiprintf_r+0x150>
 80086e0:	9b04      	ldr	r3, [sp, #16]
 80086e2:	eba0 000a 	sub.w	r0, r0, sl
 80086e6:	2240      	movs	r2, #64	; 0x40
 80086e8:	4082      	lsls	r2, r0
 80086ea:	4313      	orrs	r3, r2
 80086ec:	3401      	adds	r4, #1
 80086ee:	9304      	str	r3, [sp, #16]
 80086f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086f4:	4825      	ldr	r0, [pc, #148]	; (800878c <_svfiprintf_r+0x1ec>)
 80086f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086fa:	2206      	movs	r2, #6
 80086fc:	f7f7 fd70 	bl	80001e0 <memchr>
 8008700:	2800      	cmp	r0, #0
 8008702:	d038      	beq.n	8008776 <_svfiprintf_r+0x1d6>
 8008704:	4b22      	ldr	r3, [pc, #136]	; (8008790 <_svfiprintf_r+0x1f0>)
 8008706:	bb1b      	cbnz	r3, 8008750 <_svfiprintf_r+0x1b0>
 8008708:	9b03      	ldr	r3, [sp, #12]
 800870a:	3307      	adds	r3, #7
 800870c:	f023 0307 	bic.w	r3, r3, #7
 8008710:	3308      	adds	r3, #8
 8008712:	9303      	str	r3, [sp, #12]
 8008714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008716:	4433      	add	r3, r6
 8008718:	9309      	str	r3, [sp, #36]	; 0x24
 800871a:	e768      	b.n	80085ee <_svfiprintf_r+0x4e>
 800871c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008720:	460c      	mov	r4, r1
 8008722:	2001      	movs	r0, #1
 8008724:	e7a6      	b.n	8008674 <_svfiprintf_r+0xd4>
 8008726:	2300      	movs	r3, #0
 8008728:	3401      	adds	r4, #1
 800872a:	9305      	str	r3, [sp, #20]
 800872c:	4619      	mov	r1, r3
 800872e:	f04f 0c0a 	mov.w	ip, #10
 8008732:	4620      	mov	r0, r4
 8008734:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008738:	3a30      	subs	r2, #48	; 0x30
 800873a:	2a09      	cmp	r2, #9
 800873c:	d903      	bls.n	8008746 <_svfiprintf_r+0x1a6>
 800873e:	2b00      	cmp	r3, #0
 8008740:	d0c6      	beq.n	80086d0 <_svfiprintf_r+0x130>
 8008742:	9105      	str	r1, [sp, #20]
 8008744:	e7c4      	b.n	80086d0 <_svfiprintf_r+0x130>
 8008746:	fb0c 2101 	mla	r1, ip, r1, r2
 800874a:	4604      	mov	r4, r0
 800874c:	2301      	movs	r3, #1
 800874e:	e7f0      	b.n	8008732 <_svfiprintf_r+0x192>
 8008750:	ab03      	add	r3, sp, #12
 8008752:	9300      	str	r3, [sp, #0]
 8008754:	462a      	mov	r2, r5
 8008756:	4b0f      	ldr	r3, [pc, #60]	; (8008794 <_svfiprintf_r+0x1f4>)
 8008758:	a904      	add	r1, sp, #16
 800875a:	4638      	mov	r0, r7
 800875c:	f3af 8000 	nop.w
 8008760:	1c42      	adds	r2, r0, #1
 8008762:	4606      	mov	r6, r0
 8008764:	d1d6      	bne.n	8008714 <_svfiprintf_r+0x174>
 8008766:	89ab      	ldrh	r3, [r5, #12]
 8008768:	065b      	lsls	r3, r3, #25
 800876a:	f53f af2d 	bmi.w	80085c8 <_svfiprintf_r+0x28>
 800876e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008770:	b01d      	add	sp, #116	; 0x74
 8008772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008776:	ab03      	add	r3, sp, #12
 8008778:	9300      	str	r3, [sp, #0]
 800877a:	462a      	mov	r2, r5
 800877c:	4b05      	ldr	r3, [pc, #20]	; (8008794 <_svfiprintf_r+0x1f4>)
 800877e:	a904      	add	r1, sp, #16
 8008780:	4638      	mov	r0, r7
 8008782:	f000 f9bd 	bl	8008b00 <_printf_i>
 8008786:	e7eb      	b.n	8008760 <_svfiprintf_r+0x1c0>
 8008788:	080093e5 	.word	0x080093e5
 800878c:	080093ef 	.word	0x080093ef
 8008790:	00000000 	.word	0x00000000
 8008794:	080084ed 	.word	0x080084ed
 8008798:	080093eb 	.word	0x080093eb

0800879c <__sfputc_r>:
 800879c:	6893      	ldr	r3, [r2, #8]
 800879e:	3b01      	subs	r3, #1
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	b410      	push	{r4}
 80087a4:	6093      	str	r3, [r2, #8]
 80087a6:	da08      	bge.n	80087ba <__sfputc_r+0x1e>
 80087a8:	6994      	ldr	r4, [r2, #24]
 80087aa:	42a3      	cmp	r3, r4
 80087ac:	db01      	blt.n	80087b2 <__sfputc_r+0x16>
 80087ae:	290a      	cmp	r1, #10
 80087b0:	d103      	bne.n	80087ba <__sfputc_r+0x1e>
 80087b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087b6:	f000 bb73 	b.w	8008ea0 <__swbuf_r>
 80087ba:	6813      	ldr	r3, [r2, #0]
 80087bc:	1c58      	adds	r0, r3, #1
 80087be:	6010      	str	r0, [r2, #0]
 80087c0:	7019      	strb	r1, [r3, #0]
 80087c2:	4608      	mov	r0, r1
 80087c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087c8:	4770      	bx	lr

080087ca <__sfputs_r>:
 80087ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087cc:	4606      	mov	r6, r0
 80087ce:	460f      	mov	r7, r1
 80087d0:	4614      	mov	r4, r2
 80087d2:	18d5      	adds	r5, r2, r3
 80087d4:	42ac      	cmp	r4, r5
 80087d6:	d101      	bne.n	80087dc <__sfputs_r+0x12>
 80087d8:	2000      	movs	r0, #0
 80087da:	e007      	b.n	80087ec <__sfputs_r+0x22>
 80087dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087e0:	463a      	mov	r2, r7
 80087e2:	4630      	mov	r0, r6
 80087e4:	f7ff ffda 	bl	800879c <__sfputc_r>
 80087e8:	1c43      	adds	r3, r0, #1
 80087ea:	d1f3      	bne.n	80087d4 <__sfputs_r+0xa>
 80087ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080087f0 <_vfiprintf_r>:
 80087f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f4:	460d      	mov	r5, r1
 80087f6:	b09d      	sub	sp, #116	; 0x74
 80087f8:	4614      	mov	r4, r2
 80087fa:	4698      	mov	r8, r3
 80087fc:	4606      	mov	r6, r0
 80087fe:	b118      	cbz	r0, 8008808 <_vfiprintf_r+0x18>
 8008800:	6a03      	ldr	r3, [r0, #32]
 8008802:	b90b      	cbnz	r3, 8008808 <_vfiprintf_r+0x18>
 8008804:	f7ff fbee 	bl	8007fe4 <__sinit>
 8008808:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800880a:	07d9      	lsls	r1, r3, #31
 800880c:	d405      	bmi.n	800881a <_vfiprintf_r+0x2a>
 800880e:	89ab      	ldrh	r3, [r5, #12]
 8008810:	059a      	lsls	r2, r3, #22
 8008812:	d402      	bmi.n	800881a <_vfiprintf_r+0x2a>
 8008814:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008816:	f7ff fd60 	bl	80082da <__retarget_lock_acquire_recursive>
 800881a:	89ab      	ldrh	r3, [r5, #12]
 800881c:	071b      	lsls	r3, r3, #28
 800881e:	d501      	bpl.n	8008824 <_vfiprintf_r+0x34>
 8008820:	692b      	ldr	r3, [r5, #16]
 8008822:	b99b      	cbnz	r3, 800884c <_vfiprintf_r+0x5c>
 8008824:	4629      	mov	r1, r5
 8008826:	4630      	mov	r0, r6
 8008828:	f000 fb78 	bl	8008f1c <__swsetup_r>
 800882c:	b170      	cbz	r0, 800884c <_vfiprintf_r+0x5c>
 800882e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008830:	07dc      	lsls	r4, r3, #31
 8008832:	d504      	bpl.n	800883e <_vfiprintf_r+0x4e>
 8008834:	f04f 30ff 	mov.w	r0, #4294967295
 8008838:	b01d      	add	sp, #116	; 0x74
 800883a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800883e:	89ab      	ldrh	r3, [r5, #12]
 8008840:	0598      	lsls	r0, r3, #22
 8008842:	d4f7      	bmi.n	8008834 <_vfiprintf_r+0x44>
 8008844:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008846:	f7ff fd49 	bl	80082dc <__retarget_lock_release_recursive>
 800884a:	e7f3      	b.n	8008834 <_vfiprintf_r+0x44>
 800884c:	2300      	movs	r3, #0
 800884e:	9309      	str	r3, [sp, #36]	; 0x24
 8008850:	2320      	movs	r3, #32
 8008852:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008856:	f8cd 800c 	str.w	r8, [sp, #12]
 800885a:	2330      	movs	r3, #48	; 0x30
 800885c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008a10 <_vfiprintf_r+0x220>
 8008860:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008864:	f04f 0901 	mov.w	r9, #1
 8008868:	4623      	mov	r3, r4
 800886a:	469a      	mov	sl, r3
 800886c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008870:	b10a      	cbz	r2, 8008876 <_vfiprintf_r+0x86>
 8008872:	2a25      	cmp	r2, #37	; 0x25
 8008874:	d1f9      	bne.n	800886a <_vfiprintf_r+0x7a>
 8008876:	ebba 0b04 	subs.w	fp, sl, r4
 800887a:	d00b      	beq.n	8008894 <_vfiprintf_r+0xa4>
 800887c:	465b      	mov	r3, fp
 800887e:	4622      	mov	r2, r4
 8008880:	4629      	mov	r1, r5
 8008882:	4630      	mov	r0, r6
 8008884:	f7ff ffa1 	bl	80087ca <__sfputs_r>
 8008888:	3001      	adds	r0, #1
 800888a:	f000 80a9 	beq.w	80089e0 <_vfiprintf_r+0x1f0>
 800888e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008890:	445a      	add	r2, fp
 8008892:	9209      	str	r2, [sp, #36]	; 0x24
 8008894:	f89a 3000 	ldrb.w	r3, [sl]
 8008898:	2b00      	cmp	r3, #0
 800889a:	f000 80a1 	beq.w	80089e0 <_vfiprintf_r+0x1f0>
 800889e:	2300      	movs	r3, #0
 80088a0:	f04f 32ff 	mov.w	r2, #4294967295
 80088a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088a8:	f10a 0a01 	add.w	sl, sl, #1
 80088ac:	9304      	str	r3, [sp, #16]
 80088ae:	9307      	str	r3, [sp, #28]
 80088b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088b4:	931a      	str	r3, [sp, #104]	; 0x68
 80088b6:	4654      	mov	r4, sl
 80088b8:	2205      	movs	r2, #5
 80088ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088be:	4854      	ldr	r0, [pc, #336]	; (8008a10 <_vfiprintf_r+0x220>)
 80088c0:	f7f7 fc8e 	bl	80001e0 <memchr>
 80088c4:	9a04      	ldr	r2, [sp, #16]
 80088c6:	b9d8      	cbnz	r0, 8008900 <_vfiprintf_r+0x110>
 80088c8:	06d1      	lsls	r1, r2, #27
 80088ca:	bf44      	itt	mi
 80088cc:	2320      	movmi	r3, #32
 80088ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088d2:	0713      	lsls	r3, r2, #28
 80088d4:	bf44      	itt	mi
 80088d6:	232b      	movmi	r3, #43	; 0x2b
 80088d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088dc:	f89a 3000 	ldrb.w	r3, [sl]
 80088e0:	2b2a      	cmp	r3, #42	; 0x2a
 80088e2:	d015      	beq.n	8008910 <_vfiprintf_r+0x120>
 80088e4:	9a07      	ldr	r2, [sp, #28]
 80088e6:	4654      	mov	r4, sl
 80088e8:	2000      	movs	r0, #0
 80088ea:	f04f 0c0a 	mov.w	ip, #10
 80088ee:	4621      	mov	r1, r4
 80088f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088f4:	3b30      	subs	r3, #48	; 0x30
 80088f6:	2b09      	cmp	r3, #9
 80088f8:	d94d      	bls.n	8008996 <_vfiprintf_r+0x1a6>
 80088fa:	b1b0      	cbz	r0, 800892a <_vfiprintf_r+0x13a>
 80088fc:	9207      	str	r2, [sp, #28]
 80088fe:	e014      	b.n	800892a <_vfiprintf_r+0x13a>
 8008900:	eba0 0308 	sub.w	r3, r0, r8
 8008904:	fa09 f303 	lsl.w	r3, r9, r3
 8008908:	4313      	orrs	r3, r2
 800890a:	9304      	str	r3, [sp, #16]
 800890c:	46a2      	mov	sl, r4
 800890e:	e7d2      	b.n	80088b6 <_vfiprintf_r+0xc6>
 8008910:	9b03      	ldr	r3, [sp, #12]
 8008912:	1d19      	adds	r1, r3, #4
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	9103      	str	r1, [sp, #12]
 8008918:	2b00      	cmp	r3, #0
 800891a:	bfbb      	ittet	lt
 800891c:	425b      	neglt	r3, r3
 800891e:	f042 0202 	orrlt.w	r2, r2, #2
 8008922:	9307      	strge	r3, [sp, #28]
 8008924:	9307      	strlt	r3, [sp, #28]
 8008926:	bfb8      	it	lt
 8008928:	9204      	strlt	r2, [sp, #16]
 800892a:	7823      	ldrb	r3, [r4, #0]
 800892c:	2b2e      	cmp	r3, #46	; 0x2e
 800892e:	d10c      	bne.n	800894a <_vfiprintf_r+0x15a>
 8008930:	7863      	ldrb	r3, [r4, #1]
 8008932:	2b2a      	cmp	r3, #42	; 0x2a
 8008934:	d134      	bne.n	80089a0 <_vfiprintf_r+0x1b0>
 8008936:	9b03      	ldr	r3, [sp, #12]
 8008938:	1d1a      	adds	r2, r3, #4
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	9203      	str	r2, [sp, #12]
 800893e:	2b00      	cmp	r3, #0
 8008940:	bfb8      	it	lt
 8008942:	f04f 33ff 	movlt.w	r3, #4294967295
 8008946:	3402      	adds	r4, #2
 8008948:	9305      	str	r3, [sp, #20]
 800894a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008a20 <_vfiprintf_r+0x230>
 800894e:	7821      	ldrb	r1, [r4, #0]
 8008950:	2203      	movs	r2, #3
 8008952:	4650      	mov	r0, sl
 8008954:	f7f7 fc44 	bl	80001e0 <memchr>
 8008958:	b138      	cbz	r0, 800896a <_vfiprintf_r+0x17a>
 800895a:	9b04      	ldr	r3, [sp, #16]
 800895c:	eba0 000a 	sub.w	r0, r0, sl
 8008960:	2240      	movs	r2, #64	; 0x40
 8008962:	4082      	lsls	r2, r0
 8008964:	4313      	orrs	r3, r2
 8008966:	3401      	adds	r4, #1
 8008968:	9304      	str	r3, [sp, #16]
 800896a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800896e:	4829      	ldr	r0, [pc, #164]	; (8008a14 <_vfiprintf_r+0x224>)
 8008970:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008974:	2206      	movs	r2, #6
 8008976:	f7f7 fc33 	bl	80001e0 <memchr>
 800897a:	2800      	cmp	r0, #0
 800897c:	d03f      	beq.n	80089fe <_vfiprintf_r+0x20e>
 800897e:	4b26      	ldr	r3, [pc, #152]	; (8008a18 <_vfiprintf_r+0x228>)
 8008980:	bb1b      	cbnz	r3, 80089ca <_vfiprintf_r+0x1da>
 8008982:	9b03      	ldr	r3, [sp, #12]
 8008984:	3307      	adds	r3, #7
 8008986:	f023 0307 	bic.w	r3, r3, #7
 800898a:	3308      	adds	r3, #8
 800898c:	9303      	str	r3, [sp, #12]
 800898e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008990:	443b      	add	r3, r7
 8008992:	9309      	str	r3, [sp, #36]	; 0x24
 8008994:	e768      	b.n	8008868 <_vfiprintf_r+0x78>
 8008996:	fb0c 3202 	mla	r2, ip, r2, r3
 800899a:	460c      	mov	r4, r1
 800899c:	2001      	movs	r0, #1
 800899e:	e7a6      	b.n	80088ee <_vfiprintf_r+0xfe>
 80089a0:	2300      	movs	r3, #0
 80089a2:	3401      	adds	r4, #1
 80089a4:	9305      	str	r3, [sp, #20]
 80089a6:	4619      	mov	r1, r3
 80089a8:	f04f 0c0a 	mov.w	ip, #10
 80089ac:	4620      	mov	r0, r4
 80089ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089b2:	3a30      	subs	r2, #48	; 0x30
 80089b4:	2a09      	cmp	r2, #9
 80089b6:	d903      	bls.n	80089c0 <_vfiprintf_r+0x1d0>
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d0c6      	beq.n	800894a <_vfiprintf_r+0x15a>
 80089bc:	9105      	str	r1, [sp, #20]
 80089be:	e7c4      	b.n	800894a <_vfiprintf_r+0x15a>
 80089c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80089c4:	4604      	mov	r4, r0
 80089c6:	2301      	movs	r3, #1
 80089c8:	e7f0      	b.n	80089ac <_vfiprintf_r+0x1bc>
 80089ca:	ab03      	add	r3, sp, #12
 80089cc:	9300      	str	r3, [sp, #0]
 80089ce:	462a      	mov	r2, r5
 80089d0:	4b12      	ldr	r3, [pc, #72]	; (8008a1c <_vfiprintf_r+0x22c>)
 80089d2:	a904      	add	r1, sp, #16
 80089d4:	4630      	mov	r0, r6
 80089d6:	f3af 8000 	nop.w
 80089da:	4607      	mov	r7, r0
 80089dc:	1c78      	adds	r0, r7, #1
 80089de:	d1d6      	bne.n	800898e <_vfiprintf_r+0x19e>
 80089e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089e2:	07d9      	lsls	r1, r3, #31
 80089e4:	d405      	bmi.n	80089f2 <_vfiprintf_r+0x202>
 80089e6:	89ab      	ldrh	r3, [r5, #12]
 80089e8:	059a      	lsls	r2, r3, #22
 80089ea:	d402      	bmi.n	80089f2 <_vfiprintf_r+0x202>
 80089ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089ee:	f7ff fc75 	bl	80082dc <__retarget_lock_release_recursive>
 80089f2:	89ab      	ldrh	r3, [r5, #12]
 80089f4:	065b      	lsls	r3, r3, #25
 80089f6:	f53f af1d 	bmi.w	8008834 <_vfiprintf_r+0x44>
 80089fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089fc:	e71c      	b.n	8008838 <_vfiprintf_r+0x48>
 80089fe:	ab03      	add	r3, sp, #12
 8008a00:	9300      	str	r3, [sp, #0]
 8008a02:	462a      	mov	r2, r5
 8008a04:	4b05      	ldr	r3, [pc, #20]	; (8008a1c <_vfiprintf_r+0x22c>)
 8008a06:	a904      	add	r1, sp, #16
 8008a08:	4630      	mov	r0, r6
 8008a0a:	f000 f879 	bl	8008b00 <_printf_i>
 8008a0e:	e7e4      	b.n	80089da <_vfiprintf_r+0x1ea>
 8008a10:	080093e5 	.word	0x080093e5
 8008a14:	080093ef 	.word	0x080093ef
 8008a18:	00000000 	.word	0x00000000
 8008a1c:	080087cb 	.word	0x080087cb
 8008a20:	080093eb 	.word	0x080093eb

08008a24 <_printf_common>:
 8008a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a28:	4616      	mov	r6, r2
 8008a2a:	4699      	mov	r9, r3
 8008a2c:	688a      	ldr	r2, [r1, #8]
 8008a2e:	690b      	ldr	r3, [r1, #16]
 8008a30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a34:	4293      	cmp	r3, r2
 8008a36:	bfb8      	it	lt
 8008a38:	4613      	movlt	r3, r2
 8008a3a:	6033      	str	r3, [r6, #0]
 8008a3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a40:	4607      	mov	r7, r0
 8008a42:	460c      	mov	r4, r1
 8008a44:	b10a      	cbz	r2, 8008a4a <_printf_common+0x26>
 8008a46:	3301      	adds	r3, #1
 8008a48:	6033      	str	r3, [r6, #0]
 8008a4a:	6823      	ldr	r3, [r4, #0]
 8008a4c:	0699      	lsls	r1, r3, #26
 8008a4e:	bf42      	ittt	mi
 8008a50:	6833      	ldrmi	r3, [r6, #0]
 8008a52:	3302      	addmi	r3, #2
 8008a54:	6033      	strmi	r3, [r6, #0]
 8008a56:	6825      	ldr	r5, [r4, #0]
 8008a58:	f015 0506 	ands.w	r5, r5, #6
 8008a5c:	d106      	bne.n	8008a6c <_printf_common+0x48>
 8008a5e:	f104 0a19 	add.w	sl, r4, #25
 8008a62:	68e3      	ldr	r3, [r4, #12]
 8008a64:	6832      	ldr	r2, [r6, #0]
 8008a66:	1a9b      	subs	r3, r3, r2
 8008a68:	42ab      	cmp	r3, r5
 8008a6a:	dc26      	bgt.n	8008aba <_printf_common+0x96>
 8008a6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a70:	1e13      	subs	r3, r2, #0
 8008a72:	6822      	ldr	r2, [r4, #0]
 8008a74:	bf18      	it	ne
 8008a76:	2301      	movne	r3, #1
 8008a78:	0692      	lsls	r2, r2, #26
 8008a7a:	d42b      	bmi.n	8008ad4 <_printf_common+0xb0>
 8008a7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a80:	4649      	mov	r1, r9
 8008a82:	4638      	mov	r0, r7
 8008a84:	47c0      	blx	r8
 8008a86:	3001      	adds	r0, #1
 8008a88:	d01e      	beq.n	8008ac8 <_printf_common+0xa4>
 8008a8a:	6823      	ldr	r3, [r4, #0]
 8008a8c:	6922      	ldr	r2, [r4, #16]
 8008a8e:	f003 0306 	and.w	r3, r3, #6
 8008a92:	2b04      	cmp	r3, #4
 8008a94:	bf02      	ittt	eq
 8008a96:	68e5      	ldreq	r5, [r4, #12]
 8008a98:	6833      	ldreq	r3, [r6, #0]
 8008a9a:	1aed      	subeq	r5, r5, r3
 8008a9c:	68a3      	ldr	r3, [r4, #8]
 8008a9e:	bf0c      	ite	eq
 8008aa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008aa4:	2500      	movne	r5, #0
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	bfc4      	itt	gt
 8008aaa:	1a9b      	subgt	r3, r3, r2
 8008aac:	18ed      	addgt	r5, r5, r3
 8008aae:	2600      	movs	r6, #0
 8008ab0:	341a      	adds	r4, #26
 8008ab2:	42b5      	cmp	r5, r6
 8008ab4:	d11a      	bne.n	8008aec <_printf_common+0xc8>
 8008ab6:	2000      	movs	r0, #0
 8008ab8:	e008      	b.n	8008acc <_printf_common+0xa8>
 8008aba:	2301      	movs	r3, #1
 8008abc:	4652      	mov	r2, sl
 8008abe:	4649      	mov	r1, r9
 8008ac0:	4638      	mov	r0, r7
 8008ac2:	47c0      	blx	r8
 8008ac4:	3001      	adds	r0, #1
 8008ac6:	d103      	bne.n	8008ad0 <_printf_common+0xac>
 8008ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8008acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ad0:	3501      	adds	r5, #1
 8008ad2:	e7c6      	b.n	8008a62 <_printf_common+0x3e>
 8008ad4:	18e1      	adds	r1, r4, r3
 8008ad6:	1c5a      	adds	r2, r3, #1
 8008ad8:	2030      	movs	r0, #48	; 0x30
 8008ada:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ade:	4422      	add	r2, r4
 8008ae0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ae4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ae8:	3302      	adds	r3, #2
 8008aea:	e7c7      	b.n	8008a7c <_printf_common+0x58>
 8008aec:	2301      	movs	r3, #1
 8008aee:	4622      	mov	r2, r4
 8008af0:	4649      	mov	r1, r9
 8008af2:	4638      	mov	r0, r7
 8008af4:	47c0      	blx	r8
 8008af6:	3001      	adds	r0, #1
 8008af8:	d0e6      	beq.n	8008ac8 <_printf_common+0xa4>
 8008afa:	3601      	adds	r6, #1
 8008afc:	e7d9      	b.n	8008ab2 <_printf_common+0x8e>
	...

08008b00 <_printf_i>:
 8008b00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b04:	7e0f      	ldrb	r7, [r1, #24]
 8008b06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b08:	2f78      	cmp	r7, #120	; 0x78
 8008b0a:	4691      	mov	r9, r2
 8008b0c:	4680      	mov	r8, r0
 8008b0e:	460c      	mov	r4, r1
 8008b10:	469a      	mov	sl, r3
 8008b12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b16:	d807      	bhi.n	8008b28 <_printf_i+0x28>
 8008b18:	2f62      	cmp	r7, #98	; 0x62
 8008b1a:	d80a      	bhi.n	8008b32 <_printf_i+0x32>
 8008b1c:	2f00      	cmp	r7, #0
 8008b1e:	f000 80d4 	beq.w	8008cca <_printf_i+0x1ca>
 8008b22:	2f58      	cmp	r7, #88	; 0x58
 8008b24:	f000 80c0 	beq.w	8008ca8 <_printf_i+0x1a8>
 8008b28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b30:	e03a      	b.n	8008ba8 <_printf_i+0xa8>
 8008b32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b36:	2b15      	cmp	r3, #21
 8008b38:	d8f6      	bhi.n	8008b28 <_printf_i+0x28>
 8008b3a:	a101      	add	r1, pc, #4	; (adr r1, 8008b40 <_printf_i+0x40>)
 8008b3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b40:	08008b99 	.word	0x08008b99
 8008b44:	08008bad 	.word	0x08008bad
 8008b48:	08008b29 	.word	0x08008b29
 8008b4c:	08008b29 	.word	0x08008b29
 8008b50:	08008b29 	.word	0x08008b29
 8008b54:	08008b29 	.word	0x08008b29
 8008b58:	08008bad 	.word	0x08008bad
 8008b5c:	08008b29 	.word	0x08008b29
 8008b60:	08008b29 	.word	0x08008b29
 8008b64:	08008b29 	.word	0x08008b29
 8008b68:	08008b29 	.word	0x08008b29
 8008b6c:	08008cb1 	.word	0x08008cb1
 8008b70:	08008bd9 	.word	0x08008bd9
 8008b74:	08008c6b 	.word	0x08008c6b
 8008b78:	08008b29 	.word	0x08008b29
 8008b7c:	08008b29 	.word	0x08008b29
 8008b80:	08008cd3 	.word	0x08008cd3
 8008b84:	08008b29 	.word	0x08008b29
 8008b88:	08008bd9 	.word	0x08008bd9
 8008b8c:	08008b29 	.word	0x08008b29
 8008b90:	08008b29 	.word	0x08008b29
 8008b94:	08008c73 	.word	0x08008c73
 8008b98:	682b      	ldr	r3, [r5, #0]
 8008b9a:	1d1a      	adds	r2, r3, #4
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	602a      	str	r2, [r5, #0]
 8008ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ba4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ba8:	2301      	movs	r3, #1
 8008baa:	e09f      	b.n	8008cec <_printf_i+0x1ec>
 8008bac:	6820      	ldr	r0, [r4, #0]
 8008bae:	682b      	ldr	r3, [r5, #0]
 8008bb0:	0607      	lsls	r7, r0, #24
 8008bb2:	f103 0104 	add.w	r1, r3, #4
 8008bb6:	6029      	str	r1, [r5, #0]
 8008bb8:	d501      	bpl.n	8008bbe <_printf_i+0xbe>
 8008bba:	681e      	ldr	r6, [r3, #0]
 8008bbc:	e003      	b.n	8008bc6 <_printf_i+0xc6>
 8008bbe:	0646      	lsls	r6, r0, #25
 8008bc0:	d5fb      	bpl.n	8008bba <_printf_i+0xba>
 8008bc2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008bc6:	2e00      	cmp	r6, #0
 8008bc8:	da03      	bge.n	8008bd2 <_printf_i+0xd2>
 8008bca:	232d      	movs	r3, #45	; 0x2d
 8008bcc:	4276      	negs	r6, r6
 8008bce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bd2:	485a      	ldr	r0, [pc, #360]	; (8008d3c <_printf_i+0x23c>)
 8008bd4:	230a      	movs	r3, #10
 8008bd6:	e012      	b.n	8008bfe <_printf_i+0xfe>
 8008bd8:	682b      	ldr	r3, [r5, #0]
 8008bda:	6820      	ldr	r0, [r4, #0]
 8008bdc:	1d19      	adds	r1, r3, #4
 8008bde:	6029      	str	r1, [r5, #0]
 8008be0:	0605      	lsls	r5, r0, #24
 8008be2:	d501      	bpl.n	8008be8 <_printf_i+0xe8>
 8008be4:	681e      	ldr	r6, [r3, #0]
 8008be6:	e002      	b.n	8008bee <_printf_i+0xee>
 8008be8:	0641      	lsls	r1, r0, #25
 8008bea:	d5fb      	bpl.n	8008be4 <_printf_i+0xe4>
 8008bec:	881e      	ldrh	r6, [r3, #0]
 8008bee:	4853      	ldr	r0, [pc, #332]	; (8008d3c <_printf_i+0x23c>)
 8008bf0:	2f6f      	cmp	r7, #111	; 0x6f
 8008bf2:	bf0c      	ite	eq
 8008bf4:	2308      	moveq	r3, #8
 8008bf6:	230a      	movne	r3, #10
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008bfe:	6865      	ldr	r5, [r4, #4]
 8008c00:	60a5      	str	r5, [r4, #8]
 8008c02:	2d00      	cmp	r5, #0
 8008c04:	bfa2      	ittt	ge
 8008c06:	6821      	ldrge	r1, [r4, #0]
 8008c08:	f021 0104 	bicge.w	r1, r1, #4
 8008c0c:	6021      	strge	r1, [r4, #0]
 8008c0e:	b90e      	cbnz	r6, 8008c14 <_printf_i+0x114>
 8008c10:	2d00      	cmp	r5, #0
 8008c12:	d04b      	beq.n	8008cac <_printf_i+0x1ac>
 8008c14:	4615      	mov	r5, r2
 8008c16:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c1a:	fb03 6711 	mls	r7, r3, r1, r6
 8008c1e:	5dc7      	ldrb	r7, [r0, r7]
 8008c20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c24:	4637      	mov	r7, r6
 8008c26:	42bb      	cmp	r3, r7
 8008c28:	460e      	mov	r6, r1
 8008c2a:	d9f4      	bls.n	8008c16 <_printf_i+0x116>
 8008c2c:	2b08      	cmp	r3, #8
 8008c2e:	d10b      	bne.n	8008c48 <_printf_i+0x148>
 8008c30:	6823      	ldr	r3, [r4, #0]
 8008c32:	07de      	lsls	r6, r3, #31
 8008c34:	d508      	bpl.n	8008c48 <_printf_i+0x148>
 8008c36:	6923      	ldr	r3, [r4, #16]
 8008c38:	6861      	ldr	r1, [r4, #4]
 8008c3a:	4299      	cmp	r1, r3
 8008c3c:	bfde      	ittt	le
 8008c3e:	2330      	movle	r3, #48	; 0x30
 8008c40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c48:	1b52      	subs	r2, r2, r5
 8008c4a:	6122      	str	r2, [r4, #16]
 8008c4c:	f8cd a000 	str.w	sl, [sp]
 8008c50:	464b      	mov	r3, r9
 8008c52:	aa03      	add	r2, sp, #12
 8008c54:	4621      	mov	r1, r4
 8008c56:	4640      	mov	r0, r8
 8008c58:	f7ff fee4 	bl	8008a24 <_printf_common>
 8008c5c:	3001      	adds	r0, #1
 8008c5e:	d14a      	bne.n	8008cf6 <_printf_i+0x1f6>
 8008c60:	f04f 30ff 	mov.w	r0, #4294967295
 8008c64:	b004      	add	sp, #16
 8008c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c6a:	6823      	ldr	r3, [r4, #0]
 8008c6c:	f043 0320 	orr.w	r3, r3, #32
 8008c70:	6023      	str	r3, [r4, #0]
 8008c72:	4833      	ldr	r0, [pc, #204]	; (8008d40 <_printf_i+0x240>)
 8008c74:	2778      	movs	r7, #120	; 0x78
 8008c76:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008c7a:	6823      	ldr	r3, [r4, #0]
 8008c7c:	6829      	ldr	r1, [r5, #0]
 8008c7e:	061f      	lsls	r7, r3, #24
 8008c80:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c84:	d402      	bmi.n	8008c8c <_printf_i+0x18c>
 8008c86:	065f      	lsls	r7, r3, #25
 8008c88:	bf48      	it	mi
 8008c8a:	b2b6      	uxthmi	r6, r6
 8008c8c:	07df      	lsls	r7, r3, #31
 8008c8e:	bf48      	it	mi
 8008c90:	f043 0320 	orrmi.w	r3, r3, #32
 8008c94:	6029      	str	r1, [r5, #0]
 8008c96:	bf48      	it	mi
 8008c98:	6023      	strmi	r3, [r4, #0]
 8008c9a:	b91e      	cbnz	r6, 8008ca4 <_printf_i+0x1a4>
 8008c9c:	6823      	ldr	r3, [r4, #0]
 8008c9e:	f023 0320 	bic.w	r3, r3, #32
 8008ca2:	6023      	str	r3, [r4, #0]
 8008ca4:	2310      	movs	r3, #16
 8008ca6:	e7a7      	b.n	8008bf8 <_printf_i+0xf8>
 8008ca8:	4824      	ldr	r0, [pc, #144]	; (8008d3c <_printf_i+0x23c>)
 8008caa:	e7e4      	b.n	8008c76 <_printf_i+0x176>
 8008cac:	4615      	mov	r5, r2
 8008cae:	e7bd      	b.n	8008c2c <_printf_i+0x12c>
 8008cb0:	682b      	ldr	r3, [r5, #0]
 8008cb2:	6826      	ldr	r6, [r4, #0]
 8008cb4:	6961      	ldr	r1, [r4, #20]
 8008cb6:	1d18      	adds	r0, r3, #4
 8008cb8:	6028      	str	r0, [r5, #0]
 8008cba:	0635      	lsls	r5, r6, #24
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	d501      	bpl.n	8008cc4 <_printf_i+0x1c4>
 8008cc0:	6019      	str	r1, [r3, #0]
 8008cc2:	e002      	b.n	8008cca <_printf_i+0x1ca>
 8008cc4:	0670      	lsls	r0, r6, #25
 8008cc6:	d5fb      	bpl.n	8008cc0 <_printf_i+0x1c0>
 8008cc8:	8019      	strh	r1, [r3, #0]
 8008cca:	2300      	movs	r3, #0
 8008ccc:	6123      	str	r3, [r4, #16]
 8008cce:	4615      	mov	r5, r2
 8008cd0:	e7bc      	b.n	8008c4c <_printf_i+0x14c>
 8008cd2:	682b      	ldr	r3, [r5, #0]
 8008cd4:	1d1a      	adds	r2, r3, #4
 8008cd6:	602a      	str	r2, [r5, #0]
 8008cd8:	681d      	ldr	r5, [r3, #0]
 8008cda:	6862      	ldr	r2, [r4, #4]
 8008cdc:	2100      	movs	r1, #0
 8008cde:	4628      	mov	r0, r5
 8008ce0:	f7f7 fa7e 	bl	80001e0 <memchr>
 8008ce4:	b108      	cbz	r0, 8008cea <_printf_i+0x1ea>
 8008ce6:	1b40      	subs	r0, r0, r5
 8008ce8:	6060      	str	r0, [r4, #4]
 8008cea:	6863      	ldr	r3, [r4, #4]
 8008cec:	6123      	str	r3, [r4, #16]
 8008cee:	2300      	movs	r3, #0
 8008cf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cf4:	e7aa      	b.n	8008c4c <_printf_i+0x14c>
 8008cf6:	6923      	ldr	r3, [r4, #16]
 8008cf8:	462a      	mov	r2, r5
 8008cfa:	4649      	mov	r1, r9
 8008cfc:	4640      	mov	r0, r8
 8008cfe:	47d0      	blx	sl
 8008d00:	3001      	adds	r0, #1
 8008d02:	d0ad      	beq.n	8008c60 <_printf_i+0x160>
 8008d04:	6823      	ldr	r3, [r4, #0]
 8008d06:	079b      	lsls	r3, r3, #30
 8008d08:	d413      	bmi.n	8008d32 <_printf_i+0x232>
 8008d0a:	68e0      	ldr	r0, [r4, #12]
 8008d0c:	9b03      	ldr	r3, [sp, #12]
 8008d0e:	4298      	cmp	r0, r3
 8008d10:	bfb8      	it	lt
 8008d12:	4618      	movlt	r0, r3
 8008d14:	e7a6      	b.n	8008c64 <_printf_i+0x164>
 8008d16:	2301      	movs	r3, #1
 8008d18:	4632      	mov	r2, r6
 8008d1a:	4649      	mov	r1, r9
 8008d1c:	4640      	mov	r0, r8
 8008d1e:	47d0      	blx	sl
 8008d20:	3001      	adds	r0, #1
 8008d22:	d09d      	beq.n	8008c60 <_printf_i+0x160>
 8008d24:	3501      	adds	r5, #1
 8008d26:	68e3      	ldr	r3, [r4, #12]
 8008d28:	9903      	ldr	r1, [sp, #12]
 8008d2a:	1a5b      	subs	r3, r3, r1
 8008d2c:	42ab      	cmp	r3, r5
 8008d2e:	dcf2      	bgt.n	8008d16 <_printf_i+0x216>
 8008d30:	e7eb      	b.n	8008d0a <_printf_i+0x20a>
 8008d32:	2500      	movs	r5, #0
 8008d34:	f104 0619 	add.w	r6, r4, #25
 8008d38:	e7f5      	b.n	8008d26 <_printf_i+0x226>
 8008d3a:	bf00      	nop
 8008d3c:	080093f6 	.word	0x080093f6
 8008d40:	08009407 	.word	0x08009407

08008d44 <__sflush_r>:
 8008d44:	898a      	ldrh	r2, [r1, #12]
 8008d46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d4a:	4605      	mov	r5, r0
 8008d4c:	0710      	lsls	r0, r2, #28
 8008d4e:	460c      	mov	r4, r1
 8008d50:	d458      	bmi.n	8008e04 <__sflush_r+0xc0>
 8008d52:	684b      	ldr	r3, [r1, #4]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	dc05      	bgt.n	8008d64 <__sflush_r+0x20>
 8008d58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	dc02      	bgt.n	8008d64 <__sflush_r+0x20>
 8008d5e:	2000      	movs	r0, #0
 8008d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d66:	2e00      	cmp	r6, #0
 8008d68:	d0f9      	beq.n	8008d5e <__sflush_r+0x1a>
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d70:	682f      	ldr	r7, [r5, #0]
 8008d72:	6a21      	ldr	r1, [r4, #32]
 8008d74:	602b      	str	r3, [r5, #0]
 8008d76:	d032      	beq.n	8008dde <__sflush_r+0x9a>
 8008d78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d7a:	89a3      	ldrh	r3, [r4, #12]
 8008d7c:	075a      	lsls	r2, r3, #29
 8008d7e:	d505      	bpl.n	8008d8c <__sflush_r+0x48>
 8008d80:	6863      	ldr	r3, [r4, #4]
 8008d82:	1ac0      	subs	r0, r0, r3
 8008d84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d86:	b10b      	cbz	r3, 8008d8c <__sflush_r+0x48>
 8008d88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d8a:	1ac0      	subs	r0, r0, r3
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	4602      	mov	r2, r0
 8008d90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d92:	6a21      	ldr	r1, [r4, #32]
 8008d94:	4628      	mov	r0, r5
 8008d96:	47b0      	blx	r6
 8008d98:	1c43      	adds	r3, r0, #1
 8008d9a:	89a3      	ldrh	r3, [r4, #12]
 8008d9c:	d106      	bne.n	8008dac <__sflush_r+0x68>
 8008d9e:	6829      	ldr	r1, [r5, #0]
 8008da0:	291d      	cmp	r1, #29
 8008da2:	d82b      	bhi.n	8008dfc <__sflush_r+0xb8>
 8008da4:	4a29      	ldr	r2, [pc, #164]	; (8008e4c <__sflush_r+0x108>)
 8008da6:	410a      	asrs	r2, r1
 8008da8:	07d6      	lsls	r6, r2, #31
 8008daa:	d427      	bmi.n	8008dfc <__sflush_r+0xb8>
 8008dac:	2200      	movs	r2, #0
 8008dae:	6062      	str	r2, [r4, #4]
 8008db0:	04d9      	lsls	r1, r3, #19
 8008db2:	6922      	ldr	r2, [r4, #16]
 8008db4:	6022      	str	r2, [r4, #0]
 8008db6:	d504      	bpl.n	8008dc2 <__sflush_r+0x7e>
 8008db8:	1c42      	adds	r2, r0, #1
 8008dba:	d101      	bne.n	8008dc0 <__sflush_r+0x7c>
 8008dbc:	682b      	ldr	r3, [r5, #0]
 8008dbe:	b903      	cbnz	r3, 8008dc2 <__sflush_r+0x7e>
 8008dc0:	6560      	str	r0, [r4, #84]	; 0x54
 8008dc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dc4:	602f      	str	r7, [r5, #0]
 8008dc6:	2900      	cmp	r1, #0
 8008dc8:	d0c9      	beq.n	8008d5e <__sflush_r+0x1a>
 8008dca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008dce:	4299      	cmp	r1, r3
 8008dd0:	d002      	beq.n	8008dd8 <__sflush_r+0x94>
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	f7ff fa92 	bl	80082fc <_free_r>
 8008dd8:	2000      	movs	r0, #0
 8008dda:	6360      	str	r0, [r4, #52]	; 0x34
 8008ddc:	e7c0      	b.n	8008d60 <__sflush_r+0x1c>
 8008dde:	2301      	movs	r3, #1
 8008de0:	4628      	mov	r0, r5
 8008de2:	47b0      	blx	r6
 8008de4:	1c41      	adds	r1, r0, #1
 8008de6:	d1c8      	bne.n	8008d7a <__sflush_r+0x36>
 8008de8:	682b      	ldr	r3, [r5, #0]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d0c5      	beq.n	8008d7a <__sflush_r+0x36>
 8008dee:	2b1d      	cmp	r3, #29
 8008df0:	d001      	beq.n	8008df6 <__sflush_r+0xb2>
 8008df2:	2b16      	cmp	r3, #22
 8008df4:	d101      	bne.n	8008dfa <__sflush_r+0xb6>
 8008df6:	602f      	str	r7, [r5, #0]
 8008df8:	e7b1      	b.n	8008d5e <__sflush_r+0x1a>
 8008dfa:	89a3      	ldrh	r3, [r4, #12]
 8008dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e00:	81a3      	strh	r3, [r4, #12]
 8008e02:	e7ad      	b.n	8008d60 <__sflush_r+0x1c>
 8008e04:	690f      	ldr	r7, [r1, #16]
 8008e06:	2f00      	cmp	r7, #0
 8008e08:	d0a9      	beq.n	8008d5e <__sflush_r+0x1a>
 8008e0a:	0793      	lsls	r3, r2, #30
 8008e0c:	680e      	ldr	r6, [r1, #0]
 8008e0e:	bf08      	it	eq
 8008e10:	694b      	ldreq	r3, [r1, #20]
 8008e12:	600f      	str	r7, [r1, #0]
 8008e14:	bf18      	it	ne
 8008e16:	2300      	movne	r3, #0
 8008e18:	eba6 0807 	sub.w	r8, r6, r7
 8008e1c:	608b      	str	r3, [r1, #8]
 8008e1e:	f1b8 0f00 	cmp.w	r8, #0
 8008e22:	dd9c      	ble.n	8008d5e <__sflush_r+0x1a>
 8008e24:	6a21      	ldr	r1, [r4, #32]
 8008e26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e28:	4643      	mov	r3, r8
 8008e2a:	463a      	mov	r2, r7
 8008e2c:	4628      	mov	r0, r5
 8008e2e:	47b0      	blx	r6
 8008e30:	2800      	cmp	r0, #0
 8008e32:	dc06      	bgt.n	8008e42 <__sflush_r+0xfe>
 8008e34:	89a3      	ldrh	r3, [r4, #12]
 8008e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e3a:	81a3      	strh	r3, [r4, #12]
 8008e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e40:	e78e      	b.n	8008d60 <__sflush_r+0x1c>
 8008e42:	4407      	add	r7, r0
 8008e44:	eba8 0800 	sub.w	r8, r8, r0
 8008e48:	e7e9      	b.n	8008e1e <__sflush_r+0xda>
 8008e4a:	bf00      	nop
 8008e4c:	dfbffffe 	.word	0xdfbffffe

08008e50 <_fflush_r>:
 8008e50:	b538      	push	{r3, r4, r5, lr}
 8008e52:	690b      	ldr	r3, [r1, #16]
 8008e54:	4605      	mov	r5, r0
 8008e56:	460c      	mov	r4, r1
 8008e58:	b913      	cbnz	r3, 8008e60 <_fflush_r+0x10>
 8008e5a:	2500      	movs	r5, #0
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	bd38      	pop	{r3, r4, r5, pc}
 8008e60:	b118      	cbz	r0, 8008e6a <_fflush_r+0x1a>
 8008e62:	6a03      	ldr	r3, [r0, #32]
 8008e64:	b90b      	cbnz	r3, 8008e6a <_fflush_r+0x1a>
 8008e66:	f7ff f8bd 	bl	8007fe4 <__sinit>
 8008e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d0f3      	beq.n	8008e5a <_fflush_r+0xa>
 8008e72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e74:	07d0      	lsls	r0, r2, #31
 8008e76:	d404      	bmi.n	8008e82 <_fflush_r+0x32>
 8008e78:	0599      	lsls	r1, r3, #22
 8008e7a:	d402      	bmi.n	8008e82 <_fflush_r+0x32>
 8008e7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e7e:	f7ff fa2c 	bl	80082da <__retarget_lock_acquire_recursive>
 8008e82:	4628      	mov	r0, r5
 8008e84:	4621      	mov	r1, r4
 8008e86:	f7ff ff5d 	bl	8008d44 <__sflush_r>
 8008e8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e8c:	07da      	lsls	r2, r3, #31
 8008e8e:	4605      	mov	r5, r0
 8008e90:	d4e4      	bmi.n	8008e5c <_fflush_r+0xc>
 8008e92:	89a3      	ldrh	r3, [r4, #12]
 8008e94:	059b      	lsls	r3, r3, #22
 8008e96:	d4e1      	bmi.n	8008e5c <_fflush_r+0xc>
 8008e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e9a:	f7ff fa1f 	bl	80082dc <__retarget_lock_release_recursive>
 8008e9e:	e7dd      	b.n	8008e5c <_fflush_r+0xc>

08008ea0 <__swbuf_r>:
 8008ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ea2:	460e      	mov	r6, r1
 8008ea4:	4614      	mov	r4, r2
 8008ea6:	4605      	mov	r5, r0
 8008ea8:	b118      	cbz	r0, 8008eb2 <__swbuf_r+0x12>
 8008eaa:	6a03      	ldr	r3, [r0, #32]
 8008eac:	b90b      	cbnz	r3, 8008eb2 <__swbuf_r+0x12>
 8008eae:	f7ff f899 	bl	8007fe4 <__sinit>
 8008eb2:	69a3      	ldr	r3, [r4, #24]
 8008eb4:	60a3      	str	r3, [r4, #8]
 8008eb6:	89a3      	ldrh	r3, [r4, #12]
 8008eb8:	071a      	lsls	r2, r3, #28
 8008eba:	d525      	bpl.n	8008f08 <__swbuf_r+0x68>
 8008ebc:	6923      	ldr	r3, [r4, #16]
 8008ebe:	b31b      	cbz	r3, 8008f08 <__swbuf_r+0x68>
 8008ec0:	6823      	ldr	r3, [r4, #0]
 8008ec2:	6922      	ldr	r2, [r4, #16]
 8008ec4:	1a98      	subs	r0, r3, r2
 8008ec6:	6963      	ldr	r3, [r4, #20]
 8008ec8:	b2f6      	uxtb	r6, r6
 8008eca:	4283      	cmp	r3, r0
 8008ecc:	4637      	mov	r7, r6
 8008ece:	dc04      	bgt.n	8008eda <__swbuf_r+0x3a>
 8008ed0:	4621      	mov	r1, r4
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	f7ff ffbc 	bl	8008e50 <_fflush_r>
 8008ed8:	b9e0      	cbnz	r0, 8008f14 <__swbuf_r+0x74>
 8008eda:	68a3      	ldr	r3, [r4, #8]
 8008edc:	3b01      	subs	r3, #1
 8008ede:	60a3      	str	r3, [r4, #8]
 8008ee0:	6823      	ldr	r3, [r4, #0]
 8008ee2:	1c5a      	adds	r2, r3, #1
 8008ee4:	6022      	str	r2, [r4, #0]
 8008ee6:	701e      	strb	r6, [r3, #0]
 8008ee8:	6962      	ldr	r2, [r4, #20]
 8008eea:	1c43      	adds	r3, r0, #1
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d004      	beq.n	8008efa <__swbuf_r+0x5a>
 8008ef0:	89a3      	ldrh	r3, [r4, #12]
 8008ef2:	07db      	lsls	r3, r3, #31
 8008ef4:	d506      	bpl.n	8008f04 <__swbuf_r+0x64>
 8008ef6:	2e0a      	cmp	r6, #10
 8008ef8:	d104      	bne.n	8008f04 <__swbuf_r+0x64>
 8008efa:	4621      	mov	r1, r4
 8008efc:	4628      	mov	r0, r5
 8008efe:	f7ff ffa7 	bl	8008e50 <_fflush_r>
 8008f02:	b938      	cbnz	r0, 8008f14 <__swbuf_r+0x74>
 8008f04:	4638      	mov	r0, r7
 8008f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f08:	4621      	mov	r1, r4
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	f000 f806 	bl	8008f1c <__swsetup_r>
 8008f10:	2800      	cmp	r0, #0
 8008f12:	d0d5      	beq.n	8008ec0 <__swbuf_r+0x20>
 8008f14:	f04f 37ff 	mov.w	r7, #4294967295
 8008f18:	e7f4      	b.n	8008f04 <__swbuf_r+0x64>
	...

08008f1c <__swsetup_r>:
 8008f1c:	b538      	push	{r3, r4, r5, lr}
 8008f1e:	4b2a      	ldr	r3, [pc, #168]	; (8008fc8 <__swsetup_r+0xac>)
 8008f20:	4605      	mov	r5, r0
 8008f22:	6818      	ldr	r0, [r3, #0]
 8008f24:	460c      	mov	r4, r1
 8008f26:	b118      	cbz	r0, 8008f30 <__swsetup_r+0x14>
 8008f28:	6a03      	ldr	r3, [r0, #32]
 8008f2a:	b90b      	cbnz	r3, 8008f30 <__swsetup_r+0x14>
 8008f2c:	f7ff f85a 	bl	8007fe4 <__sinit>
 8008f30:	89a3      	ldrh	r3, [r4, #12]
 8008f32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f36:	0718      	lsls	r0, r3, #28
 8008f38:	d422      	bmi.n	8008f80 <__swsetup_r+0x64>
 8008f3a:	06d9      	lsls	r1, r3, #27
 8008f3c:	d407      	bmi.n	8008f4e <__swsetup_r+0x32>
 8008f3e:	2309      	movs	r3, #9
 8008f40:	602b      	str	r3, [r5, #0]
 8008f42:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f46:	81a3      	strh	r3, [r4, #12]
 8008f48:	f04f 30ff 	mov.w	r0, #4294967295
 8008f4c:	e034      	b.n	8008fb8 <__swsetup_r+0x9c>
 8008f4e:	0758      	lsls	r0, r3, #29
 8008f50:	d512      	bpl.n	8008f78 <__swsetup_r+0x5c>
 8008f52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f54:	b141      	cbz	r1, 8008f68 <__swsetup_r+0x4c>
 8008f56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f5a:	4299      	cmp	r1, r3
 8008f5c:	d002      	beq.n	8008f64 <__swsetup_r+0x48>
 8008f5e:	4628      	mov	r0, r5
 8008f60:	f7ff f9cc 	bl	80082fc <_free_r>
 8008f64:	2300      	movs	r3, #0
 8008f66:	6363      	str	r3, [r4, #52]	; 0x34
 8008f68:	89a3      	ldrh	r3, [r4, #12]
 8008f6a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f6e:	81a3      	strh	r3, [r4, #12]
 8008f70:	2300      	movs	r3, #0
 8008f72:	6063      	str	r3, [r4, #4]
 8008f74:	6923      	ldr	r3, [r4, #16]
 8008f76:	6023      	str	r3, [r4, #0]
 8008f78:	89a3      	ldrh	r3, [r4, #12]
 8008f7a:	f043 0308 	orr.w	r3, r3, #8
 8008f7e:	81a3      	strh	r3, [r4, #12]
 8008f80:	6923      	ldr	r3, [r4, #16]
 8008f82:	b94b      	cbnz	r3, 8008f98 <__swsetup_r+0x7c>
 8008f84:	89a3      	ldrh	r3, [r4, #12]
 8008f86:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f8e:	d003      	beq.n	8008f98 <__swsetup_r+0x7c>
 8008f90:	4621      	mov	r1, r4
 8008f92:	4628      	mov	r0, r5
 8008f94:	f000 f899 	bl	80090ca <__smakebuf_r>
 8008f98:	89a0      	ldrh	r0, [r4, #12]
 8008f9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f9e:	f010 0301 	ands.w	r3, r0, #1
 8008fa2:	d00a      	beq.n	8008fba <__swsetup_r+0x9e>
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	60a3      	str	r3, [r4, #8]
 8008fa8:	6963      	ldr	r3, [r4, #20]
 8008faa:	425b      	negs	r3, r3
 8008fac:	61a3      	str	r3, [r4, #24]
 8008fae:	6923      	ldr	r3, [r4, #16]
 8008fb0:	b943      	cbnz	r3, 8008fc4 <__swsetup_r+0xa8>
 8008fb2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008fb6:	d1c4      	bne.n	8008f42 <__swsetup_r+0x26>
 8008fb8:	bd38      	pop	{r3, r4, r5, pc}
 8008fba:	0781      	lsls	r1, r0, #30
 8008fbc:	bf58      	it	pl
 8008fbe:	6963      	ldrpl	r3, [r4, #20]
 8008fc0:	60a3      	str	r3, [r4, #8]
 8008fc2:	e7f4      	b.n	8008fae <__swsetup_r+0x92>
 8008fc4:	2000      	movs	r0, #0
 8008fc6:	e7f7      	b.n	8008fb8 <__swsetup_r+0x9c>
 8008fc8:	20000068 	.word	0x20000068

08008fcc <memmove>:
 8008fcc:	4288      	cmp	r0, r1
 8008fce:	b510      	push	{r4, lr}
 8008fd0:	eb01 0402 	add.w	r4, r1, r2
 8008fd4:	d902      	bls.n	8008fdc <memmove+0x10>
 8008fd6:	4284      	cmp	r4, r0
 8008fd8:	4623      	mov	r3, r4
 8008fda:	d807      	bhi.n	8008fec <memmove+0x20>
 8008fdc:	1e43      	subs	r3, r0, #1
 8008fde:	42a1      	cmp	r1, r4
 8008fe0:	d008      	beq.n	8008ff4 <memmove+0x28>
 8008fe2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fe6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008fea:	e7f8      	b.n	8008fde <memmove+0x12>
 8008fec:	4402      	add	r2, r0
 8008fee:	4601      	mov	r1, r0
 8008ff0:	428a      	cmp	r2, r1
 8008ff2:	d100      	bne.n	8008ff6 <memmove+0x2a>
 8008ff4:	bd10      	pop	{r4, pc}
 8008ff6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ffa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ffe:	e7f7      	b.n	8008ff0 <memmove+0x24>

08009000 <_sbrk_r>:
 8009000:	b538      	push	{r3, r4, r5, lr}
 8009002:	4d06      	ldr	r5, [pc, #24]	; (800901c <_sbrk_r+0x1c>)
 8009004:	2300      	movs	r3, #0
 8009006:	4604      	mov	r4, r0
 8009008:	4608      	mov	r0, r1
 800900a:	602b      	str	r3, [r5, #0]
 800900c:	f7f8 fe08 	bl	8001c20 <_sbrk>
 8009010:	1c43      	adds	r3, r0, #1
 8009012:	d102      	bne.n	800901a <_sbrk_r+0x1a>
 8009014:	682b      	ldr	r3, [r5, #0]
 8009016:	b103      	cbz	r3, 800901a <_sbrk_r+0x1a>
 8009018:	6023      	str	r3, [r4, #0]
 800901a:	bd38      	pop	{r3, r4, r5, pc}
 800901c:	200045c8 	.word	0x200045c8

08009020 <_realloc_r>:
 8009020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009024:	4680      	mov	r8, r0
 8009026:	4614      	mov	r4, r2
 8009028:	460e      	mov	r6, r1
 800902a:	b921      	cbnz	r1, 8009036 <_realloc_r+0x16>
 800902c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009030:	4611      	mov	r1, r2
 8009032:	f7ff b9cf 	b.w	80083d4 <_malloc_r>
 8009036:	b92a      	cbnz	r2, 8009044 <_realloc_r+0x24>
 8009038:	f7ff f960 	bl	80082fc <_free_r>
 800903c:	4625      	mov	r5, r4
 800903e:	4628      	mov	r0, r5
 8009040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009044:	f000 f8a0 	bl	8009188 <_malloc_usable_size_r>
 8009048:	4284      	cmp	r4, r0
 800904a:	4607      	mov	r7, r0
 800904c:	d802      	bhi.n	8009054 <_realloc_r+0x34>
 800904e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009052:	d812      	bhi.n	800907a <_realloc_r+0x5a>
 8009054:	4621      	mov	r1, r4
 8009056:	4640      	mov	r0, r8
 8009058:	f7ff f9bc 	bl	80083d4 <_malloc_r>
 800905c:	4605      	mov	r5, r0
 800905e:	2800      	cmp	r0, #0
 8009060:	d0ed      	beq.n	800903e <_realloc_r+0x1e>
 8009062:	42bc      	cmp	r4, r7
 8009064:	4622      	mov	r2, r4
 8009066:	4631      	mov	r1, r6
 8009068:	bf28      	it	cs
 800906a:	463a      	movcs	r2, r7
 800906c:	f7ff f937 	bl	80082de <memcpy>
 8009070:	4631      	mov	r1, r6
 8009072:	4640      	mov	r0, r8
 8009074:	f7ff f942 	bl	80082fc <_free_r>
 8009078:	e7e1      	b.n	800903e <_realloc_r+0x1e>
 800907a:	4635      	mov	r5, r6
 800907c:	e7df      	b.n	800903e <_realloc_r+0x1e>

0800907e <__swhatbuf_r>:
 800907e:	b570      	push	{r4, r5, r6, lr}
 8009080:	460c      	mov	r4, r1
 8009082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009086:	2900      	cmp	r1, #0
 8009088:	b096      	sub	sp, #88	; 0x58
 800908a:	4615      	mov	r5, r2
 800908c:	461e      	mov	r6, r3
 800908e:	da0d      	bge.n	80090ac <__swhatbuf_r+0x2e>
 8009090:	89a3      	ldrh	r3, [r4, #12]
 8009092:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009096:	f04f 0100 	mov.w	r1, #0
 800909a:	bf0c      	ite	eq
 800909c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80090a0:	2340      	movne	r3, #64	; 0x40
 80090a2:	2000      	movs	r0, #0
 80090a4:	6031      	str	r1, [r6, #0]
 80090a6:	602b      	str	r3, [r5, #0]
 80090a8:	b016      	add	sp, #88	; 0x58
 80090aa:	bd70      	pop	{r4, r5, r6, pc}
 80090ac:	466a      	mov	r2, sp
 80090ae:	f000 f849 	bl	8009144 <_fstat_r>
 80090b2:	2800      	cmp	r0, #0
 80090b4:	dbec      	blt.n	8009090 <__swhatbuf_r+0x12>
 80090b6:	9901      	ldr	r1, [sp, #4]
 80090b8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80090bc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80090c0:	4259      	negs	r1, r3
 80090c2:	4159      	adcs	r1, r3
 80090c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090c8:	e7eb      	b.n	80090a2 <__swhatbuf_r+0x24>

080090ca <__smakebuf_r>:
 80090ca:	898b      	ldrh	r3, [r1, #12]
 80090cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80090ce:	079d      	lsls	r5, r3, #30
 80090d0:	4606      	mov	r6, r0
 80090d2:	460c      	mov	r4, r1
 80090d4:	d507      	bpl.n	80090e6 <__smakebuf_r+0x1c>
 80090d6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80090da:	6023      	str	r3, [r4, #0]
 80090dc:	6123      	str	r3, [r4, #16]
 80090de:	2301      	movs	r3, #1
 80090e0:	6163      	str	r3, [r4, #20]
 80090e2:	b002      	add	sp, #8
 80090e4:	bd70      	pop	{r4, r5, r6, pc}
 80090e6:	ab01      	add	r3, sp, #4
 80090e8:	466a      	mov	r2, sp
 80090ea:	f7ff ffc8 	bl	800907e <__swhatbuf_r>
 80090ee:	9900      	ldr	r1, [sp, #0]
 80090f0:	4605      	mov	r5, r0
 80090f2:	4630      	mov	r0, r6
 80090f4:	f7ff f96e 	bl	80083d4 <_malloc_r>
 80090f8:	b948      	cbnz	r0, 800910e <__smakebuf_r+0x44>
 80090fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090fe:	059a      	lsls	r2, r3, #22
 8009100:	d4ef      	bmi.n	80090e2 <__smakebuf_r+0x18>
 8009102:	f023 0303 	bic.w	r3, r3, #3
 8009106:	f043 0302 	orr.w	r3, r3, #2
 800910a:	81a3      	strh	r3, [r4, #12]
 800910c:	e7e3      	b.n	80090d6 <__smakebuf_r+0xc>
 800910e:	89a3      	ldrh	r3, [r4, #12]
 8009110:	6020      	str	r0, [r4, #0]
 8009112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009116:	81a3      	strh	r3, [r4, #12]
 8009118:	9b00      	ldr	r3, [sp, #0]
 800911a:	6163      	str	r3, [r4, #20]
 800911c:	9b01      	ldr	r3, [sp, #4]
 800911e:	6120      	str	r0, [r4, #16]
 8009120:	b15b      	cbz	r3, 800913a <__smakebuf_r+0x70>
 8009122:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009126:	4630      	mov	r0, r6
 8009128:	f000 f81e 	bl	8009168 <_isatty_r>
 800912c:	b128      	cbz	r0, 800913a <__smakebuf_r+0x70>
 800912e:	89a3      	ldrh	r3, [r4, #12]
 8009130:	f023 0303 	bic.w	r3, r3, #3
 8009134:	f043 0301 	orr.w	r3, r3, #1
 8009138:	81a3      	strh	r3, [r4, #12]
 800913a:	89a3      	ldrh	r3, [r4, #12]
 800913c:	431d      	orrs	r5, r3
 800913e:	81a5      	strh	r5, [r4, #12]
 8009140:	e7cf      	b.n	80090e2 <__smakebuf_r+0x18>
	...

08009144 <_fstat_r>:
 8009144:	b538      	push	{r3, r4, r5, lr}
 8009146:	4d07      	ldr	r5, [pc, #28]	; (8009164 <_fstat_r+0x20>)
 8009148:	2300      	movs	r3, #0
 800914a:	4604      	mov	r4, r0
 800914c:	4608      	mov	r0, r1
 800914e:	4611      	mov	r1, r2
 8009150:	602b      	str	r3, [r5, #0]
 8009152:	f7f8 fd3c 	bl	8001bce <_fstat>
 8009156:	1c43      	adds	r3, r0, #1
 8009158:	d102      	bne.n	8009160 <_fstat_r+0x1c>
 800915a:	682b      	ldr	r3, [r5, #0]
 800915c:	b103      	cbz	r3, 8009160 <_fstat_r+0x1c>
 800915e:	6023      	str	r3, [r4, #0]
 8009160:	bd38      	pop	{r3, r4, r5, pc}
 8009162:	bf00      	nop
 8009164:	200045c8 	.word	0x200045c8

08009168 <_isatty_r>:
 8009168:	b538      	push	{r3, r4, r5, lr}
 800916a:	4d06      	ldr	r5, [pc, #24]	; (8009184 <_isatty_r+0x1c>)
 800916c:	2300      	movs	r3, #0
 800916e:	4604      	mov	r4, r0
 8009170:	4608      	mov	r0, r1
 8009172:	602b      	str	r3, [r5, #0]
 8009174:	f7f8 fd3b 	bl	8001bee <_isatty>
 8009178:	1c43      	adds	r3, r0, #1
 800917a:	d102      	bne.n	8009182 <_isatty_r+0x1a>
 800917c:	682b      	ldr	r3, [r5, #0]
 800917e:	b103      	cbz	r3, 8009182 <_isatty_r+0x1a>
 8009180:	6023      	str	r3, [r4, #0]
 8009182:	bd38      	pop	{r3, r4, r5, pc}
 8009184:	200045c8 	.word	0x200045c8

08009188 <_malloc_usable_size_r>:
 8009188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800918c:	1f18      	subs	r0, r3, #4
 800918e:	2b00      	cmp	r3, #0
 8009190:	bfbc      	itt	lt
 8009192:	580b      	ldrlt	r3, [r1, r0]
 8009194:	18c0      	addlt	r0, r0, r3
 8009196:	4770      	bx	lr

08009198 <_init>:
 8009198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800919a:	bf00      	nop
 800919c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800919e:	bc08      	pop	{r3}
 80091a0:	469e      	mov	lr, r3
 80091a2:	4770      	bx	lr

080091a4 <_fini>:
 80091a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a6:	bf00      	nop
 80091a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091aa:	bc08      	pop	{r3}
 80091ac:	469e      	mov	lr, r3
 80091ae:	4770      	bx	lr
